using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using DataLayer;
using CommonLayer;
using System.Globalization;
using System.Net.NetworkInformation;
using System.Data.SqlClient;
using System.Net;
using System.Runtime.CompilerServices;

namespace BusinessLayer
{
    public class BSClass
    {

        #region User Defined Objects
        DBAccess dbObj = null;
        #endregion

        #region Constructors
        public BSClass()
        {
            dbObj = new DBAccess();
        }
        #endregion

        #region select category master
        public DataSet selectcategorymaster()
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategory  where isdelete=0 order by category asc ";
            string sQry = "select * from tblcategory  where isActive='Yes' order by category asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet selectcategorymasterForGRN()
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategory  where isdelete=0 order by category asc ";
            string sQry = "select * from tblcategory  where isActive='Yes' and ManualGrn='1' order by category asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectcategorymasterforproductionentry()
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategory  where isdelete=0 order by category asc ";
            string sQry = "select * from tblcategory  where isActive='Yes' and poduction='1' order by category asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectcategorymasterforitemrequest()
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategory  where isdelete=0 order by category asc ";
            string sQry = "select * from tblcategory  where isActive='Yes' and Request='1' order by category asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectcategorymasterforitemrequest_New(string Ptype)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;
            if (Ptype == "All")
            {
                //    sQry = "select * from tblcategory  where isActive='Yes' and Request='1' order by category asc ";
                //  sQry = " select * from tblcategory  a inner join tbltransRequestStockSettings t on t.categoryid=a.Categoryid inner join tblRequestStockSettingsMaster m on m.requeststockid=t.requeststocksettingsid and a.isActive='Yes' and a.Request='1' and m.fromtime < getdate() and m.totime>getdate()  order by category asc ";
                //sQry = " select * from tblcategory  a left join tbltransRequestStockSettings t on t.categoryid=a.Categoryid inner join tblRequestStockSettingsMaster m on m.requeststockid=t.requeststocksettingsid and a.isActive='Yes' and a.Request='1' and (convert(varchar(8), m.FromTime, 108)) <  (convert(varchar(8), getdate(), 108)) and (convert(varchar(8), m.Totime, 108))> (convert(varchar(8), getdate(), 108))  order by category asc ";

                sQry = " select * from tblcategory where isActive='Yes'";
            }
            else
            {
                //   sQry = "select * from tblcategory  where isActive='Yes' and Request='1' and productiontype='" + Ptype + "' order by category asc ";
                // sQry = " select * from tblcategory  a inner join tbltransRequestStockSettings t on t.categoryid=a.Categoryid inner join tblRequestStockSettingsMaster m on m.requeststockid=t.requeststocksettingsid and a.isActive='Yes' and a.Request='1' and m.fromtime < getdate() and m.totime>getdate() and a.productiontype='" + Ptype + "' order by category asc ";
                sQry = " select * from tblcategory  a inner join tbltransRequestStockSettings t on t.categoryid=a.Categoryid inner join tblRequestStockSettingsMaster m on m.requeststockid=t.requeststocksettingsid and a.isActive='Yes' and a.Request='1' and  (convert(varchar(8), m.FromTime, 108)) <  (convert(varchar(8), getdate(), 108)) and (convert(varchar(8), m.Totime, 108))> (convert(varchar(8), getdate(), 108))  and a.productiontype='" + Ptype + "' order by category asc ";
            }
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectcategorymasterforitemrequest_Order(string Ptype)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;
            if (Ptype == "All")
            {
                sQry = "select * from tblcategory  where isActive='Yes' and Request='1' order by category asc ";
                // sQry = " select * from tblcategory  a inner join tbltransRequestStockSettings t on t.categoryid=a.Categoryid inner join tblRequestStockSettingsMaster m on m.requeststockid=t.requeststocksettingsid and a.isActive='Yes' and a.Request='1' and m.fromtime < getdate() and m.totime>getdate()  order by category asc ";
            }
            else
            {
                sQry = "select * from tblcategory  where isActive='Yes' and Request='1' and productiontype='" + Ptype + "' order by category asc ";
                // sQry = " select * from tblcategory  a inner join tbltransRequestStockSettings t on t.categoryid=a.Categoryid inner join tblRequestStockSettingsMaster m on m.requeststockid=t.requeststocksettingsid and a.isActive='Yes' and a.Request='1' and m.fromtime < getdate() and m.totime>getdate() and a.productiontype='" + Ptype + "' order by category asc ";
            }
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectcategorymasterforitemrequest_Semi()
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategory  where isdelete=0 order by category asc ";
            string sQry = "select * from tblSemicategory  where isActive='Yes'  order by SemiCategory asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectcategorymasterforitemrequestStore()
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategory  where isdelete=0 order by category asc ";
            string sQry = "select distinct ic.* from tblingridentscategory as ic inner join tblingridents b on ic.IngCatID=b.IngCatID  where ic.isActive='Yes' and b.isallow='Y'  order by ic.ingrecategory asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet selectgrnmp111(string catid, string frmdate, string todate)
        {
            DataSet ds = new DataSet();
            if (catid == "All")
            {
                string sQry = " select a.Date,c.Category,d.Definition,a.GRN_Qty,(a.GRN_Qty * d.Rate) as TotalAmount from tblGRNmp a,tblcategory c,tblCategoryUser d where  a.CategoryID=c.CategoryID and a.CategoryuserID=d.CategoryUserID and convert(date,a.Date) Between '" + frmdate + "' and '" + todate + "'";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else
            {
                string sQry = " select a.Date,c.Category,d.Definition,a.GRN_Qty,(a.GRN_Qty * d.Rate) as TotalAmount from tblGRNmp a,tblcategory c,tblCategoryUser d where  a.CategoryID=c.CategoryID and a.CategoryuserID=d.CategoryUserID and a.Categoryid=" + catid + " and convert(date,a.Date) Between '" + frmdate + "' and '" + todate + "'";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            return ds;
        }

        public DataSet selectret111(string sTableName, string catid, string frmdate, string todate)
        {
            DataSet ds = new DataSet();
            if (catid == "All")
            {

                string sQry = "select a.RetDate,c.Category,d.Definition,b.Quantity,sum(Amount)as TotalAmount from tblReturn_" + sTableName + " a,tbltransReturn_" + sTableName + " b, tblcategory c,tblCategoryUser d where a.RetNo=b.RetNo and b.CategoryID=c.CategoryID and b.SubCategoryID=d.CategoryUserID and convert(date,a.RetDate) Between '" + frmdate + "' and '" + todate + "' group by a.RetDate,c.Category,d.Definition,b.Quantity ";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else
            {
                string sQry = "select a.RetDate,c.Category,d.Definition,b.Quantity,sum(Amount)as TotalAmount from tblReturn_" + sTableName + " a,tbltransReturn_" + sTableName + " b, tblcategory c,tblCategoryUser d where a.RetNo=b.RetNo and b.CategoryID=c.CategoryID and b.SubCategoryID=d.CategoryUserID and b.Categoryid=" + catid + " and convert(date,a.RetDate) Between '" + frmdate + "' and '" + todate + "' group by a.RetDate,c.Category,d.Definition,b.Quantity ";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }

            return ds;
        }
        public DataSet Report_OrderBalanceAmount(string stable, DateTime sFmdate)
        {

            DataSet ds = new DataSet();
            string Qry = "select '" + stable + "' as bname, a.OrderNo,cu.CustomerName,a.Total,a.Advance,(a.Total-a.Advance) as Balance"
                       + " from  tblOrder_" + stable + " a "
                       + " inner join tblCustomer as cu  on a.CustomerID=cu.CustomerID "
                       + " where convert(date,a.DeliveryDate) ='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "'"
                       + " order by a.OrderNo";

            ds = dbObj.InlineExecuteDataSet(Qry);
            return ds;

        }

        public DataSet selectConversionCategory()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategory  where isdelete=0 order by category asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectcategorymaster(int iCat)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategory  where isdelete=0 and categoryid='" + iCat + "' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet SelectDefinition(int isucCat)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCategoryUser where CategoryUserID='" + isucCat + "' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet SelectDefinition_Dealet(int isucCat)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCategoryUser_Dealer where CategoryUserID='" + isucCat + "' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet selectcategorymaster_Dealer(string sStockTable)
        {
            DataSet ds = new DataSet();
            string sQry = "select b.category,b.categoryid from " + sStockTable + " a,tblcategory b where a.CategoryID=b.categoryid";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion



        #region select category ID
        public DataSet selectcategoryID(int iCategory)
        {
            DataSet ds = new DataSet();
            string sQry = "select category from tblcategory where categoryid=" + iCategory + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region select category master Description
        public DataSet selectcategorydecription(int iCategory, string sTableName)
        {
            DataSet ds = new DataSet();
            ////// string sQry = "select * from tblcategoryuser where categoryid=" + iCategory + "  and isdelete=0 order by Definition asc ";
            string sQry = "select * from tblcategoryuser c inner join tblCategoryuserBranch cb on cb.Itemid=c.CategoryUserID  where categoryid=" + iCategory + " and c.IsActive='Yes' and cb.IsActive='Yes' and cb.BranchCode='" + sTableName + "' and isdelete=0 order by Definition asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet selectallcategorydecription_new(string sTableName, string Ptyoe)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;
            ////// string sQry = "select * from tblcategoryuser where categoryid=" + iCategory + "  and isdelete=0 order by Definition asc ";
            if (Ptyoe == "All")
            {
                sQry = "select * from tblcategoryuser c inner join tblCategoryuserBranch cb on cb.Itemid=c.CategoryUserID  inner join tblcategory as d on d.categoryid=c.categoryid where  c.IsActive='Yes' and cb.IsActive='Yes' and cb.BranchCode='" + sTableName + "' and isdelete=0 order by Definition asc ";
            }
            else
            {
                sQry = "select * from tblcategoryuser c inner join tblCategoryuserBranch cb on cb.Itemid=c.CategoryUserID  inner join tblcategory as d on d.categoryid=c.categoryid where productiontype='" + Ptyoe + "' and  c.IsActive='Yes' and cb.IsActive='Yes' and cb.BranchCode='" + sTableName + "' and isdelete=0 order by Definition asc ";
            }
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectProduct(int pCode, string sTableName)
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategoryuser where categoryid=" + iCategory + "  and isdelete=0 ";
            string sQry = "select ca.* from tblcategoryuser c  inner join tblcategory ca on ca.categoryid=c.categoryid  where categoryuserid=" + pCode + " and c.IsActive='Yes'  and isdelete=0 order by Definition asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectcategorydecription_Dealer(int iCategory)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategoryuser_Dealer where categoryid=" + iCategory + "  and isdelete=0 order by Definition asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        //public DataSet ReturnGrid(int BranchID)
        //{
        //    DataSet ds = new DataSet();

        //    string sqry = "select a.Branch,a.DC_NO,a.Ret_Np,a.RequestNO, c.category,d.Definition,b.Qty,case b.Reason	when 1 then 'Damaged' when 2 then 'Date Bar' when 3 then 'Fungus' when 4 then 'Compliment'  end as Reason from tblpurchasereturn a ,tblTransPurchareReturn b,tblcategory c,tblCategoryUser d where a.Ret_Np=b.Ret_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchID=" + BranchID + "";
        //    ds = dbObj.InlineExecuteDataSet(sqry);

        //    return ds;
        //}
        public DataSet ReturnGrid(int BranchID)
        {
            DataSet ds = new DataSet();


            // string sqry = "select a.Branch,a.DC_NO,a.Ret_Np,a.RequestNO, c.category,d.Definition,b.Qty,case b.Reason when 1 then 'Damaged' when 2 then 'Date Bar' when 3 then 'Fungus' when 4 then 'Compliment'  end as Reason,a.Ret_Date from tblpurchasereturn a ,tblTransPurchareReturn b,tblcategory c,tblCategoryUser d where a.Ret_Np=b.Ret_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchID=" + BranchID + "";
            string sqry = "select a.Branch ,'Production' as DC_NO,a.Ret_Np,a.RequestNO, c.category,d.Definition,b.Qty,case b.Reason when 1 then 'Damaged' when 2 then 'Date Bar' when 3 then 'Fungus' when 4 then 'Compliment'  end as Reason,a.Ret_Date from tblpurchasereturn a ,tblTransPurchareReturn b,tblcategory c,tblCategoryUser d where a.Ret_Np=b.Ret_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchID=" + BranchID + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet SelectItems(int iCategory, int UserID, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "select *, a.Definition as Item from tblCategoryUser a,tblStock_" + stable + " b where a.CategoryUserID=b.SubCategoryID and  a.categoryid=" + iCategory + "  and isdelete=0  and b.Available_QTY>0  order by a.definition asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet SelectItems_Return(int iCategory, int UserID, string stable, string btype)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;

            if (btype == "0")
            {
                sQry = "select *, a.Definition as Item from tblCategoryUser a,tblStock_" + stable + " b where a.CategoryUserID=b.SubCategoryID and  a.categoryid=" + iCategory + "  and isdelete=0  and b.Available_QTY>0  order by a.definition asc";
            }
            else if (btype == "2")
            {
                sQry = "select a.PrintItem,b.id as stockid, a.Definition as Item from tblCategoryUser a,tblProductionQty_" + stable + " b where a.CategoryUserID=b.descriptionid and  a.categoryid=" + iCategory + "  and isdelete=0  and b.prod_qty>0  order by a.definition asc";
            }
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet SelectItemsQty(int iCategory, int UserID, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "select *, a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblCategoryUser a,tblStock_" + stable + " b where a.CategoryUserID=b.SubCategoryID and  b.SubCategoryID=" + iCategory + "  and isdelete=0  and b.Available_QTY>0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        //public DataSet SelectDistinctItems(int iCategory, int iUserID)
        //{
        //    DataSet ds = new DataSet();
        //    string sQry = "select *, a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblCategoryUser a,tblStock b where a.CategoryUserID=b.SubCategoryID and  a.categoryid=" + iCategory + "  and isdelete=0  and b.Available_QTY>0 and b.userId=" + iUserID + "";
        //    ds = dbObj.InlineExecuteDataSet(sQry);
        //    return ds;
        //}



        public DataSet SelectDistinctItems(int iCategory, int iUserID, string stable, string StockOption)
        {
            DataSet ds = new DataSet();

            if (StockOption == "2")
            {
                string sQry = "select *, a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblCategoryUser a,tblStock_" + stable + " b,tblCategoryuserBranch c  where c.Itemid=a.CategoryUserID and  a.CategoryUserID=b.SubCategoryID and  a.categoryid=" + iCategory + "  and isdelete=0 and a.IsActive='Yes' and c.IsActive='Yes' and c.BranchCode='" + stable + "'  order by a.Definition asc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }

            if (StockOption == "1")
            {
                string sQry = "select *, a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblCategoryUser a,tblStock_" + stable + " b,tblCategoryuserBranch c  where c.Itemid=a.CategoryUserID and  a.CategoryUserID=b.SubCategoryID and  a.categoryid=" + iCategory + "  and isdelete=0  and b.Available_QTY>0 and a.IsActive='Yes' and c.IsActive='Yes' and c.BranchCode='" + stable + "'  order by a.Definition asc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            //////string sQry = "select *, a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblCategoryUser a,tblStock_" + stable + " b where a.CategoryUserID=b.SubCategoryID and  a.categoryid=" + iCategory + "  and isdelete=0  and b.Available_QTY>0  order by a.Definition asc";

            return ds;
        }

        //public DataSet GetNewSelectDistinctItems(string cattype, int iUserID, string stable)
        //{

        //    DataSet ds = new DataSet();
        //    DataSet dmerge = new DataSet();
        //    DataSet dss = new DataSet();
        //    string sQry = string.Empty;
        //    if (cattype == "N")
        //    {
        //        sQry = "select Definition+'/'+cast(Available_QTY as nvarchar) as definition,cast(StockID as nvarchar)+','+ cattype as valuee from tblCategoryUser a,tblStock_" + stable + " b,tblCategoryuserBranch c  ,tblcategory d  where d.categoryid=a.categoryid and c.Itemid=a.CategoryUserID and  a.CategoryUserID=b.SubCategoryID   and isdelete=0  and b.Available_QTY>0 and a.IsActive='Yes' and c.IsActive='Yes' and c.BranchCode='" + stable + "'  order by a.Definition asc";
        //        dmerge = dbObj.InlineExecuteDataSet(sQry);
        //        ds.Merge(dmerge);
        //    }
        //    //else if (cattype == "C")
        //    //{
        //    //    sQry = " select c.comboname as Printitem,Comboid as stockid,CAST('0' AS MONEY)  as Available_QTY,c.categoryid,cast('2019-04-01' as date) as Expirydate  from tblcombo as c where  c.Isactive='Yes'";
        //    //    dmerge = dbObj.InlineExecuteDataSet(sQry);
        //    //    ds.Merge(dmerge);

        //    //    //sQry = "select c.comboid as stockid,*, a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblcombo as c inner join tbltranscombo as tc on tc.comboid=c.comboid " +
        //    //    //        " inner join tblcategoryuser as cu on cu.ItemID=tc.Categoryuserid where c.comboid='" + iCategory + "'";
        //    //}
        //    //ds = dbObj.InlineExecuteDataSet(sQry);
        //    return ds;
        //}

        public DataSet GetNewSelectDistinctItems(string cattype, int iUserID, string stable, string StockOption)
        {

            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();
            DataSet dss = new DataSet();
            string sQry = string.Empty;

            if (StockOption == "2")
            {
                if (cattype == "N")
                {
                    sQry = "select serial+' / '+Definition+' / '+cast('0' as nvarchar) as definition,cast(a.CategoryUserID as nvarchar)+','+ cattype as valuee " +
                        " from tblCategoryUser a,tblCategoryuserBranch c  ,tblcategory d  where d.categoryid=a.categoryid " +
                        " and c.Itemid=a.CategoryUserID    and isdelete=0  and  a.IsActive='Yes' and c.IsActive='Yes' " +
                        " and c.BranchCode='" + stable + "'  order by a.Definition asc";
                    dmerge = dbObj.InlineExecuteDataSet(sQry);
                    ds.Merge(dmerge);
                }
            }

            if (StockOption == "1")
            {

                if (cattype == "N")
                {
                    sQry = "select serial+' / '+Definition+' / '+cast(Available_QTY as nvarchar) as definition,cast(StockID as nvarchar)+','+ cattype as valuee " +
                        " from tblCategoryUser a,tblStock_" + stable + " b,tblCategoryuserBranch c  ,tblcategory d  where d.categoryid=a.categoryid " +
                        " and c.Itemid=a.CategoryUserID and  a.CategoryUserID=b.SubCategoryID   and isdelete=0  and b.Available_QTY>0 and a.IsActive='Yes' " +
                        " and c.IsActive='Yes' and c.BranchCode='" + stable + "'  order by a.Definition asc";
                    dmerge = dbObj.InlineExecuteDataSet(sQry);
                    ds.Merge(dmerge);
                }
            }

            return ds;
        }

        public DataSet GetNewSelectDistinctItems_online(string cattype, int iUserID)
        {

            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();
            DataSet dss = new DataSet();
            string sQry = string.Empty;
            if (cattype == "N")
            {
                sQry = "select Definition as definition,cast(Categoryuserid as nvarchar)+','+ cattype  as valuee from tblCategoryUser a, " +
                    " tblcategory d  where d.categoryid=a.categoryid  " +
                    "    and isdelete=0 and a.IsActive='Yes'  and displayonline='Y' " +
                    "  order by a.Definition asc";
                dmerge = dbObj.InlineExecuteDataSet(sQry);
                ds.Merge(dmerge);
            }
            //else if (cattype == "C")
            //{
            //    sQry = " select c.comboname as Printitem,Comboid as stockid,CAST('0' AS MONEY)  as Available_QTY,c.categoryid,cast('2019-04-01' as date) as Expirydate  from tblcombo as c where  c.Isactive='Yes'";
            //    dmerge = dbObj.InlineExecuteDataSet(sQry);
            //    ds.Merge(dmerge);

            //    //sQry = "select c.comboid as stockid,*, a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblcombo as c inner join tbltranscombo as tc on tc.comboid=c.comboid " +
            //    //        " inner join tblcategoryuser as cu on cu.ItemID=tc.Categoryuserid where c.comboid='" + iCategory + "'";
            //}
            //ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        //public DataSet SelectDistinctItems(int iCategory, int iUserID, string stable, string cattype)
        //{
        //    //DataSet ds = new DataSet();
        //    //string sQry = "select *, a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblCategoryUser a,tblStock_" + stable + " b,tblCategoryuserBranch c  where c.Itemid=a.CategoryUserID and  a.CategoryUserID=b.SubCategoryID and  a.categoryid=" + iCategory + "  and isdelete=0  and b.Available_QTY>0 and a.IsActive='Yes' and c.IsActive='Yes' and c.BranchCode='" + stable + "'  order by a.Definition asc";
        //    //ds = dbObj.InlineExecuteDataSet(sQry);
        //    //return ds;
        //    DataSet ds = new DataSet();
        //    DataSet dmerge = new DataSet();
        //    DataSet dss = new DataSet();
        //    string sQry = string.Empty;
        //    if (cattype == "N")
        //    {
        //        sQry = "select *, a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblCategoryUser a,tblStock_" + stable + " b,tblCategoryuserBranch c  where c.Itemid=a.CategoryUserID and  a.CategoryUserID=b.SubCategoryID and  a.categoryid=" + iCategory + "  and isdelete=0  and b.Available_QTY>0 and a.IsActive='Yes' and c.IsActive='Yes' and c.BranchCode='" + stable + "'  order by a.Definition asc";
        //        dmerge = dbObj.InlineExecuteDataSet(sQry);
        //        ds.Merge(dmerge);
        //    }
        //    else if (cattype == "C")
        //    {
        //        sQry = " select c.comboname as Printitem,Comboid as stockid,CAST('0' AS MONEY)  as Available_QTY,c.categoryid,cast('2019-04-01' as date) as Expirydate  from tblcombo as c where categoryid='" + iCategory + "' and c.Isactive='Yes'";
        //        dmerge = dbObj.InlineExecuteDataSet(sQry);
        //        ds.Merge(dmerge);

        //        //sQry = "select c.comboid as stockid,*, a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblcombo as c inner join tbltranscombo as tc on tc.comboid=c.comboid " +
        //        //        " inner join tblcategoryuser as cu on cu.ItemID=tc.Categoryuserid where c.comboid='" + iCategory + "'";
        //    }
        //    //ds = dbObj.InlineExecuteDataSet(sQry);
        //    return ds;
        //}

        public DataSet SelectDistinctItems(int iCategory, int iUserID, string stable, string cattype, string StockOption, string columnname)
        {
            //DataSet ds = new DataSet();
            //string sQry = "select *, a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblCategoryUser a,tblStock_" + stable + " b,tblCategoryuserBranch c  where c.Itemid=a.CategoryUserID and  a.CategoryUserID=b.SubCategoryID and  a.categoryid=" + iCategory + "  and isdelete=0  and b.Available_QTY>0 and a.IsActive='Yes' and c.IsActive='Yes' and c.BranchCode='" + stable + "'  order by a.Definition asc";
            //ds = dbObj.InlineExecuteDataSet(sQry);
            //return ds;
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();
            DataSet dss = new DataSet();
            string sQry = string.Empty;
            if (StockOption == "2")
            {
                if (cattype == "N")
                {
                    //select *,ISNULL(Available_QTY,0) as Available_QTY,ISNULL(b.Expirydate,GETDATE()) as Expirydate, a.Definition+'-'+convert(varchar,convert(datetime, ISNULL(b.Expirydate,GETDATE()),120),10) as Item from tblCategoryUser a left join  tblStock_kk b on a.CategoryUserID=b.SubCategoryID inner join tblCategoryuserBranch c  on c.Itemid=a.CategoryUserID  where   a.categoryid=3  and isdelete=0  and a.IsActive='Yes' and c.IsActive='Yes' order by a.Definition asc
                    //
                    sQry = "select  " + columnname + " as raate, *, a.Definition+'-'+cast('2019-04-01' as nvarchar) as Item,Categoryuserid as stockid,cast('2019-04-01' as date) as Expirydate,CAST('0' AS MONEY)  as Available_QTY from tblCategoryUser a, " +
                        " tblCategoryuserBranch c  where c.Itemid=a.CategoryUserID  and " +
                        " a.categoryid=" + iCategory + "  and isdelete=0   and a.IsActive='Yes' and c.IsActive='Yes' and c.BranchCode='" + stable + "'  order by a.Definition asc";
                    dmerge = dbObj.InlineExecuteDataSet(sQry);
                    ds.Merge(dmerge);
                }
                else if (cattype == "C")
                {
                    sQry = " select c.comboname as Printitem,Comboid as stockid,CAST('0' AS MONEY)  as Available_QTY,c.categoryid,cast('2019-04-01' as date) as Expirydate " +
                        " from tblcombo as c where categoryid='" + iCategory + "' and c.Isactive='Yes'";
                    dmerge = dbObj.InlineExecuteDataSet(sQry);
                    ds.Merge(dmerge);


                }

                else if (cattype == "H")
                {
                    sQry = "select c.Offername as Printitem,cast('2019-04-01' as date) as Expirydate,Offerid as stockid,CAST('0' AS MONEY)  as Available_QTY,c.categoryid,from_time,to_time ,cast(from_time as time) timee,cast(from_time as date) dattee " +
                       " from tbloffer as c where   (cast(from_time as date)  <  getdate() and cast(to_time as date) >  getdate() and cast(from_time as time) < cast(getdate() as time) and cast(to_time as time) > cast(getdate() as time)) and categoryid='" + iCategory + "' and c.Isactive='Yes'";
                    dmerge = dbObj.InlineExecuteDataSet(sQry);
                    ds.Merge(dmerge);
                }
            }

            else
            {
                if (cattype == "N")
                {
                    sQry = "select " + columnname + " as raate,*, a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblCategoryUser a,tblStock_" + stable + " b, " +
                        " tblCategoryuserBranch c  where c.Itemid=a.CategoryUserID and  a.CategoryUserID=b.SubCategoryID and  a.categoryid=" + iCategory + "  and isdelete=0 " +
                        " and b.Available_QTY>0 and a.IsActive='Yes' and c.IsActive='Yes' and c.BranchCode='" + stable + "'  order by a.Definition asc";
                    dmerge = dbObj.InlineExecuteDataSet(sQry);
                    ds.Merge(dmerge);
                }
                else if (cattype == "C")
                {
                    sQry = " select c.comboname as Printitem,Comboid as stockid,CAST('0' AS MONEY)  as Available_QTY,c.categoryid,cast('2019-04-01' as date) as Expirydate  " +
                        " from tblcombo as c where categoryid='" + iCategory + "' and c.Isactive='Yes'";
                    dmerge = dbObj.InlineExecuteDataSet(sQry);
                    ds.Merge(dmerge);

                    //sQry = "select c.comboid as stockid,*, a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblcombo as c inner join tbltranscombo as tc on tc.comboid=c.comboid " +
                    //        " inner join tblcategoryuser as cu on cu.ItemID=tc.Categoryuserid where c.comboid='" + iCategory + "'";
                }

                else if (cattype == "H")
                {
                    sQry = "select c.Offername as Printitem,cast('2019-04-01' as date) as Expirydate,Offerid as stockid,CAST('0' AS MONEY)  as Available_QTY,c.categoryid,from_time,to_time ,cast(from_time as time) timee,cast(from_time as date) dattee " +
                      " from tbloffer as c where   (cast(from_time as date)  <  getdate() and cast(to_time as date) >  getdate() and cast(from_time as time) < cast(getdate() as time) and cast(to_time as time) > cast(getdate() as time)) and categoryid='" + iCategory + "' and c.Isactive='Yes'";
                    dmerge = dbObj.InlineExecuteDataSet(sQry);
                    ds.Merge(dmerge);
                }
            }
            //ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetItemID()
        {

            DataSet dss = new DataSet();
            string max1 = "select  max(CategoryUserId) as CategoryUserId from tblCategoryUser";
            dss = dbObj.InlineExecuteDataSet(max1);

            return dss;
        }

        public DataSet selectCAT()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategory where IsActive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectCATneworder()
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategory where isdelete=0 and orderno>0";
            string sQry = "select * from tblcategory where IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet SalesCategory()
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategory where isd=0 ";
            string sQry = "select * from tblcategory where IsActive='Yes' order by category asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetCAT_OrderForm()
        {
            DataSet ds = new DataSet();
            string sQry = "select distinct category as Cat ,a.categoryid from tblcategory a ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet getCatID(int iDef)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategoryuser where categoryUserid=" + iDef + "  and isdelete=0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet selectcategorydecriptionforDealer(int iCategory, int iCustomerID)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategoryuser where categoryid=" + iCategory + "  and customerID='" + iCustomerID + "' and isdelete=0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet selectcategorydecriptionforDealer(int iCategory, int iCustomerID, int iSubCategory)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategoryuser where categoryid=" + iCategory + " and categoryuserid=" + iSubCategory + "  and customerID='" + iCustomerID + "' and isdelete=0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetTax(int iSubCategory)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategoryuser where CategoryUserId=" + iSubCategory + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet selectSerial(string iCategory)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCategoryUser where Definition like'%" + iCategory + "%'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion

        #region select category master Description
        public DataSet selectcategoryalldecription1(int usert, string stable)
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategoryuser";
            string sQry = " select * from tblcategoryuser a,tblStock_" + stable + " b where  a.CategoryUserID=b.SubCategoryID ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectcategoryalldecription()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategoryuser order by Definition asc";
            // string sQry = " select * from tblcategoryuser a,tblStock b where  a.CategoryUserID=b.SubCategoryID and b.userID=" + usert + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetReturnResaon(string Rtype)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblReason where Rtype='" + Rtype + "' order by Reason asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getsessionmode()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblsessionmode";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getsessionmode(string type)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblsessionmode where sessionMode='" + type + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion

        #region Login
        public DataSet Login(string username, string password)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tbllogin where username ='" + username + "'and password='" + password + "' ";//@username and Password=@password";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }



        public DataSet IPCHECK(string IP)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblIp where ip ='" + IP + "' ";//@username and Password=@password";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet iplist()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblIp  ";//@username and Password=@password";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public int Inserip(string ip)
        {
            int iSuccess = 0;
            string sQry = "insert into tblIp (ip)values('" + ip + "') ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }
        public int updateUser1(int userid)
        {
            int iSuccess = 0;
            string sQry = "update tbllogin set User1='Yes' where userid=" + userid + "";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        public int UpdateUserd(int userid)
        {
            DataSet ds = new DataSet();
            string Login = "select * from tbllogin where userid=" + userid + "";
            ds = dbObj.InlineExecuteDataSet(Login);

            int iSuccess = 0;
            string sQry = "";
            if (ds.Tables[0].Rows[0]["User1"].ToString().Trim() == "Yes")
                sQry = "update tbllogin set User1='Yes' where userid=" + userid + "";
            else if (ds.Tables[0].Rows[0]["User2"].ToString().Trim() == "Yes")
                sQry = "update tbllogin set User2='Yes' where userid=" + userid + "";
            else
                sQry = "update tbllogin set User1='Yes',User2='Yes' where userid=" + userid + "";

            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        public int updateUser2(int userid)
        {
            int iSuccess = 0;
            string sQry = "update tbllogin set User2='Yes' where userid=" + userid + "";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }
        #endregion

        #region Insert Category

        #endregion

        #region Insert CategoryLabel
        public int InsertCategoryLabel(string Category, int iCatID)
        {
            int iSuccess = 0;
            string sQry = "insert into tblCategory( Category,CategoryID) values ('" + Category + "'," + iCatID + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }
        #endregion

        #region UserId
        public DataSet UserID()
        {
            DataSet ds = new DataSet();
            string sQry = "select userid from tbllogin where username='kishore'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion

        #region select CustomerID
        public DataSet CustomerID(int iUserID, string sSalesTable)
        {
            DataSet ds = new DataSet();
            string sQry = "select distinct a.CustomerName + ' - ' + Area as CustomerName,a.CustomerID from tblCustomer a," + sSalesTable + " b where a.CustomerID=b.CustomerID and b.userid=" + iUserID + " and a.ContactTypeID<>1 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet AdminCustomerID()
        {
            DataSet ds = new DataSet();
            string sQry = "(select distinct a.CustomerName + ' - ' + Area as CustomerName,a.CustomerID from tblCustomer a,tblsales_CO1 b where a.CustomerID=b.CustomerID and a.ContactTypeID<>1)union(select distinct a.CustomerName + ' - ' + Area as CustomerName,a.CustomerID from tblCustomer a,tblsales_CO2 b where a.CustomerID=b.CustomerID and a.ContactTypeID<>1)union(select distinct a.CustomerName + ' - ' + Area as CustomerName,a.CustomerID from tblCustomer a,tblsales_CO3 b where a.CustomerID=b.CustomerID and a.ContactTypeID<>1)";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion



        #region select CategoryDDL
        public DataSet GetCategoryDetails()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCategoryUser";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetCategoryDetails_ById(int iItemID)
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblCategoryUser where Itemid='" + iItemID + "'";
            string sQry = "select * from tblCategoryUser where categoryuserid='" + iItemID + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion

        #region select CustomerDetails
        public DataSet GetCustomerDetails(int iCustID)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCustomer where customerid='" + iCustID + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region Customer Master Page Insert Valuse
        public int insertcustomerdetail(int UserID, string CustomerName, string MobileNo, string PhoneNo, string Area, string Address, string City, string Pincode, string Email, int iContactTypeid)
        {
            int iSuccess = 0;
            string sQry = "insert into tblCustomer(UserID, CustomerName, MobileNo, PhoneNo,  Area,Address, City, Pincode, Email,ContactTypeID)values ('" + UserID + "','" + CustomerName + "','" + MobileNo + "','" + PhoneNo + "','" + Area + "','" + Address + "','" + City + "','" + Pincode + "','" + Email + "'," + iContactTypeid + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }
        #endregion
        #region Day book
        public DataSet DaydookReport(string sTablename)
        {
            DataSet ds = new DataSet();
            string sQry = "(select a.BillDate as Date,'BillNo-'+convert(varchar,a.BillNo)+'-'+b.CustomerName as Description,'' as 'Debit', a.NetAmount as 'Credit' from tblsales_" + sTablename + " a ,tblCustomer b  where a.CustomerID=b.CustomerID and a.OrderNo=0   ) union all (select a.BillDate as Date,'Customer Advance-''BillNo-'+convert(varchar,a.BillNo)+'-'+b.CustomerName as Description,'' as 'Debit', a.Advance as 'Credit' from tblsales_" + sTablename + " a ,tblCustomer b  where a.CustomerID=b.CustomerID and a.OrderNo>0   ) union all(select a.Date,a.Description,a.Amount as Debit,'' as 'Credit' from tblPaymentEntry_" + sTablename + "  a,tblLedger b where a.LedgerID=b.LedgerID) ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet AdminDaydookReport()
        {
            DataSet ds = new DataSet();
            string sQry = "(select b.ReceiptDate as Date,'BillNo-'+convert(varchar,a.BillNo)+'-'+c.CustomerName as Description,'' as 'Debit', a.Amount as 'Credit' from tblTransReceipt_co1 a,tblReceipt_co1 b ,tblCustomer c where b.CustomerID=c.CustomerID and a.ReceiptID=b.ReceiptNo  )union(select a.Date,a.Description,a.Amount as Debit,'' as 'Credit' from tblPaymentEntry_co1 a,tblLedger b where a.LedgerID=b.LedgerID)union(select b.ReceiptDate as Date,'BillNo-'+convert(varchar,a.BillNo)+'-'+c.CustomerName as Description,'' as 'Debit', a.Amount as 'Credit' from tblTransReceipt_CO2 a,tblReceipt_CO2 b ,tblCustomer c where b.CustomerID=c.CustomerID and a.ReceiptID=b.ReceiptNo  )union(select a.Date,a.Description,a.Amount as Debit,'' as 'Credit' from tblPaymentEntry_CO2 a,tblLedger b where a.LedgerID=b.LedgerID)union(select b.ReceiptDate as Date,'BillNo-'+convert(varchar,a.BillNo)+'-'+c.CustomerName as Description,'' as 'Debit', a.Amount as 'Credit' from tblTransReceipt_CO3 a,tblReceipt_CO3 b ,tblCustomer c where b.CustomerID=c.CustomerID and a.ReceiptID=b.ReceiptNo  )union(select a.Date,a.Description,a.Amount as Debit,'' as 'Credit' from tblPaymentEntry_CO3 a,tblLedger b where a.LedgerID=b.LedgerID)union (select  a.ReceiptDate,'Customer - BillNo-'+convert(varchar,a.BillNo)+'-'+b.CustomerName as Description,'' as 'Debit',a.BillAmount as Credit  from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID )union(select a.EntryDate as Date,'BillNo-'+convert(varchar,a.EntryDate)+'-'+b.CustomerName as Description ,a.PayingAmount as 'Debit',''as Credit from tbl_purchasePayment a,tblCustomer b where a.VendorID=b.CustomerID)  order by b.ReceiptDate desc ";
            //string sQry = "(select b.ReceiptDate as Date,'BillNo-'+convert(varchar,a.BillNo)+'-'+c.CustomerName as Description,'' as 'Debit', a.Amount as 'Credit' from tblTransReceipt_co1 a,tblReceipt_co1 b ,tblCustomer c where b.CustomerID=c.CustomerID and a.ReceiptID=b.ReceiptNo  )union(select a.Date,a.Description,a.Amount as Debit,'' as 'Credit' from tblPaymentEntry_co1 a,tblLedger b where a.LedgerID=b.LedgerID)union(select b.ReceiptDate as Date,'BillNo-'+convert(varchar,a.BillNo)+'-'+c.CustomerName as Description,'' as 'Debit', a.Amount as 'Credit' from tblTransReceipt_CO2 a,tblReceipt_CO2 b ,tblCustomer c where b.CustomerID=c.CustomerID and a.ReceiptID=b.ReceiptNo  )union(select a.Date,a.Description,a.Amount as Debit,'' as 'Credit' from tblPaymentEntry_CO2 a,tblLedger b where a.LedgerID=b.LedgerID)union(select b.ReceiptDate as Date,'BillNo-'+convert(varchar,a.BillNo)+'-'+c.CustomerName as Description,'' as 'Debit', a.Amount as 'Credit' from tblTransReceipt_CO3 a,tblReceipt_CO3 b ,tblCustomer c where b.CustomerID=c.CustomerID and a.ReceiptID=b.ReceiptNo  )union(select a.Date,a.Description,a.Amount as Debit,'' as 'Credit' from tblPaymentEntry_CO3 a,tblLedger b where a.LedgerID=b.LedgerID)union (select  a.ReceiptDate,'Customer - BillNo-'+convert(varchar,a.BillNo)+'-'+b.CustomerName as Description,'' as 'Debit',a.BillAmount as Credit  from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID )union(select a.Bill_date as Date,'BillNo-'+convert(varchar,a.Bill_NO)+'-'+b.CustomerName as Description ,a.TotalAmount as 'Debit',''as Credit from tblPurchase a,tblCustomer b where a.VendorID=b.CustomerID)union(select a.ReceiptDate as Date,'BillNo-'+convert(varchar ,a.BillNo)+'-'+b.customername as Description ,'' as 'Debit' ,a.BillAmount as'Credit' from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID)";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet DaydookTotal(string sTablename)
        {
            DataSet ds = new DataSet();
            string sQry = "select sum(a.amount) as Credit,sum(b.Amount) as Debit   from tblTransReceipt_" + sTablename + " a,tblPaymentEntry_" + sTablename + " b ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet GetDescription(int iCustId)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.BillNo,b.CustomerName ,'BillNo-'+convert(varchar,a.BillNo)+'-'+b.CustomerName as Decsription from tblsales_CO1 a,tblCustomer b where a.CustomerID=b.CustomerID and a.CustomerID='" + iCustId + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet GetOutletDaybook(string CO)
        {
            DataSet ds = new DataSet();
            string sQry = "(select b.ReceiptDate as Date,'BillNo-'+convert(varchar,a.BillNo)+'-'+c.CustomerName as Description,'' as 'Debit', a.Amount as 'Credit' from tblTransReceipt_" + CO + " a,tblReceipt_" + CO + " b ,tblCustomer c where b.CustomerID=c.CustomerID and a.ReceiptID=b.ReceiptNo  )union all(select a.Date,a.Description,a.Amount as Debit,'' as 'Credit' from tblPaymentEntry_" + CO + " a,tblLedger b where a.LedgerID=b.LedgerID)union all(select  a.ReceiptDate,'Customer - BillNo-'+convert(varchar,a.BillNo)+'-'+b.CustomerName as Description,'' as 'Debit',a.BillAmount as Credit  from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID )union all(select a.EntryDate as Date,'BillNo-'+convert(varchar,a.EntryDate)+'-'+b.CustomerName as Description ,a.PayingAmount as 'Debit',''as Credit from tbl_purchasePayment a,tblCustomer b where a.VendorID=b.CustomerID)  order by b.ReceiptDate desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion
        #region BillNoMax

        public DataSet Billno(string CustomerID)
        {

            DataSet ds = new DataSet();
            string sQry = "select (MAX(CustomerID)+1)  from tblCustomer";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        #endregion
        #region ledgerCreate
        public int ledgercr(string name, int GroupId)
        {
            int i;
            string sample = "insert into tblLedger(LedgerName,GroupID) values('" + name + "'," + GroupId + ")";
            i = dbObj.InlineExecuteNonQuery(sample);
            return i;
        }
        public int ledgercr(string Ledname, string sLedID)
        {
            int i;
            string sample = "update tblLedger set LedgerName='" + Ledname + "' where LedgerID='" + sLedID + "' ";
            i = dbObj.InlineExecuteNonQuery(sample);
            return i;
        }

        public DataSet LedgerGrid()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblLedger";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region ledgerinsert

        public int ledgerinsert(string sTablename, string sDate, string sLedgerid, string sDescription, double dAmount, bool check, string orderno, string paymode, string CreditorId)
        {
            int i;
            int TransNo = 0;
            int save;

            string sqry = "insert into tblDayBook_" + sTablename + " (TransDate,DebtorId,CreditorId,Narration,RefNo,Type,Amount)values('" + Convert.ToDateTime(sDate).ToString("yyyy/MM/dd") + "'," + sLedgerid + ",'" + CreditorId + "','CashPayment','0','Payment','" + Convert.ToDouble(dAmount) + "')";
            save = dbObj.InlineExecuteNonQuery(sqry);

            DataSet ds2 = new DataSet();
            string qy2 = "select max(TransNo) as TransNo from tblDayBook_" + sTablename + "";
            ds2 = dbObj.InlineExecuteDataSet(qy2);
            TransNo = Convert.ToInt32(ds2.Tables[0].Rows[0]["TransNo"].ToString());

            string sQry = "";
            if (check == false)
            {
                sQry = "insert into tblPaymentEntry_" + sTablename + "(Date,LedgerID,Description,Amount,DaybookID) values ('" + Convert.ToDateTime(sDate).ToString("yyyy/MM/dd") + "','" + sLedgerid + "','" + sDescription + "','" + dAmount + "','" + TransNo + "')";
            }
            else
            {
                sQry = "insert into tblPaymentEntry_" + sTablename + "(Date,Description,Amount,orderno,insales,Paymode,DaybookID) values ('" + Convert.ToDateTime(sDate).ToString("yyyy/MM/dd") + "','" + sDescription + "','" + dAmount + "','" + orderno + "',1,'" + paymode + "','" + TransNo + "')";
            }
            i = dbObj.InlineExecuteNonQuery(sQry);
            return i;

        }
        #endregion

        #region retriveID

        public DataSet ledgeridretrive(string type)
        {
            DataSet ds = new DataSet();
            string autoemp1 = string.Empty;
            if (type == "0")
            {
                autoemp1 = "select * from tblLedger order by ledgername,groupid asc";
            }
            else
            {
                autoemp1 = "select * from tblLedger where groupid='" + type + "' order by ledgername asc";
            }
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }

        public DataSet SeaechLedgerExpense(int iLedger, string sTablename)
        {
            DataSet ds = new DataSet();
            string autoemp1 = "select '" + sTablename + "' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit' from tblPaymentEntry_" + sTablename + " a,tblLedger b where  a.LedgerID=b.LedgerID and   a.LedgerID='" + iLedger + "'";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }

        public DataSet SeaechLedgerExpenseDateWise(int iLedger, string sTablename, string sFrom, string sTo)
        {
            DataSet ds = new DataSet();
            string autoemp1 = "select '" + sTablename + "' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_" + sTablename + " a,tblLedger b where  a.LedgerID=b.LedgerID and   a.LedgerID='" + iLedger + "' and a.Date between '" + sFrom + "' and '" + sTo + "'";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }
        public DataSet AllExpenseDateWise(string sTablename, string sFrom, string sTo)
        {
            DataSet ds = new DataSet();
            string autoemp1 = "select '" + sTablename + "' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_" + sTablename + " a,tblLedger b where  a.LedgerID=b.LedgerID  and a.Date between '" + sFrom + "' and '" + sTo + "'";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }

        public DataSet AllLedger(int iLedger)
        {
            DataSet ds = new DataSet();
            string autoemp1 = "(select  'Company Outlet 1' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO1 a,tblLedger b where  a.LedgerID=b.LedgerID and   a.LedgerID='" + iLedger + "')union(select  'Company Outlet 2' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO2 a,tblLedger b where  a.LedgerID=b.LedgerID and   a.LedgerID='" + iLedger + "')union(select  'Company Outlet 3' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO3 a,tblLedger b where  a.LedgerID=b.LedgerID and   a.LedgerID='" + iLedger + "')";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }
        public DataSet getAllLedger()
        {
            DataSet ds = new DataSet();
            string autoemp1 = "(select  'Company Outlet 1' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO1 a,tblLedger b where  a.LedgerID=b.LedgerID )union(select  'Company Outlet 2' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO2 a,tblLedger b where  a.LedgerID=b.LedgerID   )union(select  'Company Outlet 3' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO3 a,tblLedger b where  a.LedgerID=b.LedgerID )";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }

        public DataSet AllLedgerDateWise(int iLedger, string sFrom, string sTO)
        {
            DataSet ds = new DataSet();
            string autoemp1 = "(select  'Company Outlet 1' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO1 a,tblLedger b where  a.LedgerID=b.LedgerID and   a.LedgerID='" + iLedger + "' and a.Date between '" + sFrom + "' and '" + sTO + "')union(select  'Company Outlet 2' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO2 a,tblLedger b where  a.LedgerID=b.LedgerID and   a.LedgerID='" + iLedger + "' and a.Date between '" + sFrom + "' and '" + sTO + "')union(select  'Company Outlet 3' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO3 a,tblLedger b where  a.LedgerID=b.LedgerID and   a.LedgerID='" + iLedger + "' and a.Date between '" + sFrom + "' and '" + sTO + "')";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }
        public DataSet AllLedgerDateWise_branch1(int iLedger, string sFrom, string sTO)
        {
            DataSet ds = new DataSet();
            string autoemp1 = "select  'Company Outlet 1' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO1 a,tblLedger b where  a.LedgerID=b.LedgerID and   a.LedgerID='" + iLedger + "' and a.Date between '" + sFrom + "' and '" + sTO + "'";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }
        public DataSet AllLedgerDateWise_branch2(int iLedger, string sFrom, string sTO)
        {
            DataSet ds = new DataSet();
            string autoemp1 = "select  'Company Outlet 2' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO2 a,tblLedger b where  a.LedgerID=b.LedgerID and   a.LedgerID='" + iLedger + "' and a.Date between '" + sFrom + "' and '" + sTO + "'";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }
        public DataSet AllLedgerDateWise_branch3(int iLedger, string sFrom, string sTO)
        {
            DataSet ds = new DataSet();
            string autoemp1 = "select  'Company Outlet 3' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO3 a,tblLedger b where  a.LedgerID=b.LedgerID and   a.LedgerID='" + iLedger + "' and a.Date between '" + sFrom + "' and '" + sTO + "')";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }
        public DataSet LedgerDateWise(string sFrom, string sTO)
        {
            DataSet ds = new DataSet();
            string autoemp1 = "(select  'Company Outlet 1' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO1 a,tblLedger b where  a.LedgerID=b.LedgerID and a.Date between '" + sFrom + "' and '" + sTO + "')union(select  'Company Outlet 2' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO2 a,tblLedger b where  a.LedgerID=b.LedgerID  and a.Date between '" + sFrom + "' and '" + sTO + "')union(select  'Company Outlet 3' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO3 a,tblLedger b where  a.LedgerID=b.LedgerID and a.Date between '" + sFrom + "' and '" + sTO + "')";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }
        public DataSet LedgerDateWise_branch1(string sFrom, string sTO)
        {
            DataSet ds = new DataSet();
            string autoemp1 = "select  'Company Outlet 1' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO1 a,tblLedger b where  a.LedgerID=b.LedgerID and a.Date between '" + sFrom + "' and '" + sTO + "'";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }
        public DataSet LedgerDateWise_branch2(string sFrom, string sTO)
        {
            DataSet ds = new DataSet();
            string autoemp1 = "select  'Company Outlet 2' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO2 a,tblLedger b where  a.LedgerID=b.LedgerID  and a.Date between '" + sFrom + "' and '" + sTO + "'";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }
        public DataSet LedgerDateWise_branch3(string sFrom, string sTO)
        {
            DataSet ds = new DataSet();
            string autoemp1 = "select  'Company Outlet 3' as Company, a.Date,a.Description,a.Amount as Debit,'' as 'Credit',b.LedgerName from tblPaymentEntry_CO3 a,tblLedger b where  a.LedgerID=b.LedgerID and a.Date between '" + sFrom + "' and '" + sTO + "'";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }

        public DataSet GenLedgerExpense(string sFrom, string sTo, string sTablename, int iUserID)
        {
            DataSet ds = new DataSet();
            string sqry = "(select b.ReceiptDate as Date,'BillNo-'+convert(varchar,a.BillNo)+'-'+c.CustomerName as Description,'' as 'Debit', a.Amount as 'Credit' from tblTransReceipt_" + sTablename + " a,tblReceipt_" + sTablename + " b ,tblCustomer c where b.CustomerID=c.CustomerID and a.ReceiptID=b.ReceiptNo and b.ReceiptDate between '" + sFrom + "' and '" + sTo + "' )union(select a.Date,a.Description,a.Amount as Debit,'' as 'Credit' from tblPaymentEntry_" + sTablename + " a,tblLedger b where Date between'" + sFrom + "' and '" + sTo + "'  and a.LedgerID=b.LedgerID ) union (select  a.ReceiptDate,'Customer - BillNo-'+convert(varchar,a.BillNo)+'-'+b.CustomerName as Description,'' as 'Debit',a.BillAmount as Credit  from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID and a.UserID='" + iUserID + "' and a.ReceiptDate between '" + sFrom + "' and '" + sTo + "')";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet SearchLedgerByDate(string sFrom, string sTo, string sTablename)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.PaymentEntryID,a.Date,b.LedgerName,a.Description,a.Amount from tblPaymentEntry_" + sTablename + " a,tblledger b where a.ledgerid=b.ledgerid and a.Date between '" + sFrom + "' and '" + sTo + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet AdminLedgerExpense(string sFrom, string sTo)
        {
            DataSet ds = new DataSet();
            string sqry = "(select b.ReceiptDate as Date,'BillNo-'+convert(varchar,a.BillNo)+'-'+c.CustomerName as Description,'' as 'Debit', a.Amount as 'Credit' from tblTransReceipt_CO1 a,tblReceipt_CO1 b ,tblCustomer c where b.CustomerID=c.CustomerID and a.ReceiptID=b.ReceiptNo and b.ReceiptDate between '" + sFrom + "' and '" + sTo + "' )union all(select a.Date,a.Description,a.Amount as Debit,'' as 'Credit' from tblPaymentEntry_CO1 a,tblLedger b where Date between'" + sFrom + "' and '" + sTo + "'  and a.LedgerID=b.LedgerID )union all(select b.ReceiptDate as Date,'BillNo-'+convert(varchar,a.BillNo)+'-'+c.CustomerName as Description,'' as 'Debit', a.Amount as 'Credit' from tblTransReceipt_CO2 a,tblReceipt_CO2 b ,tblCustomer c where b.CustomerID=c.CustomerID and a.ReceiptID=b.ReceiptNo and b.ReceiptDate between '" + sFrom + "' and '" + sTo + "' )union all(select a.Date,a.Description,a.Amount as Debit,'' as 'Credit' from tblPaymentEntry_CO2 a,tblLedger b where Date between'" + sFrom + "' and '" + sTo + "'  and a.LedgerID=b.LedgerID )union all(select b.ReceiptDate as Date,'BillNo-'+convert(varchar,a.BillNo)+'-'+c.CustomerName as Description,'' as 'Debit', a.Amount as 'Credit' from tblTransReceipt_CO3 a,tblReceipt_CO3 b ,tblCustomer c where b.CustomerID=c.CustomerID and a.ReceiptID=b.ReceiptNo and b.ReceiptDate between '" + sFrom + "' and '" + sTo + "' )union all(select a.Date,a.Description,a.Amount as Debit,'' as 'Credit' from tblPaymentEntry_CO3 a,tblLedger b where Date between'" + sFrom + "' and '" + sTo + "'  and a.LedgerID=b.LedgerID ) union all(select  a.ReceiptDate as Date,'Customer - BillNo-'+convert(varchar,a.BillNo)+'-'+b.CustomerName as Description,'' as 'Debit',a.BillAmount as Credit  from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID  and a.ReceiptDate between '" + sFrom + "' and '" + sTo + "')union all(select a.EntryDate as Date,'BillNo-'+convert(varchar,a.EntryDate)+'-'+b.CustomerName as Description ,a.PayingAmount as 'Debit',''as Credit from tbl_purchasePayment a,tblCustomer b where a.VendorID=b.CustomerID and a.Bill_date between '" + sFrom + "' and '" + sTo + "') ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        #endregion

        #region autogenerate
        public DataSet ledgerGen(string sTablename)
        {
            DataSet ds = new DataSet();
            string autoemp1 = "select MAX(PaymentEntryID)+1 as ledgerGen from tblPaymentEntry_" + sTablename + " ";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;
        }

        #endregion

        #region Sales BillNoMax

        public DataSet SalesBillno(string sSalesTable, string isnormal)
        {

            DataSet ds = new DataSet();
            string sQry = "select isnull((MAX(BillNo)+1),1) as BillNo from " + sSalesTable + " where IsNormal='" + isnormal + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }


        public DataSet dailybillseries(string sSalesTable, string Colunm)
        {

            DataSet ds = new DataSet();
            string sQry = "select (MAX(DailyBill)+1) as BillNo from " + sSalesTable + " where convert(date," + Colunm + ")=convert(date,GETDATE())";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }



        public DataSet SalesBillnoForOrder(string sSalesTable)
        {

            DataSet ds = new DataSet();
            string sQry = "select isnull((MAX(BillNo)+1),1) as BillNo from " + sSalesTable + " ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        public DataSet checkbookno(string sSalesTable, string bookno)
        {

            DataSet ds = new DataSet();
            string sQry = "select * from " + sSalesTable + " where FullBookNo ='" + bookno + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        public DataSet checkbooknoforupdate(string sSalesTable, string bookno, string orderno)
        {

            DataSet ds = new DataSet();
            string sQry = "select * from " + sSalesTable + " where FullBookNo ='" + bookno + "' and orderno <>'" + orderno + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        #endregion

        #region Receipt

        public DataSet Receiptno(string sReceiptTable)
        {

            DataSet ds = new DataSet();
            string sQry = "select (MAX(ReceiptNo)+1) as ReceiptNo from " + sReceiptTable + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        public DataSet getReceiptDetAdmin()
        {

            DataSet ds = new DataSet();
            string sQry = "select Vendorname,Address+''+Area+''+City+'-'+convert(varchar, PinCode) as Address,TINNo,UserName,Password from tblregistration";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        public DataSet getReceiptDetDealerLogin(int iCustID)
        {

            DataSet ds = new DataSet();
            string sQry = "((select distinct(b.BillNo), c.CustomerName,(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,CONVERT(money, b.BillAmount)-(sum(CONVERT(money,b.Amount))) as Balance,a.ReceiptDate,'Branch 1 ' as Branch from tblReceipt_CO1 a,tblTransReceipt_CO1 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID and c.ContactTypeID=2 and c.CustomerID='" + iCustID + "' group by (b.BillNo),b.BillAmount,c.CustomerName ,a.ReceiptDate) union all (select distinct(b.BillNo), c.CustomerName,(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,CONVERT(money, b.BillAmount)-(sum(CONVERT(money,b.Amount))) as Balance,a.ReceiptDate,'Branch 2 ' as Branch from tblReceipt_CO2 a,tblTransReceipt_CO2 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID and c.ContactTypeID=2 and c.CustomerID='" + iCustID + "' group by (b.BillNo),b.BillAmount,c.CustomerName ,a.ReceiptDate) union all (select distinct(b.BillNo), c.CustomerName,(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,CONVERT(money, b.BillAmount)-(sum(CONVERT(money,b.Amount))) as Balance,a.ReceiptDate,'Branch 3 ' as Branch from tblReceipt_CO3 a,tblTransReceipt_CO3 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID and c.ContactTypeID=2 and c.CustomerID='" + iCustID + "' group by (b.BillNo),b.BillAmount,c.CustomerName ,a.ReceiptDate) ) order by  a.ReceiptDate desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        public DataSet searchReceiptDetAdmin(string sCustomerName)
        {

            DataSet ds = new DataSet();
            string sQry = "((select distinct(b.BillNo), c.CustomerName,(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,CONVERT(money, b.BillAmount)-(sum(CONVERT(money,b.Amount))) as Balance,a.ReceiptDate,'Branch 1 ' as Branch from tblReceipt_CO1 a,tblTransReceipt_CO1 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID and c.ContactTypeID=2 and c.customername like '%" + sCustomerName + "%' group by (b.BillNo),b.BillAmount,c.CustomerName ,a.ReceiptDate) union all (select distinct(b.BillNo), c.CustomerName,(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,CONVERT(money, b.BillAmount)-(sum(CONVERT(money,b.Amount))) as Balance,a.ReceiptDate,'Branch 2 ' as Branch from tblReceipt_CO2 a,tblTransReceipt_CO2 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID and c.ContactTypeID=2 and c.customername like '%" + sCustomerName + "%' group by (b.BillNo),b.BillAmount,c.CustomerName ,a.ReceiptDate) union all (select distinct(b.BillNo), c.CustomerName,(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,CONVERT(money, b.BillAmount)-(sum(CONVERT(money,b.Amount))) as Balance,a.ReceiptDate,'Branch 3 ' as Branch from tblReceipt_CO3 a,tblTransReceipt_CO3 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID and c.ContactTypeID=2 and c.customername like '%" + sCustomerName + "%' group by (b.BillNo),b.BillAmount,c.CustomerName ,a.ReceiptDate) ) order by  a.ReceiptDate desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        public DataSet getOtherReceiptDetAdmin()
        {

            DataSet ds = new DataSet();
            string sQry = "(select distinct(b.BillNo), c.CustomerName,sum(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,sum(CONVERT(money,b.Balance)) as Balance, a.From_Branch ,' Billed in Branch 1' as  Branch from tblReceipt_CO1 a,tblTransReceipt_CO1 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID and a.From_Branch like 'co%' group by b.BillNo, c.CustomerName, a.From_Branch )union all(select distinct(b.BillNo), c.CustomerName,sum(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,sum(CONVERT(money,b.Balance)) as Balance , a.From_Branch,' Billed in Branch 2' as  Branch from tblReceipt_CO2 a,tblTransReceipt_CO2 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID and a.From_Branch like 'co%'group by (b.BillNo), c.CustomerName, a.From_Branch )union all(select distinct(b.BillNo), c.CustomerName,sum(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,sum(CONVERT(money,b.Balance)) as Balance , a.From_Branch,' Billed in Branch 3' as  Branch from tblReceipt_CO3 a,tblTransReceipt_CO3 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID and a.From_Branch like 'co%'group by (b.BillNo), c.CustomerName, a.From_Branch)";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        public DataSet getReceiptDetBranch1()
        {

            DataSet ds = new DataSet();
            string sQry = "(select distinct(b.BillNo), c.CustomerName,sum(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,sum(CONVERT(money,b.Balance)) as Balance,a.ReceiptDate,'Branch 1 ' as Branch from tblReceipt_CO1 a,tblTransReceipt_CO1 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID group by (b.BillNo), c.CustomerName ,a.ReceiptDate) order by  a.ReceiptDate desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        public DataSet getReceiptDetBranch2()
        {

            DataSet ds = new DataSet();
            string sQry = "(select distinct(b.BillNo), c.CustomerName,sum(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,sum(CONVERT(money,b.Balance)) as Balance ,a.ReceiptDate,'Branch 2  ' as Branch from tblReceipt_CO2 a,tblTransReceipt_CO2 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID group by (b.BillNo), c.CustomerName ,a.ReceiptDate) order by  a.ReceiptDate desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        public DataSet getReceiptDetBranch3()
        {

            DataSet ds = new DataSet();
            string sQry = "(select distinct(b.BillNo), c.CustomerName,sum(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,sum(CONVERT(money,b.Balance)) as Balance,a.ReceiptDate ,'Branch 3 ' as Branch from tblReceipt_CO3 a,tblTransReceipt_CO3 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID group by (b.BillNo), c.CustomerName,a.ReceiptDate) order by  a.ReceiptDate desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        public DataSet GetOtherBranchForBranch1()
        {

            DataSet ds = new DataSet();
            string sQry = "(select distinct(b.BillNo), c.CustomerName,sum(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,sum(CONVERT(money,b.Balance)) as Balance, a.From_Branch,'Billed in Branch 1' as Branch from tblReceipt_CO1 a,tblTransReceipt_CO1 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID and a.From_Branch like 'co%' group by b.BillNo, c.CustomerName, a.From_Branch )";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        public DataSet GetOtherBranchForBranch2()
        {

            DataSet ds = new DataSet();
            string sQry = "(select distinct(b.BillNo), c.CustomerName,sum(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,sum(CONVERT(money,b.Balance)) as Balance, a.From_Branch,'Billed in Branch 2' as Branch from tblReceipt_CO2 a,tblTransReceipt_CO2 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID and a.From_Branch like 'co%' group by b.BillNo, c.CustomerName, a.From_Branch )";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        public DataSet GetOtherBranchForBranch3()
        {

            DataSet ds = new DataSet();
            string sQry = "(select distinct(b.BillNo), c.CustomerName,sum(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,sum(CONVERT(money,b.Balance)) as Balance, a.From_Branch,'Billed in Branch 3' as Branch from tblReceipt_CO3 a,tblTransReceipt_CO3 b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID and a.From_Branch like 'co%' group by b.BillNo, c.CustomerName, a.From_Branch )";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        public DataSet getReceiptDetBranch(string sTableName)
        {

            DataSet ds = new DataSet();
            string sQry = "(select distinct(b.BillNo), c.CustomerName,sum(CONVERT(money, b.BillAmount)) as BillAmount,sum(CONVERT(money,b.Amount))as PaidAmount ,sum(CONVERT(money,b.Balance)) as Balance from tblReceipt_'" + sTableName + "' a,tblTransReceipt_'" + sTableName + "' b,tblCustomer c where a.ReceiptNo=b.ReceiptID and a.CustomerID=c.CustomerID group by (b.BillNo), c.CustomerName)";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        #endregion

        #region CRM
        public DataSet GenerateChart_CRM(string Type, string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            //string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount,F.Payment_Mode from 
            //tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where 
            //    A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date,A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.CategoryID";


            if (Type == "TopcatWise")
            {
                sqry = "select top 20 D.Category as Category, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by d.Category order by amount desc";
            }

            else if (Type == "LastcatWise")
            {
                sqry = "select top 20 D.Category as Category, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by d.Category order by amount asc";
            }
            else if (Type == "TopitemWise")
            {
                sqry = "select top 20 CO.Definition as Product, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by Co.Definition order by amount desc";
            }
            else if (Type == "LastitemWise")
            {
                sqry = "select top 20 CO.Definition as Product, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by Co.Definition order by amount asc";
            }
            else
            {
                //sqry = "select distinct st.State as State, "
                //     + " sum(CAST(TotalAmount as money) ) as Amount "
                //     + " from tblInvoice I inner join "
                //     + " tblLedger L on  I.SupplierID = L.VendorID inner join tblemployeedetails E on E.employee_id = L.createdby   "
                //     + " inner join tbldepartment D on D.departmentid = E.departmentid  "
                //     + " inner join tblCountry CO on L.Country = Co.Country_id "
                //     + " inner join tblstate St on L.state = st.state_id "
                //     + " inner join tblcity CI on L.city = ci.City_id "
                //     + " where st.State_id = '" + Type + "' and I.Status!='C' group by st.State order by amount desc"; 

                //sqry = "select distinct( st.State_id) ,count(st.state_id) as co, st.State as State from tblInvoice I "
                //    + " inner join  tblLedger L on  I.SupplierID = L.VendorID "
                //    + " inner join tblemployeedetails E on E.employee_id = L.createdby     "
                //    + " inner join tbldepartment D on D.departmentid = E.departmentid   "
                //    + " inner join tblCountry CO on L.Country = Co.Country_id  "
                //    + " inner join tblstate St on L.state = st.state_id  "
                //    + " inner join tblcity CI on L.city = ci.City_id  "
                //    + " where st.State_id = '" + Type + "' and I.Status!='C' group by st.State, st.State_id order by State asc";

            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet ordebyCategory2return(string sTableName, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            string paygird = "select A.ipayMode as Reasonsid,e.reason as Reasons,A.CustomerID,B.CategoryID,B.SubCategoryID,A.retno as BillNo, " +
                " convert(date,a.retdate) as BillDate,Name as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount  " +
            " ,0 as Payment_Mode from tblreturn_" + sTableName + " A,tblTransreturn_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblreason e where e.reasonid=a.ipaymode and A.retno=b.retno  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID  and convert(date,A.retdate) between '" + sFmdate + "' and '" + sToDate + "' order by B.CategoryID";
            ds = dbObj.InlineExecuteDataSet(paygird);
            return ds;
        }
        public DataSet ordebyproduct2return(string sTableName, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            string paygird = "select A.ipayMode as Reasonsid,e.reason as  Reasons,A.CustomerID,B.CategoryID,B.SubCategoryID,A.retno as BillNo " +
            " ,convert(date,a.retdate) as BillDate,Name as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount " +
            " , 0 as Payment_Mode from tblreturn_" + sTableName + " A,tblTransreturn_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblreason e where e.reasonid=a.ipaymode and A.retno=b.retno  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID  and convert(date, A.retdate) between '" + sFmdate + "' and '" + sToDate + "'  order by B.SubCategoryID";
            ds = dbObj.InlineExecuteDataSet(paygird);
            return ds;
        }


        #endregion

        #region Dashboard
        public DataSet Dashboard_SalesAll(string sDate, string sSalesTable)
        {
            DataSet ds = new DataSet();
            DataSet ds1 = new DataSet();

            DataSet dsbranch = new DataSet();
            string sqry = "select Branchcode,city from tblBranch where isactive='Yes' and BranchType=0";
            dsbranch = dbObj.InlineExecuteDataSet(sqry);

            for (int i = 0; i < dsbranch.Tables[0].Rows.Count; i++)
            {
                string baranch = dsbranch.Tables[0].Rows[i]["Branchcode"].ToString();


                if (sSalesTable == "tblSales_Admin")
                {
                    string sqry1 = "  select sum(NetAmount) as Sum from tblSales_" + baranch + " where BillDate='" + sDate + "'";
                    ds = dbObj.InlineExecuteDataSet(sqry1);
                }

                else
                {
                    string sqry1 = "select sum(NetAmount) as Sum from " + sSalesTable + " where cast(BillDate as date)='" + sDate + "'";
                    ds = dbObj.InlineExecuteDataSet(sqry1);
                }

                ds1.Merge(ds);
            }

            //for (int i = 0; i < dsbranch.Tables[0].Rows.Count; i++)
            //{
            //    string baranch = dsbranch.Tables[0].Rows[i]["Branchcode"].ToString();
            //   // string sqry1 = "select sum(NetAmount) as Sum from tblsales_" + baranch + " where BillDate='" + sDate + "'";

            //    string sqry1 = "select sum(NetAmount) as Sum from " + sSalesTable + " where cast(BillDate as date)='" + sDate + "'";
            //    ds = dbObj.InlineExecuteDataSet(sqry1);

            //    ds1.Merge(ds);
            //}
            return ds1;
        }

        public DataSet Dashboard_SalesCountAll(string sDate, string sSalesTable)
        {
            DataSet ds = new DataSet();
            DataSet ds1 = new DataSet();

            DataSet dsbranch = new DataSet();
            string sqry = "select Branchcode,city from tblBranch where isactive='Yes' and BranchType=0";
            dsbranch = dbObj.InlineExecuteDataSet(sqry);

            for (int i = 0; i < dsbranch.Tables[0].Rows.Count; i++)
            {
                string baranch = dsbranch.Tables[0].Rows[i]["Branchcode"].ToString();


                if (sSalesTable == "tblSales_Admin")
                {
                    string sqry1 = "  select Count(SalesID) as Count from tblSales_" + baranch + " where BillDate='" + sDate + "'";
                    ds = dbObj.InlineExecuteDataSet(sqry1);
                }

                else
                {
                    string sqry1 = "select Count(SalesID) as Count from " + sSalesTable + " where cast(BillDate as date)='" + sDate + "'";
                    ds = dbObj.InlineExecuteDataSet(sqry1);
                }

                ds1.Merge(ds);
            }

            //for (int i = 0; i < dsbranch.Tables[0].Rows.Count; i++)
            //{
            //    string baranch = dsbranch.Tables[0].Rows[i]["Branchcode"].ToString();


            //    string sqry1 = "select Count(SalesID) as Count from " + sSalesTable + " where cast(BillDate as date)='" + sDate + "'";
            //    ds = dbObj.InlineExecuteDataSet(sqry1);

            //    ds1.Merge(ds);
            //}
            return ds1;
        }

        public DataSet Dashboard_Customerledgercount(int contactTypeID)
        {
            DataSet ds = new DataSet();
            //string sqry = "select count(*) as Count from tblLedger where contactTypeID=" + contactTypeID + " and rtozone <> ''";
            string sqry = "select count(*) as Count from tblLedger where contactTypeID=" + contactTypeID + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet Dashboard_Expenses(string sDate, string sExpenseTable)
        {
            //DataSet ds = new DataSet();
            //string sqry = "  select sum(amount) as Sum from " + sExpenseTable + " where Type='Payment' and TransDate='" + sDate + "'";
            //ds = dbObj.InlineExecuteDataSet(sqry);
            //return ds;

            DataSet ds = new DataSet();
            DataSet ds1 = new DataSet();

            DataSet dsbranch = new DataSet();
            string sqry = "select Branchcode,city from tblBranch where isactive='Yes' and BranchType=0";
            dsbranch = dbObj.InlineExecuteDataSet(sqry);

            for (int i = 0; i < dsbranch.Tables[0].Rows.Count; i++)
            {
                string baranch = dsbranch.Tables[0].Rows[i]["Branchcode"].ToString();


                if (sExpenseTable == "tblDayBook_Admin")
                {
                    string sqry1 = "  select sum(amount) as Sum from tblDayBook_" + baranch + " where Type='Payment' and TransDate='" + sDate + "'";
                    ds = dbObj.InlineExecuteDataSet(sqry1);
                }

                else
                {
                    string sqry1 = "  select sum(amount) as Sum from " + sExpenseTable + " where Type='Payment' and TransDate='" + sDate + "'";
                    ds = dbObj.InlineExecuteDataSet(sqry1);
                }

                ds1.Merge(ds);
            }

            return ds1;
        }

        public DataSet Dashboard_OrderBalance(string sDate, string sOrderTable)
        {

            DataSet ds = new DataSet();
            DataSet ds1 = new DataSet();

            DataSet dsbranch = new DataSet();
            string sqry = "select Branchcode,city from tblBranch where isactive='Yes' and BranchType=0";
            dsbranch = dbObj.InlineExecuteDataSet(sqry);

            for (int i = 0; i < dsbranch.Tables[0].Rows.Count; i++)
            {
                string baranch = dsbranch.Tables[0].Rows[i]["Branchcode"].ToString();


                if (sOrderTable == "tblOrder_Admin")
                {
                    string sqry1 = "  select sum(BalancePaid) as Sum from tblOrder_" + baranch + " where OrderDate='" + sDate + "'";
                    ds = dbObj.InlineExecuteDataSet(sqry1);
                }

                else
                {
                    string sqry1 = "  select sum(BalancePaid) as Sum from " + sOrderTable + " where OrderDate='" + sDate + "'";
                    ds = dbObj.InlineExecuteDataSet(sqry1);
                }

                ds1.Merge(ds);
            }

            return ds1;
        }


        public DataSet Getsalespaymode(string sSalesTable, string paymode)
        {
            DataSet ds = new DataSet();



            string getcardandcash = "select isnull(sum(total),0) as cash from tblsales_" + sSalesTable + "  where CONVERT(date,Billdate)=CONVERT(date,getdate()) " +
                " and cancelstatus='No' and ipaymode in (" + paymode + ")";
            DataSet dcheck = dbObj.InlineExecuteDataSet(getcardandcash);
            return dcheck;
        }

        public DataSet GetCashDashBoard(string sSalesTable)
        {
            DataSet ds = new DataSet();

            string sQry = "select  sum(total) as amount  from tblsales_" + sSalesTable + "  where CONVERT(date,Billdate)=CONVERT(date,getdate()) and cancelstatus='No' and ipaymode<>'1'group by ipaymode";
            ds = dbObj.InlineExecuteDataSet(sQry);

            string getcardandcash = "select isnull(sum(total),0) as cash from tblsales_" + sSalesTable + "  where CONVERT(date,Billdate)=CONVERT(date,getdate()) and cancelstatus='No' and ipaymode='1'";
            DataSet dcheck = dbObj.InlineExecuteDataSet(getcardandcash);


            //if (dcheck.Tables[0].Rows.Count > 0)
            //{
            //    for (int intCount = 0; intCount < ds.Tables[0].Rows.Count; intCount++)
            //    {

            //        double amount = Convert.ToDouble(ds.Tables[0].Rows[intCount]["amount"]);

            //        ds.Tables[0].Rows[intCount]["Amount"] = amount + Convert.ToDouble(dcheck.Tables[0].Rows[0]["Cash"]);

            //    }

            //    ds.Tables[0].AcceptChanges();

            //}

            return dcheck;
        }

        public DataSet GetCardDashBoard(string sSalesTable)
        {
            DataSet ds = new DataSet();

            //string sQry = "select  sum(total) as amount  from tblsales_" + sSalesTable + "  where CONVERT(date,Billdate)=CONVERT(date,getdate()) and cancelstatus='No' and ipaymode<>'4'group by ipaymode";
            //ds = dbObj.InlineExecuteDataSet(sQry);

            string getcardandcash = "select isnull(sum(total),0) as card from tblsales_" + sSalesTable + "  where CONVERT(date,Billdate)=CONVERT(date,getdate()) and cancelstatus='No' and ipaymode='4'";
            DataSet dcheck = dbObj.InlineExecuteDataSet(getcardandcash);


            //if (dcheck.Tables[0].Rows.Count > 0)
            //{
            //    for (int intCount = 0; intCount < ds.Tables[0].Rows.Count; intCount++)
            //    {

            //        double amount = Convert.ToDouble(ds.Tables[0].Rows[intCount]["amount"]);

            //        dcheck.Tables[0].Rows[intCount]["Amount"] = amount + Convert.ToDouble(dcheck.Tables[0].Rows[0]["card"]);

            //    }

            //    dcheck.Tables[0].AcceptChanges();

            //}

            return dcheck;
        }


        public DataSet GetallOrderDashBoard(string sSalesTable, string paymode)
        {
            DataSet ds = new DataSet();

            //string getcardandcash = "select isnull(sum(total),0) as cash from tblorder_" + sSalesTable + "  " +
            //    " inner join tbltransorderamount_" + sSalesTable + " where CONVERT(date,orderdate)=CONVERT(date,getdate()) and isCancel=0 and ipaymode='1'";

            string getllorderamount = "select isnull(sum(Amount),0) as cash from tblorder_" + sSalesTable + " as a  inner join tbltransorderamount_" + sSalesTable + " as b on a.billno=b.billno " +
                                " where CONVERT(date,Billdate)=CONVERT(date,getdate()) and isCancel=0 and b.paymode in (" + paymode + ") and a.bookno=b.bookno";

            DataSet dcheck = dbObj.InlineExecuteDataSet(getllorderamount);

            return dcheck;
        }

        public DataSet GetOrderCashDashBoard(string sSalesTable)
        {
            DataSet ds = new DataSet();

            string getcardandcash = "select isnull(sum(total),0) as cash from tblorder_" + sSalesTable + "  where CONVERT(date,orderdate)=CONVERT(date,getdate()) and isCancel=0 and ipaymode='1'";
            DataSet dcheck = dbObj.InlineExecuteDataSet(getcardandcash);

            return dcheck;
        }

        public DataSet GetOrderCardDashBoard(string sSalesTable)
        {
            DataSet ds = new DataSet();

            string getcardandcash = "select isnull(sum(total),0) as card from tblorder_" + sSalesTable + "  where CONVERT(date,orderdate)=CONVERT(date,getdate()) and isCancel=0 and ipaymode='4'";
            DataSet dcheck = dbObj.InlineExecuteDataSet(getcardandcash);

            return dcheck;
        }

        public DataSet CanceledBillToday(string tbl)
        {

            string Today = "";
            DataSet dCust = new DataSet();

            if (tbl == "admin")
            {

                Today = "";
            }
            else
            {

                Today = " select count(*) as Cancel from tblsales_" + tbl + " where cancelstatus='yes' and convert(date,Billdate)=convert(date,getdate())";
            }
            dCust = dbObj.InlineExecuteDataSet(Today);



            return dCust;
        }



        #endregion

        public DataSet paymentgrid(string sTableName, DateTime TodayDate)
        {
            DataSet ds = new DataSet();
            string paygird = "select * from tblPaymentEntry_" + sTableName + " a,tblledger b where a.ledgerid=b.ledgerid and Date = '" + Convert.ToDateTime(TodayDate).ToString("MM/dd/yyyy") + "'";
            ds = dbObj.InlineExecuteDataSet(paygird);
            return ds;
        }

        public DataSet GetCustomerReceipt(int iUserID, string sTableName)
        {
            DataSet ds = new DataSet();
            // string sQuery = "select distinct a.UserID,a.ReceiptDate, b.CustomerName,a.BillNo, SUM(a.BillAmount)as BillAmount,TotalAmount,a.TotalAmount-sum(a.BillAmount) as BalanceAmount  from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID  and a.UserID=" + iUserID + "  group by a.BillNo,a.TotalAmount,b.CustomerName,a.UserID,a.ReceiptDate   having SUM(BillAmount)<>TotalAmount ";
            string sQuery = "select distinct CustomerName,BillNo,totalamount as BillAmount,SUM(billamount)as PaidAmount,a.TotalAmount-SUM(billamount) as Balance from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID and   a.UserID='" + iUserID + "'  group by b.CustomerName,a.BillNo,totalamount having a.TotalAmount-SUM(billamount) >0  ";

            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }
        public DataSet getAdminCustomerReceipt()
        {
            DataSet ds = new DataSet();
            // string sQuery = "select distinct a.UserID,a.ReceiptDate, b.CustomerName,a.BillNo, SUM(a.BillAmount)as BillAmount,TotalAmount,a.TotalAmount-sum(a.BillAmount) as BalanceAmount  from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID    group by a.BillNo,a.TotalAmount,b.CustomerName,a.UserID,a.ReceiptDate   having SUM(BillAmount)<>TotalAmount ";
            string sQuery = "select distinct CustomerName,BillNo,totalamount as BillAmount,SUM(billamount)as PaidAmount,a.TotalAmount-SUM(billamount) as Balance from tbl_CustomerReceipt a,tblCustomer b  where a.CustomerID=b.CustomerID group by b.CustomerName,a.BillNo,totalamount having a.TotalAmount-SUM(billamount) >0 ";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }
        public DataSet searchCustomerReceipt(string sCustName)
        {
            DataSet ds = new DataSet();
            // string sQuery = "select distinct a.UserID,a.ReceiptDate, b.CustomerName,a.BillNo, SUM(a.BillAmount)as BillAmount,TotalAmount,a.TotalAmount-sum(a.BillAmount) as BalanceAmount  from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID    group by a.BillNo,a.TotalAmount,b.CustomerName,a.UserID,a.ReceiptDate   having SUM(BillAmount)<>TotalAmount ";
            string sQuery = "select distinct CustomerName,BillNo,totalamount as BillAmount,SUM(billamount)as PaidAmount,a.TotalAmount-SUM(billamount) as Balance from tbl_CustomerReceipt a,tblCustomer b  where a.CustomerID=b.CustomerID and b.customername like '%" + sCustName + "%' group by b.CustomerName,a.BillNo,totalamount having a.TotalAmount-SUM(billamount) >0 ";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }
        public DataSet getBranch1CustomerReceipt()
        {
            DataSet ds = new DataSet();
            // string sQuery = "select distinct a.UserID,a.ReceiptDate, b.CustomerName,a.BillNo, SUM(a.BillAmount)as BillAmount,TotalAmount,a.TotalAmount-sum(a.BillAmount) as BalanceAmount  from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID    group by a.BillNo,a.TotalAmount,b.CustomerName,a.UserID,a.ReceiptDate   having SUM(BillAmount)<>TotalAmount ";
            string sQuery = "select  CustomerName,BillNo,totalamount as BillAmount,SUM(billamount)as PaidAmount,a.TotalAmount-SUM(billamount) as Balance from tbl_CustomerReceipt a,tblCustomer b  where a.CustomerID=b.CustomerID and a.UserID=5 group by b.CustomerName,a.BillNo,totalamount";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }
        public DataSet getBranch2CustomerReceipt()
        {
            DataSet ds = new DataSet();
            // string sQuery = "select distinct a.UserID,a.ReceiptDate, b.CustomerName,a.BillNo, SUM(a.BillAmount)as BillAmount,TotalAmount,a.TotalAmount-sum(a.BillAmount) as BalanceAmount  from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID    group by a.BillNo,a.TotalAmount,b.CustomerName,a.UserID,a.ReceiptDate   having SUM(BillAmount)<>TotalAmount ";
            string sQuery = "select  CustomerName,BillNo,totalamount as BillAmount,SUM(billamount)as PaidAmount,a.TotalAmount-SUM(billamount) as Balance from tbl_CustomerReceipt a,tblCustomer b  where a.CustomerID=b.CustomerID and a.UserID=6 group by b.CustomerName,a.BillNo,totalamount";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }
        public DataSet getBranch3CustomerReceipt()
        {
            DataSet ds = new DataSet();
            // string sQuery = "select distinct a.UserID,a.ReceiptDate, b.CustomerName,a.BillNo, SUM(a.BillAmount)as BillAmount,TotalAmount,a.TotalAmount-sum(a.BillAmount) as BalanceAmount  from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID    group by a.BillNo,a.TotalAmount,b.CustomerName,a.UserID,a.ReceiptDate   having SUM(BillAmount)<>TotalAmount ";
            string sQuery = "select  CustomerName,BillNo,totalamount as BillAmount,SUM(billamount)as PaidAmount,a.TotalAmount-SUM(billamount) as Balance from tbl_CustomerReceipt a,tblCustomer b  where a.CustomerID=b.CustomerID and a.UserID=7 group by b.CustomerName,a.BillNo,totalamount";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }
        # region InsertGridSales
        public DataSet SalesGrid()
        {
            DataSet ds = new DataSet();
            string sQry = "Select * from tblSales";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        #endregion



        #region Select Category
        public DataSet SelectCategory(int iCategory)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.category,b.categoryid,b.definition from tblcategory a, tblcategoryuser b where a.categoryid=b.categoryid and b.categoryid=" + iCategory + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        #endregion

        #region Select Category gefinition
        public DataSet SelectCategoryDef(int iCategory)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.category,b.categoryid,b.definition from tblcategory a, tblcategoryuser b where a.categoryid=b.categoryid and b.categoryid=" + iCategory + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        #endregion

        #region InsertSalesTable
        public int insertsales(string sSalesTable, int UserID, string BillNo, string BillDate, int CustomerID, double NetAmount, double Total, double Tax, double Discount, int iEdit, int Icnt, double dAdvance)
        {
            int iSuccess = 0;
            string sQry = "insert into " + sSalesTable + "(UserID, BillNo, BillDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,ContactTypeID,Advance) values ('" + UserID + "','" + BillNo + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "','" + Discount + "'," + iEdit + ",'" + Icnt + "','" + dAdvance + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        public int insertOrdersales(string sSalesTable, int UserID, string BillNo, string BillDate, int CustomerID, double NetAmount, double Total, double Tax, double Discount, int iEdit, int Icnt, double dAdvance, int Ordeeno, string msg, string takenBy, string DeliveryDate, string DeliveryTime, string Notes, int iPayMode)
        {
            int iSuccess = 0;
            string sQry = "insert into " + sSalesTable + "(UserID, BillNo, BillDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,ContactTypeID,Advance,OrderNo,Messege,OrderTakenBy,DeliveryDate,DeilveryTime,Notes,iPayMode,CancelStatus) values ('" + UserID + "','" + BillNo + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "','" + Discount + "'," + iEdit + ",'" + Icnt + "','" + dAdvance + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "','" + Notes + "'," + iPayMode + ",'No')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }
        //newmethod fopr insert sales 
        public int insertOrdersalesnew(string sSalesTable, int UserID, string BillNo, string BillDate, int CustomerID, double NetAmount, double Total, double Tax, double Discount,
            int iEdit, int Icnt, double dAdvance, int Ordeeno, string msg, string takenBy, string DeliveryDate, string DeliveryTime, string Notes, int iPayMode, decimal cash,
            decimal bal, string Provider, string Approved, string attender, string Biller, string cashier, double cgst, double sgst, double stotal, string Saletypemargin,
            string GstMargin, string Gateway, string salestype, string salesorderno, string isnormal, string attender1, string kottblno, string disper, string attendertypeid,
            string onlineamount, string billcode, string BillGeneratesetting, string Billtaxsetting, string currencytype, string roundoff, string transamounttable, string BillerId,
            string excurrencyname, string excurrencyid, string excurrencyvalue, string extotalrate)
        {
            int iSuccess = 0;
            DataSet billnonew = new DataSet();
            string sqryy = "select isnull(MAX(billno+1),1) as billno from " + sSalesTable + " where isnormal ='" + isnormal + "'";
            billnonew = dbObj.InlineExecuteDataSet(sqryy);
            string billnonw = billnonew.Tables[0].Rows[0]["billno"].ToString();
            if (billnonw == "")
                billnonw = "1";
            int billno1 = Convert.ToInt32(billnonw);

            DataSet ds = new DataSet();
            string sQrydailybill = "select (MAX(DailyBill)+1) as BillNo from " + sSalesTable + " where convert(date,BillDate)=convert(date,GETDATE())";
            ds = dbObj.InlineExecuteDataSet(sQrydailybill);

            string dailybillnonw = ds.Tables[0].Rows[0]["billno"].ToString();
            if (dailybillnonw == "")
                dailybillnonw = "1";
            int dailybillno1 = Convert.ToInt32(dailybillnonw);


            string fullbillcode = billcode + '-' + dailybillnonw;

            // string sQry = "insert into " + sSalesTable + "(UserID, BillNo, BillDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,ContactTypeID,Advance,OrderNo,Messege,OrderTakenBy,DeliveryDate,DeilveryTime,Notes,iPayMode,CancelStatus) values ('" + UserID + "','" + billnonw + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "','" + Discount + "'," + iEdit + ",'" + Icnt + "','" + dAdvance + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "','" + Notes + "'," + iPayMode + ",'No')";
            string sQry = "insert into " + sSalesTable + "(UserID, BillNo, BillDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,ContactTypeID,Advance,OrderNo,Messege, " +
                " OrderTakenBy,DeliveryDate,DeilveryTime,Notes,iPayMode,CancelStatus,CashPaid,Balance,Provider,Approved,Attender,Biller,cashier,CGST,SGST,STotal,Saletypemargin, " +
                " GstMargin,Gateway,salestype,SalesOrder,IsNormal,KOTTbleNo,IsPrint,discper,ApprovedId,OnlineAmount,BillCode,DailyBill,FullBill,GstBill,BillGeneratesetting,Billtaxsetting, " +
                " currencytype,Onetamount,OCGST,OSGST,Ototal,Otax,Odiscount,roundoff,BillerId,excurrencytype,excurrencyid,exvalue,extotalrate) values ('" + UserID + "','" + billnonw + "','" + BillDate + "' " +
            " ,'" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "','" + Discount + "'," + iEdit + ",'" + Icnt + "','" + dAdvance + "','" + Ordeeno + "', " +
            " '" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "','" + Notes + "'," + iPayMode + ",'No'," + cash + "," + bal + ",'" + Provider + "', " +
            " '" + Approved + "','" + attender1 + "','" + Biller + "','" + cashier + "'," + cgst + "," + sgst + "," + stotal + ",'" + Saletypemargin + "','" + GstMargin + "' " +
            " ,'" + Gateway + "','" + salestype + "','" + salesorderno + "','" + isnormal + "','" + kottblno + "','1','" + disper + "','" + attendertypeid + "', " +
            " '" + onlineamount + "','" + billcode + "','" + dailybillno1 + "','" + fullbillcode + "','Y','" + BillGeneratesetting + "','" + Billtaxsetting + "','" + currencytype + "' " +
            " ,'" + NetAmount + "','" + cgst + "','" + sgst + "','" + Total + "','" + Tax + "','" + Discount + "','" + roundoff + "','" + BillerId + "','" + excurrencyname + "','" + excurrencyid + "','" + excurrencyvalue + "','" + extotalrate + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);


            // Insert into TransAmount
            // Get MAx Salesid
            string salesuniqueid = "0";
            DataSet ds1 = new DataSet();
            string sQry11 = "select * from " + sSalesTable + " where billno='" + billno1 + "' and Salestype='" + salestype + "'";
            ds1 = dbObj.InlineExecuteDataSet(sQry11);
            if (ds1.Tables[0].Rows.Count > 0)
            {
                salesuniqueid = (ds1.Tables[0].Rows[0]["SalesID"].ToString());
            }

            string strans = "Insert into " + transamounttable + "(Salesid,Billno,Billdate,SalesTypeid,paymode,Amount,BillerId,Attenderid, " +
                " SalesPaymodeid,Currency,excurrencytype,excurrencyid,examount)values('" + salesuniqueid + "','" + billno1 + "','" + BillDate + "' " +
                " ,'" + salestype + "','" + iPayMode + "','" + Total + "','" + BillerId + "','" + attender1 + "','" + iPayMode + "','" + currencytype + "','" + excurrencyname + "','" + excurrencyid + "','" + extotalrate + "')";

            iSuccess = dbObj.InlineExecuteNonQuery(strans);



            return billno1;

        }

        public int insertOrdersalesnewKot(string sSalesTable, int UserID, string BillNo, string BillDate, int CustomerID, double NetAmount, double Total, double Tax, double Discount, int iEdit, int Icnt, double dAdvance, int Ordeeno, string msg, string takenBy, string DeliveryDate, string DeliveryTime, string Notes, int iPayMode, decimal cash, decimal bal, string Provider, string Approved, string attender, string Biller, string cashier, double cgst, double sgst, double stotal, string Saletypemargin, string GstMargin, string Gateway, string salestype, string salesorderno, string isnormal, string attender1, string kottblno,string transamounttable)
        {
            int iSuccess = 0;
            DataSet billnonew = new DataSet();
            string sqryy = "select isnull(MAX(billno+1),1) as billno from " + sSalesTable + " where isnormal ='" + isnormal + "'";
            billnonew = dbObj.InlineExecuteDataSet(sqryy);
            string billnonw = billnonew.Tables[0].Rows[0]["billno"].ToString();
            if (billnonw == "")
                billnonw = "1";
            int billno1 = Convert.ToInt32(billnonw);


            // string sQry = "insert into " + sSalesTable + "(UserID, BillNo, BillDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,ContactTypeID,Advance,OrderNo,Messege,OrderTakenBy,DeliveryDate,DeilveryTime,Notes,iPayMode,CancelStatus) values ('" + UserID + "','" + billnonw + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "','" + Discount + "'," + iEdit + ",'" + Icnt + "','" + dAdvance + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "','" + Notes + "'," + iPayMode + ",'No')";
            string sQry = "insert into " + sSalesTable + "(UserID, BillNo, BillDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,ContactTypeID,Advance,OrderNo,Messege,OrderTakenBy,DeliveryDate,DeilveryTime,Notes,iPayMode,CancelStatus,CashPaid,Balance,Provider,Approved,Attender,Biller,cashier,CGST,SGST,STotal,Saletypemargin,GstMargin,Gateway,salestype,SalesOrder,IsNormal,KOTTbleNo,IsPrint) values ('" + UserID + "','" + billnonw + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "','" + Discount + "'," + iEdit + ",'" + Icnt + "','" + dAdvance + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "','" + Notes + "'," + iPayMode + ",'No'," + cash + "," + bal + ",'" + Provider + "','" + Approved + "','" + attender1 + "','" + Biller + "','" + cashier + "'," + cgst + "," + sgst + "," + stotal + ",'" + Saletypemargin + "','" + GstMargin + "','" + Gateway + "','" + salestype + "','" + salesorderno + "','" + isnormal + "','" + kottblno + "','0')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            // Insert into TransAmount
            // Get MAx Salesid
            string salesuniqueid = "0";
            DataSet ds1 = new DataSet();
            string sQry11 = "select * from " + sSalesTable + " where billno='" + billno1 + "' and Salestype='" + salestype + "'";
            ds1 = dbObj.InlineExecuteDataSet(sQry11);
            if (ds1.Tables[0].Rows.Count > 0)
            {
                salesuniqueid = (ds1.Tables[0].Rows[0]["SalesID"].ToString());
            }

            string strans = "Insert into " + transamounttable + "(Salesid,Billno,Billdate,SalesTypeid,paymode,Amount,BillerId,Attenderid, " +
                " SalesPaymodeid,Currency)values('" + salesuniqueid + "','" + billno1 + "','" + BillDate + "' " +
                " ,'" + salestype + "','" + iPayMode + "','" + Total + "','1','" + attender1 + "','" + iPayMode + "','INR')";

            iSuccess = dbObj.InlineExecuteNonQuery(strans);





            return billno1;

        }


        #endregion

        #region InsertCustomerReceiptTable
        public int InsertCustomerReceipt(int UserID, string BillNo, int CustomerID, string date, double BillAmount, double BalanceAmount, double TotalAmount)
        {
            int iSuccess = 0;
            string sQry = "insert into tbl_CustomerReceipt (UserID,BillNo,CustomerID,ReceiptDate,BillAmount,BalanceAmount,TotalAmount,IsPaid) values ('" + UserID + "','" + BillNo + "','" + CustomerID + "','" + date + "','" + BillAmount + "','" + BalanceAmount + "','" + TotalAmount + "',1)";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        #endregion

        #region InsertSalesTable
        public int UpdateEditSales(string sSalesTable, int UserID, string BillNo)
        {
            int iSuccess = 0;
            string sQry = "update " + sSalesTable + " set iEdit=1 where billno='" + BillNo + "' and UserID=" + UserID + "";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        #endregion


        #region select SalesID
        public int SalesId(string sSalesTable)
        {
            int i = 0;
            string sQry = "";
            sQry = "Select max(SalesID) from " + sSalesTable + "";
            i = (int)dbObj.InlineExecuteScalar(sQry);
            return i;
        }
        #endregion


        #region Insert TransSales

        public int insertTransSales(string sTable, int SalesID, int CategoryID, double Quantity, double UnitPrice, double dDiscItem, double Amount, int iSubCategoryID, int StockID, double Tax, string isnormal, string kotid, string salestype, double Shwqty, string Cattype, string IScombo, double cQty, double exunitprice, double examount)
        {
            int iSuccess = 0;
            double Margin = 0;
            DataSet ds = new DataSet();
            string sQry1 = "select * from tblMargin where CategoryId='" + CategoryID + "' and BranchCode='" + sTable + "'";
            ds = dbObj.InlineExecuteDataSet(sQry1);
            if (ds.Tables[0].Rows.Count > 0)
            {
                Margin = Convert.ToDouble(ds.Tables[0].Rows[0]["Margin"].ToString());
            }

            string salesuniqueid = "0";
            DataSet ds1 = new DataSet();
            string sQry11 = "select * from tblsales_" + sTable + " where billno='" + SalesID + "' and Salestype='" + salestype + "'";
            ds1 = dbObj.InlineExecuteDataSet(sQry11);
            if (ds1.Tables[0].Rows.Count > 0)
            {
                salesuniqueid = (ds1.Tables[0].Rows[0]["SalesID"].ToString());
            }

            string sQry = "insert into tblTransSales_" + sTable + " ( SalesID, CategoryID,  Quantity,UnitPrice,Disc,Amount,SubCategoryID,StockID,Tax,Margin,isnormal,kotid,Salesuniqueid,Shwqty,Cattype,iscombo,cqty,exunitprice,examount) values ('" + SalesID + "','" + CategoryID + "','" + Quantity + "','" + UnitPrice + "','" + dDiscItem + "','" + Amount + "'," + iSubCategoryID + "," + StockID + "," + Tax + ",'" + Margin + "','" + isnormal + "','" + kotid + "','" + salesuniqueid + "','" + Shwqty + "','" + Cattype + "','" + IScombo + "','" + cQty + "','" + exunitprice + "','" + examount + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }


        public int insertTransSalesOrder(string sTransSalesTable, int SalesID, int CategoryID, double Quantity, double UnitPrice, double dDiscItem, double Amount, int iSubCategoryID)
        {
            int iSuccess = 0;
            string sQry = "insert into " + sTransSalesTable + "( SalesID, CategoryID,  Quantity,UnitPrice,Disc,Amount,SubCategoryID,Ounitprice,OAmount,ODisc) values " +
                " ('" + SalesID + "','" + CategoryID + "','" + Quantity + "','" + UnitPrice + "','" + dDiscItem + "','" + Amount + "'," + iSubCategoryID + ",'" + UnitPrice + "', " +
            " '" + Amount + "','" + dDiscItem + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }
        #endregion
        public DataSet GetTransSales(string sTableName, string sBillNo)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from " + sTableName + " where salesid='" + sBillNo + "'";//update  tblcategory set  IsDelete=1  where CategoryId='" + CategoryId + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public int InsertCustBill(int iUserId, string Scustomer, string sMobile, string sArea, string sAddress, string sCity, string sPin, int iCustType, string Gstno)
        {
            int iSuccess = 0;
            int CustID = 0;

            DataSet ds = new DataSet();
            string sget = "select max(CustomerID+1) as CustID from tblcustomer";
            ds = dbObj.InlineExecuteDataSet(sget);

            if (ds.Tables[0].Rows.Count > 0)
            {
                CustID = Convert.ToInt32(ds.Tables[0].Rows[0]["CustID"].ToString());
            }
            string sQry = "insert into tblCustomer(UserID,CustomerName,MobileNo,Area,Address,City,Pincode,ContactTypeID,customerid,Gstno)values('" + iUserId + "','" + Scustomer + "','" + sMobile + "','" + sArea + "','" + sAddress + "','" + sCity + "','" + sPin + "','" + iCustType + "'," + CustID + ",'" + Gstno + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            return CustID;

        }
        public DataSet GerCustID(string sMobile)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCustomer where MobileNo='" + sMobile + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet CheckMobileNo(string sMobile)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCustomer where MobileNo='" + sMobile + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #region Insert Receipt
        public int insertReceipt(string sReceiptTable, int UserId, string ReceiptNo, string ReceiptDate, int CustomerID, int Payment_ID, string BankName, string ReferenceNo, string sFromBranch)
        {
            int iSuccess = 0;
            string sQry = "insert into " + sReceiptTable + "(UserID, ReceiptNo, ReceiptDate, CustomerID,Payment_ID,BankName,ReferenceNo,From_Branch) values('" + UserId + "','" + ReceiptNo + "','" + ReceiptDate + "','" + CustomerID + "','" + Payment_ID + "','" + BankName + "','" + ReferenceNo + "','" + sFromBranch + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }

        #endregion


        #region Insert TransReceipt
        public int insertTransReceipt(string sTransReceiptTable, int BillNo, int ReceiptID, string BillAmount, string Balance, string Amount)
        {
            int iSuccess = 0;
            string sQry = "insert into " + sTransReceiptTable + "(BillNo, ReceiptID, BillAmount, Balance,Amount) values('" + BillNo + "','" + ReceiptID + "','" + BillAmount + "','" + Balance + "','" + Amount + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }

        #endregion

        #region select Receipt Details
        public DataSet GetReceiptDetails(int iCustID, string sSalesTable, string sTransReceiptTable, string sReceiptTable)
        {
            DataSet ds = new DataSet();
            //string sQry = "select BillNo, BillDate, Total from tblSales where customerid='" + iCustID + "'";
            string sqry = "select BillNo, BillDate, Total from " + sSalesTable + " where customerid='" + iCustID + "'  and BillNo not in (select a.BillNo from  " + sTransReceiptTable + " a," + sReceiptTable + " b,tblCustomer c  where a.ReceiptID=b.ReceiptNo  and b.CustomerID=c.CustomerID and c.customerid='" + iCustID + "'  group by a.BillNo ,a.BillAmount, c.customername having (a.BillAmount-SUM(a.Amount))=0)";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion
        #region select Bill Amount
        public DataSet GetBillAmountDet(int iSalesID)
        {
            DataSet ds = new DataSet();
            string sQry = "select Total from tblTransReceipt where SalesID='" + iSalesID + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion


        #region select ReceiptID
        public int ReceiptId(string sReceiptTable)
        {
            int i = 0;
            string sQry = "";
            sQry = "Select max(ReceiptID) from " + sReceiptTable + "";
            i = (int)dbObj.InlineExecuteScalar(sQry);
            return i;
        }
        #endregion


        #region select Customer Amount
        public DataSet GetCustomerAmount(int iCustID)
        {
            DataSet ds = new DataSet();
            string sQry = "select OpeningBalance from tblCustomer where customerid='" + iCustID + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion



        #region select TransSalesID
        public int TransSalesID(string sTransSalesTable)
        {
            int i = 0;
            string sQry = "";
            sQry = "Select max(TransSalesID) from " + sTransSalesTable + "";
            i = (int)dbObj.InlineExecuteScalar(sQry);
            return i;
        }
        #endregion
        #region select tblsales
        public int select_tblsales(string stblsales)
        {
            int i = 0;
            string sQry = "";
            sQry = "Select * from " + stblsales + "";
            i = (int)dbObj.InlineExecuteScalar(sQry);
            return i;
        }
        #endregion
        #region select Sales Total Amount
        public DataSet GetSalesTotalAmount(int iSalesID)
        {
            DataSet ds = new DataSet();
            string sQry = "select Amount from tblTransSales where TransSalesID='" + iSalesID + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region Get Bill Amount from TransReceipt Table
        public DataSet GetBillAmount(int iSalesID)
        {
            DataSet ds = new DataSet();
            string sQry = "select Total from tblTransReceipt where SalesID='" + iSalesID + "' order by Total";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region Insert Registration Form
        public int InsertRegistration(int UserID, string VendorCode, string VendorName, string CompanyName, string Area, string Address, string City, string Pincode, string TinNo, string MobileNo, string UserName, string Pass)
        {
            int iSuccess = 0;
            string sQry = "insert into tblRegistration(UserID,VendorCode, VendorName, CompanyName, Area, Address,City,Pincode,TinNo, MobileNo, UserName, Password) values('" + UserID + "','" + VendorCode + "','" + VendorName + "','" + CompanyName + "','" + Area + "','" + Address + "','" + City + "','" + Pincode + "','" + TinNo + "','" + MobileNo + "','" + UserName + "','" + Pass + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }
        #endregion

        #region Select Vendor Max Code
        public DataSet SelectMaxVenCode(string iVenCode)
        {
            DataSet ds = new DataSet();
            string sQry = "select   max(VendorCode)+1 as Vendorcode from tblRegistration";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet DealerLoginCheck(string user, string pass)
        {
            DataSet ds = new DataSet();
            string sQry = "select   * from tblRegistration where username='" + user + "' and password='" + pass + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion


        #region Select Max CategoryId

        public DataSet SelectMaxCategoryId(string CategoryId)
        {
            DataSet ds = new DataSet();
            string sQry = "select   max(categoryid)+1 from tblcategory";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region Insert CategoryDefId
        public int insertCategoryDefId(string category, string definiton)
        {
            int iSuccess = 0;
            string sQry = "insert into tblcategory(category,definiton) values('" + category + "','" + definiton + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }

        #endregion

        #region select CategoryDetails
        public DataSet GetCategoryDetails1(int iCatID)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategory where categoryid='" + iCatID + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion


        #region update sales category master

        public int updatecategoryMaster(int categoryid, string category)
        {
            int iSucess = 0;
            string sQry = "update tblcategory set category='" + category + "'  where categoryid='" + categoryid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }
        #endregion

        #region Category  Select Query
        public DataSet SelectCatItem(int CategoryId)
        {
            DataSet ds = new DataSet();
            string sQry = "select   category from tblcategory where CategoryId='" + CategoryId + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion
        #region delete Category


        public int DeleteLedger(string sLedgerID)
        {
            int iSucess = 0;
            string sQry = "delete from tblLedger  where LedgerID='" + sLedgerID + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }
        public DataSet SelectLedger(string sLedgerID)
        {
            DataSet ds = new DataSet();
            string sQry = "select *  from tblLedger  where LedgerID='" + sLedgerID + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public int DeleteTransSales(string sTableName, string sBillNo)
        {
            int iSucess = 0;
            string sQry = "delete from " + sTableName + " where salesid='" + sBillNo + "'";//update  tblcategory set  IsDelete=1  where CategoryId='" + CategoryId + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }
        public int DeleteSales(string sTableName, string sBillNo)
        {
            int iSucess = 0;
            string sQry = "delete from " + sTableName + " where BillNo='" + sBillNo + "'";//update  tblcategory set  IsDelete=1  where CategoryId='" + CategoryId + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public int DeleteCustomerReceipt(int iUserID, int iBillNo)
        {
            int iSucess = 0;
            string sQry = "delete from tbl_CustomerReceipt where BillNo=" + iBillNo + " and UserID=" + iUserID + "";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }
        #endregion


        #region Category and Definition Grid View
        public DataSet SelectCatDefGrid()
        {
            DataSet ds = new DataSet();
            string sQry = "select a.category, b.Definition from tblcategory a, tblcategoryuser b where a.categoryid = b.categoryid ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        # endregion


        #region Category and Definition Grid View
        public DataSet SelectCatDefGridValue(int iCatDefId)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.category, b.Definition from tblcategory a, tblcategoryuser b where a.categoryid = b.categoryid and a.categoryid='" + iCatDefId + "' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion

        #region select customer

        public DataSet selectcustomer()
        {
            DataSet ds = new DataSet();
            string sQry = "select case contacttypeid when  1 then 'Customer' when 2 then 'Dealer'  when 3 then 'Manufaturer' else 'Vendor' end as ContactType,* from tblCustomer  order by customerid desc";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;


        }

        public DataSet selectcustomerbyCity(string userId, string scity)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCustomer where userId='" + userId + "' and city like'%" + scity + "%' order by customerid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;


        }

        public DataSet selectcustomerbyArea(string userId, string sArea)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCustomer where userId='" + userId + "' and Area like'%" + sArea + "%' order by customerid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;


        }

        public DataSet selectcustomerbyCname(string userId, string ScustName)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCustomer where userId='" + userId + "' and CustomerName like'%" + ScustName + "%' order by customerid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;


        }
        #endregion



        #region delete customer
        public int deletecustomer(string customerid)
        {
            int iSucess = 0;
            string sQry = "delete from tblCustomer where customerid='" + customerid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }
        #endregion

        #region get customer
        public DataSet getselectcustomer(string iCusID)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCustomer where customerid='" + iCusID + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion

        #region update customer
        public int updatecustomer(string customerid, string customername, string MobileNo, string PhoneNo, string Area, string Address, string City, string Pincode, string Email, int iContactType)
        {
            int iSucess = 0;
            string sQry = "update tblcustomer set customername='" + customername + "',MobileNo='" + MobileNo + "',PhoneNo='" + PhoneNo + "',Area='" + Area + "',Address='" + Address + "',City='" + City + "',Pincode='" + Pincode + "',Email='" + Email + "',ContactTypeID='" + iContactType + "' where customerid='" + customerid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;

        }

        #endregion
        #region Change Password
        public DataSet checkpass(string password)
        {
            DataSet ds = new DataSet();
            string sqry = "select password from tbllogin where password like '%" + password + "%'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet checkpass_Toemployeecode(string password, string empid)
        {
            DataSet ds = new DataSet();
            //string sqry = "select password from tbllogin where password like '%" + password + "%'";
            string sqry = "select Code from tblworkers where Code='" + password + "' and Empid='" + empid + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int updatepass(string password, string username)
        {
            int isucess = 0;
            string sqry = "update tbllogin set  password='" + password + "' where username='" + username + "'";
            isucess = dbObj.InlineExecuteNonQuery(sqry);
            return isucess;
        }
        public int updatepass_ToEmpCode(string password, string username, string Empid)
        {
            int isucess = 0;
            //string sqry = "update tbllogin set  password='" + password + "' where username='" + username + "'";
            string sqry = "update tblworkers set  Code='" + password + "' where Empid='" + Empid + "'";
            isucess = dbObj.InlineExecuteNonQuery(sqry);
            return isucess;
        }

        #endregion

        #region Select Query For Search customer by name
        public DataSet searchfiltername(string CustomerName)
        {
            DataSet ds = new DataSet();
            string sqry = "SELECT case contacttypeid when  1 then 'Customer' else 'Dealer' end as ContactType, * FROM tblcustomer WHERE  CustomerName LIKE '%" + CustomerName + "%' order by customerid desc  ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion

        #region Select Query For Search Bill No by name
        public DataSet searchfilterbillno(string BillNo, string userId)
        {
            DataSet ds = new DataSet();
            string sqry = "SELECT * FROM tblsales WHERE userid='" + userId + "' and BillNo LIKE '%" + BillNo + "%'  ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion
        #region Select Query For Search mobile no
        public DataSet searchmobile(string mobileno)
        {
            DataSet ds = new DataSet();

            string sqry = "SELECT case contacttypeid when  1 then 'Customer' else 'Dealer' end as ContactType, * FROM tblcustomer WHERE  mobileno LIKE '%" + mobileno + "%'  order by customerid desc  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion

        #region Select Query For Search Customer Name
        public DataSet searchcustomername(string customerID, string userId)
        {
            DataSet ds = new DataSet();

            string sqry = "SELECT * FROM tblsales WHERE userid='" + userId + "' and customerID LIKE '%" + customerID + "%'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion
        #region Select Query For Search Area
        public DataSet searcharea(string customerID, string userId)
        {
            DataSet ds = new DataSet();

            string sqry = "SELECT * FROM tblsales WHERE userid='" + userId + "' and customerID LIKE '%" + customerID + "%'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion
        #region Select Query For Search City
        public DataSet searchcity(string customerID, string userId)
        {
            DataSet ds = new DataSet();

            string sqry = "SELECT * FROM tblsales WHERE userid='" + userId + "' and customerID LIKE '%" + customerID + "%'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion


        #region Select Query For EmailID
        public DataSet searchemailid(string emailid)
        {
            DataSet ds = new DataSet();

            string sqry = "SELECT case contacttypeid when  1 then 'Customer' else 'Dealer' end as ContactType,* FROM tblcustomer WHERE  email LIKE '%" + emailid + "%'  order by customerid desc  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion



        #region Select EmailID
        public DataSet selectemailid(string sEmail, string sMobile)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblCustomer where Email='" + sEmail + "' or MobileNo='" + sMobile + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion


        #region select Bill No from Sales table
        public DataSet selectbillno(string sTablename)
        {
            DataSet ds = new DataSet();
            string sQry = "select distinct( b.CustomerName+'-'+b.Area) as Customer,a.CustomerID  from tblsales_" + sTablename + " a,tblCustomer b where a.CustomerID=b.CustomerID";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion


        #region select Customer Name and area ID
        public DataSet CustomerNameID(int UserID)
        {
            DataSet ds = new DataSet();
            string sQry = "  select distinct a.CustomerName + ' - ' + a.Area as Area from tblsales b inner join tblCustomer a on a.CustomerID=b.CustomerID and a.userID='" + UserID + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region select Grid from table Customer and Sales
        //public DataSet CustomerSalesGird(int UserID, string sSalesTable)
        //{
        //    DataSet ds = new DataSet();
        //    string sQry = "  select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,a.Email from tblCustomer a," + sSalesTable + " b ,tblContactType c where a.CustomerID=b.CustomerID and b.UserID=" + UserID + " and a.ContactTypeID=c.ContactID order by b.BillNo desc ";
        //    string sQry = "  select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,a.Email from tblCustomer a,tblsales_CO4 b ,tblContactType c where a.CustomerID=b.CustomerID  and a.ContactTypeID=c.ContactID and b.OrderNo=0 union select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.Advance as NetAmount,b.salesID,a.Email from tblCustomer a,tblsales_CO4 b ,tblContactType c where a.CustomerID=b.CustomerID  and a.ContactTypeID=c.ContactID and b.OrderNo<>0    order by b.BillNo desc ";
        //    string sQry = "  select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,a.Email from tblCustomer a," + sSalesTable + " b ,tblContactType c where a.CustomerID=b.CustomerID  and a.ContactTypeID=c.ContactID and b.OrderNo=0 union select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.Advance as NetAmount,b.salesID,a.Email from tblCustomer a," + sSalesTable + " b ,tblContactType c where a.CustomerID=b.CustomerID  and a.ContactTypeID=c.ContactID and b.OrderNo<>0 and b.cancelstatus<>'Yes'   order by b.BillNo desc ";
        //    ds = dbObj.InlineExecuteDataSet(sQry);
        //    return ds;
        //}

        //newonr from 29/09/2015
        public DataSet CustomerSalesGird(int UserID, string sSalesTable)
        {
            DataSet ds = new DataSet();
            //string sQry = "  select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,a.Email from tblCustomer a,"+sSalesTable+" b ,tblContactType c where a.CustomerID=b.CustomerID and b.UserID="+UserID+" and a.ContactTypeID=c.ContactID order by b.BillNo desc ";
            //string sQry = "  select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,a.Email from tblCustomer a,tblsales_CO4 b ,tblContactType c where a.CustomerID=b.CustomerID  and a.ContactTypeID=c.ContactID and b.OrderNo=0 union select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.Advance as NetAmount,b.salesID,a.Email from tblCustomer a,tblsales_CO4 b ,tblContactType c where a.CustomerID=b.CustomerID  and a.ContactTypeID=c.ContactID and b.OrderNo<>0    order by b.BillNo desc ";
            //original code // string sQry = "  select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,a.Email from tblCustomer a," + sSalesTable + " b ,tblContactType c where a.CustomerID=b.CustomerID  and a.ContactTypeID=c.ContactID and b.OrderNo=0 union select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.Advance as NetAmount,b.salesID,a.Email from tblCustomer a," + sSalesTable + " b ,tblContactType c where a.CustomerID=b.CustomerID  and a.ContactTypeID=c.ContactID and b.OrderNo<>0 and b.cancelstatus<>'Yes'   order by b.BillNo desc ";
            string sQry = "select   a.CustomerName,'' as ContactType,b.BillNo,a.Area,b.Tax,b.Total,b.NetAmount,b.salesID,a.Email,b.Biller,b.Attender,b.salestype,b.fullbill  from tblCustomer a," + sSalesTable + " b  where a.CustomerID=b.CustomerID and b.cancelstatus<>'Yes'   order by salesid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet CustomerSalesGirdNew(int UserID, string sSalesTable)
        {
            DataSet ds = new DataSet();
            //string sQry = "  select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,a.Email from tblCustomer a,"+sSalesTable+" b ,tblContactType c where a.CustomerID=b.CustomerID and b.UserID="+UserID+" and a.ContactTypeID=c.ContactID order by b.BillNo desc ";
            //string sQry = "  select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,a.Email from tblCustomer a,tblsales_CO4 b ,tblContactType c where a.CustomerID=b.CustomerID  and a.ContactTypeID=c.ContactID and b.OrderNo=0 union select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.Advance as NetAmount,b.salesID,a.Email from tblCustomer a,tblsales_CO4 b ,tblContactType c where a.CustomerID=b.CustomerID  and a.ContactTypeID=c.ContactID and b.OrderNo<>0    order by b.BillNo desc ";
            //original code // string sQry = "  select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,a.Email from tblCustomer a," + sSalesTable + " b ,tblContactType c where a.CustomerID=b.CustomerID  and a.ContactTypeID=c.ContactID and b.OrderNo=0 union select a.CustomerName,c.ContactType,b.BillNo,a.Area,a.City,b.Advance as NetAmount,b.salesID,a.Email from tblCustomer a," + sSalesTable + " b ,tblContactType c where a.CustomerID=b.CustomerID  and a.ContactTypeID=c.ContactID and b.OrderNo<>0 and b.cancelstatus<>'Yes'   order by b.BillNo desc ";
            // string sQry = "select   a.CustomerName,'' as ContactType,b.BillNo,a.Area,b.Tax,b.Total,b.NetAmount,b.salesID,a.Email,b.Biller,b.Attender,b.salestype  " +
            //   " from tblCustomer a," + sSalesTable + " b  where a.CustomerID=b.CustomerID and b.cancelstatus<>'Yes'   order by salesid desc";

            string sQry = "select   b.billdate,a.CustomerName,'' as ContactType,b.BillNo,a.Area,b.Tax,b.Total,b.NetAmount,b.salesID,a.Email,b.Biller, " +
" isnull(c.attendername,'No Attender') as Attender,b.salestype,b.fullbill  " +
" from tblCustomer a inner join " + sSalesTable + " as  b  on  a.CustomerID=b.CustomerID " +
" left join tblattender as c on c.attenderid=b.attender where  b.cancelstatus<>'Yes'  " +
 " and convert(date,b.billdate) between dateadd(day,datediff(day,0,GETDATE()),0) and dateadd(day,datediff(day,0,GETDATE()),0)   order by salesid desc";


            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet checkContack(int iBillNo, int UserID, string sSalesTable)
        {
            DataSet ds = new DataSet();
            string sQry = " select c.ContactID from tblCustomer a," + sSalesTable + " b ,tblContactType c where a.CustomerID=b.CustomerID and a.UserID=" + UserID + " and a.ContactTypeID=c.ContactID and b.BillNo=" + iBillNo + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion


        #region select Grid from table Customer and Sales
        public DataSet CustomerSalesGirdbillNo(string BillNo)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,a.Email from tblCustomer a,tblsales b where a.CustomerID=b.CustomerID and b.BillNo = '" + BillNo + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region select Grid from table Customer and Sales, Area
        public DataSet CustomerSalesGirdnamearea(int customerID, string stablename)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.CustomerName ,a.Area, b.BillNo,a.City,b.NetAmount,a.Email, b.SalesID,'' as ContactType,b.Tax,b.Total,a.Email,b.Biller,b.Attender,b.salestype,b.fullbill from tblCustomer a,tblsales_" + stablename + " b  where a.CustomerID=b.CustomerID and a.CustomerID=" + customerID + "   order by b.salesId desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet autoFilterSalesGrid(int Billno, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.CustomerName ,a.Area, b.BillNo,a.City,b.NetAmount,a.Email, b.SalesID,'' as ContactType,b.Tax,b.Total,a.Email,b.Biller,b.Attender,b.salestype from tblCustomer a,tblsales_" + stable + " b  where a.CustomerID=b.CustomerID and b.fullbill like'%" + Billno + "%' order by b.salesId desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion



        #region select Grid from table Customer and Sales for Get
        public DataSet CustomerSalesGirdget(string iSalesID, string sSalesTable)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCustomer a," + sSalesTable + " b where a.CustomerID=b.CustomerID and b.billno = '" + iSalesID + "'";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet GetCustomerType()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcontacttype";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region select Grid from table Customer and Sales for Get
        public DataSet GetUpdateSalesTrans(string iSalesID, string sTransSalesTable)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from " + sTransSalesTable + " where SalesID = '" + iSalesID + "'";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region Delete Grid from table Customer and Sales
        public int deletesalesgrid(string BillNo)
        {

            int iSucess = 0;
            string sQry = "delete from tblCustomer a,tblsales b where a.CustomerID=b.CustomerID and b.BillNo = '" + BillNo + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }
        #endregion

        //#region select customer

        //public DataSet selectcustomer(string userId)
        //{
        //    DataSet ds = new DataSet();
        //    string sQry = "select * from tblCustomer where userId='" + userId + "'";
        //    ds = dbObj.InlineExecuteDataSet(sQry);
        //    return ds;


        //}
        //#endregion

        //#region delete customer
        //public int deletecustomer(string customerid)
        //{
        //    int iSucess = 0;
        //    string sQry = "delete from tblCustomer where customerid='" + customerid + "'";
        //    iSucess = dbObj.InlineExecuteNonQuery(sQry);
        //    return iSucess;
        //}
        //#endregion

        //#region get customer
        //public DataSet getselectcustomer(string iCusID)
        //{
        //    DataSet ds = new DataSet();
        //    string sQry = "select * from tblCustomer where customerid='" + iCusID + "'";
        //    ds = dbObj.InlineExecuteDataSet(sQry);
        //    return ds;
        //}

        //#endregion

        //#region update customer
        //public int updatecustomer(string customerid, string customername, string MobileNo, string PhoneNo, string Area, string Address, string City, string Pincode, string Email)
        //{
        //    int iSucess = 0;
        //    string sQry = "update tblcustomer set customername='" + customername + "',MobileNo='" + MobileNo + "',PhoneNo='" + PhoneNo + "',Area='" + Area + "',Address='" + Address + "',City='" + City + "',Pincode='" + Pincode + "',Email='" + Email + "' where customerid='" + customerid + "'";
        //    iSucess = dbObj.InlineExecuteNonQuery(sQry);
        //    return iSucess;

        //}

        //#endregion


        //#region Auto search

        //public DataSet SearchAuto()
        //{

        //    DataSet ds = new DataSet();
        //    string sQry = "select Sample_No from SampleReceiving where " +"Sample_No like @SearchText + '%'";
        //    ds = dbObj.InlineExecuteDataSet(sQry);
        //    return ds;

        //}

        //#endregion




        #region Query for Description Master Page
        public DataSet gridcustomer(string sCategory)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and a.category='" + sCategory + "' order by a.category desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet viewDescp(string Field)
        {
            DataSet ds = new DataSet();
            string sqry = "select b.gst as gst,b.printitem,b.CategoryuserID,a.CategoryID,a.category,b.Definition,b." + Field + " as Rate, " +
                " B.RATE*((B.GST/2)/100) AS cgst,B.RATE*((B.GST/2)/100) AS Sgst,B.RATE+(B.RATE*((B.GST)/100)) AS RATE1,ImageUpload,(B.RATE*((B.GST)/100)) as Ttax  " +
                " from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.Isactive='Yes' order by a.category,b.definition asc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet viewDescpNwew(string Field)
        {
            DataSet ds = new DataSet();
            string sqry = "select b.CategoryuserID,a.CategoryID,a.category,b.Definition,b." + Field + " as Rate,B.RATE*((B.GST/2)/100) AS cgst,B.RATE*((B.GST/2)/100) AS Sgst,B.RATE+(B.RATE*((B.GST)/100)) AS RATE1  from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.Isactive='Yes' and a.Poduction='1' order by a.category asc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet viewDescp_Dealer()
        {
            DataSet ds = new DataSet();
            string sqry = "select b.CategoryuserID,a.CategoryID,a.category,b.Definition,b.User1,b.User2 from tblcategory a,tblCategoryUser_Dealer b where a.categoryid=b.CategoryID and b.isdelete=0 ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet gridcustomer1()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.category,b.Definition,b.Rate from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.IsDelete=0  order by a.category desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet gridcustomer()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.*,b.* from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.IsDelete=0  order by a.category desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet viewCategory()
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct(category) from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID order by a.category desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet gridpagecustomer()
        {
            DataSet ds = new DataSet();
            string sqry = "select tblcategory.CategoryID,tblCategoryUser.Definition,tblcategory.category from tblCategory inner join tblCategoryUser on tblcategory.CategoryID=tblCategoryUser.CategoryID";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet deletedescgrid(string categoryId)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblcategoryuser set IsDelete=1 where categoryuserId='" + categoryId + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet deletedescgrid_Dealer(string categoryId)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblcategoryuser_Dealer set IsDelete=1 where categoryuserId='" + categoryId + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet srchbydef(string Defintion)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.IsDelete=0 and b.Definition like'%" + Defintion + "%' and b.IsDelete=0 order by b.CategoryUserID";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet srchbydef_Dealer(string Defintion)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblcategory a,tblCategoryUser_Dealer b where a.categoryid=b.CategoryID and b.IsDelete=0 and b.Definition like'%" + Defintion + "%' and b.IsDelete=0 order by b.CategoryUserID";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet SearchSerial(string iSerial)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.IsDelete=0 and  b.Serial_No like '%" + iSerial + "%' order by a.category desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet categorysrch(string category)
        {
            DataSet ds = new DataSet();
            string sqry = " select * from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.IsDelete=0 and a.category like '%" + category + "%' and b.IsDelete=0 order by b.CategoryUserID";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet categorysrch_Dealer(string category)
        {
            DataSet ds = new DataSet();
            string sqry = " select * from tblcategory a,tblCategoryUser_Dealer b where a.categoryid=b.CategoryID and b.IsDelete=0 and a.category like '%" + category + "%' and b.IsDelete=0 order by b.CategoryUserID";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }






        public DataSet updateDelerRate(double u1, double u2, int id)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblCategoryUser_Dealer set User1='" + u1 + "',User2='" + u2 + "' where categoryuserid='" + id + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet DeleteDelerRate(int id)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblCategoryUser_Dealer set IsDelete=1 where categoryuserid='" + id + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        #endregion

        #region get vendor
        public DataSet GetVendorName()
        {
            DataSet ds = new DataSet();
            string sQry = "select  a.CustomerName + ' - ' + Area as CustomerName,a.CustomerID from tblCustomer a where a.contacttypeid=3";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet GetVendorName_new()
        {
            DataSet ds = new DataSet();
            string sQry = "select  Location as CustomerName,UserID from tbllogin";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #region Purchase Entry
        public int insertpurchase(int VendorID, int DC_NO, string DC_Date, string Bill_NO, string Bill_date, string SubTotal, string Discount, string Tax5, string Tax14, string TotalAmount, double dCst, double dExcise)
        {
            int isucess = 0;
            string sqry = "insert into tblPurchase(VendorID,DC_NO,DC_Date,Bill_NO,Bill_date,SubTotal,Discount,Tax5,Tax14,TotalAmount,CST,Excise)values('" + VendorID + "','" + DC_NO + "','" + DC_Date + "','" + Bill_NO + "','" + Bill_date + "','" + SubTotal + "','" + Discount + "','" + Tax5 + "','" + Tax14 + "','" + TotalAmount + "','" + dCst + "','" + dExcise + "')";
            isucess = dbObj.InlineExecuteNonQuery(sqry);
            return isucess;
        }
        public int inserttranspurchase(string P_Id, int CategoryId, int DescriptionId, string Qty, string Rate, int Units, int Dicount, int Tax, string Amount)
        {
            int iSucess = 0;
            string sqry = "insert into tblTransPurchase(P_Id,CategoryId,DescriptionId,Qty,Rate,Units,Dicount,Tax,Amount)values('" + P_Id + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Rate + "','" + Units + "','" + Dicount + "','" + Tax + "','" + Amount + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sqry);
            return iSucess;
        }
        public DataSet getpid()
        {
            DataSet ds = new DataSet();
            string sqry = "select MAX(Bill_NO) as P_ID from tblPurchase";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet PurchaseEntryGrid()
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct(b.CustomerName ) ,sum(CONVERT(money, a.TotalAmount))as TotalAmount from tblPurchase a,tblCustomer b where a.VendorID=b.CustomerID  group by b.CustomerName";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet searchPurchaseEntryGrid(string scustomername)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct(b.CustomerName ) ,sum(CONVERT(money, a.TotalAmount))as TotalAmount from tblPurchase a,tblCustomer b where a.VendorID=b.CustomerID and b.customername like'%" + scustomername + "%'  group by b.CustomerName";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet PurchaseGrid()
        {
            DataSet ds = new DataSet();
            string sqry = "select *  from tblPurchase a,tblCustomer b where a.VendorID=b.CustomerID  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet viewPurchaseDetails(string sName)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.Bill_NO,b.Bill_date,d.category,e.Definition,c.Qty,c.Rate,b.TotalAmount  from tblCustomer a,tblPurchase b,tblTransPurchase c,tblcategory d,tblCategoryUser e where a.CustomerID=b.VendorID and b.Bill_NO=c.P_Id and  c.CategoryId=d.categoryid and c.DescriptionId=e.CategoryUserID and   a.CustomerName='" + sName + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet PurchaseReturnGrid()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblPurchaseReturn a,tblCustomer b where a.VendorID=b.CustomerID";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GetPurchaseStok(int iSubcategory, int ibranch, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblstock_" + stable + " where SubCategoryID=" + iSubcategory + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GetPurchaseStok_Semi(int iSubcategory, int ibranch, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblsemistock_" + stable + " where SubCategoryID=" + iSubcategory + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }



        public DataSet GetPurchaseSemiStok(int iSubcategory, int ibranch)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblSemiFinishedStock where SubCategoryID=" + iSubcategory + " and  UserID=" + ibranch + "";
            //ds = dbObj.InlineExecuteDataSet(sqry);
            // Main Server
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;

        }

        public int DelectFromStock(int ID, string stable)
        {
            int iDel = 0;
            //  string sQry = "Delete from tblStock_" + stable + " where SubCategoryID=" + ID + "";
            //  iDel = dbObj.InlineExecuteNonQuery(sQry);
            return iDel;
        }

        public int DelectFromSemiStock(int ID)
        {
            int iDel = 0;
            string sQry = "Delete from tblSemiFinishedStock where SubCategoryID=" + ID + "";
            iDel = dbObj.InlineExecuteNonQuery(sQry);
            return iDel;
        }

        public DataSet UpdatePurchaseStok(double iQty, double iAvailable, int iSubcategory, int iBranch, string sDate, string stable, int stockid)
        {
            DataSet ds = new DataSet();
            //string sqry = "update tblStock_" + stable + " set Available_QTY=Available_QTY+" + iAvailable + " where stockid=" + stockid + " ";
            //ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet UpdatePurchaseStokNew(double iAvailable, int iSubcategory, int iBranch, string sDate, string stable, int stockid, string recno)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblStock_" + stable + " set Available_QTY=Available_QTY+" + iAvailable + " where stockid=" + stockid + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('SCR-Goods Received Note','" + iAvailable + "','" + recno + "','+','" + iSubcategory + "','" + stockid + "')";
            int iupdate = dbObj.InlineExecuteNonQuery(AuditQty);

            return ds;

        }


        public DataSet UpdatePurchaseStokNew_Semi(double iAvailable, int iSubcategory, int iBranch, string sDate, string stable, int stockid, string recno)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblsemiStock_" + stable + " set Available_QTY=Available_QTY+" + iAvailable + " where stockid=" + stockid + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            //  string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('SCR-Semi Goods Received Note','" + iAvailable + "','" + recno + "','+','" + iSubcategory + "','" + stockid + "')";
            //  int iupdate = dbObj.InlineExecuteNonQuery(AuditQty);

            return ds;

        }

        public DataSet UpdatePurchaseStokNewStore(double iAvailable, int iSubcategory, int iBranch, string sDate, string stable, int stockid, string recno)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblStock_" + stable + " set Available_QTY=Available_QTY+" + iAvailable + " where stockid=" + stockid + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('SCR-Goods Received Note FOR STORE STOCK','" + iAvailable + "','" + recno + "','+','" + iSubcategory + "','" + stockid + "')";
            int iupdate = dbObj.InlineExecuteNonQuery(AuditQty);

            return ds;

        }

        public DataSet UpdatereqPurchaseStock(double Received_Qty, string stable, string ReqNo, int DescriptionId)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblTransPurchaseRequest_" + stable + " set Received_Qty=isnull(Received_Qty,0)+" + Received_Qty + " where DescriptionId=" + DescriptionId + " and RequestID='" + ReqNo + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet UpdatereqPurchaseStock_Semi(double Received_Qty, string stable, string ReqNo, int DescriptionId)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblTranssemiPurchaseRequest_" + stable + " set Received_Qty=isnull(Received_Qty,0)+" + Received_Qty + " where DescriptionId=" + DescriptionId + " and RequestID='" + ReqNo + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet UpdatereqPurchaseStockStore(double Received_Qty, string stable, string ReqNo, int DescriptionId)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblTransPurchaseRequeststore_" + stable + " set Received_Qty=isnull(Received_Qty,0)+" + Received_Qty + " where DescriptionId=" + DescriptionId + " and RequestID='" + ReqNo + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet UpdatePurchaseStokmain(double iQty, double iAvailable, int iSubcategory, int iBranch, string sDate, string stable, int stockid)
        {
            DataSet ds = new DataSet();
            //string sqry = "update tblStock_" + stable + " set Available_QTY=" + iAvailable + " where stockid=" + stockid + " ";

            //ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;

        }
        public DataSet UpdatePurchaseStokLocal(double iQty, double iAvailable, int iSubcategory, int iBranch, string sDate, string stable, int stockid)
        {
            DataSet ds = new DataSet();
            //string sqry = "update tblStock_" + stable + " set Available_QTY=" + iAvailable + " where stockid=" + stockid + " ";

            //ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet UpdateSemiFinishedStok(double iAvailable, int iSubcategory, int iBranch, double Qty)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblSemiFinishedStock set Weight=" + iAvailable + ",Available_QTy='" + Qty + "' where Stockid=" + iSubcategory + "   and UserID=" + iBranch + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet UpdateSemiFinishedStokkmain(double iAvailable, int iSubcategory, double iQty, int iBranch, double weight)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblSemiFinishedStock set Available_QTY=" + iAvailable + ",Weight='" + weight + "' where SubCategoryID=" + iSubcategory + " and    UserID=" + iBranch + "";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;

        }
        public DataSet UpdateSemiFinishedStokk(double iAvailable, int iSubcategory, double iQty, int iBranch, double weight)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblSemiFinishedStock set Available_QTY=" + iAvailable + ",Weight='" + weight + "' where SubCategoryID=" + iSubcategory + " and    UserID=" + iBranch + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet SalesReturnGrid()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblSalesReturn a,tblCustomer b where a.VendorID=b.CustomerID";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet getpidRet()
        {
            DataSet ds = new DataSet();
            string sqry = "select MAX(p_ID) as P_ID from tblPurchaseReturn";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet VendorName()
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct( b.CustomerName+'-'+b.Area) as CustomerName ,a.VendorID from tblPurchase a,tblCustomer b where a.VendorID=b.CustomerID ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet VendorNameSearch(int iVendorID)
        {
            DataSet ds = new DataSet();
            string sqry = "select b.CustomerName+'-'+b.Area as CustomerName ,* from tblPurchase a,tblCustomer b where a.VendorID=b.CustomerID and a.VendorID=" + iVendorID + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        #endregion
        #endregion
        #region Query SalesID
        public DataSet GetSalesIDReceipt(int iBillNo, string sSalesTable)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from " + sSalesTable + " where BillNo = '" + iBillNo + "'";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getCustomerReceipt(int iBillNo, string sSalesTable)
        {
            DataSet ds = new DataSet();
            string sQry = "select BillDate,NetAmount as BillAmount,(NetAmount-Advance) as NetAmount from " + sSalesTable + " where BillNo = '" + iBillNo + "'";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion

        #region Query GetReceiptAmountDet
        public DataSet GetReceiptAmountDet(int iBillNO, string sTransReceiptTable)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from " + sTransReceiptTable + " where billno=" + iBillNO + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion


        #region select Grid from table Customer and Receipt
        public DataSet GetCustomerReceiptGird(int UserID, string sReceiptTable)
        {
            DataSet ds = new DataSet();
            string sQry = "  select a.ReceiptID,a.ReceiptNo, a.ReceiptDate, b.CustomerName, b.Address, b.Area, b.City, b.Pincode,a.From_Branch from " + sReceiptTable + " a, tblCustomer b where a.CustomerID=b.CustomerID and a.userid='" + UserID + "' order by a.ReceiptID desc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region Serach By Receipt Grid Name
        public DataSet SearchReceiptGird(string CustomerName, string Area, string sReceiptTable)
        {
            DataSet ds = new DataSet();
            string sQry = "  select a.receiptid,a.ReceiptNo, a.ReceiptDate, b.CustomerName, b.Address, b.Area, b.City, b.Pincode from " + sReceiptTable + " a, tblCustomer b where a.CustomerID=b.CustomerID and  b.CustomerName = '" + CustomerName + "' and b.area='" + Area + "' order by a.receiptid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region select Customer Name and area ID
        public DataSet CustomerNameArea(int UserID, string sReceiptTable)
        {
            DataSet ds = new DataSet();
            string sQry = "  select distinct a.CustomerName + ' - ' + a.Area as Area from " + sReceiptTable + " b inner join tblCustomer a on a.CustomerID=b.CustomerID and a.UserID='" + UserID + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region Auto search

        public DataSet SearchAuto()
        {

            DataSet ds = new DataSet();
            string sQry = "select Sample_No from SampleReceiving where " +
"Sample_No like @SearchText + '%'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        #endregion
        #region Petty cash

        public int insertpettycash(string Amount_rec_From, string Date, string Amount, string Description, string Recipi_Id, string Received_By)
        {
            int isucess = 0;
            string sqry = "insert into tblpettycash(Amount_rec_From, Date,  Amount,  Description,Recipi_Id,Received_By) values('" + Amount_rec_From + "','" + Date + "','" + Amount + "','" + Description + "','" + Recipi_Id + "','" + Received_By + "')";
            isucess = dbObj.InlineExecuteNonQuery(sqry);
            return isucess;
        }

        public DataSet getreciptid(string Recipi_Id)
        {
            DataSet ds = new DataSet();
            string sqry = "select MAX((Recipi_Id)+1) as ReceiptID from tblpettycash";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getamount(string Recipi_Id)
        {
            DataSet ds = new DataSet();
            string sqry = "select Amount from tblpettycash where Recipi_Id='" + Recipi_Id + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet selectprtty()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblpettycash";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #region Printcustname
        public DataSet getcustname(string CustomerID)
        {
            DataSet ds = new DataSet();
            string sqry = "  select distinct tblCustomer.CustomerName from tblCustomer where customerid='" + CustomerID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #endregion

        #region getcategory

        public DataSet getcategory(string categoryid)
        {
            DataSet ds = new DataSet();
            string sqry = "  select category from tblcategory where categoryid='" + categoryid + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #endregion

        #region getdef
        public DataSet getdef(string CategoryUserID)
        {
            DataSet ds = new DataSet();
            string sqry = "  select definition from tblCategoryUser where CategoryUserID='" + CategoryUserID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion
        #region getpaymentdet
        public DataSet getpaymentdetails(string Payment_ID)
        {
            DataSet ds = new DataSet();
            string sqry = "  select BankName,ReferenceNo from tblReceipt where Payment_ID='" + Payment_ID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #endregion
        #region paymentmode
        public DataSet Getpaymentmode()
        {
            DataSet ds = new DataSet();
            string sqry = "  select * from tblPaymentMode";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        #endregion

        #region outstanding payment
        public DataSet getoutstandingpayment(string CustomerID)
        {
            DataSet ds = new DataSet();
            string sqry = "  select a.BillNo,a.Balance,b.ReceiptNo,b.ReceiptDate,  b.CustomerID,b.Payment_ID  from  tblTransReceipt a,tblReceipt b  where a.ReceiptID=b.ReceiptID and CustomerID='" + CustomerID + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #region insertstock
        public int InsertStock(string stable, int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, double Dealer, double Press, double dPurchaseRate, string Expirydate, int ToolID)
        {
            int iSuccess = 0;
            string sQry = "insert into tblstock_" + stable + "(UserID, CategoryID,SubCategoryID,Quantity,Available_Qty, MinQty,DealerUnitPrice,PressUnitPrice,PurchaseRate,Expirydate,ToolID) values ('" + UserID + "','" + iCategoryID + "','" + iSubCategoryID + "','" + iQty + "'," + iAQty + ",'" + iMinQty + "','" + Dealer + "','" + Press + "','" + dPurchaseRate + "','" + Expirydate + "'," + ToolID + ")";

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('MTD-InsertStock/ADD','" + iQty + "','0','+','" + iSubCategoryID + "','0')";


            string GRN = "insert into tblGrn (CategoryID,categoryuserid,GRN_Qty,Date,UserID) values(" + iCategoryID + "," + iSubCategoryID + ",'" + iQty + "','" + Expirydate + "'," + UserID + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            iSuccess = dbObj.InlineExecuteNonQuery(AuditQty);
            iSuccess = dbObj.InlineExecuteNonQuery(GRN);
            return iSuccess;

        }


        public int stockinserfromstore(string stable, int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, double Dealer, double Press, double dPurchaseRate, string Expirydate, int ToolID)
        {
            int iSuccess = 0;
            string sQry = "insert into tblstock_" + stable + "(UserID, CategoryID,SubCategoryID,Quantity,Available_Qty, MinQty,DealerUnitPrice,PressUnitPrice,PurchaseRate,Expirydate,ToolID) values ('" + UserID + "','" + iCategoryID + "','" + iSubCategoryID + "','" + iQty + "'," + iAQty + ",'" + iMinQty + "','" + Dealer + "','" + Press + "','" + dPurchaseRate + "','" + Expirydate + "'," + ToolID + ")";

            //  string GRN = "insert into tblGrn (CategoryID,categoryuserid,GRN_Qty,Date,UserID) values(" + iCategoryID + "," + iSubCategoryID + ",'" + iQty + "','" + Expirydate + "'," + UserID + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('MTD-stockinserfromstore/ADD','" + iAQty + "','0','+','" + iSubCategoryID + "','0')";
            iSuccess = dbObj.InlineExecuteNonQuery(AuditQty);


            //  iSuccess = dbObj.InlineExecuteNonQuery(GRN);
            return iSuccess;

        }


        public int StockOnly(string stable, int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, double Dealer, double Press, double dPurchaseRate, string Expirydate, int ToolID, int grnno, string name)
        {


            DataSet ds = new DataSet();
            string sqry = "select isnull(max(DayGRN) + 1,1) as DayGRN from tblgrn where convert(date,Date)=convert(date,GETDATE())";
            ds = dbObj.InlineExecuteDataSet(sqry);

            string GRNTime = System.DateTime.Now.ToString("hh:mm tt");
            string branch = string.Empty;
            int iSuccess = 0;


            //if (stable == "admin")
            //{
            //    string sqry1 = "Select * from tblbranch where branchtype='0'";
            //    ds = dbObj.InlineExecuteDataSet(sqry1);
            //    if (ds.Tables[0].Rows.Count > 0)
            //    {

            //        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            //        {
            //            branch = ds.Tables[0].Rows[i]["branchname"].ToString();


            //        }
            //    }
            //}

            string sQry = "insert into tblstock_" + stable + "(UserID, CategoryID,SubCategoryID,Quantity,Available_Qty, MinQty,DealerUnitPrice,PressUnitPrice,PurchaseRate,Expirydate,ToolID) values ('" + UserID + "','" + iCategoryID + "','" + iSubCategoryID + "','" + iQty + "'," + iAQty + ",'" + iMinQty + "','" + Dealer + "','" + Press + "','" + dPurchaseRate + "','" + Expirydate + "'," + ToolID + ")";

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('MTD-GRN/ADD','" + iAQty + "','" + ds.Tables[0].Rows[0]["DayGRN"] + "','+','" + iSubCategoryID + "','0')";


            // GET BRANCH CODE FOR BRNACHTYPE
            string fromowntype = "";


            // For Branch code
            string getbranchcode = "Select * from tblbranch where Branchcode='" + stable + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                fromowntype = getstorecode.Tables[0].Rows[0]["BranchOwnType"].ToString();

            }


            string GRN = "insert into tblGrn (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,Name,DayGRN,GRNTime,FromBranchCode,FromBranchOwnType) values(" + iCategoryID + "," + iSubCategoryID + ",'" + iQty + "','" + Expirydate + "'," + UserID + "," + grnno + ",'" + name + "'," + ds.Tables[0].Rows[0]["DayGRN"] + ",'" + GRNTime + "','" + stable + "','" + fromowntype + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            iSuccess = dbObj.InlineExecuteNonQuery(AuditQty);
            iSuccess = dbObj.InlineExecuteNonQuery(GRN);
            return iSuccess;

        }

        public int StockOnlyItem(DataSet Branch, int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, double Dealer, double Press, double dPurchaseRate, string Expirydate, int ToolID, int grnno, string name)
        {


            DataSet ds = new DataSet();
            string sqry = "select isnull(max(DayGRN) + 1,1) as DayGRN from tblgrn where convert(date,Date)=convert(date,GETDATE())";
            ds = dbObj.InlineExecuteDataSet(sqry);

            string GRNTime = System.DateTime.Now.ToString("hh:mm tt");
            string branch = string.Empty;
            int iSuccess = 0;


            for (int i = 0; i < Branch.Tables[0].Rows.Count; i++)
            {
                string branchcode = Branch.Tables[0].Rows[i]["Branchcode"].ToString();
                string branchname = Branch.Tables[0].Rows[i]["Branchname"].ToString();

                string sQry = "insert into tblstock_" + branchcode + "(UserID, CategoryID,SubCategoryID,Quantity,Available_Qty, MinQty,DealerUnitPrice,PressUnitPrice,PurchaseRate,Expirydate,ToolID) values ('" + UserID + "','" + iCategoryID + "','" + iSubCategoryID + "','" + iQty + "'," + iAQty + ",'" + iMinQty + "','" + Dealer + "','" + Press + "','" + dPurchaseRate + "','" + Expirydate + "'," + ToolID + ")";

                string AuditQty = "Insert into TblAuditQty_" + branchcode + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('MTD-GRN/ADD','" + iAQty + "','" + ds.Tables[0].Rows[0]["DayGRN"] + "','+','" + iSubCategoryID + "','0')";


                // GET BRANCH CODE FOR BRNACHTYPE
                string fromowntype = "";


                // For Branch code
                string getbranchcode = "Select * from tblbranch where Branchcode='" + branchcode + "'";
                DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
                if (getstorecode.Tables[0].Rows.Count > 0)
                {
                    fromowntype = getstorecode.Tables[0].Rows[0]["BranchOwnType"].ToString();

                }


                string GRN = "insert into tblGrn (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,Name,DayGRN,GRNTime,FromBranchCode,FromBranchOwnType) values(" + iCategoryID + "," + iSubCategoryID + ",'" + iQty + "','" + Expirydate + "'," + UserID + "," + grnno + ",'" + name + "'," + ds.Tables[0].Rows[0]["DayGRN"] + ",'" + GRNTime + "','" + branchcode + "','" + fromowntype + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
                iSuccess = dbObj.InlineExecuteNonQuery(AuditQty);
                iSuccess = dbObj.InlineExecuteNonQuery(GRN);
            }




            return iSuccess;

        }

        public int StockOnlypm(string stable, int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, double Dealer, double Press, double dPurchaseRate, string Expirydate, int ToolID, int grnno, string name, string sign)
        {



            DataSet ds = new DataSet();
            string sqry = "select isnull(max(DayGRNmp) + 1,1) as DayGRNmp from tblgrnmp where convert(date,Date)=convert(date,GETDATE())";
            ds = dbObj.InlineExecuteDataSet(sqry);

            string GRNTime = System.DateTime.Now.ToString("hh:mm tt");



            int iSuccess = 0;
            string sQry = "insert into tblstock_" + stable + "(UserID, CategoryID,SubCategoryID,Quantity,Available_Qty, MinQty,DealerUnitPrice,PressUnitPrice,PurchaseRate,Expirydate,ToolID) values ('" + UserID + "','" + iCategoryID + "','" + iSubCategoryID + "','" + iQty + "'," + iAQty + ",'" + iMinQty + "','" + Dealer + "','" + Press + "','" + dPurchaseRate + "','" + Expirydate + "'," + ToolID + ")";

            // string GRN = "insert into tblGRNmp (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,NameDayGRN,GRNTime,DayGRNmp,GRNTimemp) values(" + iCategoryID + "," + iSubCategoryID + ",'" + iQty + "','" + Expirydate + "'," + UserID + "," + grnno + ",'" + name + "'," + ds.Tables[0].Rows[0]["DayGRNmp"] + ",'" + GRNTime + "')";
            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('MTD-GRNPM/ADD','" + iAQty + "','" + ds.Tables[0].Rows[0]["DayGRNmp"] + "','" + sign + "','" + iSubCategoryID + "','0')";

            string GRN = "insert into tblGRNmp (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,NameDayGRN,GRNTime,DayGRNmp,GRNTimemp,Signa,GRNTYPE) values(" + iCategoryID + "," + iSubCategoryID + ",'" + iQty + "','" + Expirydate + "'," + UserID + "," + grnno + ",'" + name + "','" + GRNTime + "'," + ds.Tables[0].Rows[0]["DayGRNmp"] + ",'" + GRNTime + "','" + sign + "','Manual')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            iSuccess = dbObj.InlineExecuteNonQuery(AuditQty);
            iSuccess = dbObj.InlineExecuteNonQuery(GRN);
            return iSuccess;

        }

        public int InserDirectGrn(string stable, int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, double Dealer, double Press, double dPurchaseRate, DateTime Expirydate, int ToolID)
        {
            int iSuccess = 0;
            string sQry = "insert into tblstock_" + stable + "(UserID, CategoryID,SubCategoryID,Quantity,Available_Qty, MinQty,DealerUnitPrice,PressUnitPrice,PurchaseRate,Expirydate,ToolID) values ('" + UserID + "','" + iCategoryID + "','" + iSubCategoryID + "','" + iQty + "'," + iAQty + ",'" + iMinQty + "','" + Dealer + "','" + Press + "','" + dPurchaseRate + "','" + Expirydate.ToString("yyyy/MM/dd") + "'," + ToolID + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('MTD-InserDirectGrn/ADD','" + iAQty + "','0','+','" + iSubCategoryID + "','0')";
            iSuccess = dbObj.InlineExecuteNonQuery(AuditQty);
            return iSuccess;
        }


        public int InserDirectGrn_Semi(string stable, int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, double Dealer, double Press, double dPurchaseRate, DateTime Expirydate, int ToolID)
        {
            int iSuccess = 0;
            string sQry = "insert into tblsemistock_" + stable + "(UserID, CategoryID,SubCategoryID,Quantity,Available_Qty, MinQty,DealerUnitPrice,PressUnitPrice,PurchaseRate,Expirydate,ToolID) values ('" + UserID + "','" + iCategoryID + "','" + iSubCategoryID + "','" + iQty + "'," + iAQty + ",'" + iMinQty + "','" + Dealer + "','" + Press + "','" + dPurchaseRate + "','" + Expirydate.ToString("yyyy/MM/dd") + "'," + ToolID + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            //string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('MTD-InserDirectGrn/ADD','" + iAQty + "','0','+','" + iSubCategoryID + "','0')";
            //iSuccess = dbObj.InlineExecuteNonQuery(AuditQty);
            return iSuccess;
        }

        public int InserDirectGrnStore(string stable, int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, double Dealer, double Press, double dPurchaseRate, DateTime Expirydate, int ToolID)
        {
            int iSuccess = 0;
            string sQry = "insert into tblstock_" + stable + "(UserID, CategoryID,SubCategoryID,Quantity,Available_Qty, MinQty,DealerUnitPrice,PressUnitPrice,PurchaseRate,Expirydate,ToolID) values ('" + UserID + "','" + iCategoryID + "','" + iSubCategoryID + "','" + iQty + "'," + iAQty + ",'" + iMinQty + "','" + Dealer + "','" + Press + "','" + dPurchaseRate + "','" + Expirydate.ToString("yyyy/MM/dd") + "'," + ToolID + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('MTD-InserDirectGrnStore/Against Store Item-ADD','" + iAQty + "','0','+','" + iSubCategoryID + "','0')";
            iSuccess = dbObj.InlineExecuteNonQuery(AuditQty);
            return iSuccess;
        }

        public int InsertransRecQty(string stable, int RecID, int CategoryId, int DescriptionId, double Order_Qty, double Received_Qty, string DCNO, double dmgqty, double missqty, string userrid, string BREQNO, string FromBCode, string username)
        {
            int iSuccess = 0;
            string sQry = "insert into tblTransGoodsReceived_" + stable + "(RecID, CategoryId,DescriptionId,Order_Qty,Received_Qty, RequestNo,BranchCode,Damage_Qty,Missing_Qty) values ('" + RecID + "','" + CategoryId + "','" + DescriptionId + "','" + Order_Qty + "'," + Received_Qty + ",'" + DCNO + "','" + stable + "'," + dmgqty + "," + missqty + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sqry = "select isnull(max(DayGRN) + 1,1) as DayGRN from tblgrn where convert(date,Date)=convert(date,GETDATE())";
            DataSet ds = dbObj.InlineExecuteDataSet(sqry);

            string time = System.DateTime.Now.ToString("hh:mm tt");
            string date = DateTime.Now.ToString("MM/dd/yyyy");

            // GET BRANCH CODE FOR BRNACHTYPE
            string fromowntype = "";


            // For Branch code
            string getbranchcode = "Select * from tblbranch where Branchcode='" + FromBCode + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                fromowntype = getstorecode.Tables[0].Rows[0]["BranchOwnType"].ToString();

            }


            string GRN = "insert into tblGrn (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,Name,DayGRN,GRNTime,Type,RequestNo,Dc_No,FromBranchCode,FromBranchOwnType) values (" + CategoryId + "," + DescriptionId + "," + Received_Qty + ",'" + date + "','" + userrid + "','0','" + username + "'," + ds.Tables[0].Rows[0]["DayGRN"] + ",'" + time + "','Against Request','" + BREQNO + "','" + DCNO + "','" + FromBCode + "','" + fromowntype + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(GRN);


            return iSuccess;
        }


        public int InsertransRecQty_Semi(string stable, int RecID, int CategoryId, int DescriptionId, double Order_Qty, double Received_Qty, string DCNO, double dmgqty, double missqty, string userrid, string BREQNO, string FromBCode, string username)
        {
            int iSuccess = 0;
            string sQry = "insert into tblTranssemiGoodsReceived_" + stable + "(RecID, CategoryId,DescriptionId,Order_Qty,Received_Qty, RequestNo,BranchCode,Damage_Qty,Missing_Qty) values ('" + RecID + "','" + CategoryId + "','" + DescriptionId + "','" + Order_Qty + "'," + Received_Qty + ",'" + DCNO + "','" + stable + "'," + dmgqty + "," + missqty + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sqry = "select isnull(max(DayGRN) + 1,1) as DayGRN from tblSemigrn where convert(date,Date)=convert(date,GETDATE())";
            DataSet ds = dbObj.InlineExecuteDataSet(sqry);

            string time = System.DateTime.Now.ToString("hh:mm tt");
            string date = DateTime.Now.ToString("MM/dd/yyyy");

            // GET BRANCH CODE FOR BRNACHTYPE
            string fromowntype = "";


            // For Branch code
            string getbranchcode = "Select * from tblbranch where Branchcode='" + FromBCode + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                fromowntype = getstorecode.Tables[0].Rows[0]["BranchOwnType"].ToString();

            }


            string GRN = "insert into tblSemiGrn (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,Name,DayGRN,GRNTime,Type,RequestNo,Dc_No,FromBranchCode,FromBranchOwnType) values (" + CategoryId + "," + DescriptionId + "," + Received_Qty + ",'" + date + "','" + userrid + "','0','" + username + "'," + ds.Tables[0].Rows[0]["DayGRN"] + ",'" + time + "','Against Request','" + BREQNO + "','" + DCNO + "','" + FromBCode + "','" + fromowntype + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(GRN);


            return iSuccess;
        }



        // FOR STORE
        public int InsertransRecQtyStore(string stable, int RecID, int CategoryId, int DescriptionId, double Order_Qty, double Received_Qty, string DCNO, double dmgqty, double missqty, string userrid, string BREQNO, string FromBCode, string username, string fincatid, string finitemid)
        {
            int iSuccess = 0;
            string sQry = "insert into tblTransGoodsReceivedStore_" + stable + "(RecID, CategoryId,DescriptionId,Order_Qty,Received_Qty, RequestNo,BranchCode,Damage_Qty,Missing_Qty) values ('" + RecID + "','" + CategoryId + "','" + DescriptionId + "','" + Order_Qty + "'," + Received_Qty + ",'" + DCNO + "','" + stable + "'," + dmgqty + "," + missqty + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            if (finitemid != "0")
            {

                string sqry = "select isnull(max(DayGRN) + 1,1) as DayGRN from tblgrn where convert(date,Date)=convert(date,GETDATE())";
                DataSet ds = dbObj.InlineExecuteDataSet(sqry);

                string time = System.DateTime.Now.ToString("hh:mm tt");
                string date = DateTime.Now.ToString("MM/dd/yyyy");

                // GET BRANCH CODE FOR BRNACHTYPE
                string fromowntype = "";


                // For Branch code
                string getbranchcode = "Select * from tblbranch where Branchcode='" + FromBCode + "'";
                DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
                if (getstorecode.Tables[0].Rows.Count > 0)
                {
                    fromowntype = getstorecode.Tables[0].Rows[0]["BranchOwnType"].ToString();

                }


                string GRN = "insert into tblGrn (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,Name,DayGRN,GRNTime,Type,RequestNo,Dc_No,FromBranchCode,FromBranchOwnType) values (" + fincatid + "," + finitemid + "," + Received_Qty + ",'" + date + "','" + userrid + "','0','" + username + "'," + ds.Tables[0].Rows[0]["DayGRN"] + ",'" + time + "','Against From Store Request','" + BREQNO + "','" + DCNO + "','" + FromBCode + "','" + fromowntype + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(GRN);
            }

            return iSuccess;
        }



        public int updateRecQty(string stable, string DC_No, int DescriptionId, double dmgqty, double missqty, string remarks)
        {
            int iSuccess = 0;

            string sQry = "update tblTransGoodsTransfer_" + stable + " set isStocked=1,Damage_Qty=" + dmgqty + ",Missing_Qty=" + missqty + " where DC_No=" + DC_No + " and DescriptionId=" + DescriptionId + " ";
            iSuccess = dbObj.InlineExecuteNonQueryMain(sQry);

            string sQry1 = "update tblGoodTransfer_" + stable + " set status='" + remarks + "' where DC_No=" + DC_No + " ";
            iSuccess = dbObj.InlineExecuteNonQueryMain(sQry1);


            return iSuccess;
        }


        public int updateRecQty_Semi(string stable, string DC_No, int DescriptionId, double dmgqty, double missqty, string remarks)
        {
            int iSuccess = 0;

            string sQry = "update tblTranssemiGoodsTransfer_" + stable + " set isStocked=1,Damage_Qty=" + dmgqty + ",Missing_Qty=" + missqty + " where DC_No=" + DC_No + " and DescriptionId=" + DescriptionId + " ";
            iSuccess = dbObj.InlineExecuteNonQueryMain(sQry);

            string sQry1 = "update tblSemiGoodTransfer_" + stable + " set status='" + remarks + "' where DC_No=" + DC_No + " ";
            iSuccess = dbObj.InlineExecuteNonQueryMain(sQry1);


            return iSuccess;
        }


        // FOR STORE
        public int updateRecQtyStore(string stable, string DC_No, int DescriptionId, double dmgqty, double missqty, string remarks)
        {
            int iSuccess = 0;

            string sQry = "update tblTransGoodsTransferStore_" + stable + " set isStocked=1,Damage_Qty=" + dmgqty + ",Missing_Qty=" + missqty + " where DC_No=" + DC_No + " and DescriptionId=" + DescriptionId + " ";
            iSuccess = dbObj.InlineExecuteNonQueryMain(sQry);

            string sQry1 = "update tblGoodTransferStore_" + stable + " set status='" + remarks + "' where DC_No=" + DC_No + " ";
            iSuccess = dbObj.InlineExecuteNonQueryMain(sQry1);


            return iSuccess;
        }

        public int InserRecQty(string stable, string ProRequestNO, string UserID, string Branchreqno, string Dc_NO, string Remarks)
        {
            int iSuccess = 0;
            string sQry = "insert into tblGoodReceived_" + stable + "(RequestNO, BranchCode,UserID,BranchREqNo,DC_NO,Remarks) values ('" + ProRequestNO + "','" + stable + "','" + UserID + "','" + Branchreqno + "','" + Dc_NO + "','" + Remarks + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string sQry1 = " select max(RecID) as RecID from tblGoodReceived_" + stable + " ";
            ds = dbObj.InlineExecuteDataSet(sQry1);

            iSuccess = Convert.ToInt32(ds.Tables[0].Rows[0]["RecID"].ToString());

            return iSuccess;
        }


        public int InserRecQty_Semi(string stable, string ProRequestNO, string UserID, string Branchreqno, string Dc_NO, string Remarks)
        {
            int iSuccess = 0;
            string sQry = "insert into tblSemiGoodReceived_" + stable + "(RequestNO, BranchCode,UserID,BranchREqNo,DC_NO,Remarks) values ('" + ProRequestNO + "','" + stable + "','" + UserID + "','" + Branchreqno + "','" + Dc_NO + "','" + Remarks + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string sQry1 = " select max(RecID) as RecID from tblSemiGoodReceived_" + stable + " ";
            ds = dbObj.InlineExecuteDataSet(sQry1);

            iSuccess = Convert.ToInt32(ds.Tables[0].Rows[0]["RecID"].ToString());

            return iSuccess;
        }

        // FOR STORE
        public int InserRecQtyStore(string stable, string ProRequestNO, string UserID, string Branchreqno, string Dc_NO, string Remarks)
        {
            int iSuccess = 0;
            string sQry = "insert into tblGoodReceivedStore_" + stable + "(RequestNO, BranchCode,UserID,BranchREqNo,DC_NO,Remarks) values ('" + ProRequestNO + "','" + stable + "','" + UserID + "','" + Branchreqno + "','" + Dc_NO + "','" + Remarks + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string sQry1 = " select max(RecID) as RecID from tblGoodReceivedStore_" + stable + " ";
            ds = dbObj.InlineExecuteDataSet(sQry1);

            iSuccess = Convert.ToInt32(ds.Tables[0].Rows[0]["RecID"].ToString());

            return iSuccess;
        }

        public int InserDirectGrnmain(string stable, int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, double Dealer, double Press, double dPurchaseRate, string Expirydate, int ToolID)
        {
            int iSuccess = 0;
            //string sQry = "insert into tblstock_" + stable + "(UserID, CategoryID,SubCategoryID,Quantity,Available_Qty, MinQty,DealerUnitPrice,PressUnitPrice,PurchaseRate,Expirydate,ToolID) values ('" + UserID + "','" + iCategoryID + "','" + iSubCategoryID + "','" + iQty + "'," + iAQty + ",'" + iMinQty + "','" + Dealer + "','" + Press + "','" + dPurchaseRate + "','" + Expirydate + "'," + ToolID + ")";
            ////string GRN = "insert into tblGrn (CategoryID,categoryuserid,GRN_Qty,Date,UserID) values(" + iCategoryID + "," + iSubCategoryID + ",'" + iQty + "','" + Expirydate + "'," + UserID + ")";
            //iSuccess = dbObj.InlineExecuteNonQueryMain(sQry);
            //// iSuccess = dbObj.InlineExecuteNonQuery(GRN);
            return iSuccess;

        }



        public int InserDirectGrnLocal(string stable, int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, double Dealer, double Press, double dPurchaseRate, string Expirydate, int ToolID)
        {
            int iSuccess = 0;
            //string sQry = "insert into tblstock_" + stable + "(UserID, CategoryID,SubCategoryID,Quantity,Available_Qty, MinQty,DealerUnitPrice,PressUnitPrice,PurchaseRate,Expirydate,ToolID) values ('" + UserID + "','" + iCategoryID + "','" + iSubCategoryID + "','" + iQty + "'," + iAQty + ",'" + iMinQty + "','" + Dealer + "','" + Press + "','" + dPurchaseRate + "','" + Expirydate + "'," + ToolID + ")";
            ////string GRN = "insert into tblGrn (CategoryID,categoryuserid,GRN_Qty,Date,UserID) values(" + iCategoryID + "," + iSubCategoryID + ",'" + iQty + "','" + Expirydate + "'," + UserID + ")";
            //iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            //// iSuccess = dbObj.InlineExecuteNonQuery(GRN);
            return iSuccess;

        }

        public int InsertSemifinishedStock(int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, int serial, int BranchID, string Expirydate, double Weight)
        {
            int iSuccess = 0;
            string sQry = "insert into tblSemiFinishedStock(UserID, CategoryID,SubCategoryID,Quantity,Available_Qty, MinQty,SerialNo,BranchID,Expirydate,Weight) values ('" + UserID + "','" + iCategoryID + "','" + iSubCategoryID + "','" + iQty + "'," + iAQty + ",'" + iMinQty + "','" + serial + "','" + BranchID + "','" + Expirydate + "','" + Weight + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }
        public int InsertSemifinishedStockmain(int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, int serial, int BranchID, string Expirydate, double Weight)
        {
            int iSuccess = 0;
            string sQry = "insert into tblSemiFinishedStock(UserID, CategoryID,SubCategoryID,Quantity,Available_Qty, MinQty,SerialNo,BranchID,Expirydate,Weight) values ('" + UserID + "','" + iCategoryID + "','" + iSubCategoryID + "','" + iQty + "'," + iAQty + ",'" + iMinQty + "','" + serial + "','" + BranchID + "','" + Expirydate + "','" + Weight + "')";
            iSuccess = dbObj.InlineExecuteNonQueryMain(sQry);
            return iSuccess;

        }
        #endregion
        #region Check Stock
        public DataSet chkGtock(int iSubCatID, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = " select * from tblStock_" + stable + " where SubCategoryID=" + iSubCatID + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion
        //#region select Stock Details
        //public DataSet GetStockDetails(int iSubCatID)
        //{
        //    DataSet ds = new DataSet();
        //    string sQry = "select Quantity,UnitPrice,Available_Qty from tblStock where SubCategoryID=" + iSubCatID + "";
        //    ds = dbObj.InlineExecuteDataSet(sQry);
        //    return ds;
        //}
        //#endregion

        #region update sales stock



        //public int updateSalesStock(decimal iQty, int iCategoryID, int iSubCategoryID, string date, int iStockID, int UserID, string stable, string sign, string screenname, string Qty, string isalesid)
        //{
        //    int iSucess = 0;
        //    string sQry = "update tblStock_" + stable + " set available_Qty=" + iQty + " where stockid=" + iStockID + " "; //CategoryID=" + iCategoryID + " and SubCategoryID=" + iSubCategoryID + " and Expirydate='"+date+"'";
        //    iSucess = dbObj.InlineExecuteNonQuery(sQry);

        //    string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('" + screenname + "','" + Qty + "','" + isalesid + "','" + sign + "','" + iSubCategoryID + "','" + iStockID + "')";
        //    iSucess = dbObj.InlineExecuteNonQuery(AuditQty);


        //    return iSucess;
        //}


        public int updateSalesStock_ProdReturn(decimal iQty, int iCategoryID, int iSubCategoryID, string date, int iStockID, int UserID, string stable, string sign, string screenname, string Qty, string isalesid)
        {
            int iSucess = 0;
            string sQry = "update tblProductionQty_" + stable + " set prod_qty=" + iQty + " where id=" + iStockID + " "; //CategoryID=" + iCategoryID + " and SubCategoryID=" + iSubCategoryID + " and Expirydate='"+date+"'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            return iSucess;
        }


        public int updatePurchaseSalesStock(decimal iQty, int iCategoryID, int iSubCategoryID, string date, string stable)
        {
            int iSucess = 0;
            string sQry = "update tblStock_" + stable + " set available_Qty=" + iQty + " where CategoryID=" + iCategoryID + " and SubCategoryID=" + iSubCategoryID + " and Expirydate='" + date + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('Purchase Return','" + iQty + "','0','-','" + iSubCategoryID + "','0')";
            iSucess = dbObj.InlineExecuteNonQuery(AuditQty);

            return iSucess;
        }
        public int updateSalesStock_dealer(int iQty, int iCategoryID, int iSubCategoryID, string sTablename)
        {
            int iSucess = 0;
            string sQry = "update " + sTablename + " set available_Qty=" + iQty + " where CategoryID=" + iCategoryID + " and SubCategoryID=" + iSubCategoryID + "";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }
        #endregion

        #region GetReceiptdetails

        public DataSet GetReceiptNo(int ReceiptID, string sReceiptTable)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from " + sReceiptTable + " where ReceiptID='" + ReceiptID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GETBillDet(int ReceiptID, string sTransReceiptTable, string sSalesTable)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from " + sTransReceiptTable + " a," + sSalesTable + " b where a.BillNo=b.BillNo and a.TransReceiptID='" + ReceiptID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet Getreceiptreport()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.ReceiptID, a.ReceiptNo,a.ReceiptDate, c.CustomerName, case a.Payment_ID when 1 then 'Cash' when 2 then 'Cheque' when 3 then 'DD' else 'OnlinePayment' end as Payment_ID, b.BillNo,b.BillAmount,b.Balance,b.Amount from tblReceipt a,tblTransReceipt b ,tblCustomer c where a.ReceiptID=b.ReceiptID and a.CustomerID=c.CustomerID  order by a.ReceiptDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet Getreceiptreport_Dealer(string sReceiptTable, string sTransReceiptTable)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.ReceiptID, a.ReceiptNo,a.ReceiptDate, c.CustomerName, case a.Payment_ID when 1 then 'Cash' when 2 then 'Cheque' when 3 then 'DD' else 'OnlinePayment' end as Payment_ID, b.BillNo,b.BillAmount,b.Balance,b.Amount from " + sReceiptTable + " a," + sTransReceiptTable + " b ,tblCustomer c where a.ReceiptID=b.ReceiptID and a.CustomerID=c.CustomerID  order by a.ReceiptDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        #endregion

        #region Generate Sales Report

        public DataSet GenSalesReport()
        {
            DataSet ds = new DataSet();
            string sqry = "(select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,'Branch 1'  as Branch from tblCustomer a,tblsales_CO1 b where a.CustomerID=b.CustomerID) union (select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,'Branch 2'  as Branch from tblCustomer a,tblsales_CO2 b where a.CustomerID=b.CustomerID) union (select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,'Branch 3'  as Branch from tblCustomer a,tblsales_CO3 b where a.CustomerID=b.CustomerID) order by b.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet GenSalesReport_Branch1()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,b.UserID from tblCustomer a,tblsales_CO1 b where a.CustomerID=b.CustomerID order by b.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet GenSalesReport_Branch2()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,b.UserID from tblCustomer a,tblsales_CO2 b where a.CustomerID=b.CustomerID order by b.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet GenSalesReport_Branch3()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,b.UserID from tblCustomer a,tblsales_CO3 b where a.CustomerID=b.CustomerID order by b.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet DealerSalesRepForAdmin()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email from tblCustomer a,tblsales_dealer b where a.CustomerID=b.CustomerID order by b.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet BranchSalesRepForAdmin()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email from tblCustomer a,tblsales_branch b where a.CustomerID=b.CustomerID order by b.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet GenSalesReport_Dealer(string sSalestable)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,'Branch' as Branch  from tblCustomer a," + sSalestable + " b where a.CustomerID=b.CustomerID order by b.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GenSalesReport(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();
            string sqry = "(select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,'Branch 1'  as Branch from tblCustomer a,tblsales_CO1 b where a.CustomerID=b.CustomerID and  b.BillDate between '" + sStartDate + "' and '" + sEndDate + "') union (select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,'Branch 2'  as Branch from tblCustomer a,tblsales_CO2 b where a.CustomerID=b.CustomerID and  b.BillDate between '" + sStartDate + "' and '" + sEndDate + "') union (select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,'Branch 3'  as Branch from tblCustomer a,tblsales_CO3 b where a.CustomerID=b.CustomerID and  b.BillDate between '" + sStartDate + "' and '" + sEndDate + "') order by b.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet GenSalesReport_Branch1(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,b.UserID ,'Branch 1'  as Branch from tblCustomer a,tblsales_CO1 b where a.CustomerID=b.CustomerID and  b.BillDate between '" + sStartDate + "' and '" + sEndDate + "' order by b.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet GenSalesReport_Branch2(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,b.UserID,'Branch 2'  as Branch from tblCustomer a,tblsales_CO2 b where a.CustomerID=b.CustomerID and b.BillDate between '" + sStartDate + "' and '" + sEndDate + "' order by b.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet GenSalesReport_Branch3(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,b.UserID,'Branch 3'  as Branch from tblCustomer a,tblsales_CO3 b where a.CustomerID=b.CustomerID and b.BillDate between '" + sStartDate + "' and '" + sEndDate + "' order by b.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet viewEditedBill()
        {
            DataSet ds = new DataSet();
            string sqry = "(select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,b.UserID,'Branch 1' as Branch from tblCustomer a,tblsales_CO1 b where a.CustomerID=b.CustomerID and b.iEdit=1 ) union (select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,b.UserID,'Branch 2' as Branch from tblCustomer a,tblsales_CO2 b where a.CustomerID=b.CustomerID and b.iEdit=1 ) union  (select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,b.UserID,'Branch 3' as Branch from tblCustomer a,tblsales_CO3 b where a.CustomerID=b.CustomerID and b.iEdit=1 ) order by b.BillDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet viewEditedBill_Branch1()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,b.UserID from tblCustomer a,tblsales_CO1 b where a.CustomerID=b.CustomerID and b.iEdit=1 order by b.BillNo desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet viewEditedBill_Branch2()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,b.UserID from tblCustomer a,tblsales_CO2 b where a.CustomerID=b.CustomerID and b.iEdit=1  order by b.BillNo desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet viewEditedBill_Branch3()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,b.UserID from tblCustomer a,tblsales_CO3 b where a.CustomerID=b.CustomerID and b.iEdit=1  order by b.BillNo desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet GenSalesReport_Dealer(string sStartDate, string sEndDate, string Stablename)
        {
            DataSet ds = new DataSet();
            string sqry = "(select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email,'Branch 1'  as Branch from tblCustomer a," + Stablename + " b where a.CustomerID=b.CustomerID and b.BillDate between '" + sStartDate + "' and '" + sEndDate + "') order by b.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet GenReceiptReport(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblReceipt a,tblTransReceipt b where  a.ReceiptDate between '" + sStartDate + "' and '" + sEndDate + "' order by a.ReceiptDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet DealerReceiptReport(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblReceipt_dealer a,tblTransReceipt_dealer b,tblcustomer c where a.CustomerID=c.CustomerID and   a.ReceiptDate between '" + sStartDate + "' and '" + sEndDate + "' order by a.ReceiptDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet BranchReceiptReport(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblReceipt_branch a,tblTransReceipt_branch b,tblcustomer c  where a.CustomerID=c.CustomerID and   a.ReceiptDate between '" + sStartDate + "' and '" + sEndDate + "' order by a.ReceiptDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet GenReceiptReport_Dealer(string sStartDate, string sEndDate, string sReceiptTable, string sTransReceiptTable)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from " + sReceiptTable + " a," + sTransReceiptTable + " b ,tblcustomer c where a.CustomerID=c.CustomerID  and a.ReceiptID=b.TransReceiptID and  a.ReceiptDate between '" + sStartDate + "' and '" + sEndDate + "' order by a.ReceiptDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet geReceiptReportAdmin(int iBillno)
        {
            DataSet ds = new DataSet();
            string sqry = "(select * from tblReceipt_CO1 a,tblTransReceipt_CO1 b ,tblcustomer c where a.CustomerID=c.CustomerID  and a.ReceiptID=b.TransReceiptID and b.BillNo=" + iBillno + "  )union all(select * from tblReceipt_CO2 a,tblTransReceipt_CO2 b ,tblcustomer c where a.CustomerID=c.CustomerID  and a.ReceiptID=b.TransReceiptID and b.BillNo=" + iBillno + " )union all(select * from tblReceipt_CO3 a,tblTransReceipt_CO3 b ,tblcustomer c where a.CustomerID=c.CustomerID  and a.ReceiptID=b.TransReceiptID and b.BillNo=" + iBillno + " )";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        #region Total Amount
        public DataSet TotalSalesAmount()
        {
            DataSet ds = new DataSet();

            string sQry = "(select sum(b.NetAmount) as TotalAmount from tblCustomer a ,tblsales_CO1 b where a.CustomerID=b.CustomerID )union all(select sum(b.NetAmount) as TotalAmount from tblCustomer a ,tblsales_CO2 b where a.CustomerID=b.CustomerID )union all(select sum(b.NetAmount) as TotalAmount from tblCustomer a ,tblsales_CO3 b where a.CustomerID=b.CustomerID) ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet DealerSum(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();

            string sQry = "select sum(b.NetAmount) as TotalAmount from tblCustomer a,tblsales_dealer b where a.CustomerID=b.CustomerID ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet BranchrSum(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();

            string sQry = "select sum(b.NetAmount) as TotalAmount from tblCustomer a,tblsales_branch b where a.CustomerID=b.CustomerID ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet TotalSalesAmount_Dealer(string sSalestable)
        {
            DataSet ds = new DataSet();

            string sQry = "select sum(b.NetAmount) as TotalAmount from tblCustomer a," + sSalestable + " b where a.CustomerID=b.CustomerID ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet TotalSalesAmount(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();

            string sQry = "(select sum(b.NetAmount) as TotalAmount from tblCustomer a,tblsales_CO1 b where a.CustomerID=b.CustomerID and  b.BillDate between '" + sStartDate + "' and '" + sEndDate + "')  union (select sum(b.NetAmount) as TotalAmount from tblCustomer a,tblsales_CO2 b where a.CustomerID=b.CustomerID and b.BillDate between '" + sStartDate + "' and '" + sEndDate + "') union (select sum(b.NetAmount) as TotalAmount from tblCustomer a,tblsales_CO3 b where a.CustomerID=b.CustomerID and b.BillDate between '" + sStartDate + "' and '" + sEndDate + "')  ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet TotalSalesAmount_Branch1(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();

            string sQry = "select sum(b.NetAmount) as TotalAmount from tblCustomer a,tblsales_CO1 b where a.CustomerID=b.CustomerID and  b.BillDate between '" + sStartDate + "' and '" + sEndDate + "' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet TotalSalesAmount_Branch2(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();

            string sQry = "select sum(b.NetAmount) as TotalAmount from tblCustomer a,tblsales_CO2 b where a.CustomerID=b.CustomerID and b.BillDate between '" + sStartDate + "' and '" + sEndDate + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet TotalSalesAmount_Branch3(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();

            string sQry = "select sum(b.NetAmount) as TotalAmount from tblCustomer a,tblsales_CO3 b where a.CustomerID=b.CustomerID and b.BillDate between '" + sStartDate + "' and '" + sEndDate + "' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet DealerTotalSalesAmount(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email from tblCustomer a,tblsales_dealer b where a.CustomerID=b.CustomerID and b.BillDate between '" + sStartDate + "' and '" + sEndDate + "' order by b.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet BranchTotalSalesAmount(string sStartDate, string sEndDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.CustomerName,b.BillNo,a.Area,a.City,b.NetAmount,b.salesID,b.BillDate,b.Tax,b.Discount,a.Email from tblCustomer a,tblsales_branch b where a.CustomerID=b.CustomerID and b.BillDate between '" + sStartDate + "' and '" + sEndDate + "' order by b.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet TotalSalesAmount_Dealer(string sStartDate, string sEndDate, string sSalestable)
        {
            DataSet ds = new DataSet();

            string sQry = "select sum(b.NetAmount) as TotalAmount,b.UserID  from tblCustomer a," + sSalestable + " b where a.CustomerID=b.CustomerID and b.BillDate between '" + sStartDate + "' and '" + sEndDate + "'group by b.UserID ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetRoundAmount(int ReceiptID, string sTransRecipt)
        {
            DataSet ds = new DataSet();
            string sqry = "select convert(int,amount) as RoundAmount from  tblTransReceipt_" + sTransRecipt + " a,tblsales_" + sTransRecipt + " b where a.BillNo=b.BillNo and  a.TransReceiptID='" + ReceiptID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet TotalReceiptAmt(int ReceiptID, string sTransRecipt)
        {
            DataSet ds = new DataSet();
            string sqry = "select sum(amount) as SumAmount from  tblTransReceipt_" + sTransRecipt + " a,tblsales_" + sTransRecipt + " b where a.BillNo=b.BillNo and  a.TransReceiptID='" + ReceiptID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #endregion


        public DataSet GetEubReasons(int Reasonsid)
        {
            DataSet ds = new DataSet();
            string sQry = " select * from tblSubReasons where Reasonsid=" + Reasonsid + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet Getgsttax(int Categoryuserid)
        {
            DataSet ds = new DataSet();
            string sQry = " select * from tblCategoryuser where Categoryuserid=" + Categoryuserid + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetgsttaxForSalestype(string salestypeid)
        {
            DataSet ds = new DataSet();
            string sQry = " select * from tblSalestype where Salestypeid=" + salestypeid + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        #region select Stock Details
        public DataSet GetStockDetails(int iSubCatID, int UserID, string stable, string stockoption)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;
            if (stockoption == "1")
            {
                sQry = " select *,'0' as comboo,'1' as QTY,round(a.RATE+(a.RATE*((a.GST)/100)),0) AS RATE1 from tblcategoryuser a,tblStock_" + stable + " b where  a.CategoryUserID=b.SubCategoryID and " +
                    " b.StockID=" + iSubCatID + "  and isdelete=0 ";
            }
            else
            {
                sQry = " select *,'0' as comboo,'1' as QTY,CategoryUserID as stockid,CAST('0' AS MONEY)  as Available_QTY,cast('2019-04-01' as date) as Expirydate,round(a.RATE+(a.RATE*((a.GST)/100)),0) AS RATE1 " +
                    " from tblcategoryuser a where  " +
                    " a.CategoryUserID=" + iSubCatID + "  and isdelete=0 ";
            }
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetStockDetails_online(int iSubCatID, int UserID, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = " select *,'0' as comboo,'1' as QTY,categoryuserid as StockID,'0' as Available_QTY,'2019-04-01' as Expirydate from tblcategoryuser a where   a.CategoryUserID=" + iSubCatID + "  and isdelete=0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetStockDetails_Return(int iSubCatID, int UserID, string stable, string Btype)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;
            if (Btype == "0")
            {
                sQry = " select *,'0' as comboo,'1' as QTY from tblcategoryuser a,tblStock_" + stable + " b where  a.CategoryUserID=b.SubCategoryID and   b.StockID=" + iSubCatID + "  and isdelete=0 ";
            }
            else if (Btype == "2")
            {
                sQry = " select *,'0' as comboo,'1' as QTY,b.prod_qty as Available_Qty from tblcategoryuser a,tblProductionQty_" + stable + " b where  a.CategoryUserID=b.descriptionid and   b.id=" + iSubCatID + "  and isdelete=0 ";
            }
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetStockDetailscombo(int iSubCatID, int UserID, string stable, string stockoption)
        {
            DataSet ds = new DataSet();
            string sqr = string.Empty;
            //string sQry = " select * from tblcategoryuser a,tblStock_" + stable + " b where  a.CategoryUserID=b.SubCategoryID and   b.StockID=" + iSubCatID + "  and isdelete=0 ";
            //string sqr = "select tc.rate as Rate,CAST(tc.Qty AS MONEY) as Available_QTY,cu.*,s.* from tblcombo as c inner join tbltranscombo as tc on tc.comboid=c.comboid " +
            //            " inner join tblcategoryuser as cu on cu.ItemID=tc.Categoryuserid inner join tblstock_"+Stable+" as s on s.subcategoryid=cu.categoryuserid where c.comboid='" + iSubCatID + "'";
            if (stockoption == "1")
            {
                sqr = "select tc.ctaxvalue as GST,tc.categoryuserid as icatid,c.comboid as comboo,tc.TotalAmount as Rate,CAST(tc.Qty AS MONEY) as QTY,cu.*,b.*,round(cu.RATE+(cu.RATE*((cu.GST)/100)),0) AS RATE1 from tblcombo as c inner join tbltranscombo as tc on tc.comboid=c.comboid " +
                           " inner join tblcategoryuser as cu on cu.ItemID=tc.Categoryuserid inner join tblStock_" + stable + " as  b  on b.SubCategoryID=cu.categoryuserid where c.comboid='" + iSubCatID + "'";
            }
            else
            {
                sqr = "select tc.ctaxvalue as GST,tc.categoryuserid as icatid,c.comboid as comboo,tc.TotalAmount as Rate,CAST(tc.Qty AS MONEY) as QTY,cu.*,CategoryUserID as stockid,CAST('0' AS MONEY)  as Available_QTY,c.categoryid,cast('2019-04-01' as date) as Expirydate,round(cu.RATE+(cu.RATE*((cu.GST)/100)),0) AS RATE1 from tblcombo as c inner join tbltranscombo as tc on tc.comboid=c.comboid " +
                           " inner join tblcategoryuser as cu on cu.ItemID=tc.Categoryuserid  where c.comboid='" + iSubCatID + "'";
            }
            ds = dbObj.InlineExecuteDataSet(sqr);
            return ds;
        }

        public DataSet GetStockDetailsSubCatID(int iSubCatID, int UserID, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = " select * from tblcategoryuser a,tblStock_" + stable + " b where  a.CategoryUserID=b.SubCategoryID and   b.SubCategoryID=" + iSubCatID + "  and isdelete=0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetStockDetails1(int iSubCatID, int UserID, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = " select * from tblcategoryuser a,tblStock_" + stable + " b where  a.CategoryUserID=b.SubCategoryID and   b.SubCategoryID=" + iSubCatID + "  and isdelete=0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet GetSemiStockDetails(int iSubCatID, int UserID)
        {
            DataSet ds = new DataSet();
            string sQry = " select * from tblcategoryuser a,tblSemiFinishedStock b where  a.CategoryUserID=b.SubCategoryID and   b.StockID=" + iSubCatID + "  and isdelete=0 and b.userID=" + UserID + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetStockDetailsReturn(int iSubCatID, string sExpDate, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "select Quantity,UnitPrice,DealerUnitPrice,PressUnitPrice,Available_Qty,PurchaseRate,Expirydate from tblstock_" + stable + " where SubCategoryID=" + iSubCatID + " and Expirydate='" + sExpDate + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet GetStockDetails_Dealer(int iSubCatID, string sStockTable)
        {
            DataSet ds = new DataSet();
            string sQry = "select Quantity,UnitPrice,Available_Qty from " + sStockTable + " where SubCategoryID=" + iSubCatID + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region select Stock Grid

        public DataSet getDealerRequest()
        {
            DataSet ds = new DataSet();
            string sQry = "  select a.DealerID, d.CustomerName, a.stockid,b.category,c.Definition,a.Quantity,a.UnitPrice from tblDealerOrder  a,tblcategory b,tblCategoryUser c ,tblCustomer d where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid  and  a.SubCategoryID=c.CategoryUserID and a.DealerID=d.CustomerID and a.IsDelivered=0 order by a.stockid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet getstockdetgrid_dealer()
        {
            DataSet ds = new DataSet();
            string sQry = "select a.stockid,b.category,c.Definition,a.Quantity,a.UnitPrice,a.Available_QTY,(a.Available_QTY*a.PurchaseRate) as StockAmount,a.PurchaseRate as Rate,a.MinQty from tblStock a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID  order by a.stockid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet getstockdetgrid_dealer1()
        {
            DataSet ds = new DataSet();
            string sQry = "select b.category,c.Definition,a.Available_QTY from tblStock a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID  order by a.stockid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region Contact
        public DataSet GetContact()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblContactType";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion
        #region select Stock Grid for Edit
        public DataSet getstockdetedit(string stockid, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblStock_" + stable + " where stockid=" + stockid + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        //public DataSet getstockdetedit_dealer(string stockid,string sTableName)
        //{
        //    DataSet ds = new DataSet();
        //    string sQry = "select * from "+sTableName+" where stockid=" + stockid + "";
        //    ds = dbObj.InlineExecuteDataSet(sQry);
        //    return ds;
        //}
        #endregion

        #region Delete Stock Grid Details

        public DataSet deletestockgrid(string stockid, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "delete  from tblstock_" + stable + " where stockid='" + stockid + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        #endregion

        #region update stock Deatils
        public DataSet GetStockAvailable(int iCategoryID, string stable)
        {
            DataSet ds = new DataSet();
            //////string sqry = "select * from tblStock_" + stable + " where available_qty>0 and   SubCategoryID='" + iCategoryID + "'";

            string sqry = "select * from tblStock_" + stable + " where  SubCategoryID='" + iCategoryID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet GRNNO(int userid)
        {
            DataSet ds = new DataSet();
            string sqry = "select max(GRNNo)+1 as GRNNO from tblGRN where convert(date,Date)='" + DateTime.Now.ToString("MM/dd/yyyy") + "' and  userid=" + userid + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GRNNONew()
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(GRNNo)+1,1) as GRNNO from tblGRN  where convert(date,Date)='" + DateTime.Now.ToString("MM/dd/yyyy") + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GRNNOpm(int userid)
        {
            DataSet ds = new DataSet();
            string sqry = "select max(GRNNo)+1 as GRNNO from tblGRNmp where convert(date,Date)='" + DateTime.Now.ToString("MM/dd/yyyy") + "' and  userid=" + userid + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public int subgrn(int grnno, string date, int userid, string name)
        {
            int iSucess = 0;
            string sQry = "insert into tblsubGRN(GRNNo,Date,UserID,Name)values(" + grnno + ",'" + date + "'," + userid + ",'" + name + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public int updatestockdet(int categoryid, int subcategoryid, double unitprice, double Dealer, double Press, int iMinQty, string stable)
        {
            int iSucess = 0;
            //string sQry = "update tblstock_" + stable + " set categoryid='" + categoryid + "',subcategoryid='" + subcategoryid + "',  unitprice='" + unitprice + "',DealerUnitPrice='" + Dealer + "',PressUnitPrice='" + Press + "',MinQty='" + iMinQty + "'   where   subcategoryid='" + subcategoryid + "'";
            //iSucess = dbObj.InlineExecuteNonQuery(sQry);

            //string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('SCR-GRNPM','" + qty + "','" + salesid + "','+','" + itemid + "','" + stockid + "')";
            //iupdate = dbObj.InlineExecuteNonQuery(AuditQty);

            return iSucess;
        }
        public int updatePrintstockdet(int categoryid, int subcategoryid, double AvlQty, string stable, decimal grnQty, string date, int userid, int StockID, int GRNNO, string name)
        {

            DataSet ds = new DataSet();
            string sqry = "select isnull(max(DayGRN) + 1,1) as DayGRN from tblgrn where convert(date,Date)=convert(date,GETDATE())";
            ds = dbObj.InlineExecuteDataSet(sqry);

            string time = System.DateTime.Now.ToString("hh:mm tt");

            int iSucess = 0;
            string sQry = "update tblstock_" + stable + " set Available_QTY='" + AvlQty + "'  where   stockid='" + StockID + "'";

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('SINGLE-GRN','" + grnQty + "','" + ds.Tables[0].Rows[0]["DayGRN"] + "','+','" + subcategoryid + "','" + StockID + "')";
            iSucess = dbObj.InlineExecuteNonQuery(AuditQty);

            // GET BRANCH CODE FOR BRNACHTYPE
            string fromowntype = "";


            // For Branch code
            string getbranchcode = "Select * from tblbranch where Branchcode='" + stable + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                fromowntype = getstorecode.Tables[0].Rows[0]["BranchOwnType"].ToString();

            }

            string GRN = "insert into tblGrn (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,Name,DayGRN,GRNTime,FromBranchCode,FromBranchOwnType) values (" + categoryid + "," + subcategoryid + "," + grnQty + ",'" + date + "'," + userid + "," + GRNNO + ",'" + name + "'," + ds.Tables[0].Rows[0]["DayGRN"] + ",'" + time + "','" + stable + "','" + fromowntype + "')";

            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            iSucess = dbObj.InlineExecuteNonQuery(GRN);


            return iSucess;
        }




        public int updatePrintstockdet1(int categoryid, int subcategoryid, double AvlQty, string stable, decimal grnQty, int userid, int StockID, int GRNNO, string name)
        {

            DataSet ds = new DataSet();
            string sqry = "select isnull(max(DayGRN) + 1,1) as DayGRN from tblgrn where convert(date,Date)=convert(date,GETDATE())";
            ds = dbObj.InlineExecuteDataSet(sqry);

            string time = System.DateTime.Now.ToString("hh:mm tt");

            string date = DateTime.Now.ToString("MM/dd/yyyy");

            int iSucess = 0;
            string sQry = "update tblstock_" + stable + " set Available_QTY='" + AvlQty + "'  where   stockid='" + StockID + "'";

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('BULK-GRN','" + grnQty + "','" + ds.Tables[0].Rows[0]["DayGRN"] + "','+','" + subcategoryid + "','" + StockID + "')";

            // GET BRANCH CODE FOR BRNACHTYPE
            string fromowntype = "";


            // For Branch code
            string getbranchcode = "Select * from tblbranch where Branchcode='" + stable + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                fromowntype = getstorecode.Tables[0].Rows[0]["BranchOwnType"].ToString();

            }

            string GRN = "insert into tblGrn (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,Name,DayGRN,GRNTime,FromBranchCode,FromBranchOwnType) values (" + categoryid + "," + subcategoryid + "," + grnQty + ",'" + date + "'," + userid + "," + GRNNO + ",'" + name + "'," + ds.Tables[0].Rows[0]["DayGRN"] + ",'" + time + "','" + stable + "','" + fromowntype + "')";

            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            iSucess = dbObj.InlineExecuteNonQuery(AuditQty);
            iSucess = dbObj.InlineExecuteNonQuery(GRN);


            return iSucess;
        }
        public int updatePrintstockdetmp(int categoryid, int subcategoryid, double AvlQty, string stable, decimal grnQty, string date, int userid, int StockID, int GRNNO, string name)
        {



            int iSucess = 0;
            string sQry = "update tblstock_" + stable + " set Available_QTY='" + AvlQty + "'  where   stockid='" + StockID + "'";

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('MTD-updatePrintstockdetmp','" + grnQty + "','" + GRNNO + "','+','" + subcategoryid + "','" + StockID + "')";
            iSucess = dbObj.InlineExecuteNonQuery(AuditQty);

            string GRN = "insert into tblGRNmp (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,Name) values (" + categoryid + "," + subcategoryid + "," + grnQty + ",'" + date + "'," + userid + "," + GRNNO + ",'" + name + "')";

            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            iSucess = dbObj.InlineExecuteNonQuery(GRN);


            return iSucess;
        }


        public int updatePrintstockdetpm(int categoryid, int subcategoryid, double AvlQty, string stable, decimal grnQty, string date, int userid, int StockID, int GRNNO, string name, string sign)
        {

            DataSet ds = new DataSet();
            string sqry = "select isnull(max(DayGRNmp) + 1,1) as DayGRNmp from tblgrnmp where convert(date,Date)=convert(date,GETDATE())";
            ds = dbObj.InlineExecuteDataSet(sqry);

            string time = System.DateTime.Now.ToString("hh:mm tt");

            int iSucess = 0;
            string sQry = "update tblstock_" + stable + " set Available_QTY='" + AvlQty + "'  where   stockid='" + StockID + "'";

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('P-GRNPM','" + grnQty + "','" + ds.Tables[0].Rows[0]["DayGRNmp"] + "','" + sign + "','" + subcategoryid + "','" + StockID + "')";



            string GRN = "insert into tblGRNmp (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,Name,DayGRNmp,GRNTimemp,Signa,GRNTYPE) values (" + categoryid + "," + subcategoryid + "," + grnQty + ",'" + date + "'," + userid + "," + GRNNO + ",'" + name + "'," + ds.Tables[0].Rows[0]["DayGRNmp"] + ",'" + time + "','" + sign + "','Manual')";

            iSucess = dbObj.InlineExecuteNonQuery(GRN);
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            iSucess = dbObj.InlineExecuteNonQuery(AuditQty);


            return iSucess;
        }
        #endregion



        #region serach Stock Grid by Subcategoryname


        public DataSet searchstock(string definiton, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.stockid,b.category,c.Definition,a.Available_QTY,a.UnitPrice,a.DealerUnitPrice,a.PressUnitPrice,a.Available_QTY,a.PurchaseRate*a.Available_QTY as StockAmount from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID and c.Definition like '%" + definiton + "%'  order by a.stockid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet searchstocknew(string definiton, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "select b.category,c.Definition,a.Grn_Qty from tblgrnmp a,tblcategory b,tblCategoryUser c where a.Categoryid=b.categoryid and a.CategoryUserid=c.CategoryUserID and c.Definition like '%" + definiton + "%' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion
        #region
        public DataSet GetCustName(int UserID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCustomer where ContactTypeID='" + UserID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GetCustNamenA(int UserID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCustomer where CustomerID='" + UserID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        #endregion

        #region Rupees in words
        public String changeToWords(String numb, bool isCurrency)
        {


            String val = "", wholeNo = numb, points = "", andStr = "", pointStr = "";
            String endStr = (isCurrency) ? ("Only") : ("");


            try
            {
                int decimalPlace = numb.IndexOf("."); if (decimalPlace > 0)
                {


                    wholeNo = numb.Substring(0, decimalPlace);


                    points = numb.Substring(decimalPlace + 1);
                    if (Convert.ToInt32(points) > 0)
                    {


                        andStr = (isCurrency) ? ("and") : ("point");// just to separate whole numbers from points/cents
                        endStr = (isCurrency) ? ("Paisa " + endStr) : ("");


                        pointStr = translateCents(points);


                    }


                }
                val = String.Format("{0} {1}{2} {3}", translateWholeNumber(wholeNo).Trim(), andStr, pointStr, endStr);


            }
            catch {; }
            return val;


        }
        public String translateWholeNumber(String number)
        {


            string word = "";


            try
            {


                bool beginsZero = false;//tests for 0XX


                bool isDone = false;//test if already translated
                double dblAmt = (Convert.ToDouble(number));


                //if ((dblAmt > 0) && number.StartsWith("0"))
                if (dblAmt > 0)
                {//test for zero or digit zero in a nuemric
                    beginsZero = number.StartsWith("0");


                    int numDigits = number.Length;


                    int pos = 0;//store digit grouping


                    String place = "";//digit grouping name:hundres,thousand,etc...
                    switch (numDigits)
                    {


                        case 1://ones' range


                            word = ones(number);
                            isDone = true;


                            break;


                        case 2://tens' range


                            word = tens(number);
                            isDone = true;


                            break;


                        case 3://hundreds' range


                            pos = (numDigits % 3) + 1;
                            place = " Hundred ";


                            break;


                        case 4://thousands' range
                        case 5:


                            pos = (numDigits % 4) + 1;


                            place = " Thousand ";
                            break;


                        case 6://Lakhs' range
                        case 7:


                            pos = (numDigits % 6) + 1;


                            place = " Lakh ";
                            break;


                        case 8://Crores' range
                        case 9:


                            pos = (numDigits % 8) + 1;


                            place = " Crore ";
                            break;


                        case 10://Arabs range
                        case 11:


                            pos = (numDigits % 10) + 1;
                            place = " Arab ";


                            break;




                        //add extra case options for anything above Billion...
                        default:


                            isDone = true;
                            break;


                    }
                    if (!isDone)
                    {//if transalation is not done, continue...(Recursion comes in now!!)


                        word = translateWholeNumber(number.Substring(0, pos)) + place + translateWholeNumber(number.Substring(pos));


                        //check for trailing zeros
                        if (beginsZero) word = " and " + word.Trim();


                    }


                    //ignore digit grouping names
                    if (word.Trim().Equals(place.Trim())) word = "";


                }


                String Result = word.Trim();
                Result = Result.Replace("and Hundred", "");
                Result = Result.Replace("and Thousand", "");
                Result = Result.Replace("and Lakh", "");
                Result = Result.Replace("and Crore", "");
                Result = Result.Replace(" and ", " ");


                word = Result;
            }
            catch {; }
            return word.Trim();


        }
        public String tens(String digit)
        {


            int digt = Convert.ToInt32(digit);
            String name = null; switch (digt)
            {


                case 10:
                    name = "Ten";


                    break;
                case 11:


                    name = "Eleven";
                    break;


                case 12:
                    name = "Twelve";


                    break;
                case 13:


                    name = "Thirteen";
                    break;


                case 14:
                    name = "Fourteen";


                    break;
                case 15:


                    name = "Fifteen";
                    break;


                case 16:
                    name = "Sixteen";


                    break;
                case 17:


                    name = "Seventeen";
                    break;


                case 18:
                    name = "Eighteen";


                    break;
                case 19:


                    name = "Nineteen";
                    break;


                case 20:
                    name = "Twenty";


                    break;
                case 30:


                    name = "Thirty";
                    break;


                case 40:
                    name = "Fourty";


                    break;
                case 50:


                    name = "Fifty";
                    break;


                case 60:
                    name = "Sixty";


                    break;
                case 70:


                    name = "Seventy";
                    break;


                case 80:
                    name = "Eighty";


                    break;
                case 90:


                    name = "Ninety";
                    break;


                default:
                    if (digt > 0)
                    {
                        name = tens(digit.Substring(0, 1) + "0") + " " + ones(digit.Substring(1));


                    }
                    break;


            }
            return name;


        }
        public String ones(String digit)
        {
            int digt = Convert.ToInt32(digit);


            String name = "";
            switch (digt)
            {
                case 1:


                    name = "One";
                    break;


                case 2:
                    name = "Two";


                    break;
                case 3:


                    name = "Three";
                    break;


                case 4:
                    name = "Four";


                    break;
                case 5:


                    name = "Five";
                    break;


                case 6:
                    name = "Six";


                    break;
                case 7:


                    name = "Seven";
                    break;


                case 8:
                    name = "Eight";


                    break;
                case 9:


                    name = "Nine";
                    break;


            }
            return name;


        }
        public String translateCents(String cents)
        {
            String cts = "", digit = "", engOne = "";
            for (int i = 0; i < cents.Length; i++)
            {
                digit = cents[i].ToString();
                if (digit.Equals("0"))
                {
                    engOne = "Zero";
                }
                else
                {
                    engOne = ones(digit);
                }
                cts += " " + engOne;
                if (i == 1)
                {
                    if (Convert.ToInt32(cents) > 9 && Convert.ToInt32(cents) < 21)
                    {
                        cts = " " + tens(cents);
                    }
                    else
                    {
                        digit = cents[0].ToString();
                        cts = " " + tens(digit + "0");
                        digit = cents[1].ToString();
                        cts += " " + ones(digit);
                    }
                }
            }
            return cts;
        }

        #endregion








        public DataSet GetCustomerReceiptDet(string sBillNo, int iUserID)
        {
            DataSet ds = new DataSet();
            // string sqry = "select distinct a.UserID, b.CustomerName,a.BillNo,a.ReceiptDate, SUM(a.BillAmount)as BillAmount,TotalAmount ,(TotalAmount-Sum(a.billamount)) as balance from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID group by a.BillNo,a.TotalAmount,b.CustomerName,a.ReceiptDate,a.UserID having SUM(BillAmount)<>TotalAmount and a.UserID=" + iUserID + " and a.BillNo="+sBillNo+"";
            string sqry = " select distinct CustomerName,BillNo,totalamount as BillAmount,SUM(billamount)as PaidAmount,a.TotalAmount-SUM(billamount) as Balance from tbl_CustomerReceipt a,tblCustomer b  where a.CustomerID=b.CustomerID and   a.UserID='" + iUserID + "' and a.BillNo='" + sBillNo + "' group by b.CustomerName,a.BillNo,totalamount ";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet GetCustDetails(string sBillNo, int iUserID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbl_CustomerReceipt a,tblCustomer b where a.CustomerID=b.CustomerID and a.billno =" + sBillNo + " and a.UserID=" + iUserID + " order by a.billno desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet updatecatdef(string category, string CategoryID)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblCategory set category='" + category + "' where CategoryID='" + CategoryID + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;

        }





        #region delete Petty Cash details
        public int deletepettycash(string cashID)
        {
            int iSucess = 0;
            string sQry = "delete from tblpettycash where cashID='" + cashID + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }
        #endregion

        //public DataSet GetOutstandingAmount(string sTransReceiptTable,string sReceiptTable)
        //{
        //    DataSet ds = new DataSet();
        //    string sqry = "select SUM(a.amount) as PaidAmount,c.CustomerName,a.BillAmount,a.BIllNo,(a.BillAmount-SUM(a.Amount)) as PendingAmount from  "+sTransReceiptTable+" a,"+sReceiptTable+" b,tblCustomer c where a.Receiptid=b.Receiptno  and b.CustomerID=c.CustomerID group by a.BillNo ,a.BillAmount, c.customername";
        //    ds = dbObj.InlineExecuteDataSet(sqry);
        //    return ds;
        //}
        public DataSet GetOutstandingAmount(string sTransReceiptTable, string sReceiptTable, string sSalesTable)
        {
            DataSet ds = new DataSet();
            string sqry = "(select a. CustomerName,c.BillNo,c.BillAmount,c.Amount as PaidAmount,c.Balance,'' as Branch from tblCustomer a," + sReceiptTable + " b," + sTransReceiptTable + " c where a.CustomerID=b.CustomerID and a.ContactTypeID<>1  and c.ReceiptID=b.ReceiptNo  )union(select a.CustomerName,b.BillNo,b.NetAmount as BillAmount,b.Advance as PaidAmount,(b.NetAmount-b.Advance)as Balance ,'' as Branch from tblCustomer a," + sSalesTable + " b where a.CustomerID=b.CustomerID and a.ContactTypeID<>1  and b.CustomerID    not in (select CustomerID from " + sReceiptTable + ")group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0) ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet getOutstandingAmountpending(string sTransReceiptTable, string sReceiptTable, string sSalesTable)
        {
            DataSet ds = new DataSet();
            //string sqry = "(select a. CustomerName,c.BillNo,c.BillAmount,c.Amount as PaidAmount,c.Balance from tblCustomer a," + sReceiptTable + " b," + sTransReceiptTable + " c where a.CustomerID=b.CustomerID and a.ContactTypeID<>1  and c.ReceiptID=b.ReceiptNo and c.Balance <> '0')union(select a.CustomerName,b.BillNo,b.NetAmount as BillAmount,b.Advance as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a," + sSalesTable + " b where a.CustomerID=b.CustomerID and a.ContactTypeID<>1  and b.CustomerID    not in (select CustomerID from " + sReceiptTable + ")group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0) ";
            string sqry = "(select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance from tblCustomer a," + sReceiptTable + " b," + sTransReceiptTable + " c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 group by c.BillNo, a.CustomerName,c.BillAmount having convert(money,c.BillAmount)-sum(c.amount) <>0 )    union    (select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a," + sSalesTable + " b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from " + sReceiptTable + ")    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0)";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet GetAllOutstandingAmount()
        {
            DataSet ds = new DataSet();
            string sqry = "(select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance,'Branch1' as Branch from tblCustomer a,tblReceipt_CO1 b,tblTransReceipt_CO1 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 group by c.BillNo, a.CustomerName,c.BillAmount )  union(select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance ,'Branch1' as Branch from tblCustomer a,tblsales_CO1 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from tblReceipt_CO1)    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0)         union        (select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance ,'Branch2' as Branch from tblCustomer a,tblReceipt_CO2 b,tblTransReceipt_CO2 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 group by c.BillNo, a.CustomerName,c.BillAmount )           union(select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance ,'Branch3' as Branch from tblCustomer a,tblsales_CO2 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from tblReceipt_CO2)    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0) union    (select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance ,'Branch3' as Branch from tblCustomer a,tblReceipt_CO3 b,tblTransReceipt_CO3 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 group by c.BillNo, a.CustomerName,c.BillAmount ) union (select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance,'Branch3' as Branch from tblCustomer a,tblsales_CO3 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from tblReceipt_CO3)    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0)";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet searchOutstandingAmount(string sFrom, string sTo)
        {
            DataSet ds = new DataSet();
            string sqry = "(select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance from tblCustomer a,tblReceipt_CO1 b,tblTransReceipt_CO1 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 group by c.BillNo, a.CustomerName,c.BillAmount )   union (select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a,tblsales_CO1 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.BillDate between '" + sFrom + "' and '" + sTo + "' and b.CustomerID    not in (select CustomerID from tblReceipt_CO1)    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0)union  (select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance from tblCustomer a,tblReceipt_CO2 b,tblTransReceipt_CO2 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 group by c.BillNo, a.CustomerName,c.BillAmount )     union (select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a,tblsales_CO2 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.BillDate between '" + sFrom + "' and '" + sFrom + "' and b.CustomerID    not in (select CustomerID from tblReceipt_CO2)    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0)      union  (select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance from tblCustomer a,tblReceipt_CO3 b,tblTransReceipt_CO3 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 group by c.BillNo, a.CustomerName,c.BillAmount )     union(select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a,tblsales_CO1 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.BillDate between '" + sFrom + "' and '" + sTo + "' and b.CustomerID    not in (select CustomerID from tblReceipt_CO3)    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0)";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet getAllOutstandingPending()
        {
            DataSet ds = new DataSet();
            string sqry = "(select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance from tblCustomer a,tblReceipt_CO1 b,tblTransReceipt_CO1 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 group by c.BillNo, a.CustomerName,c.BillAmount having convert(money,c.BillAmount)-sum(c.amount) <>0 )    union(select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a,tblsales_CO1 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from tblReceipt_CO1)    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0)       union        (select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance from tblCustomer a,tblReceipt_CO2 b,tblTransReceipt_CO2 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 group by c.BillNo, a.CustomerName,c.BillAmount having convert(money,c.BillAmount)-sum(c.amount) <>0 )    union(select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a,tblsales_CO2 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from tblReceipt_CO2)    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0)     union    (select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance from tblCustomer a,tblReceipt_CO3 b,tblTransReceipt_CO3 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 group by c.BillNo, a.CustomerName,c.BillAmount having convert(money,c.BillAmount)-sum(c.amount) <>0 )    union(select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a,tblsales_CO3 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from tblReceipt_CO3)    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0)";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet getAllOutstandingAmountDetails(int iBillNo)
        {
            DataSet ds = new DataSet();
            string sqry = "(select a.CustomerName,b.BillNo,b.BillDate,c.BillAmount,c.Amount, c.Balance,d.ReceiptNo,d.ReceiptDate,DATEDIFF(day ,convert(datetime  ,b.BillDate, 103),GETDATE() )as PendingDays  from tblCustomer a,tblsales_CO1 b,  tblTransReceipt_CO1 c ,tblReceipt_CO1 d where a.CustomerID=b.CustomerID and a.CustomerID=d.CustomerID and b.BillNo=c.BillNo and c.ReceiptID=d.ReceiptNo and b.BillNo=" + iBillNo + ")union all(select a.CustomerName,b.BillNo,b.BillDate,c.BillAmount,c.Amount, c.Balance,d.ReceiptNo,d.ReceiptDate,DATEDIFF(day ,convert(datetime  ,b.BillDate, 103),GETDATE())as PendingDays from tblCustomer a,tblsales_CO2 b,  tblTransReceipt_CO2 c ,tblReceipt_CO2 d where a.CustomerID=b.CustomerID and a.CustomerID=d.CustomerID and b.BillNo=c.BillNo and c.ReceiptID=d.ReceiptNo and b.BillNo=" + iBillNo + ")union all(select a.CustomerName,b.BillNo,b.BillDate,c.BillAmount,c.Amount, c.Balance,d.ReceiptNo,d.ReceiptDate ,DATEDIFF(day ,convert(datetime  ,b.BillDate, 103),GETDATE() )as PendingDays from tblCustomer a,tblsales_CO3 b,  tblTransReceipt_CO3 c ,tblReceipt_CO3 d where a.CustomerID=b.CustomerID and a.CustomerID=d.CustomerID and b.BillNo=c.BillNo and c.ReceiptID=d.ReceiptNo and b.BillNo=" + iBillNo + ")";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet GetOutstandingAmounts(string sCustomerID, string sTransReceiptTable, string sReceiptTable, string sSalesTable)
        {
            DataSet ds = new DataSet();
            string sqry = "(select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance from tblCustomer a," + sReceiptTable + " b," + sTransReceiptTable + " c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 and b.customerid='" + sCustomerID + "' group by c.BillNo, a.CustomerName,c.BillAmount )    union(select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a," + sSalesTable + " b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from " + sReceiptTable + ") and b.CustomerId='" + sCustomerID + "'    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0) ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet GetOutstandingAmountsPending(string sCustomerID, string sTransReceiptTable, string sReceiptTable, string sSalesTable)
        {
            DataSet ds = new DataSet();
            string sqry = "(select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance from tblCustomer a," + sReceiptTable + " b," + sTransReceiptTable + " c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 and b.customerid='" + sCustomerID + "' group by c.BillNo, a.CustomerName,c.BillAmount having convert(money,c.BillAmount)-sum(c.amount)<>0)    union(select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a," + sSalesTable + " b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from " + sReceiptTable + ") and b.CustomerId='" + sCustomerID + "'    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0) ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet AdminOutstandingAmount(string sCustomerID)
        {
            DataSet ds = new DataSet();
            string sqry = "(select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance,'Branch1' from tblCustomer a,tblReceipt_CO1 b,tblTransReceipt_CO1 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 and b.customerid='" + sCustomerID + "' group by c.BillNo, a.CustomerName,c.BillAmount )    union(select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a,tblsales_CO1 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from tblReceipt_CO1) and b.CustomerId='" + sCustomerID + "'    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0)       union    (select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance from tblCustomer a,tblReceipt_CO2 b,tblTransReceipt_CO2 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 and b.CustomerId='" + sCustomerID + "' group by c.BillNo, a.CustomerName,c.BillAmount )    union(select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a,tblsales_CO2 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from tblReceipt_CO2) and b.CustomerId='" + sCustomerID + "'    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0)     union    (select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance from tblCustomer a,tblReceipt_CO3 b,tblTransReceipt_CO3 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 and b.CustomerId='" + sCustomerID + "' group by c.BillNo, a.CustomerName,c.BillAmount )    union(select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a,tblsales_CO1 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from tblReceipt_CO3)  and b.CustomerId='" + sCustomerID + "'    group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0) ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet AdminOutstandingAmountPending(string sCustomerID)
        {
            DataSet ds = new DataSet();
            string sqry = "(select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance from tblCustomer a,tblReceipt_CO1 b,tblTransReceipt_CO1 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 and b.customerid='" + sCustomerID + "'group by c.BillNo, a.CustomerName,c.BillAmount having convert(money,c.BillAmount)-sum(c.amount)<>0)    union(select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a,tblSales_CO1 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from tblReceipt_CO1) and b.CustomerId='" + sCustomerID + "'   group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0) union all(select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance from tblCustomer a,tblReceipt_CO2 b,tblTransReceipt_CO2 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 and b.customerid='" + sCustomerID + "'group by c.BillNo, a.CustomerName,c.BillAmount having convert(money,c.BillAmount)-sum(c.amount)<>0)    union(select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a,tblsales_CO2 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from tblReceipt_CO2) and b.CustomerId='" + sCustomerID + "'   group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0) union all(select distinct a.CustomerName,c.BillNo, convert(money,c.BillAmount) as BillAmount,   sum(c.Amount) as PaidAmount, convert(money,c.BillAmount)-sum(c.amount) as Balance from tblCustomer a,tblReceipt_CO3 b,tblTransReceipt_CO3 c where a.CustomerID=  b.CustomerID and c.ReceiptID=b.ReceiptNo  and a.ContactTypeID<>1 and b.customerid='" + sCustomerID + "'group by c.BillNo, a.CustomerName,c.BillAmount having convert(money,c.BillAmount)-sum(c.amount)<>0)    union(select distinct a.CustomerName,b.BillNo,b.NetAmount   as BillAmount,sum(b.Advance )as PaidAmount,(b.NetAmount-b.Advance)as Balance from tblCustomer a,tblsales_CO3 b where    a.CustomerID=b.CustomerID  and a.ContactTypeID<>1 and b.CustomerID    not in (select CustomerID from tblReceipt_CO3) and b.CustomerId='" + sCustomerID + "'   group by b.BillNo,b.Advance,b.NetAmount,a.CustomerName having (b.NetAmount-b.Advance)>0) ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet DealerOutstanding(string sCustomerID)
        {
            DataSet ds = new DataSet();
            string sqry = "select SUM(a.amount) as PaidAmount,c.CustomerName,a.BillAmount,a.BIllNo,(a.BillAmount-SUM(a.Amount)) as PendingAmount from  tblTransReceipt_dealer a,tblReceipt_dealer b,tblCustomer c where a.ReceiptID=b.ReceiptID  and b.CustomerID=c.CustomerID and c.customerid='" + sCustomerID + "' group by a.BillNo ,a.BillAmount, c.customername ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet BranchOutstanding(string sCustomerID)
        {
            DataSet ds = new DataSet();
            string sqry = "select SUM(a.amount) as PaidAmount,c.CustomerName,a.BillAmount,a.BIllNo,(a.BillAmount-SUM(a.Amount)) as PendingAmount from  tblTransReceipt_branch a,tblReceipt_branch b,tblCustomer c where a.ReceiptID=b.ReceiptID  and b.CustomerID=c.CustomerID and c.customerid='" + sCustomerID + "' group by a.BillNo ,a.BillAmount, c.customername ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #region Insert PO Values
        public int InsertPODet(int po_id, string ItemName, string POQty, string Rate, string Disc, string Discamt, string amt)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltransPO(po_id, ItemName,  Qty,  Rate,  Disc,  Discamt,Amount) values ('" + po_id + "',N'" + ItemName + "','" + POQty + "','" + Rate + "','" + Disc + "','" + Discamt + "','" + amt + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }
        #endregion

        #region Insert PO Address Tin No
        public int InsertPOdatas(string CompanyName, string Address, string TinNo, string PoDate, int TotalAmount, int pono)
        {
            int iSuccess = 0;
            string sQry = "insert into tblPO(CompanyName,  Address,  TinNo,  PoDate,  TotalAmount,pono) values ('" + CompanyName + "','" + Address + "','" + TinNo + "','" + PoDate + "','" + TotalAmount + "','" + pono + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }
        #endregion
        #region select PO_ID
        public DataSet POId()
        {
            DataSet ds = new DataSet();
            string sqry = "select (MAX(pono)+1)as pono from tblPO";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #region PO No

        public DataSet pono()
        {

            DataSet ds = new DataSet();
            string sQry = "select (MAX(pono)+1) as pono from tblpo";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        #endregion
        #region Query for select Registration details
        public DataSet selectregformdet(int iUserId)
        {
            DataSet ds = new DataSet();
            string sqry = "  select top 1 * from tbllogin where UserID='" + iUserId + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        #endregion


        #region Query for get PO Details from two tables
        public DataSet GetPODet()
        {
            DataSet ds = new DataSet();
            string sqry = "select *   from tblpo a, tbltranspo b where b.PO_Id=a.pono order by b.PO_Id desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        #endregion

        #region Query for get PO Details from two tables
        public DataSet GetPOUpdateQry(string iPONo)
        {
            DataSet ds = new DataSet();
            string sqry = "select *   from tblPurchase where Bill_NO='" + iPONo + "' order by P_ID desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GetPODetUpdateQry(string iPONo)
        {
            DataSet ds = new DataSet();
            string sqry = "select *   from tbltranspo where PO_ID='" + iPONo + "' order by PO_ID desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        #endregion

        public DataSet CustomerSearch(string iCompName)
        {
            DataSet ds = new DataSet();
            string sqry = "select *   from tblpo a, tbltranspo b where b.PO_Id=a.pono  and a.CompanyName like  '%" + iCompName + "%' order by b.PO_Id desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet CustomerReport(int iContact)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCustomer a,tblContactType b where a.ContactTypeID=b.ContactID and b.ContactID='" + iContact + "'  order by a.CustomerName desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet contactType()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblContactType";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet MinStock()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.stockid,b.category,c.Definition,a.Quantity,round(a.UnitPrice,2) as UnitPrice,a.Available_QTY,a.MinQty from tblStock a,tblcategory b,tblCategoryUser c where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID and Available_QTY<MinQty";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet iCustomerName(int iCustName, int iUserid)
        {
            DataSet ds = new DataSet();
            string sqry = "select CustomerName from tblCustomer where CustomerID='" + iCustName + "' and UserId='" + iUserid + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetAddress(int iCustID)
        {
            DataSet ds = new DataSet();
            string sqry = "select Address +', '+Area+', '+City+' - '+Pincode as [Address]   from tblCustomer where CustomerID='" + iCustID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #region Stock grid colour


        public DataSet checkPurchaseRate(int iSubcatID, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblStock_" + stable + "  where SubCategoryID='" + iSubcatID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet checkCheckBoxCondition(int iSubcatID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCategoryUser  where CategoryUserID='" + iSubcatID + "' and isChecked=1";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion
        #region Support

        public DataSet checkmailID(int IUserID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbllogin where UserID='" + IUserID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet Lastsess(string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select top 1 * from tblsession_" + stable + " order by sessionid desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int InsertSupport(string Email, string mes)
        {
            int isucess = 0;
            string sqry = "insert into  tblSupport ([From],Message) values('" + Email + "','" + mes + "')";
            isucess = dbObj.InlineExecuteNonQuery(sqry);
            return isucess;
        }

        #endregion

        #region Stock transfer
        public DataSet GetMaxstockID()
        {
            DataSet ds = new DataSet();
            string sqry = "select MAX (StockID)+1 as StockID from tblStock";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int InsertDealerStock(int Isuperstockid, int CategoryID, int UserID, int SubCategoryID, int Quantity, double UnitPrice, int Available_QTY, int MinQty)
        {

            int isucess = 0;
            string sqty = "insert into tblStock_dealer(stockid,CategoryID,UserID,SubCategoryID,Quantity,UnitPrice,Available_QTY,MinQty)values('" + Isuperstockid + "','" + CategoryID + "','" + UserID + "','" + SubCategoryID + "','" + Quantity + "','" + UnitPrice + "','" + Available_QTY + "','" + MinQty + "')";
            isucess = dbObj.InlineExecuteNonQuery(sqty);
            return isucess;
        }
        public int InsertRetailerStock(int Isuperstockid, int CategoryID, int UserID, int SubCategoryID, int Quantity, double UnitPrice, int Available_QTY, int MinQty)
        {

            int isucess = 0;
            string sqty = "insert into tblStock_branch(stockid,CategoryID,UserID,SubCategoryID,Quantity,UnitPrice,Available_QTY,MinQty)values('" + Isuperstockid + "','" + CategoryID + "','" + UserID + "','" + SubCategoryID + "','" + Quantity + "','" + UnitPrice + "','" + Available_QTY + "','" + MinQty + "')";
            isucess = dbObj.InlineExecuteNonQuery(sqty);
            return isucess;
        }
        //public int UpdateStockAfterTransfer(int Istockid, int IAvlQty)
        //{
        //    int isucess = 0;
        //    string sqry = "update tblStock set Available_QTY='" + Istockid + "' where StockID='" + IAvlQty + "'";
        //    isucess = dbObj.InlineExecuteNonQuery(sqry);
        //    return isucess;
        //}

        //public DataSet TransferStockDetails(int iSubCatID)
        //{
        //    DataSet ds = new DataSet();
        //    string sQry = "select * from tblStock where SubCategoryID=" + iSubCatID + "";
        //    ds = dbObj.InlineExecuteDataSet(sQry);
        //    return ds;
        //}

        //public DataSet StockTransferGrid()
        //{
        //    DataSet ds = new DataSet();
        //    string sqry = "(select a.stockid,b.category,c.Definition,a.Quantity,a.UnitPrice,a.Available_QTY from tblStock  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID  ) ";
        //    ds = dbObj.InlineExecuteDataSet(sqry);
        //    return ds;

        //}
        #endregion

        #region Dealer Order
        public int InsertOrder(int CategoryID, int SubCategoryID, int Quantity, double UnitPrice, int Dealer, string sDealername, int iDeliver, string sDate)
        {
            int iorder = 0;
            string sqry = "insert into tblDealerOrder (CategoryID,SubCategoryID,Quantity,UnitPrice,DealerID,DealerName,Isdelivered,Date)values('" + CategoryID + "','" + SubCategoryID + "','" + Quantity + "','" + UnitPrice + "','" + Dealer + "','" + sDealername + "','" + iDeliver + "','" + sDate + "')";
            iorder = dbObj.InlineExecuteNonQuery(sqry);
            return iorder;
        }

        public DataSet stockTransfer(int DealerID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblDealerOrder where DealerID='" + DealerID + "' and IsDelivered=0";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public int UpdateDealerStock(int DealerID, int iSub, string sBillNo, string sBillDate)
        {
            int Iupdate = 0;
            string sqry = "update tblDealerOrder set Isdelivered = 1,BillNo='" + sBillNo + "',BillDate='" + sBillDate + "' where DealerID='" + DealerID + "' and SubCategoryID='" + iSub + "'";
            Iupdate = dbObj.InlineExecuteNonQuery(sqry);
            return Iupdate;
        }
        public DataSet GetDealerID(string sMobile)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCustomer where MobileNo='" + sMobile + "'and ContactTypeID=2";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        #endregion

        public DataSet CustomerBillReport(string sTableName)
        {
            DataSet ds = new DataSet();
            //string sqry = "select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_" + sTableName + " a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1";
            string sQuery = " select  b.CustomerName,a.BillNo,c.BillDate,a.TotalAmount as BillAmount,SUM(a.BillAmount)as PaidAmount,a.TotalAmount-SUM(billamount) as Balance,DATEDIFF(day ,convert(datetime  ,c.BillDate, 103),GETDATE() )as PendingDays from tbl_CustomerReceipt a,tblCustomer b,tblsales_" + sTableName + " c  where a.CustomerID=b.CustomerID  and a.BillNo=c.BillNo and b.CustomerID=c.CustomerID  group by b.CustomerName,a.BillNo,totalamount ,c.BillDate";

            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }
        public DataSet CustomerBillReportSearch(string sTableName, string sFrm, string sTo)
        {
            DataSet ds = new DataSet();
            string sqry = "select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_" + sTableName + " a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1 and a.BillDate between '" + sFrm + "' and '" + sTo + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet AdminCustomerBillReport()
        {
            DataSet ds = new DataSet();
            string sQuery = "(select  b.CustomerName,a.BillNo,c.BillDate,a.TotalAmount as BillAmount,SUM(a.BillAmount)as PaidAmount,a.TotalAmount-SUM(billamount) as Balance,DATEDIFF(day ,convert(datetime  ,c.BillDate, 103),GETDATE() )as PendingDays from tbl_CustomerReceipt a,tblCustomer b,tblsales_CO1 c  where a.CustomerID=b.CustomerID  and a.BillNo=c.BillNo and b.CustomerID=c.CustomerID  group by b.CustomerName,a.BillNo,totalamount ,c.BillDate)union all(select  b.CustomerName,a.BillNo,c.BillDate,a.TotalAmount as BillAmount,SUM(a.BillAmount)as PaidAmount,a.TotalAmount-SUM(billamount) as Balance,DATEDIFF(day ,convert(datetime  ,c.BillDate, 103),GETDATE() )as PendingDays from tbl_CustomerReceipt a,tblCustomer b,tblsales_CO2 c  where a.CustomerID=b.CustomerID  and a.BillNo=c.BillNo and b.CustomerID=c.CustomerID  group by b.CustomerName,a.BillNo,totalamount ,c.BillDate)union all(select  b.CustomerName,a.BillNo,c.BillDate,a.TotalAmount as BillAmount,SUM(a.BillAmount)as PaidAmount,a.TotalAmount-SUM(billamount) as Balance,DATEDIFF(day ,convert(datetime  ,c.BillDate, 103),GETDATE() )as PendingDays from tbl_CustomerReceipt a,tblCustomer b,tblsales_CO3 c  where a.CustomerID=b.CustomerID  and a.BillNo=c.BillNo and b.CustomerID=c.CustomerID  group by b.CustomerName,a.BillNo,totalamount ,c.BillDate) ";

            //            string sqry = "(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO1 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1)union(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO2 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1)union(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO3 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1)";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }
        public DataSet getbranch1BillReportsearch(string sFrm, string sTo)
        {
            DataSet ds = new DataSet();
            string sqry = "select  CustomerName,BillNo,totalamount as BillAmount,SUM(billamount)as PaidAmount,a.TotalAmount-SUM(billamount) as Balance from tbl_CustomerReceipt a,tblCustomer b  where a.CustomerID=b.CustomerID and a.ReceiptDate between '" + sFrm + "' and '" + sTo + "' and a.UserID=5  group by b.CustomerName,a.BillNo,totalamount  ";
            //  string sqry = "(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO1 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1 and a.BillDate between '" + sFrm + "' and '" + sTo + "')union(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO2 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1 and a.BillDate between '" + sFrm + "' and '" + sTo + "')union(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO3 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1 and a.BillDate between '" + sFrm + "' and '" + sTo + "')";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet getbranch2BillReportsearch(string sFrm, string sTo)
        {
            DataSet ds = new DataSet();
            string sqry = "select  CustomerName,BillNo,totalamount as BillAmount,SUM(billamount)as PaidAmount,a.TotalAmount-SUM(billamount) as Balance from tbl_CustomerReceipt a,tblCustomer b  where a.CustomerID=b.CustomerID and a.ReceiptDate between '" + sFrm + "' and '" + sTo + "' and a.UserID=6  group by b.CustomerName,a.BillNo,totalamount  ";
            //  string sqry = "(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO1 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1 and a.BillDate between '" + sFrm + "' and '" + sTo + "')union(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO2 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1 and a.BillDate between '" + sFrm + "' and '" + sTo + "')union(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO3 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1 and a.BillDate between '" + sFrm + "' and '" + sTo + "')";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet getbranch3BillReportsearch(string sFrm, string sTo)
        {
            DataSet ds = new DataSet();
            string sqry = "select  CustomerName,BillNo,totalamount as BillAmount,SUM(billamount)as PaidAmount,a.TotalAmount-SUM(billamount) as Balance from tbl_CustomerReceipt a,tblCustomer b  where a.CustomerID=b.CustomerID and a.ReceiptDate between '" + sFrm + "' and '" + sTo + "' and a.UserID=7  group by b.CustomerName,a.BillNo,totalamount  ";
            //  string sqry = "(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO1 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1 and a.BillDate between '" + sFrm + "' and '" + sTo + "')union(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO2 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1 and a.BillDate between '" + sFrm + "' and '" + sTo + "')union(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO3 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1 and a.BillDate between '" + sFrm + "' and '" + sTo + "')";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet getcustPendingDet(int iBillNo)
        {
            DataSet ds = new DataSet();
            string sqry = "(select distinct a.UserID, b.CustomerName,a.BillNo,c.BillDate,a.ReceiptDate, SUM(a.BillAmount)as PaidAmount,sum (TotalAmount )as BillAmount,DATEDIFF(day ,convert(datetime  ,c.BillDate, 103),GETDATE() )as PendingDays from tbl_CustomerReceipt a,tblCustomer b,tblsales_CO1 c where a.CustomerID=b.CustomerID and a.BillNo=c.BillNo and a.UserID=c.UserID and a.BillNo=" + iBillNo + " group by a.BillNo,(a.TotalAmount),a.BalanceAmount,b.CustomerName,a.ReceiptDate,a.UserID,c.BillDate )union all(select distinct a.UserID, b.CustomerName,a.BillNo,c.BillDate,a.ReceiptDate, SUM(a.BillAmount)as PaidAmount,sum (TotalAmount )as BillAmount ,DATEDIFF(day ,convert(datetime  ,c.BillDate, 103),GETDATE() )as PendingDays from tbl_CustomerReceipt a,tblCustomer b,tblsales_CO2 c where a.CustomerID=b.CustomerID and a.BillNo=c.BillNo and a.UserID=c.UserID and a.BillNo=" + iBillNo + " group by a.BillNo,(a.TotalAmount),a.BalanceAmount,b.CustomerName,a.ReceiptDate,a.UserID,c.BillDate )union all(select distinct a.UserID, b.CustomerName,a.BillNo,c.BillDate,a.ReceiptDate, SUM(a.BillAmount)as PaidAmount,sum (TotalAmount )as BillAmount,DATEDIFF(day ,convert(datetime  ,c.BillDate, 103),GETDATE() )as PendingDays from tbl_CustomerReceipt a,tblCustomer b,tblsales_CO3 c where a.CustomerID=b.CustomerID and a.BillNo=c.BillNo and a.UserID=c.UserID and a.BillNo=" + iBillNo + " group by a.BillNo,(a.TotalAmount),a.BalanceAmount,b.CustomerName,a.ReceiptDate,a.UserID ,c.BillDate) ";
            //  string sqry = "(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO1 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1 and a.BillDate between '" + sFrm + "' and '" + sTo + "')union(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO2 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1 and a.BillDate between '" + sFrm + "' and '" + sTo + "')union(select BillNo,BillDate,b.CustomerName,a.NetAmount,a.Advance from tblsales_CO3 a,tblCustomer b where a.CustomerID=b.CustomerID and b.ContactTypeID=1 and a.BillDate between '" + sFrm + "' and '" + sTo + "')";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #region Auto Search Text Bind
        public DataSet BingCategory(string cat)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblcategory where category like '%" + cat + "%'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #region Get PurchaseBy
        public DataSet GetPurchaseBy(string sBill_No)
        {
            DataSet ds = new DataSet();
            string sQuery = "  select * from tblPurchase a,tblCustomer b where a.VendorID=b.CustomerID and a.Bill_NO='" + sBill_No + "'";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }
        #endregion


        #region Get PurchaseGrid
        public DataSet GetPurchaseGridd(string sP_Id)
        {
            DataSet ds = new DataSet();
            string sQuery = "select a.TransP_Id,a.P_Id,b.category,c.Definition,c.Serial_No,a.Qty,a.Rate,a.Units,a.Dicount,a.Tax,a.Amount from tblTransPurchase a,tblcategory b,tblCategoryUser c where a.CategoryId=b.categoryid and a.DescriptionId=c.CategoryUserID and a.P_Id='" + sP_Id + "'";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }
        #endregion

        #region selectItem1
        public DataSet selectItem1(string sDefId)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategoryuser a,tblcategory b where a.CategoryID=b.categoryid and a.Definition='" + sDefId + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion


        #region select category master Description
        public DataSet selectcategoryallSerial_No(string sSerial_No)
        {
            DataSet ds = new DataSet();
            string sQry = "  select * from tblcategoryuser where Serial_No='" + sSerial_No + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        public DataSet GetTop10Customer(string stblname)
        {
            DataSet ds = new DataSet();
            string sQuery = "select top 10  b.CustomerName,b.MobileNo,SUM(a.netamount) as Amount from tblsales_" + stblname + "  a,tblCustomer b where a.CustomerID=b.CustomerID and A.ContactTypeID=1 group by b.CustomerName,b.MobileNo order by Amount desc";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }

        #region Get Top10 Dealer
        public DataSet GetTop10Dealer(string stblname)
        {
            DataSet ds = new DataSet();
            string sQuery = "select top 10  b.CustomerName,b.MobileNo,SUM(a.netamount) as Amount from tblsales_" + stblname + "  a,tblCustomer b where a.CustomerID=b.CustomerID and A.ContactTypeID=2 group by b.CustomerName,b.MobileNo order by Amount desc";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }
        #endregion
        #region Get Top10 Press
        public DataSet GetTop10Press(string stblname)
        {
            DataSet ds = new DataSet();
            string sQuery = "select top 10  b.CustomerName,b.MobileNo,SUM(a.netamount) as Amount from tblsales_" + stblname + "  a,tblCustomer b where a.CustomerID=b.CustomerID and A.ContactTypeID=3 group by b.CustomerName,b.MobileNo order by Amount desc";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }
        #endregion
        public DataSet getiCategoryv(string sCategory)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblcategory where category='" + sCategory + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet getVendors()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCustomer where ContactTypeID=3";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet getDealerNAme(int iDealerID)
        {
            DataSet ds = new DataSet();
            string sqry = " select * from tblDealerOrder a,tblCustomer b where a.DealerID=b.CustomerID and a.DealerID='" + iDealerID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet getAlert()
        {
            DataSet ds = new DataSet();
            string sqry = " select * from tblDealerOrder where Isdelivered=0 ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #region Customer Sales Report
        //public DataSet CustomerSalesBranch(string sBranch)
        //{
        //    DataSet ds = new DataSet();
        //    string sqry = "(select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
        //    ds = dbObj.InlineExecuteDataSet(sqry);
        //    return ds;
        //}



        public DataSet CustomerSalesAdmin()
        {
            DataSet ds = new DataSet();
            // string sqry = "(select 'KK nagar' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO1 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 ) union all(select 'ByePass' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO2 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) union all(select 'BB Kulam' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO3 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) union all(select 'NarayanaPuram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
            string sqry = "select 'KK nagar' as Branch,'Sales' as type,case a.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' " +
"when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO1 a,tblCustomer b " +
"where a.CustomerID=b.CustomerID and a.ContactTypeID=1  union all select 'ByePass' as Branch,'Sales' as type,case a.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' " +
"when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType, b.CustomerName,a.BillNo," +
"a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO2 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 union all select 'BB Kulam' as Branch,'Sales' as type,case a.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' " +
"when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO3 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 union all select 'NarayanaPuram' as Branch,'Sales' as type,case a.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 order by Branch desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet CustomerSales(string sBranch)
        {
            DataSet ds = new DataSet();
            string sqry = "(select 'Store' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.OrderNo=0 union all select 'Store' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,'' as Advance,a.Advance as NetAmount,a.Total from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.OrderNo>0 )  order by a.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet CustomerSalesAdmin1()
        {
            DataSet ds = new DataSet();
            string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.NetAmount from tblsales_CO1 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 ) union all(select 'Branch 2' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO2 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) union all(select 'Branch 3' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO3 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet CustomerSalesAdminSearch(string sCustomerName)
        {
            DataSet ds = new DataSet();
            string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO1 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and b.CustomerName like '%" + sCustomerName + "%' ) union all(select 'Branch 2' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO2 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and b.CustomerName like '%" + sCustomerName + "%') union all(select 'Branch 3' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO3 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and b.CustomerName like '%" + sCustomerName + "%') order by a.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet SearchCustomerSalesAdmin(string sBranch, string sCustomerName)
        {
            DataSet ds = new DataSet();
            string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and b.CustomerName like '%" + sCustomerName + "%')order by a.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #region Dealer Sales Report
        public DataSet DealerSalesBranch(string sBranch)
        {
            DataSet ds = new DataSet();
            string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=2) order by a.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }



        public DataSet DealerSalesAdmin()
        {
            DataSet ds = new DataSet();
            string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO1 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=2 ) union all(select 'Branch 2' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO2 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=2) union all(select 'Branch 3' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO3 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=2) order by a.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet DealerSalesSearch(string sCustomerName)
        {
            DataSet ds = new DataSet();
            string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO1 a,tblCustomer b where a.CustomerID=b.CustomerID and b.Customername like '%" + sCustomerName + "%' and a.ContactTypeID=2 ) union all(select 'Branch 2' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO2 a,tblCustomer b where a.CustomerID=b.CustomerID and b.Customername like '%" + sCustomerName + "%' and  a.ContactTypeID=2) union all(select 'Branch 3' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO3 a,tblCustomer b where a.CustomerID=b.CustomerID and b.Customername like '%" + sCustomerName + "%' and a.ContactTypeID=2) order by a.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet SearchDealerSalesAdmin(string sBranch, string sCustomerName)
        {
            DataSet ds = new DataSet();
            string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=2 and b.CustomerName like '%" + sCustomerName + "%')order by a.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #region Press Sales Report
        public DataSet PressSalesBranch(string sBranch)
        {
            DataSet ds = new DataSet();
            string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=3) order by a.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }



        public DataSet PressSalesAdmin()
        {
            DataSet ds = new DataSet();
            string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO1 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=3 ) union all(select 'Branch 2' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO2 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=3) union all(select 'Branch 3' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO3 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=3) order by a.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;


        }
        public DataSet PressSalesAdminSearch(string sCustomerName)
        {
            DataSet ds = new DataSet();
            string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO1 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=3 and b.Customername like '" + sCustomerName + "' ) union all(select 'Branch 2' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO2 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=3 and b.Customername like '" + sCustomerName + "') union all(select 'Branch 3' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO3 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=3 and b.Customername like '" + sCustomerName + "') order by a.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet SearchPressSalesAdmin(string sBranch, string sCustomerName)
        {
            DataSet ds = new DataSet();
            string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=3 and b.CustomerName like '%" + sCustomerName + "%')order by a.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #region Purchase payment
        public DataSet PurchasePayment(int iCustomerID)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct a.Bill_NO,a.Bill_date,c.CustomerName,a.TotalAmount,SUM(CONVERT(money,b.PayingAmount)) as PaidAmount,(a.TotalAmount-SUM(CONVERT(money,b.PayingAmount))) as Balance from tblPurchase a,tbl_purchasePayment b ,tblCustomer c where a.Bill_NO=b.BillNo  and a.VendorID=c.CustomerID and a.VendorID=" + iCustomerID + " group by a.Bill_NO,a.TotalAmount,c.CustomerName,a.Bill_date  having (a.TotalAmount-SUM(CONVERT(money,b.PayingAmount))) >0 union all(select distinct a.Bill_NO,a.Bill_date,b.CustomerName,a.TotalAmount,'0' as PaidAmount,(a.TotalAmount) as Balance  from tblPurchase a,tblCustomer b where a.VendorID=b.CustomerID  and a.VendorID=" + iCustomerID + " and Bill_NO not in (select BillNO from tbl_purchasePayment) )order by a.Bill_NO desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet PurchasePaymentAdmin()
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct a.Bill_NO,a.Bill_date,c.CustomerName,a.TotalAmount,SUM(CONVERT(money,b.PayingAmount)) as PaidAmount,(a.TotalAmount-SUM(CONVERT(money,b.PayingAmount))) as Balance from tblPurchase a,tbl_purchasePayment b ,tblCustomer c where a.Bill_NO=b.BillNo  and a.VendorID=c.CustomerID  group by a.Bill_NO,a.TotalAmount,c.CustomerName,a.Bill_date  union all(select distinct a.Bill_NO,a.Bill_date,b.CustomerName,a.TotalAmount,'0' as PaidAmount,(a.TotalAmount) as Balance  from tblPurchase a,tblCustomer b where a.VendorID=b.CustomerID   and Bill_NO not in (select BillNO from tbl_purchasePayment) )order by a.Bill_NO desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet PurchasePaymentAdminsearch(string scustomername)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct a.Bill_NO,a.Bill_date,c.CustomerName,a.TotalAmount,SUM(CONVERT(money,b.PayingAmount)) as PaidAmount,(a.TotalAmount-SUM(CONVERT(money,b.PayingAmount))) as Balance from tblPurchase a,tbl_purchasePayment b ,tblCustomer c where a.Bill_NO=b.BillNo  and a.VendorID=c.CustomerID  and c.customername like '%" + scustomername + "%' group by a.Bill_NO,a.TotalAmount,c.CustomerName,a.Bill_date  union all(select distinct a.Bill_NO,a.Bill_date,b.CustomerName,a.TotalAmount,'0' as PaidAmount,(a.TotalAmount) as Balance  from tblPurchase a,tblCustomer b where a.VendorID=b.CustomerID and b.customername like '%" + scustomername + "%'  and Bill_NO not in (select BillNO from tbl_purchasePayment) )order by a.Bill_NO desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet PurchaseEntry(string iBillNo)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct BillNo,c.CustomerName,a.TotalAmount,sum(convert(money,b.PayingAmount))as PaidAmount,a.VendorID,a.TotalAmount-sum(convert(money,b.PayingAmount)) as Balance from tblPurchase a,tbl_purchasePayment b,tblCustomer c where a.VendorID=b.VendorID and a.Bill_NO=b.BillNo and c.CustomerID=b.VendorID and c.CustomerID=a.VendorID and a.Bill_NO ='" + iBillNo + "' group by b.BillNo,a.TotalAmount,a.VendorID,c.Customername ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet NewPurchaseEntry(string iBillNo)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblPurchase a, tblCustomer b where a.VendorID=b.CustomerID  and a.Bill_NO ='" + iBillNo + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet VendorList()
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct b.Customername,a.VendorID from tblPurchase a, tblCustomer b where a.VendorID=b.CustomerID  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int InsertPurchasepayment(string EntryDate, int VendorID, string PaymentMode, string BankName, string ReferenceNo, string BillNo, decimal BillAmount, decimal PayingAmount)
        {
            int isave = 0;
            string sqry = "insert into tbl_purchasePayment (EntryDate,VendorID,PaymentMode,BankName,ReferenceNo,BillNo,BillAmount,PayingAmount) values('" + EntryDate + "','" + VendorID + "','" + PaymentMode + "','" + BankName + "','" + ReferenceNo + "','" + BillNo + "','" + BillAmount + "','" + PayingAmount + "')";
            isave = dbObj.InlineExecuteNonQuery(sqry);
            return isave;
        }

        public DataSet PaidPurchaseBills()
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct BillNo as Bill_NO,a.Bill_date,c.CustomerName,a.TotalAmount,sum(convert(money,b.PayingAmount))as PaidAmount,a.VendorID,a.TotalAmount-sum(convert(money,b.PayingAmount)) as Balance from tblPurchase a,tbl_purchasePayment b,tblCustomer c where a.VendorID=b.VendorID and a.Bill_NO=b.BillNo and c.CustomerID=b.VendorID and c.CustomerID=a.VendorID  group by b.BillNo,a.TotalAmount,a.VendorID,c.Customername,a.Bill_date having a.TotalAmount-sum(convert(money,b.PayingAmount)) = 0  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet PendingPurchaseBills()
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct a.Bill_NO,a.Bill_date,c.CustomerName,a.TotalAmount,SUM(CONVERT(money,b.PayingAmount)) as PaidAmount,(a.TotalAmount-SUM(CONVERT(money,b.PayingAmount))) as Balance from tblPurchase a,tbl_purchasePayment b ,tblCustomer c where a.Bill_NO=b.BillNo  and a.VendorID=c.CustomerID group by a.Bill_NO,a.TotalAmount,c.CustomerName,a.Bill_date  having (a.TotalAmount-SUM(CONVERT(money,b.PayingAmount))) >0 union all(select distinct a.Bill_NO,a.Bill_date,b.CustomerName,a.TotalAmount,'0' as PaidAmount,(a.TotalAmount) as Balance  from tblPurchase a,tblCustomer b where a.VendorID=b.CustomerID and Bill_NO not in (select BillNO from tbl_purchasePayment) )order by a.Bill_NO desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #region
        public DataSet stockcolour(string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.stockid,b.category,c.Definition,a.Quantity,a.UnitPrice,a.Available_QTY,a.MinQty from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID and a.Available_QTY <=a.MinQty  order by a.stockid desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet printreport_colour(string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.stockid,b.category,c.Definition,a.Quantity,a.UnitPrice,a.Available_QTY,a.MinQty from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID and a.Available_QTY <=a.MinQty and isChecked=1 order by a.stockid desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet minStock(string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.stockid,b.category,c.Definition,a.Quantity,a.PurchaseRate  as Rate,(a.Available_QTY*a.PurchaseRate) as StockAmount,a.Available_QTY,a.MinQty from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID and a.Available_QTY <=a.MinQty  and a.Available_QTY>0 and isChecked=0 order by a.stockid desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        //public DataSet min_PrintingReport()
        //{
        //    DataSet ds = new DataSet();
        //    string sqry = "select a.stockid,b.category,c.Definition,a.Quantity,a.UnitPrice as Rate,(a.Available_QTY*a.PurchaseRate) as StockAmount,a.Available_QTY,a.MinQty from tblStock  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID and a.Available_QTY =a.MinQty and isChecked=1 order by a.stockid desc";
        //    ds = dbObj.InlineExecuteDataSet(sqry);
        //    return ds;
        //}
        //public DataSet zeroStock()
        //{
        //    DataSet ds = new DataSet();
        //    string sqry = "select a.stockid,b.category,c.Definition,a.Quantity,a.PurchaseRate  as Rate,(a.Available_QTY*a.PurchaseRate) as StockAmount,a.Available_QTY,a.MinQty from tblStock  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID and a.Available_QTY =0 and isChecked=0 order by a.stockid desc";
        //    ds = dbObj.InlineExecuteDataSet(sqry);
        //    return ds;
        //}
        public DataSet zero_PrintingReport(string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.stockid,b.category,c.Definition,a.Quantity,a.UnitPrice as Rate,(a.Available_QTY*a.PurchaseRate) as StockAmount,a.Available_QTY,a.MinQty from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID and a.Available_QTY =0 and isChecked=1 order by a.stockid desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet negativeStock()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.stockid,b.category,c.Definition,a.Quantity,a.PurchaseRate  as Rate,(a.Available_QTY*a.PurchaseRate) as StockAmount,a.Available_QTY,a.MinQty from tblStock  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID and a.Available_QTY <0  order by a.stockid desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet Negative_PrintingReport()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.stockid,b.category,c.Definition,a.Quantity,a.UnitPrice as Rate,(a.Available_QTY*a.PurchaseRate) as StockAmount,a.Available_QTY,a.MinQty from tblStock  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID and a.Available_QTY <0 and isChecked=1 order by a.stockid desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet Price_Master()
        {
            DataSet ds = new DataSet();
            string sqry = "select c.category, b.Definition,b.Tax,b.Serial,b.Serial_No, Quantity,Available_QTY,PurchaseRate,DealerUnitPrice,PressUnitPrice,UnitPrice as [Customer Price] from tblStock a,tblCategoryUser b,tblcategory c where a.SubCategoryID=b.CategoryUserID and a.CategoryID=c.categoryid and b.CategoryID=c.categoryid";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet SearchItem_PriceMaster(string sDefinition)
        {
            DataSet ds = new DataSet();
            string sqry = "select c.category, b.Definition,b.Tax,b.Serial,b.Serial_No, Quantity,Available_QTY,PurchaseRate,DealerUnitPrice,PressUnitPrice,UnitPrice as [Customer Price] from tblStock a,tblCategoryUser b,tblcategory c where a.SubCategoryID=b.CategoryUserID and a.CategoryID=c.categoryid and b.CategoryID=c.categoryid and  b.Definition like '%" + sDefinition + "%'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet Customer_Search(string sSearch)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCustomer  where ContactTypeID= 1 and CustomerName like'%" + sSearch + "%' or MobileNo like'%" + sSearch + "%'   ";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet Dealer_Search(string sSearch)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCustomer  where  ContactTypeID= 2 and CustomerName like '%" + sSearch + "%' or MobileNo like '%" + sSearch + "%'  ";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet Press_Search(string sSearch)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCustomer  where ContactTypeID= 3 and CustomerName like '%" + sSearch + "%' or MobileNo='%" + sSearch + "%'  ";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet Vendor_Search(string sSearch)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCustomer  where ContactTypeID= 4 and  CustomerName like '%" + sSearch + "%' or MobileNo like '%" + sSearch + "%'  ";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getstockdetgrid(string stable, string Categoryid, string logintype)
        {
            DataSet ds = new DataSet();
            //string sQry = "select c.CategoryUserID,b.category,c.Definition,sum(a.Available_QTY) as Available_Qty  from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and c.IsDelete=0 and isd =0 and a.SubCategoryID=c.CategoryUserID and a.Available_QTY>0  group by c.CategoryUserID,b.category,c.Definition   order by c.Definition asc";

            if (Categoryid == "All")
            {

                if (logintype == "5" || logintype == "4")
                {
                    string sQry = "select c.CategoryUserID,b.category,c.Definition,sum(a.prod_Qty) as Available_Qty,c.serial,c.qtytype  from tblProductionQty_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID  and c.IsDelete=0 and a.descriptionid=c.CategoryUserID and a.prod_qty>0 and isnull(b.IsLiveKitchen,0) = 0  group by c.CategoryUserID,b.category,c.Definition,c.serial,c.qtytype   order by c.Definition asc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    //string sQry = "select c.CategoryUserID,b.category,c.Definition,sum(a.Available_QTY) as Available_Qty,c.Serial  from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID  and c.IsDelete=0 and a.SubCategoryID=c.CategoryUserID and a.Available_QTY>0 and isnull(b.IsLiveKitchen,0) = 0  group by c.CategoryUserID,b.category,c.Definition,c.serial   order by cast(c.serial as int) asc";
                    string sQry = "select c.CategoryUserID,b.category,c.Definition,sum(a.Available_QTY) as Available_Qty,c.Serial,c.qtytype  from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID  and c.IsDelete=0 and a.SubCategoryID=c.CategoryUserID and a.Available_QTY>0 and isnull(b.IsLiveKitchen,0) = 0  group by c.CategoryUserID,b.category,c.Definition,c.serial,c.qtytype   order by b.category,c.definition asc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
            }
            else
            {
                if (logintype == "5" || logintype == "4")
                {
                    string sQry = "select c.CategoryUserID,b.category,c.Definition,sum(a.prod_Qty) as Available_Qty,c.serial,c.qtytype  from tblProductionQty_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID  and c.IsDelete=0 and a.descriptionid=c.CategoryUserID and a.prod_qty>0 and c.categoryid='" + Categoryid + "' and isnull(b.IsLiveKitchen,0) = 0  group by c.CategoryUserID,b.category,c.Definition,c.serial,c.qtytype   order by c.Definition asc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select c.CategoryUserID,b.category,c.Definition,sum(a.Available_QTY) as Available_Qty,c.Serial,c.qtytype  from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID  and c.IsDelete=0 and a.SubCategoryID=c.CategoryUserID and a.Available_QTY>0 and c.categoryid='" + Categoryid + "' and isnull(b.IsLiveKitchen,0) = 0  group by c.CategoryUserID,b.category,c.Definition,c.serial,c.qtytype   order by cast(c.serial as int) asc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
            }
            return ds;
        }

        public DataSet getMinstockdetgrid(string stable, string Categoryid, string logintype)
        {
            DataSet ds = new DataSet();
            //string sQry = "select c.CategoryUserID,b.category,c.Definition,sum(a.Available_QTY) as Available_Qty  from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and c.IsDelete=0 and isd =0 and a.SubCategoryID=c.CategoryUserID and a.Available_QTY>0  group by c.CategoryUserID,b.category,c.Definition   order by c.Definition asc";

            if (Categoryid == "All")
            {

                //if (logintype == "5" || logintype == "4")
                //{
                string sQry = "select c.Category,cu.Definition,cu.MinimumStock,s.Available_QTY,(cu.MinimumStock-s.Available_Qty) as Balance,cu.qtytype from tblCategory c inner join tblCategoryUser cu on c.CategoryId=cu.CategoryId inner join tblstock_" + stable + " s on s.SubCategoryId=cu.ItemId where s.Available_QTY<=cu.MinimumStock group by c.category,cu.definition,cu.MinimumStock,s.Available_Qty,cu.qtytype ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                //}
                //else
                //{
                //    //string sQry = "select c.CategoryUserID,b.category,c.Definition,sum(a.Available_QTY) as Available_Qty,c.Serial  from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID  and c.IsDelete=0 and a.SubCategoryID=c.CategoryUserID and a.Available_QTY>0 and isnull(b.IsLiveKitchen,0) = 0  group by c.CategoryUserID,b.category,c.Definition,c.serial   order by cast(c.serial as int) asc";
                //    string sQry = "select c.CategoryUserID,b.category,c.Definition,sum(a.Available_QTY) as Available_Qty,c.Serial,c.qtytype  from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID  and c.IsDelete=0 and a.SubCategoryID=c.CategoryUserID and a.Available_QTY>0 and isnull(b.IsLiveKitchen,0) = 0  group by c.CategoryUserID,b.category,c.Definition,c.serial,c.qtytype   order by b.category,c.definition asc";
                //    ds = dbObj.InlineExecuteDataSet(sQry);
               // }
            }
            else
            {
                //if (logintype == "5" || logintype == "4")
                //{
                string sQry = "select c.Category,cu.Definition,cu.MinimumStock,s.Available_QTY,(cu.MinimumStock-s.Available_Qty) as Balance,cu.qtytype from tblCategory c inner join tblCategoryUser cu on c.CategoryId=cu.CategoryId inner join tblstock_" + stable+" s on s.SubCategoryId=cu.ItemId where c.CategoryId='" + Categoryid + "' and s.Available_QTY<=cu.MinimumStock group by c.category,cu.definition,cu.MinimumStock,s.Available_Qty,cu.qtytype"; 
                ds = dbObj.InlineExecuteDataSet(sQry);
                //}
                //else
                //{
                //    string sQry = "select c.CategoryUserID,b.category,c.Definition,sum(a.Available_QTY) as Available_Qty,c.Serial,c.qtytype  from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID  and c.IsDelete=0 and a.SubCategoryID=c.CategoryUserID and a.Available_QTY>0 and c.categoryid='" + Categoryid + "' and isnull(b.IsLiveKitchen,0) = 0  group by c.CategoryUserID,b.category,c.Definition,c.serial,c.qtytype   order by cast(c.serial as int) asc";
                //    ds = dbObj.InlineExecuteDataSet(sQry);
                //}
            }
            return ds;
        }

        public DataSet getstockdetgrid1(string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "select b.category,c.Definition,a.Available_QTY from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID and a.Available_QTY>0 order by c.Definition asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet getstockdetgrid_dealerPrint(string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.stockid,b.category,c.Definition,a.Quantity,a.UnitPrice,a.Available_QTY,(a.Available_QTY*a.PurchaseRate) as StockAmount,a.PurchaseRate as Rate  from tblStock_" + stable + " a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID and isChecked=1 order by c.Definition asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet getstockdetgrid_Print(string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.stockid,b.category,c.Definition,a.Quantity,a.UnitPrice,a.Available_QTY,a.DealerUnitPrice,a.PressUnitPrice,(a.Available_QTY*a.PurchaseRate) as StockAmount,a.PurchaseRate  as Rate from tblStock_" + stable + "  a,tblcategory b,tblCategoryUser c  where b.categoryid=c.CategoryID and a.CategoryID=b.categoryid and  a.SubCategoryID=c.CategoryUserID and isChecked=1 order by c.Definition asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region Product History
        public DataSet ProductWRstock(string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.CategoryUserID,a.Definition,a.Size,a.Tax,b.Available_QTY,b.PurchaseRate,b.DealerUnitPrice,b.PressUnitPrice,b.UnitPrice from tblCategoryUser a, tblStock_" + stable + " b where a.CategoryUserID=b.SubCategoryID";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet SearchProductWRstock(string sName, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.CategoryUserID,a.Definition,a.Size,a.Tax,b.Available_QTY,b.PurchaseRate,b.DealerUnitPrice,b.PressUnitPrice,b.UnitPrice from tblCategoryUser a, tblStock_" + stable + " b where a.CategoryUserID=b.SubCategoryID and a.Definition like '%" + sName + "%'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet ProductWRPurchase()
        {
            DataSet ds = new DataSet();
            string sQry = "select c.CustomerName, a.Definition,b.Qty, b.Rate,a.Tax,b.Amount from tblCategoryUser a, tblTransPurchase b ,tblCustomer c  where a.CategoryUserID=b.DescriptionId and a.CustomerID=c.CustomerID";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet SearchProductWRPurchase(string sName)
        {
            DataSet ds = new DataSet();
            string sQry = "select c.CustomerName, a.Definition,b.Qty, b.Rate,a.Tax,b.Amount from tblCategoryUser a, tblTransPurchase b ,tblCustomer c  where a.CategoryUserID=b.DescriptionId and a.CustomerID=c.CustomerID and a.Definition like '%" + sName + "%'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet ProductWRSales(string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "(select c.CustomerName,d.BillNo,d.BillDate, a.Definition,b.Quantity, b.UnitPrice,a.Tax,b.Amount from tblCategoryUser a, " +
                " tblTransSales_" + stable + " b ,tblCustomer c,tblsales_" + stable + " d  where a.CategoryUserID=b.SubCategoryID and d.CustomerID=c.CustomerID  and b.SalesID=d.BillNo  ) " +
                //" union all(select c.CustomerName,d.BillNo,d.BillDate, a.Definition,b.Quantity, b.UnitPrice,a.Tax,b.Amount from tblCategoryUser a, tblTransSales_CO2 " +
                //" b ,tblCustomer c,tblsales_CO2 d  where a.CategoryUserID=b.SubCategoryID and d.CustomerID=c.CustomerID  and b.SalesID=d.BillNo  ) " +
                //" union all(select c.CustomerName,d.BillNo,d.BillDate, a.Definition,b.Quantity, b.UnitPrice,a.Tax,b.Amount from tblCategoryUser a, " +
                //" tblTransSales_CO3 b ,tblCustomer c,tblsales_CO3 d  where a.CategoryUserID=b.SubCategoryID and d.CustomerID=c.CustomerID  and b.SalesID=d.BillNo  ) " +
                " order by d.BillNo desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet SearchProductWRSales(string sName, string stable)
        {
            DataSet ds = new DataSet();
            //   string sQry = "(select c.CustomerName,d.BillNo,d.BillDate, a.Definition,b.Quantity, b.UnitPrice,a.Tax,b.Amount from tblCategoryUser a, tblTransSales_CO1 b ,tblCustomer c,tblsales_CO1 d  where a.CategoryUserID=b.SubCategoryID and d.CustomerID=c.CustomerID  and b.SalesID=d.BillNo and a.Definition like'%" + sName + "%'   ) union all(select c.CustomerName,d.BillNo,d.BillDate, a.Definition,b.Quantity, b.UnitPrice,a.Tax,b.Amount from tblCategoryUser a, tblTransSales_CO2 b ,tblCustomer c,tblsales_CO2 d  where a.CategoryUserID=b.SubCategoryID and d.CustomerID=c.CustomerID  and b.SalesID=d.BillNo and a.Definition like'%" + sName + "%'  )union all(select c.CustomerName,d.BillNo,d.BillDate, a.Definition,b.Quantity, b.UnitPrice,a.Tax,b.Amount from tblCategoryUser a, tblTransSales_CO3 b ,tblCustomer c,tblsales_CO3 d  where a.CategoryUserID=b.SubCategoryID and d.CustomerID=c.CustomerID  and b.SalesID=d.BillNo and a.Definition like'%" + sName + "%'  ) order by d.BillNo desc";
            string sQry = "(select c.CustomerName,d.BillNo,d.BillDate, a.Definition,b.Quantity, b.UnitPrice,a.Tax,b.Amount from tblCategoryUser a, " +
               " tblTransSales_" + stable + " b ,tblCustomer c,tblsales_" + stable + " d  where a.CategoryUserID=b.SubCategoryID and d.CustomerID=c.CustomerID  and b.SalesID=d.BillNo and a.Definition like'%" + sName + "%'  ) " +
               //" union all(select c.CustomerName,d.BillNo,d.BillDate, a.Definition,b.Quantity, b.UnitPrice,a.Tax,b.Amount from tblCategoryUser a, tblTransSales_CO2 " +
               //" b ,tblCustomer c,tblsales_CO2 d  where a.CategoryUserID=b.SubCategoryID and d.CustomerID=c.CustomerID  and b.SalesID=d.BillNo  ) " +
               //" union all(select c.CustomerName,d.BillNo,d.BillDate, a.Definition,b.Quantity, b.UnitPrice,a.Tax,b.Amount from tblCategoryUser a, " +
               //" tblTransSales_CO3 b ,tblCustomer c,tblsales_CO3 d  where a.CategoryUserID=b.SubCategoryID and d.CustomerID=c.CustomerID  and b.SalesID=d.BillNo  ) " +
               " order by d.BillNo desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion
        public DataSet EmailID_CompanyDetails(string sEmail, string sMobile)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblCompanyDetails where Email='" + sEmail + "' or MobileNo=" + sMobile + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet EmailID_SubCompanyDetails(string sEmail, string sMobile)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblsubCompanyDetails where Email='" + sEmail + "' or MobileNo=" + sMobile + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public int CompanyDetails(string CompanyName, string MobileNo, string PhoneNo, string Area, string Address, string City, string Pincode, string Email, string GSTNo, string WebSite, string Social, string Imagepath, string Imagepath2, string Imagepath3, string Imagepath4, string Username, string Passwprd, string EmpCode, string NoOfBranch, string BranchType, string Aboutus, string DigitalMenu, string Ecommerce)
        {
            int iSuccess = 0;
            int iSuccess1 = 0;
            int iSuccess2 = 0;

            DataSet dss1 = new DataSet();

            string sQry1 = "insert into tbllogin(username, password, Sales,IsSuperAdmin,BranchCode,StoreName,Address,Place,Imagepath,Status,Rate)values ('" + Username + "','" + Passwprd + "','tblSales_admin','1','Admin','" + CompanyName + "','" + Address + "','" + Area + "','" + Imagepath + "','Web','Rate')";
            iSuccess1 = dbObj.InlineExecuteNonQuery(sQry1);

            string dbqry1 = "select max(UserID) as UserID from tbllogin ";
            dss1 = dbObj.InlineExecuteDataSet(dbqry1);

            int UserID1 = Convert.ToInt32(dss1.Tables[0].Rows[0]["UserID"]);

            string sQry = "insert into tblCompanyDetails(CustomerName, MobileNo, PhoneNo,  Area,Address, City, Pincode, Email,GSTNo,WebSite,Social,Userid,Imagepath,Banner1,Banner2,Banner3,NoOfBranch,Username,Password,EmpCode,BranchType,AboutUs,DigitalMenu,Ecommerce)values ('" + CompanyName + "','" + MobileNo + "','" + PhoneNo + "','" + Area + "','" + Address + "','" + City + "','" + Pincode + "','" + Email + "','" + GSTNo + "','" + WebSite + "','" + Social + "'," + UserID1 + ",'" + Imagepath + "','" + Imagepath2 + "','" + Imagepath3 + "','" + Imagepath4 + "','" + NoOfBranch + "','" + Username + "','" + Passwprd + "','" + EmpCode + "','" + BranchType + "','" + Aboutus + "','" + DigitalMenu + "','" + Ecommerce + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sQry2 = "insert into tblworkers(Name, Role, Location,Code,UserID,LoginType)values ('Admin','Billing','admin','" + EmpCode + "','" + UserID1 + "','2')";
            iSuccess2 = dbObj.InlineExecuteNonQuery(sQry2);

            return iSuccess;
        }

        public int SubCompanyDetails(string CompanyName, string MobileNo, string PhoneNo, string Area, string Address, string City, string Pincode, string Email, string GSTNo, string WebSite, string Social, string Imagepath, string Imagepath2, string Imagepath3, string Imagepath4, string Username, string Passwprd, string EmpCode, string NoOfBranch, string BranchType, string Aboutus, string DigitalMenu, string Ecommerce)
        {
            int iSuccess = 0;
            int iSuccess1 = 0;
            int iSuccess2 = 0;

            DataSet dss1 = new DataSet();

            //string sQry1 = "insert into tbllogin(username, password, Sales,IsSuperAdmin,BranchCode,StoreName,Address,Place,Imagepath,Status,Rate)values ('" + Username + "','" + Passwprd + "','tblSales_admin','1','Admin','" + CompanyName + "','" + Address + "','" + Area + "','" + Imagepath + "','Web','Rate')";
            //iSuccess1 = dbObj.InlineExecuteNonQuery(sQry1);

            //string dbqry1 = "select max(UserID) as UserID from tbllogin ";
            //dss1 = dbObj.InlineExecuteDataSet(dbqry1);

            //int UserID1 = Convert.ToInt32(dss1.Tables[0].Rows[0]["UserID"]);

            string sQry = "insert into tblsubCompanyDetails(CustomerName, MobileNo, PhoneNo,  Area,Address, City, Pincode, Email,GSTNo,WebSite, " +
                " Social,Userid,Imagepath,Banner1,Banner2,Banner3,NoOfBranch,Username,Password,EmpCode,BranchType,AboutUs,DigitalMenu,Ecommerce) " +
                " values ('" + CompanyName + "','" + MobileNo + "','" + PhoneNo + "','" + Area + "','" + Address + "','" + City + "','" + Pincode + "', " +
                " '" + Email + "','" + GSTNo + "','" + WebSite + "','" + Social + "','0','" + Imagepath + "','" + Imagepath2 + "','" + Imagepath3 + "', " +
                " '" + Imagepath4 + "','" + NoOfBranch + "','" + Username + "','" + Passwprd + "','" + EmpCode + "','" + BranchType + "','" + Aboutus + "' " +
                " ,'" + DigitalMenu + "','" + Ecommerce + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            //string sQry2 = "insert into tblworkers(Name, Role, Location,Code,UserID,LoginType)values ('Admin','Billing','admin','" + EmpCode + "','" + UserID1 + "','2')";
            //iSuccess2 = dbObj.InlineExecuteNonQuery(sQry2);

            return iSuccess;
        }

        public int EditCompanyDetails(string CompanyName, string MobileNo, string PhoneNo, string Area, string Address, string City, string Pincode, string Email, string GSTNo, string WebSite, string Social, int CompID, string Imagepath, string Imagepath2, string Imagepath3, string Imagepath4, string Username, string Passwprd, string EmpCode, string NoOfBranch, string BranchType, string Aboutus, string DigitalMenu, string Ecommerce)
        {
            int iSuccess = 0;
            int iSuccess1 = 0;
            int iSuccess2 = 0;

            string sQry = "Update tblCompanyDetails  set CustomerName='" + CompanyName + "', MobileNo='" + MobileNo + "', PhoneNo='" + PhoneNo + "',  Area='" + Area + "',Address='" + Address + "', City='" + City + "', Pincode='" + Pincode + "', Email='" + Email + "', GSTNo='" + GSTNo + "', WebSite='" + WebSite + "', Social='" + Social + "', Imagepath='" + Imagepath + "',Banner1='" + Imagepath2 + "',Banner2='" + Imagepath3 + "',Banner3='" + Imagepath4 + "', NoOfBranch='" + NoOfBranch + "', BranchType='" + BranchType + "', AboutUs='" + Aboutus + "',  DigitalMenu='" + DigitalMenu + "', Ecommerce='" + Ecommerce + "' where userid='" + CompID + "'";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "update tbllogin set username = '" + Username + "', password = '" + Passwprd + "', Sales = 'tblSales_admin',IsSuperAdmin = '1',BranchCode = 'Admin',StoreName = '" + CompanyName + "',Address = '" + Address + "',Place = '" + Area + "',Imagepath = '" + Imagepath + "',Status = 'Web',Rate = 'Rate' where userid=1";
            iSuccess1 = dbObj.InlineExecuteNonQuery(sQry1);

            string sQry2 = "update tblworkers set Code='" + EmpCode + "' where empID=1";
            iSuccess2 = dbObj.InlineExecuteNonQuery(sQry2);

            return iSuccess;
        }

        public int SubEditCompanyDetails(string CompanyName, string MobileNo, string PhoneNo, string Area, string Address, string City, string Pincode, string Email, string GSTNo, string WebSite, string Social, int CompID, string Imagepath, string Imagepath2, string Imagepath3, string Imagepath4, string Username, string Passwprd, string EmpCode, string NoOfBranch, string BranchType, string Aboutus, string DigitalMenu, string Ecommerce,string subcompanyid)
        {
            int iSuccess = 0;
            int iSuccess1 = 0;
            int iSuccess2 = 0;

            string sQry = "Update tblsubCompanyDetails  set CustomerName='" + CompanyName + "', MobileNo='" + MobileNo + "', PhoneNo='" + PhoneNo + "',  Area='" + Area + "',Address='" + Address + "', City='" + City + "', Pincode='" + Pincode + "', Email='" + Email + "', GSTNo='" + GSTNo + "', WebSite='" + WebSite + "', Social='" + Social + "', Imagepath='" + Imagepath + "',Banner1='" + Imagepath2 + "',Banner2='" + Imagepath3 + "',Banner3='" + Imagepath4 + "', NoOfBranch='" + NoOfBranch + "', BranchType='" + BranchType + "', AboutUs='" + Aboutus + "',  DigitalMenu='" + DigitalMenu + "', Ecommerce='" + Ecommerce + "' where subComapanyID='" + subcompanyid + "'";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            return iSuccess;
        }



        #region salessummary
        public DataSet FordebyCategory2(string sTableName, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount,F.Payment_Mode from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date,A.BillDate) between '" + sFmdate + "' and '" + sToDate + "'  union all select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.OrderDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Qty as Quantity,B.Rate as UnitPrice ,(convert(money,B.Qty )*B.Rate) as NetAmount,F.Payment_Mode from tblOrder_" + sTableName + " A,tblTransOrder_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where A.BillNo=b.BillNo  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactID and A.CustomerID=E.CustomerID and convert(date,A.OrderDate) between '" + sFmdate + "' and '" + sToDate + "' order by B.CategoryID";
            ds = dbObj.InlineExecuteDataSet(paygird);
            return ds;
        }
        public DataSet ordebyCategory2(string sTableName, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            //string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount,F.Payment_Mode,( ((B.Amount * c. GST) / 100 ) + B.Amount ) as SalesAmount,C.GST from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date,A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.CategoryID";
            string paygird = "select '" + sTableName + "' as bnch, A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount,F.paymode as Payment_Mode,( ((B.Amount * c. GST) / 100 ) + B.Amount ) as SalesAmount,C.GST from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblsalespaymode F where A.BillNo=b.SalesID and a.salesid=b.salesuniqueid  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.value=a.ipaymode and A.CustomerID=E.CustomerID and convert(date,A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.CategoryID";
            ds = dbObj.InlineExecuteDataSet(paygird);
            return ds;
        }

        public DataSet QtySummary(string sTableName, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            //            string paygird = "select distinct  D.category,C.Definition,sum(B.Quantity) as Qty  from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B, tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where A.BillNo=b.SalesID   and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and  A.CustomerID=E.CustomerID and convert(date,A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO'  group by  D.category,C.Definition order by category";
            string paygird = "select distinct  D.category,C.Definition,sum(B.Quantity) as Qty,'" + sTableName + "' as Branch  from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B, tblCategoryUser C,tblcategory D,tblCustomer E,tblsalespaymode F where A.BillNo=b.SalesID   and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.value=a.ipaymode and  A.CustomerID=E.CustomerID and convert(date,A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO'  group by  D.category,C.Definition order by category";
            ds = dbObj.InlineExecuteDataSet(paygird);
            return ds;
        }

        public DataSet ordebyproduct2(string sTableName, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            //string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount ,F.Payment_Mode,( ((B.Amount * c. GST) / 100 ) + B.Amount ) as SalesAmount,C.GST from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date, A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.SubCategoryID";
            string paygird = "select '" + sTableName + "' as bnch,A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount ,F.paymode  as Payment_Mode,( ((B.Amount * c. GST) / 100 ) + B.Amount ) as SalesAmount,C.GST from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblsalespaymode F where A.BillNo=b.SalesID and a.salesid=b.salesuniqueid and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.value=a.ipaymode and A.CustomerID=E.CustomerID and convert(date, A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.SubCategoryID";
           
            ds = dbObj.InlineExecuteDataSet(paygird);
            return ds;
        }

        public DataSet ordebyexpdate2PurReport(string sTableName, string sFmdate, string sToDate, string Subcompany)
        {
            DataSet ds = new DataSet();
            // string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount ,F.Payment_Mode,( ((B.Amount * c. GST) / 100 ) + B.Amount ) as SalesAmount,C.GST from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date, A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.SubCategoryID";
            if (Subcompany == "All")
            {
                string paygird = "select cm.customername as compname,A.Supplier,B.IngredientID,B.IngredientID,A.BillNo,convert(date,a.BillDate) as BillDate,E.LedgerName as LedgerName,'brand' as BrandName,D.Ingredientname,B.Qty,B.Rate ,(B.Amount) as NetAmount ,F.paymode as Payment_Mode,( B.Amount ) as SalesAmount,B.Tax,b.ExpiryDate from tblkitchenPurchase_" + sTableName + " A,tbltranskitchenPurchase_" + sTableName + " B,tblIngridents D,tblledger E,tblsalespaymode F,tblsubCompanyDetails cm  where A.purchaseID=b.purchaseID  and B.IngredientID=D.ingridid   and f.value=a.Paymode and A.Supplier=E.LedgerID and cm.subComapanyID = a.subcompanyid  and convert(date, A.BillDate)   between '" + sFmdate + "' and '" + sToDate + "'  order by b.ExpiryDate ";
                ds = dbObj.InlineExecuteDataSet(paygird);
            }
            else
            {
                string paygird = "select cm.customername as compname,A.Supplier,B.IngredientID,B.IngredientID,A.BillNo,convert(date,a.BillDate) as BillDate,E.LedgerName as LedgerName,'brand' as BrandName,D.Ingredientname,B.Qty,B.Rate ,(B.Amount) as NetAmount ,F.paymode as Payment_Mode,( B.Amount ) as SalesAmount,B.Tax,b.ExpiryDate from tblkitchenPurchase_" + sTableName + " A,tbltranskitchenPurchase_" + sTableName + " B,tblIngridents D,tblledger E,tblsalespaymode F,tblsubCompanyDetails cm  where A.purchaseID=b.purchaseID  and B.IngredientID=D.ingridid   and f.value=a.Paymode and A.Supplier=E.LedgerID and cm.subComapanyID = a.subcompanyid  and convert(date, A.BillDate)   between '" + sFmdate + "' and '" + sToDate + "' and cm.subComapanyID='" + Subcompany + "' order by b.ExpiryDate ";
                ds = dbObj.InlineExecuteDataSet(paygird);
            }
            return ds;
        }
        public DataSet ordebycompany2PurReport(string sTableName, string sFmdate, string sToDate, string Subcompany)
        {
            DataSet ds = new DataSet();
            // string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount ,F.Payment_Mode,( ((B.Amount * c. GST) / 100 ) + B.Amount ) as SalesAmount,C.GST from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date, A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.SubCategoryID";
            if (Subcompany == "All")
            {
                string paygird = "select cm.customername as compname,cm.subComapanyID,A.Supplier,B.IngredientID,B.IngredientID,A.BillNo,convert(date,a.BillDate) as BillDate,E.LedgerName as LedgerName,'brand' as BrandName,D.Ingredientname,B.Qty,B.Rate ,(B.Amount) as NetAmount ,F.paymode as Payment_Mode,( B.Amount ) as SalesAmount,B.Tax,b.ExpiryDate from tblkitchenPurchase_" + sTableName + " A,tbltranskitchenPurchase_" + sTableName + " B,tblIngridents D,tblledger E,tblsalespaymode F,tblsubCompanyDetails cm  where A.purchaseID=b.purchaseID  and B.IngredientID=D.ingridid   and f.value=a.Paymode and A.Supplier=E.LedgerID and cm.subComapanyID = a.subcompanyid  and convert(date, A.BillDate)   between '" + sFmdate + "' and '" + sToDate + "'  order by cm.customername ";
                ds = dbObj.InlineExecuteDataSet(paygird);
            }
            else
            {
                string paygird = "select cm.customername as compname,cm.subComapanyID,A.Supplier,B.IngredientID,B.IngredientID,A.BillNo,convert(date,a.BillDate) as BillDate,E.LedgerName as LedgerName,'brand' as BrandName,D.Ingredientname,B.Qty,B.Rate ,(B.Amount) as NetAmount ,F.paymode as Payment_Mode,( B.Amount ) as SalesAmount,B.Tax,b.ExpiryDate from tblkitchenPurchase_" + sTableName + " A,tbltranskitchenPurchase_" + sTableName + " B,tblIngridents D,tblledger E,tblsalespaymode F,tblsubCompanyDetails cm  where A.purchaseID=b.purchaseID  and B.IngredientID=D.ingridid   and f.value=a.Paymode and A.Supplier=E.LedgerID and cm.subComapanyID = a.subcompanyid  and convert(date, A.BillDate)   between '" + sFmdate + "' and '" + sToDate + "' and cm.subComapanyID='" + Subcompany + "' order by cm.customername ";
                ds = dbObj.InlineExecuteDataSet(paygird);
            }
            return ds;
        }

        public DataSet ordebysupplier2PurReport(string sTableName, string sFmdate, string sToDate, string Subcompany)
        {
            DataSet ds = new DataSet();
            // string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount ,F.Payment_Mode,( ((B.Amount * c. GST) / 100 ) + B.Amount ) as SalesAmount,C.GST from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date, A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.SubCategoryID";
            if (Subcompany == "All")
            {
                string paygird = "select cm.customername as compname,A.Supplier,B.IngredientID,B.IngredientID,A.BillNo,convert(date,a.BillDate) as BillDate,E.LedgerName as LedgerName,'brand' as BrandName,D.Ingredientname,B.Qty,B.Rate ,(B.Amount) as NetAmount ,F.paymode  as Payment_Mode,( B.Amount ) as SalesAmount,B.Tax,b.ExpiryDate from tblkitchenPurchase_" + sTableName + " A,tbltranskitchenPurchase_" + sTableName + " B,tblIngridents D,tblledger E,tblsalespaymode F,tblsubCompanyDetails cm  where A.purchaseID=b.purchaseID  and B.IngredientID=D.ingridid   and f.value=a.Paymode and A.Supplier=E.LedgerID and cm.subComapanyID = a.subcompanyid and convert(date, A.BillDate)   between '" + sFmdate + "' and '" + sToDate + "' order by A.Supplier ";
                ds = dbObj.InlineExecuteDataSet(paygird);
            }
            else
            {
                string paygird = "select cm.customername as compname,A.Supplier,B.IngredientID,B.IngredientID,A.BillNo,convert(date,a.BillDate) as BillDate,E.LedgerName as LedgerName,'brand' as BrandName,D.Ingredientname,B.Qty,B.Rate ,(B.Amount) as NetAmount ,F.paymode  as Payment_Mode,( B.Amount ) as SalesAmount,B.Tax,b.ExpiryDate from tblkitchenPurchase_" + sTableName + " A,tbltranskitchenPurchase_" + sTableName + " B,tblIngridents D,tblledger E,tblsalespaymode F,tblsubCompanyDetails cm  where A.purchaseID=b.purchaseID  and B.IngredientID=D.ingridid   and f.value=a.Paymode and A.Supplier=E.LedgerID and cm.subComapanyID = a.subcompanyid and convert(date, A.BillDate)   between '" + sFmdate + "' and '" + sToDate + "'  and cm.subComapanyID='" + Subcompany + "' order by A.Supplier ";
                ds = dbObj.InlineExecuteDataSet(paygird);
            }
            return ds;
        }

        public DataSet ordebyproduct2PurReport(string sTableName, string sFmdate, string sToDate, string Subcompany)
        {
            DataSet ds = new DataSet();
            // string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount ,F.Payment_Mode,( ((B.Amount * c. GST) / 100 ) + B.Amount ) as SalesAmount,C.GST from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date, A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.SubCategoryID";
            if (Subcompany == "All")
            {
                string paygird = "select cm.customername as compname,A.Supplier,B.IngredientID,B.IngredientID,A.BillNo,convert(date,a.BillDate) as BillDate,E.LedgerName as LedgerName,'brand' as BrandName,D.Ingredientname,B.Qty,B.Rate ,(B.Amount) as NetAmount ,F.paymode as Payment_Mode,( B.Amount ) as SalesAmount,B.Tax,b.ExpiryDate from tblkitchenPurchase_" + sTableName + " A,tbltranskitchenPurchase_" + sTableName + " B,tblIngridents D,tblledger E,tblsalespaymode F,tblsubCompanyDetails cm  where A.purchaseID=b.purchaseID  and B.IngredientID=D.ingridid   and f.value=a.Paymode and A.Supplier=E.LedgerID and cm.subComapanyID = a.subcompanyid and convert(date, A.BillDate)   between '" + sFmdate + "' and '" + sToDate + "' order by B.IngredientID ";
                ds = dbObj.InlineExecuteDataSet(paygird);
            }
            else
            {
                string paygird = "select cm.customername as compname,A.Supplier,B.IngredientID,B.IngredientID,A.BillNo,convert(date,a.BillDate) as BillDate,E.LedgerName as LedgerName,'brand' as BrandName,D.Ingredientname,B.Qty,B.Rate ,(B.Amount) as NetAmount ,F.paymode as Payment_Mode,( B.Amount ) as SalesAmount,B.Tax,b.ExpiryDate from tblkitchenPurchase_" + sTableName + " A,tbltranskitchenPurchase_" + sTableName + " B,tblIngridents D,tblledger E,tblsalespaymode F,tblsubCompanyDetails cm  where A.purchaseID=b.purchaseID  and B.IngredientID=D.ingridid   and f.value=a.Paymode and A.Supplier=E.LedgerID and cm.subComapanyID = a.subcompanyid and convert(date, A.BillDate)   between '" + sFmdate + "' and '" + sToDate + "' and cm.subComapanyID='" + Subcompany + "' order by B.IngredientID ";
                ds = dbObj.InlineExecuteDataSet(paygird);
            }
            return ds;
        }
        public DataSet ordebycatqty(string sTableName, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            //DataSet dcat = new DataSet();
            //DataSet dmerge = new DataSet();
            //string sqr = "select  Item, sum(Qty) as Qty from (select distinct c.Category as Item ,sum(b.Quantity) as Qty from tblsales_" + sTableName + " a, tbltranssales_" + sTableName + " b,tblcategory c where a.BillNo=b.SalesID and cancelstatus='No'and b.CategoryID=c.CategoryID and convert(date,a.BillDate) between '" + sFmdate + "' and '" + sToDate + "' group by c.Category union all select distinct c.Category as Item ,sum(convert(money,b.Qty)) as Qty from tblOrder_" + sTableName + " a, tblTransOrder_" + sTableName + " b, tblcategory c where a.BillNo=b.BillNo and b.CategoryID=c.CategoryID and isCancel=0 and convert(date,a.OrderDate) between '" + sFmdate + "' and '" + sToDate + "' group by c.Category ) as a group by Item";
            string sqr = "select  '" + sTableName + "' as Branch,Item, sum(Qty) as Qty from (select distinct c.Category as Item " +
                ",sum(b.Quantity) as Qty,'" + sTableName + "' as Branch from tblsales_" + sTableName + " a, " +
                " tbltranssales_" + sTableName + " b,tblcategory c where a.BillNo=b.SalesID and a.salesid=b.salesuniqueid " +
                " and cancelstatus='No'and b.CategoryID=c.CategoryID and convert(date,a.BillDate) between '" + sFmdate + "' " +
                " and '" + sToDate + "' group by c.Category ";
            //union all select distinct c.Category as Item ,sum(convert(money,b.Qty)) as Qty,'" + sTableName + "' as Branch from tblOrder_" + sTableName + " a, tblTransOrder_" + sTableName + " b, tblcategory c where a.BillNo=b.BillNo and b.CategoryID=c.CategoryID and isCancel=0 and convert(date,a.OrderDate) between '" + sFmdate + "' and '" + sToDate + "' group by c.Category ) as a group by Item";
            ds = dbObj.InlineExecuteDataSet(sqr);
            //if (dcat.Tables[0].Rows.Count > 0)
            //{
            //    for (int i = 0; i < dcat.Tables[0].Rows.Count; i++)
            //    {
            //        int cat = Convert.ToInt16(dcat.Tables[0].Rows[i]["categoryid"]);

            //        string paygird = "select ISNULL(SUM(Quantity), 0 ) as  qty,c.category as Item from tblTransSales_" + sTableName + " as ts inner join tblcategory as c on c.categoryid=ts.CategoryID inner join tblsales_" + sTableName + " as sa on sa.BillNo=ts.SalesID where ts.CategoryID=" + cat + " and convert(date, sa.BillDate) between Convert(DateTime,'" + sFmdate + "',103) and Convert(DateTime,'" + sToDate + "',103) group by c.category order by c.category desc";
            //        ds = dbObj.InlineExecuteDataSet(paygird);
            //        dmerge.Merge(ds);
            //    }
            //}
            return ds;
        }

        public DataSet ordebyprodqty(string sTableName, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            //DataSet dcat = new DataSet();
            //DataSet dmerge = new DataSet();
            string sqr = "select distinct(b.definition) as Item, sum(a.Quantity) as Qty,'" + sTableName + "' as Branch " +
                " from tbltranssales_" + sTableName + " a,tblcategoryuser b,tblsales_" + sTableName + " c " +
                " where a.subcategoryid=b.categoryuserid and  cancelstatus='No' and a.SalesID=c.BillNo and c.salesid=a.salesuniqueid " +
                " and Convert(date,c.Billdate) between '" + sFmdate + "' and '" + sToDate + "' group by b.definition ";
                // union all select distinct(b.definition) as Item, sum(convert(money,a.Qty)) as Qty,'" + sTableName + "' as Branch from tblTransOrder_" + sTableName + " a,tblcategoryuser b,tblOrder_" + sTableName + " c where a.subcategoryid=b.categoryuserid and a.BillNo=c.BillNo and c.isCancel=0 and Convert(date,c.OrderDate) between '" + sFmdate + "' and '" + sToDate + "' group by b.Definition";
            ds = dbObj.InlineExecuteDataSet(sqr);
            //if (dcat.Tables[0].Rows.Count > 0)
            //{
            //    for (int i = 0; i < dcat.Tables[0].Rows.Count; i++)
            //    {
            //        int def = Convert.ToInt32(dcat.Tables[0].Rows[i]["CategoryUserID"]);

            //        string paygird = "select ISNULL(SUM(Quantity), 0 ) as  qty,c.Definition as cat from tblTransSales_" + sTableName + "  as ts inner join tblCategoryUser as c on c.CategoryUserID=ts.SubCategoryID inner join tblsales_" + sTableName + " as sa on sa.BillNo=ts.SalesID where ts.SubCategoryID=" + def + " and convert(date, sa.BillDate) between Convert(DateTime,'" + sFmdate + "',103) and Convert(DateTime,'" + sToDate + "',103) group by c.Definition order by c.Definition desc";
            //        ds = dbObj.InlineExecuteDataSet(paygird);
            //        dmerge.Merge(ds);
            //    }
            //}
            return ds; ;
        }

        public DataSet PurExpirydateReport(string sTableName, DateTime sFmdate, string Subcompany)
        {
            DataSet ds = new DataSet();
            // string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount ,F.Payment_Mode,( ((B.Amount * c. GST) / 100 ) + B.Amount ) as SalesAmount,C.GST from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date, A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.SubCategoryID";
            if (Subcompany == "All")
            {
                string paygird = "select cm.customername as compname,cm.GSTNO,A.Supplier,B.IngredientID,B.IngredientID,A.BillNo,convert(date,a.BillDate) as BillDate,E.LedgerName as LedgerName,'brand' as BrandName,D.Ingredientname,B.Qty,B.Rate ,(B.Amount) as NetAmount ,F.paymode as Payment_Mode,( B.Amount ) as SalesAmount,B.Tax,b.ExpiryDate from tblkitchenPurchase_" + sTableName + " A,tbltranskitchenPurchase_" + sTableName + " B,tblIngridents D,tblledger E,tblsalespaymode F,tblsubCompanyDetails cm  where A.purchaseID=b.purchaseID  and B.IngredientID=D.ingridid   and f.value=a.Paymode and A.Supplier=E.LedgerID and cm.subComapanyID = a.subcompanyid  and convert(date,b.ExpiryDate)  >= '" + sFmdate.ToString("yyyy/MM/dd") + "' and b.ExpiryDate <> '1900-01-01 00:00:00.000' order by b.ExpiryDate ";
                ds = dbObj.InlineExecuteDataSet(paygird);
            }
            else
            {
                string paygird = "select cm.customername as compname,cm.GSTNO,A.Supplier,B.IngredientID,B.IngredientID,A.BillNo,convert(date,a.BillDate) as BillDate,E.LedgerName as LedgerName,'brand' as BrandName,D.Ingredientname,B.Qty,B.Rate ,(B.Amount) as NetAmount ,F.paymode as Payment_Mode,( B.Amount ) as SalesAmount,B.Tax,b.ExpiryDate from tblkitchenPurchase_" + sTableName + " A,tbltranskitchenPurchase_" + sTableName + " B,tblIngridents D,tblledger E,tblsalespaymode F,tblsubCompanyDetails cm  where A.purchaseID=b.purchaseID  and B.IngredientID=D.ingridid   and f.value=a.Paymode and A.Supplier=E.LedgerID and cm.subComapanyID = a.subcompanyid and convert(date,b.ExpiryDate)  >= '" + sFmdate.ToString("yyyy/MM/dd") + "' and b.ExpiryDate <> '1900-01-01 00:00:00.000' and cm.subComapanyID='" + Subcompany + "' order by b.ExpiryDate ";
                ds = dbObj.InlineExecuteDataSet(paygird);
            }
            return ds;
        }
        #endregion


        public DataSet GetCompanyDetails(int ComapanyID)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblCompanyDetails where ComapanyID=" + ComapanyID + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetSubCompanyDetails(int ComapanyID)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblSubCompanyDetails where subComapanyID=" + ComapanyID + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }



        #region
        public DataSet dealerLoginSales(int iUserID)
        {
            DataSet ds = new DataSet();

            string sqry = "(select d.CustomerName,a.BillNo,a.BillDate,a.NetAmount from tblsales_CO1 a ,tblCustomer d where a.CustomerID=d.CustomerID and a.ContactTypeID=2 and a.CustomerID='" + iUserID + "' union all select d.CustomerName,a.BillNo,a.BillDate,a.NetAmount from tblsales_CO2 a,tblCustomer d where   a.CustomerID=d.CustomerID and a.ContactTypeID=2 and a.CustomerID='" + iUserID + "' union all select d.CustomerName,a.BillNo,a.BillDate,a.NetAmount from tblsales_CO3 a ,tblCustomer d where  a.CustomerID=d.CustomerID and a.ContactTypeID=2 and a.CustomerID='" + iUserID + "' ) order by a.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }



        public DataSet orderStatus(int iUserID)
        {
            DataSet ds = new DataSet();

            string sqry = "select b.category,c.Definition,a.Quantity,a.UnitPrice,a.Date,a.BillNo,a.BillDate,a.Isdelivered , case a.Isdelivered when 1 then 'InvoiceMade'  else 'Pending'  end  as Status from tblDealerOrder a,tblcategory b,tblCategoryUser c where a.CategoryID=b.categoryid and a.SubCategoryID=c.CategoryUserID and a.DealerID='" + iUserID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        #endregion
        #region Bakery

        #region Purchase Request

        public int insertPurchaseReq(int VendorID, string RequestNO, string RequestDate, string Status, int isCancel, string sBranch, int isaccept, int Branch, string Sname, string sCode)
        {
            int iSucess = 0;
            string sQry = "insert into tblPurchaseRequest_" + sCode + " (VendorID,RequestNO,RequestDate,Status,isCancel,Branch,IsAccepted,BranchID,RequestBy) values('" + VendorID + "','" + RequestNO + "','" + RequestDate + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }


        public int insertPStock(int VendorID, string RequestNO, string RequestDate, string Status, int isCancel, string sBranch, int isaccept, int Branch, string Sname)
        {
            int iSucess = 0;
            string sQry = "insert into tblProductionStock(VendorID,ProdNo,ProdDate,Status,isCancel,Branch,IsAccepted,BranchID,MaintainBy) values('" + VendorID + "','" + RequestNO + "','" + RequestDate + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public int insertPStockNellai(int VendorID, string RequestNO, string RequestDate, string Status, int isCancel, string sBranch, int isaccept, int Branch, string Sname)
        {
            int iSucess = 0;
            string sQry = "insert into tblProductionStock3(VendorID,ProdNo,ProdDate,Status,isCancel,Branch,IsAccepted,BranchID,MaintainBy) values('" + VendorID + "','" + RequestNO + "','" + RequestDate + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public int insertPStockChennai(int VendorID, string RequestNO, string RequestDate, string Status, int isCancel, string sBranch, int isaccept, int Branch, string Sname)
        {
            int iSucess = 0;
            string sQry = "insert into tblProductionStock4(VendorID,ProdNo,ProdDate,Status,isCancel,Branch,IsAccepted,BranchID,MaintainBy) values('" + VendorID + "','" + RequestNO + "','" + RequestDate + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public DataSet checkDailyQty()
        {
            DataSet ds = new DataSet();
            string sQry = "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public int insertTransPurchaseReq(string RequestID, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal Rec, int BranchID, int isTransfer, string sCodeBnch, string date, string SCodeProd)
        {
            int iSucess = 0;
            string sQry = "insert into tblTransPurchaseRequest_" + sCodeBnch + " (RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate) values ('" + RequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + date + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            //MainServer
            string sqry = "select MAX(requestno) as RequestNo from tblPurchaseRequestProd_" + SCodeProd + " ";
            ////// DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            DataSet ds = dbObj.InlineExecuteDataSetMain(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string prodrequestno = ds.Tables[0].Rows[0]["RequestNo"].ToString();
                string sQryprod = "insert into tblTransPurchaseRequestProd_" + SCodeProd + " (RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate) values ('" + prodrequestno + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + date + "')";
                iSucess = dbObj.InlineExecuteNonQueryMain(sQryprod);
            }

            return iSucess;
        }


        public int insertTransPurchaseReqMain(string RequestID, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal Rec, int BranchID, int isTransfer, string sCodeBnch, DateTime date, string SCodeProd, int MainRequestID, DateTime delaydate)
        {
            int iSucess = 0;
            string sQry = "insert into tblTransPurchaseRequest_" + sCodeBnch + " (RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate,Delaydate) values ('" + RequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "','" + Convert.ToDateTime(delaydate).ToString("yyyy/MM/dd") + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            //MainServer
            string sqry = "select MAX(requestno) as RequestNo from tblPurchaseRequestProd_" + SCodeProd + " ";
            ////// DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            //////// DataSet ds = dbObj.InlineExecuteDataSetMain(sqry);
            ////// if (ds.Tables[0].Rows.Count > 0)
            {
                // string prodrequestno = ds.Tables[0].Rows[0]["RequestNo"].ToString();
                string sQryprod = "insert into tblTransPurchaseRequestProd_" + SCodeProd + " (RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate,delaydate) values ('" + MainRequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "','" + Convert.ToDateTime(delaydate).ToString("yyyy/MM/dd") + "')";
                iSucess = dbObj.InlineExecuteNonQueryMain(sQryprod);
            }

            return iSucess;
        }


        public int insertTransPurchaseReqMain_Semi(string RequestID, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal Rec, int BranchID, int isTransfer, string sCodeBnch, DateTime date, string SCodeProd, int MainRequestID)
        {
            int iSucess = 0;
            string sQry = "insert into tblTransSemiPurchaseRequest_" + sCodeBnch + " (RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate) values ('" + RequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            //MainServer
            string sqry = "select MAX(requestno) as RequestNo from tblSemiPurchaseRequestLive_" + SCodeProd + " ";

            {

                string sQryprod = "insert into tblTransSemiPurchaseRequestLive_" + SCodeProd + " (RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate) values ('" + MainRequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "')";
                iSucess = dbObj.InlineExecuteNonQueryMain(sQryprod);
            }

            return iSucess;
        }

        // FOR STORE
        public int insertTransPurchaseReqStoreMain(string RequestID, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal Rec, int BranchID, int isTransfer, string sCodeBnch, DateTime date, string SCodeProd, int MainRequestID)
        {
            int iSucess = 0;
            string sQry = "insert into tblTransPurchaseRequeststore_" + sCodeBnch + " (RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate) values ('" + RequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            //MainServer
            string sqry = "select MAX(requestno) as RequestNo from tblPurchaseRequestProdStore_" + SCodeProd + " ";
            ////// DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            //////// DataSet ds = dbObj.InlineExecuteDataSetMain(sqry);
            ////// if (ds.Tables[0].Rows.Count > 0)
            {
                // string prodrequestno = ds.Tables[0].Rows[0]["RequestNo"].ToString();
                string sQryprod = "insert into tblTransPurchaseRequestProdStore_" + SCodeProd + " (RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate) values ('" + MainRequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "')";
                iSucess = dbObj.InlineExecuteNonQueryMain(sQryprod);
            }

            return iSucess;
        }

        public int insertTransPurchaseReqStoreDept(string RequestID, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal Rec, int BranchID, int isTransfer, string sCodeBnch, DateTime date, string SCodeProd, int MainRequestID)
        {
            int iSucess = 0;
            string sQry = "insert into tblTransPurchaseRequeststoreDept_" + SCodeProd + " (RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate) values ('" + RequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);


            return iSucess;
        }

        public int insertTransPurchaseReqmain(string RequestID, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal Rec, int BranchID, int isTransfer, string sCode, string date)
        {
            int iSucess = 0;
            string sQry = "insert into tblTransPurchaseRequest_" + sCode + " (RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate) values ('" + RequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + date + "')";
            iSucess = dbObj.InlineExecuteNonQueryMain(sQry);
            return iSucess;
        }

        public int UpdateTransPurchaseReq(string RequestID, int CategoryId, int DescriptionId, decimal Qty, string sCode)
        {
            int iSucess = 0;
            string sQry = "update tblTransPurchaseRequest_" + sCode + "   set Order_Qty='" + Qty + "' where RequestID='" + RequestID + "' and CategoryId='" + CategoryId + "' and DescriptionId='" + DescriptionId + "'  ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public DataSet checkReqNo(int ReqNo, int itemId)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblTransPurchaseRequest_NP where RequestID=" + ReqNo + "  and DescriptionId=" + itemId + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public int insertTransPSReq(string RequestID, int CategoryId, int DescriptionId, decimal Qty, string Units, int BranchID, int isTransfer)
        {
            int iSucess = 0;
            string sQry = "insert into tblTransProductionStock(RequestID,CategoryId,DescriptionId,Prod_Qty,Units,BranchID,isTransFer) values ('" + RequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "'," + BranchID + "," + isTransfer + ")";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }
        public int insertTransPStock(string RequestID, int CategoryId, int DescriptionId, decimal Qty, string Units, int BranchID, int isTransfer, decimal dCurrQty, decimal dExistQty)
        {
            DateTime date = DateTime.Now;
            string sdate = date.ToString("yyyy-MM-dd h:mm tt");
            int iSucess = 0;
            string sQry = "insert into tblTransProductionStock(ProdNo,CategoryId,DescriptionId,Prod_Qty,Units,BranchID,isTransFer,ExistingQty,EnteredQty,CreateDate) values ('" + RequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "'," + BranchID + "," + isTransfer + ",'" + dExistQty + "','" + dCurrQty + "','" + sdate + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public int insertTransPStockNellai(string RequestID, int CategoryId, int DescriptionId, decimal Qty, string Units, int BranchID, int isTransfer, decimal dCurrQty, decimal dExistQty)
        {
            DateTime date = DateTime.Now;
            string sdate = date.ToString("yyyy-MM-dd h:mm tt");
            int iSucess = 0;
            string sQry = "insert into tblTransProductionStock3(ProdNo,CategoryId,DescriptionId,Prod_Qty,Units,BranchID,isTransFer,ExistingQty,EnteredQty,CreateDate) values ('" + RequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "'," + BranchID + "," + isTransfer + ",'" + dExistQty + "','" + dCurrQty + "','" + sdate + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public int insertTransPStockChennai(string RequestID, int CategoryId, int DescriptionId, decimal Qty, string Units, int BranchID, int isTransfer, decimal dCurrQty, decimal dExistQty)
        {
            DateTime date = DateTime.Now;
            string sdate = date.ToString("yyyy-MM-dd h:mm tt");
            int iSucess = 0;
            string sQry = "insert into tblTransProductionStock4(ProdNo,CategoryId,DescriptionId,Prod_Qty,Units,BranchID,isTransFer,ExistingQty,EnteredQty,CreateDate) values ('" + RequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "'," + BranchID + "," + isTransfer + ",'" + dExistQty + "','" + dCurrQty + "','" + sdate + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public DataSet PurchaseReqGrid(int iAccept)
        {
            DataSet ds = new DataSet();

            //string sqry = "select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'kk'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BB b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate()) union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BY b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate()) union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_KK b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate()) union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_NP b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate())";
            //  string sqry = "select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'kk'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BB b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + "  union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BY b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + "  union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_KK b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + "  union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_NP b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " ";
            string sqry = "select Production_To,RequestDate,TotalQty,Status,RequestNO,Branch,RequestBy from  (select top 1000  'Production' as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,'KK' as Branch, b.RequestBy from tblPurchaseRequest_KK b where  IsAccepted=0 order by RequestDate desc union all select top 1000 'Production' as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,'BY' as Branch,b.RequestBy from tblPurchaseRequest_BY b where IsAccepted=0 order by RequestDate desc union all select top 2 'Production' as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,'PER' as Branch,b.RequestBy from tblPurchaseRequest_PER b where IsAccepted=0 order by RequestDate desc) as a";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet PurchaseReqGrid2(int iAccept)
        {
            DataSet ds = new DataSet();

            //string sqry = "select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'kk'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BB b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate()) union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BY b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate()) union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_KK b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate()) union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_NP b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate())";
            //  string sqry = "select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'kk'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BB b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + "  union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BY b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + "  union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_KK b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + "  union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_NP b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " ";

            string sqry = "select Production_To,RequestDate,TotalQty,Status,RequestNO,Branch,RequestBy from (select top 1000  'Production' as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,'BB' as Branch,b.RequestBy from tblPurchaseRequest_BB b where  IsAccepted=0  order by RequestDate desc union all select top 1000 'Production' as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,'NP' as Branch,b.RequestBy from tblPurchaseRequest_NP b where  IsAccepted=0 order by RequestDate desc) as a  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet PurchaseReqGridNellai(int iAccept)
        {
            DataSet ds = new DataSet();

            //string sqry = "select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'kk'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BB b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate()) union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BY b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate()) union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_KK b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate()) union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_NP b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate())";
            //  string sqry = "select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'kk'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BB b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + "  union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BY b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + "  union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_KK b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + "  union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_NP b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " ";

            string sqry = "select top 2  'Production' as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,'NE' as Branch,b.RequestBy from tblPurchaseRequest_NE b where  IsAccepted=0  order by RequestDate desc  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet PurchaseReqGridChennai(int iAccept)
        {
            DataSet ds = new DataSet();

            //string sqry = "select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'kk'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BB b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate()) union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BY b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate()) union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_KK b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate()) union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_NP b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " and b.RequestDate=CONVERT(date,getdate())";
            //  string sqry = "select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'kk'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BB b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + "  union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_BY b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + "  union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_KK b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + "  union all select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,case b.Branch when 'Branch -CO1' Then 'KK'  when 'Branch -CO2' Then 'BY'when 'Branch -CO3' Then 'BB' when 'Branch -CO4' Then 'NP' end as Branch, b.RequestBy from tblcustomer a,tblPurchaseRequest_NP b where a.CustomerID=b.VendorID and IsAccepted=" + iAccept + " ";

            string sqry = "select Production_To,RequestDate,TotalQty,Status,RequestNO,Branch,RequestBy from (select top 2  'Production' as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,'MD' as Branch,b.RequestBy from tblPurchaseRequest_MD b where  IsAccepted=0 order by RequestDate desc union all  select top 2  'Production' as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,'PU' as Branch,b.RequestBy from tblPurchaseRequest_PU b where  IsAccepted=0 order by RequestDate desc union all select  Top 2 'Production' as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,'Dealer' as Branch,b.RequestBy from tblPurchaseRequest_Dealer b where  IsAccepted=0 order by RequestDate desc ) as a  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet ReqNo(int iBranchID, string scode)
        {
            DataSet ds = new DataSet();
            // string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblPurchaseRequest_" + scode + " where BranchID=" + iBranchID + "";
            string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblPurchaseRequest_" + scode + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        // FOR STORE 
        public DataSet ReqNoStore(int iBranchID, string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblPurchaseRequestStore_" + scode + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        // FOR DEPT
        public DataSet ReqNoDept(int iBranchID, string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblPurchaseRequestStoreDept_" + scode + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet ReqNo_Semi(int iBranchID, string scode)
        {
            DataSet ds = new DataSet();
            // string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblPurchaseRequest_" + scode + " where BranchID=" + iBranchID + "";
            string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblSemiPurchaseRequest_" + scode + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet ReqNo2(string scode)
        {
            DataSet ds = new DataSet();

            string sqry = "select MAX(convert(int,requestno))+1 as RequestNo from tblPurchaseRequest_" + scode + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet PurchaseReqGridBranch(string ibranch, string sCode)
        {
            DataSet ds = new DataSet();

            // string sqry = "select  Top 1 a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime from tblcustomer a,tblPurchaseRequest_" + sCode + " b where a.CustomerID=b.VendorID and b.BranchID='" + ibranch + "' and b.IsAccepted=0  order by b.RequestDate desc  ";

            string sqry = "select   b.entrytime,b.RequestBy as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime,b.prodbranch " +
                          " from tblworkers a,tblPurchaseRequest_" + sCode + " b where a.EmpID=b.VendorID and b.BranchID='" + ibranch + "' and b.IsAccepted=0 " +
                          //"  and convert(date,b.RequestDate) between dateadd(day,datediff(day,1,GETDATE()),0) and dateadd(day,datediff(day,0,GETDATE()),0)   " +
                          "  and convert(date,b.entrytime) between dateadd(day,datediff(day,1,GETDATE()),0) and dateadd(day,datediff(day,0,GETDATE()),0)   " +
                          " order by b.entrytime desc  ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        // FOR STORE REQUEST
        public DataSet PurchaseReqstoreGridBranch(string ibranch, string sCode)
        {
            DataSet ds = new DataSet();

            // string sqry = "select  Top 1 a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime from tblcustomer a,tblPurchaseRequest_" + sCode + " b where a.CustomerID=b.VendorID and b.BranchID='" + ibranch + "' and b.IsAccepted=0  order by b.RequestDate desc  ";

            string sqry = "select   b.entrytime,b.RequestBy as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime,b.prodbranch " +
                          " from tblworkers a,tblPurchaseRequestStore_" + sCode + " b where a.EmpID=b.VendorID and b.BranchID='" + ibranch + "' and b.IsAccepted=0   " +
                          " order by b.RequestDate desc  ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        // FOR DEPT REQUEST
        public DataSet PurchaseReqdeptGridBranch(string ibranch, string sCode)
        {
            DataSet ds = new DataSet();

            // string sqry = "select  Top 1 a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime from tblcustomer a,tblPurchaseRequest_" + sCode + " b where a.CustomerID=b.VendorID and b.BranchID='" + ibranch + "' and b.IsAccepted=0  order by b.RequestDate desc  ";

            string sqry = "select   b.entrytime,b.RequestBy as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO, c.deptname as Branch,b.RequestEntryTime,b.prodbranch " +
                          " from tblworkers a,tblPurchaseRequestStoreDept_" + sCode + " b,tbldepartment c  where b.DeptId=c.deptid and a.EmpID=b.VendorID  " +
                          " order by b.RequestDate desc  ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        // FOR SEMI REQUEST
        public DataSet PurchaseReqGridBranch_Semi(string ibranch, string sCode)
        {
            DataSet ds = new DataSet();

            // string sqry = "select  Top 1 a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime from tblcustomer a,tblPurchaseRequest_" + sCode + " b where a.CustomerID=b.VendorID and b.BranchID='" + ibranch + "' and b.IsAccepted=0  order by b.RequestDate desc  ";

            string sqry = "select   b.entrytime,b.RequestBy as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime,b.prodbranch " +
                          " from tblworkers a,tblSemiPurchaseRequest_" + sCode + " b where a.EmpID=b.VendorID and b.BranchID='" + ibranch + "' and b.IsAccepted=0 " +
                          "  and convert(date,b.RequestDate) between dateadd(day,datediff(day,1,GETDATE()),0) and dateadd(day,datediff(day,0,GETDATE()),0)   " +
                          " order by b.entrytime desc  ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet PSGridBranch2(int ibranch)
        {
            DataSet ds = new DataSet();

            string sqry = "select a.CustomerName as Production_To,b.ProdDate,b.TotalQty,b.Status,b.ProdNO,b.Branch from tblcustomer a,tblProductionStock2 b where a.CustomerID=b.VendorID and b.BranchID='" + ibranch + "' and b.ProdDate=convert(date,GETDATE()) ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet PSGridBranch(int ibranch)
        {
            DataSet ds = new DataSet();

            string sqry = "select a.CustomerName as Production_To,b.ProdDate,b.TotalQty,b.Status,b.ProdNO,b.Branch from tblcustomer a,tblProductionStock b where a.CustomerID=b.VendorID and b.BranchID='" + ibranch + "' and b.ProdDate=convert(date,GETDATE()) ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet PurchaseReqGridDetailstwo(int id, string code)
        {
            DataSet ds = new DataSet();
            //string sQry = "select c.categoryid,d.CategoryUserID,c.category,d.Definition,e.prod_qty,b.Order_Qty from  tblTransPurchaseRequest_"+code+" b,tblcategory c,tblCategoryUser d,tblTransProductionStock e  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and b.isTransfer=0  and b.RequestID="+id+" and e.prodno in (select MAX(prodno)  from tbltransproductionstock)   and c.CategoryId=e.CategoryID and d.CategoryUserID=e.DescriptionId    and b.Order_Qty>0 order by b.Order_Qty desc";
            // string sQry = "select a.category,b.Definition ,c.prod_Qty ,b.CategoryUserID,a.categoryid from tblcategory a,tblCategoryUser b ,tblTransProductionStock c where a.categoryid=b.CategoryID and a.categoryid=c.CategoryId and b.CategoryUserID=c.DescriptionId union all  select a.category,b.Definition,'0' as prod_Qty ,b.CategoryUserID,a.categoryid from tblcategory a,tblCategoryUser b  where a.categoryid=b.CategoryID  and b.Definition not in(select b.Definition  from tblcategory a,tblCategoryUser b , tblTransProductionStock c where a.categoryid=b.CategoryID and a.categoryid=c.CategoryId  and b.CategoryUserID=c.DescriptionId)";
            // string sqry = "select * from tblPurchaseRequest a,tblTransPurchaseRequest b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a. RequestDate=convert(date,getdate()) and isTransfer=0";
            // string sQty = "select c.categoryid,d.CategoryUserID,c.category,d.Definition,e.prod_qty,b.Order_Qty-b.Received_Qty as Qty,b.Units,b.Order_Qty from  tblTransPurchaseRequest_" + code + " b,tblcategory c,tblCategoryUser d,tblTransProductionStock e  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and  b.Order_Qty<>b.Received_Qty  and b.RequestID=" + id + " and e.prodno in (select MAX(prodno)  from tbltransproductionstock) and b.order_Qty>0  and c.CategoryId=e.CategoryID and d.CategoryUserID=e.DescriptionId  union select c.categoryid,d.CategoryUserID,c.category,d.Definition,'0' as prod_qty,b.Order_Qty-b.Received_Qty as Qty,b.Units,b.Order_Qty from  tblTransPurchaseRequest_" + code + " b,tblcategory c,tblCategoryUser d  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and   b.Order_Qty<>b.Received_Qty and b.descriptionid not in (select descriptionid from tbltransproductionstock  where prodno in (select MAX(prodno)  from tbltransproductionstock))   and b.RequestID=" + id + "    and b.order_Qty>0  union  select c.categoryid,d.CategoryUserID,c.category,d.Definition,b.prod_qty,'0' as Qty,b.Units,'0' as Order_Qty  from tbltransproductionstock b,tblcategory c,tblCategoryUser d where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and  prodno in (select MAX(prodno)  from tbltransproductionstock)  and b.descriptionid not in (select descriptionid from tbltranspurchaserequest_" + code + " where requestid=" + id + " and order_qty>0)";
            string sQty = "select c.categoryid,d.CategoryUserID,c.category,d.Definition,e.prod_qty,b.Order_Qty-b.Received_Qty as Qty,b.Units,b.Order_Qty from  tblTransPurchaseRequest_" + code + " b,tblcategory c,tblCategoryUser d,tblTransProductionStock e  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and  b.Order_Qty>0  and b.RequestID=" + id + " and e.prodno in (select MAX(prodno)  from tbltransproductionstock) and b.order_Qty>0  and c.CategoryId=e.CategoryID and d.CategoryUserID=e.DescriptionId  union select c.categoryid,d.CategoryUserID,c.category,d.Definition,'0' as prod_qty,b.Order_Qty-b.Received_Qty as Qty,b.Units,b.Order_Qty from  tblTransPurchaseRequest_" + code + " b,tblcategory c,tblCategoryUser d  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and   b.Order_Qty>0 and b.descriptionid not in (select descriptionid from tbltransproductionstock  where prodno in (select MAX(prodno)  from tbltransproductionstock))   and b.RequestID=" + id + "    and b.order_Qty>0  union  select c.categoryid,d.CategoryUserID,c.category,d.Definition,b.prod_qty,'0' as Qty,b.Units,'0' as Order_Qty  from tbltransproductionstock b,tblcategory c,tblCategoryUser d where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and  prodno in (select MAX(prodno)  from tbltransproductionstock)  and b.descriptionid not in (select descriptionid from tbltranspurchaserequest_" + code + " where requestid=" + id + " and order_qty>0)";
            ds = dbObj.InlineExecuteDataSet(sQty);

            return ds;
        }
        public DataSet PurchaseReqGridDetails(int ReqNo, string StoreBranch, string Table, string BranchReqNo)
        {
            DataSet ds = new DataSet();
            string sQty = "select isnull(qs.Prod_Qty,0) as StockQty,(isnull(Order_Qty,0)-isnull(Received_Qty,0)) as Order_Qty,* from tblPurchaseRequestProd_" + Table + " p inner join tbltransPurchaseRequestProd_" + Table + " tp on tp.RequestID=p.RequestNO inner join tblcategory c on c.Categoryid=tp.CategoryId inner join tblCategoryUser cu on cu.CategoryUserID=tp.DescriptionId  inner join tblUOM u on u.UOMID=cu.unit left  join tblProductionQty_" + Table + " qs on qs.DescriptionId=cu.CategoryUserID where RequestNo='" + ReqNo + "' and BranchReqNo='" + BranchReqNo + "' and StoreBranch='" + StoreBranch + "' and (isnull(Order_Qty,0)-isnull(Received_Qty,0)) >0";
            ds = dbObj.InlineExecuteDataSet(sQty);
            return ds;
        }

        public DataSet PurchaseReqGridDetails_Semi(int ReqNo, string StoreBranch, string Table, string BranchReqNo)
        {
            DataSet ds = new DataSet();
            string sQty = "select isnull(qs.Prod_Qty,0) as StockQty,(isnull(Order_Qty,0)-isnull(Received_Qty,0)) as Order_Qty,* from " +
                " tblsemiPurchaseRequestLive_" + Table + " p inner join tbltransSemiPurchaseRequestLive_" + Table + " tp on tp.RequestID=p.RequestNO " +
                " inner join tblSemiCategory c on c.SemiCatID=tp.CategoryId inner join tblSemiIngridents cu on cu.SemiIngridID=tp.DescriptionId  " +
                " inner join tblUOM u on u.UOMID=cu.units left  join tblSemiProductionQty_" + Table + " qs on qs.DescriptionId=cu.SemiIngridID " +
                " where RequestNo='" + ReqNo + "' and BranchReqNo='" + BranchReqNo + "' and StoreBranch='" + StoreBranch + "' and " +
                " (isnull(Order_Qty,0)-isnull(Received_Qty,0)) >0";
            ds = dbObj.InlineExecuteDataSet(sQty);
            return ds;
        }

        // FOR STORE

        public DataSet PurchaseReqGridDetailsStore(int ReqNo, string StoreBranch, string Table, string BranchReqNo)
        {
            DataSet ds = new DataSet();
            string sQty = "select isnull(qs.Qty,0) as StockQty,(isnull(Order_Qty,0)-isnull(Received_Qty,0)) as Order_Qty,* from  " +
                " tblPurchaseRequestProdStore_" + Table + " p inner join tbltransPurchaseRequestProdStore_" + Table + " tp on tp.RequestID=p.RequestNO " +
                " inner join tblingridentscategory c on c.IngCatID=tp.CategoryId inner join tblingridents cu on cu.IngridID=tp.DescriptionId  " +
                " inner join tblUOM u on u.UOMID=cu.units left  join tblRawMatlStock_" + Table + " qs on qs.IngredientID=cu.IngridID " +
                " where RequestNo='" + ReqNo + "' and BranchReqNo='" + BranchReqNo + "' and StoreBranch='" + StoreBranch + "' and (isnull(Order_Qty,0)-isnull(Received_Qty,0)) >0";
            ds = dbObj.InlineExecuteDataSet(sQty);
            return ds;
        }

        // FOR STORE

        public DataSet PurchaseReqGridDetailsStore_Dept(string Table, string deptid)
        {
            DataSet ds = new DataSet();
            //string sQty = "select isnull(qs.Qty,0) as StockQty,(isnull(Order_Qty,0)-isnull(Received_Qty,0)) as Order_Qty,* from  " +
            //    " tblPurchaseRequestProdStore_" + Table + " p inner join tbltransPurchaseRequestProdStore_" + Table + " tp on tp.RequestID=p.RequestNO " +
            //    " inner join tblingridentscategory c on c.IngCatID=tp.CategoryId inner join tblingridents cu on cu.IngridID=tp.DescriptionId  " +
            //    " inner join tblUOM u on u.UOMID=cu.units left  join tblRawMatlStock_" + Table + " qs on qs.IngredientID=cu.IngridID " +
            //    " where RequestNo='" + ReqNo + "' and BranchReqNo='" + BranchReqNo + "' and StoreBranch='" + StoreBranch + "' and (isnull(Order_Qty,0)-isnull(Received_Qty,0)) >0";

            string sQty = " select distinct(P_id),requestNo from tblPurchaseRequestStoreDept_" + Table + " as a inner join  tbltransPurchaseRequestStoreDept_" + Table + " as b " +
                          " on a.RequestNO=b.requestid " +
                          " where deptid='" + deptid + "' and (isnull(Order_Qty,0)-isnull(Received_Qty,0)) >0";

            ds = dbObj.InlineExecuteDataSet(sQty);
            return ds;
        }

        public DataSet PurchaseReqGridDetails2(int id, string code)
        {
            DataSet ds = new DataSet();
            //string sQry = "select c.categoryid,d.CategoryUserID,c.category,d.Definition,e.prod_qty,b.Order_Qty from  tblTransPurchaseRequest_"+code+" b,tblcategory c,tblCategoryUser d,tblTransProductionStock e  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and b.isTransfer=0  and b.RequestID="+id+" and e.prodno in (select MAX(prodno)  from tbltransproductionstock)   and c.CategoryId=e.CategoryID and d.CategoryUserID=e.DescriptionId    and b.Order_Qty>0 order by b.Order_Qty desc";
            // string sQry = "select a.category,b.Definition ,c.prod_Qty ,b.CategoryUserID,a.categoryid from tblcategory a,tblCategoryUser b ,tblTransProductionStock c where a.categoryid=b.CategoryID and a.categoryid=c.CategoryId and b.CategoryUserID=c.DescriptionId union all  select a.category,b.Definition,'0' as prod_Qty ,b.CategoryUserID,a.categoryid from tblcategory a,tblCategoryUser b  where a.categoryid=b.CategoryID  and b.Definition not in(select b.Definition  from tblcategory a,tblCategoryUser b , tblTransProductionStock c where a.categoryid=b.CategoryID and a.categoryid=c.CategoryId  and b.CategoryUserID=c.DescriptionId)";
            // string sqry = "select * from tblPurchaseRequest a,tblTransPurchaseRequest b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a. RequestDate=convert(date,getdate()) and isTransfer=0";
            // string sQty = "select c.categoryid,d.CategoryUserID,c.category,d.Definition,e.prod_qty,b.Order_Qty-b.Received_Qty as Qty,b.Units,b.Order_Qty from  tblTransPurchaseRequest_" + code + " b,tblcategory c,tblCategoryUser d,tblTransProductionStock e  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and  b.Order_Qty<>b.Received_Qty  and b.RequestID=" + id + " and e.prodno in (select MAX(prodno)  from tbltransproductionstock) and b.order_Qty>0  and c.CategoryId=e.CategoryID and d.CategoryUserID=e.DescriptionId  union select c.categoryid,d.CategoryUserID,c.category,d.Definition,'0' as prod_qty,b.Order_Qty-b.Received_Qty as Qty,b.Units,b.Order_Qty from  tblTransPurchaseRequest_" + code + " b,tblcategory c,tblCategoryUser d  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and   b.Order_Qty<>b.Received_Qty and b.descriptionid not in (select descriptionid from tbltransproductionstock  where prodno in (select MAX(prodno)  from tbltransproductionstock))   and b.RequestID=" + id + "    and b.order_Qty>0  union  select c.categoryid,d.CategoryUserID,c.category,d.Definition,b.prod_qty,'0' as Qty,b.Units,'0' as Order_Qty  from tbltransproductionstock b,tblcategory c,tblCategoryUser d where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and  prodno in (select MAX(prodno)  from tbltransproductionstock)  and b.descriptionid not in (select descriptionid from tbltranspurchaserequest_" + code + " where requestid=" + id + " and order_qty>0)";
            string sQty = "select c.categoryid,d.CategoryUserID,c.category,d.Definition,e.prod_qty,b.Order_Qty-b.Received_Qty as Qty,b.Units,b.Order_Qty,d.Rate from  tblTransPurchaseRequest_" + code + " b,tblcategory c,tblCategoryUser d,tblTransProductionStock3 e  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and  b.Order_Qty>0  and b.RequestID=" + id + " and e.prodno in (select MAX(prodno)  from tbltransproductionstock3) and b.order_Qty>0  and c.CategoryId=e.CategoryID and d.CategoryUserID=e.DescriptionId  union select c.categoryid,d.CategoryUserID,c.category,d.Definition,'0' as prod_qty,b.Order_Qty-b.Received_Qty as Qty,b.Units,b.Order_Qty,d.Rate from  tblTransPurchaseRequest_" + code + " b,tblcategory c,tblCategoryUser d  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and   b.Order_Qty>0 and b.descriptionid not in (select descriptionid from tbltransproductionstock3  where prodno in (select MAX(prodno)  from tbltransproductionstock3))   and b.RequestID=" + id + "    and b.order_Qty>0  union  select c.categoryid,d.CategoryUserID,c.category,d.Definition,b.prod_qty,'0' as Qty,b.Units,'0' as Order_Qty,d.Rate  from tbltransproductionstock3 b,tblcategory c,tblCategoryUser d where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and  prodno in (select MAX(prodno)  from tbltransproductionstock3)  and b.descriptionid not in (select descriptionid from tbltranspurchaserequest_" + code + " where requestid=" + id + " and order_qty>0)";
            ds = dbObj.InlineExecuteDataSet(sQty);

            return ds;
        }

        public DataSet PurchaseReqGridDetailsChennai(int id, string code)
        {
            DataSet ds = new DataSet();
            //string sQry = "select c.categoryid,d.CategoryUserID,c.category,d.Definition,e.prod_qty,b.Order_Qty from  tblTransPurchaseRequest_"+code+" b,tblcategory c,tblCategoryUser d,tblTransProductionStock e  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and b.isTransfer=0  and b.RequestID="+id+" and e.prodno in (select MAX(prodno)  from tbltransproductionstock)   and c.CategoryId=e.CategoryID and d.CategoryUserID=e.DescriptionId    and b.Order_Qty>0 order by b.Order_Qty desc";
            // string sQry = "select a.category,b.Definition ,c.prod_Qty ,b.CategoryUserID,a.categoryid from tblcategory a,tblCategoryUser b ,tblTransProductionStock c where a.categoryid=b.CategoryID and a.categoryid=c.CategoryId and b.CategoryUserID=c.DescriptionId union all  select a.category,b.Definition,'0' as prod_Qty ,b.CategoryUserID,a.categoryid from tblcategory a,tblCategoryUser b  where a.categoryid=b.CategoryID  and b.Definition not in(select b.Definition  from tblcategory a,tblCategoryUser b , tblTransProductionStock c where a.categoryid=b.CategoryID and a.categoryid=c.CategoryId  and b.CategoryUserID=c.DescriptionId)";
            // string sqry = "select * from tblPurchaseRequest a,tblTransPurchaseRequest b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a. RequestDate=convert(date,getdate()) and isTransfer=0";
            // string sQty = "select c.categoryid,d.CategoryUserID,c.category,d.Definition,e.prod_qty,b.Order_Qty-b.Received_Qty as Qty,b.Units,b.Order_Qty from  tblTransPurchaseRequest_" + code + " b,tblcategory c,tblCategoryUser d,tblTransProductionStock e  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and  b.Order_Qty<>b.Received_Qty  and b.RequestID=" + id + " and e.prodno in (select MAX(prodno)  from tbltransproductionstock) and b.order_Qty>0  and c.CategoryId=e.CategoryID and d.CategoryUserID=e.DescriptionId  union select c.categoryid,d.CategoryUserID,c.category,d.Definition,'0' as prod_qty,b.Order_Qty-b.Received_Qty as Qty,b.Units,b.Order_Qty from  tblTransPurchaseRequest_" + code + " b,tblcategory c,tblCategoryUser d  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and   b.Order_Qty<>b.Received_Qty and b.descriptionid not in (select descriptionid from tbltransproductionstock  where prodno in (select MAX(prodno)  from tbltransproductionstock))   and b.RequestID=" + id + "    and b.order_Qty>0  union  select c.categoryid,d.CategoryUserID,c.category,d.Definition,b.prod_qty,'0' as Qty,b.Units,'0' as Order_Qty  from tbltransproductionstock b,tblcategory c,tblCategoryUser d where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and  prodno in (select MAX(prodno)  from tbltransproductionstock)  and b.descriptionid not in (select descriptionid from tbltranspurchaserequest_" + code + " where requestid=" + id + " and order_qty>0)";
            string sQty = "select c.categoryid,d.CategoryUserID,c.category,d.Definition,e.prod_qty,b.Order_Qty-b.Received_Qty as Qty,b.Units,b.Order_Qty,d.Rate from  tblTransPurchaseRequest_" + code + " b,tblcategory c,tblCategoryUser d,tblTransProductionStock4 e  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and  b.Order_Qty>0  and b.RequestID=" + id + " and e.prodno in (select MAX(prodno)  from tbltransproductionstock4) and b.order_Qty>0  and c.CategoryId=e.CategoryID and d.CategoryUserID=e.DescriptionId  union select c.categoryid,d.CategoryUserID,c.category,d.Definition,'0' as prod_qty,b.Order_Qty-b.Received_Qty as Qty,b.Units,b.Order_Qty,d.Rate from  tblTransPurchaseRequest_" + code + " b,tblcategory c,tblCategoryUser d  where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and   b.Order_Qty>0 and b.descriptionid not in (select descriptionid from tbltransproductionstock4  where prodno in (select MAX(prodno)  from tbltransproductionstock4))   and b.RequestID=" + id + "    and b.order_Qty>0  union  select c.categoryid,d.CategoryUserID,c.category,d.Definition,b.prod_qty,'0' as Qty,b.Units,'0' as Order_Qty,d.Rate  from tbltransproductionstock4 b,tblcategory c,tblCategoryUser d where   b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID    and  prodno in (select MAX(prodno)  from tbltransproductionstock4)  and b.descriptionid not in (select descriptionid from tbltranspurchaserequest_" + code + " where requestid=" + id + " and order_qty>0)";
            ds = dbObj.InlineExecuteDataSet(sQty);

            return ds;
        }
        public DataSet GetPurchaseReq(int iDescriptionID, string sCode)
        {
            //int i = 0;
            //string sQry = "";
            //sQry = "select Order_Qty from tblTransPurchaseRequest where DescriptionId=" + iDescriptionID + " and isTransfer=0";
            //i = (int)dbObj.InlineExecuteScalar(sQry);
            //return i;

            DataSet ds = new DataSet();
            string sQry = "";
            //string sQry = "select Order_Qty from tblTransPurchaseRequest_"+sCode+" where DescriptionId=" + iDescriptionID + " and isTransfer=0";
            // string sqry = "select * from tblPurchaseRequest a,tblTransPurchaseRequest b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a. RequestDate=convert(date,getdate()) and isTransfer=0";
            ds = dbObj.InlineExecuteDataSet(sQry);

            return ds;
        }


        public DataSet RequestDet(string iD, string sCode)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblPurchaseRequest_" + sCode + " a,tblTransPurchaseRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<=b.Order_Qty";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        // FOR STORE PROCESS
        public DataSet RequestStoreDet(string iD, string sCode)
        {
            DataSet ds = new DataSet();

            //string sqry = "select * from tblPurchaseRequestStore_" + sCode + " a,tblTransPurchaseRequestStore_" + sCode + " b,tblingridentscategory c,tblingridents d where a.RequestNo=b.Requestid and b.CategoryID=c.Ingcatid and b.DescriptionID=d.ingridid  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<b.Order_Qty";
            string sqry = "select * from tblPurchaseRequestStore_" + sCode + " a,tblTransPurchaseRequestStore_" + sCode + " b,tblingridentscategory c,tblingridents d where a.RequestNo=b.Requestid and b.CategoryID=c.Ingcatid and b.DescriptionID=d.ingridid  and Order_Qty!=0 and a.RequestNo='" + iD + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        // FOR Dept PROCESS
        public DataSet RequestdeptDet(string iD, string sCode)
        {
            DataSet ds = new DataSet();

            //string sqry = "select * from tblPurchaseRequestStore_" + sCode + " a,tblTransPurchaseRequestStore_" + sCode + " b,tblingridentscategory c,tblingridents d where a.RequestNo=b.Requestid and b.CategoryID=c.Ingcatid and b.DescriptionID=d.ingridid  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<b.Order_Qty";
            string sqry = "select * from tblPurchaseRequestStoreDept_" + sCode + " a,tblTransPurchaseRequestStoreDept_" + sCode + " b,tblingridentscategory c,tblingridents d,tbldepartment e where e.deptid=a.deptid and  a.RequestNo=b.Requestid and b.CategoryID=c.Ingcatid and b.DescriptionID=d.ingridid  and Order_Qty!=0 and a.RequestNo='" + iD + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet RequestDet_Semi(string iD, string sCode)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblSemiPurchaseRequest_" + sCode + " a,tblTransSemiPurchaseRequest_" + sCode + " b,tblSemiCategory c,tblSemiIngridents d " +
                " where a.RequestNo=b.Requestid and b.CategoryID=c.SemiCatID and b.DescriptionID=d.SemiIngridID  " +
                " and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<=b.Order_Qty";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet RequestDetprod(string iD, string sCode, string branch, string prodreqno)
        {
            DataSet ds = new DataSet();

            // string sqry = "select * from tblPurchaseRequest_" + sCode + " a,tblTransPurchaseRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<b.Order_Qty";
            string sqry = "select * from tblPurchaseRequestProd_" + branch + " a,tblTransPurchaseRequestProd_" + branch + " b,tblcategory c,tblCategoryUser d " +
                " where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.branchReqNo='" + iD + "' " +
                " and a.storebranch='" + sCode + "' and a.requestno='" + prodreqno + "' ";
            //and b.Received_Qty<b.Order_Qty";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet RequestDetprod_Semi(string iD, string sCode, string branch, string prodreqno)
        {
            DataSet ds = new DataSet();

            // string sqry = "select * from tblPurchaseRequest_" + sCode + " a,tblTransPurchaseRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<b.Order_Qty";
            string sqry = "select * from tblSemiPurchaseRequestLive_" + branch + " a,tblTransSemiPurchaseRequestLive_" + branch + " b,tblSemiCategory c,tblSemiIngridents d " +
                " where a.RequestNo=b.Requestid and b.CategoryID=c.SemiCatID and b.DescriptionID=d.SemiIngridID  and Order_Qty!=0 and a.branchReqNo='" + iD + "' " +
                " and a.storebranch='" + sCode + "' and a.requestno='" + prodreqno + "' ";
            //and b.Received_Qty<b.Order_Qty";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        // FOR STORE
        public DataSet RequestDetprodStore(string iD, string sCode, string branch)
        {
            DataSet ds = new DataSet();

            // string sqry = "select * from tblPurchaseRequest_" + sCode + " a,tblTransPurchaseRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<b.Order_Qty";
            string sqry = "select * from tblPurchaseRequestProdstore_" + branch + " a,tblTransPurchaseRequestProdstore_" + branch + " b,tblingridentscategory c,tblingridents d where a.RequestNo=b.Requestid and b.CategoryID=c.Ingcatid and b.DescriptionID=d.ingridid  and Order_Qty!=0 and a.branchReqNo='" + iD + "' and a.storebranch='" + sCode + "' and b.Received_Qty<b.Order_Qty";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet RequestDetqqq()
        {
            DataSet ds = new DataSet();

            //string sqry = "select c.Category,d.Definition ,b.Received_Qty,b.Order_Qty from tblPurchaseRequest_NP  a,tblTransPurchaseRequest_NP b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + 389 + "' and b.Received_Qty<b.Order_Qty";
            string sqry = "select * from tblsales";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet RequestDetqqqorg(string iD, string sCode, string Date)
        {
            DataSet ds = new DataSet();

            string sqry = "select c.Category,d.Definition ,b.Received_Qty,b.Order_Qty from tblPurchaseRequest_" + sCode + "  a,tblTransPurchaseRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<b.Order_Qty and convert(date,a.RequestDate)='" + Convert.ToDateTime(Date).ToString("yyyy-MM-dd") + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet BreadList(string sCode)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblPurchaseRequest_" + sCode + " a,tblTransPurchaseRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and b.Received_Qty<b.Order_Qty and convert(date, a.RequestDate)=convert(date,getdate())";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet RequestDetExport(string iD, string sCode)
        {
            DataSet ds = new DataSet();

            string sqry = "select d.Definition as Item,b.order_Qty from tblPurchaseRequest_" + sCode + " a,tblTransPurchaseRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<b.Order_Qty";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet PSDet()
        {
            DataSet ds = new DataSet();

            ////  string sqry = "select * from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and a.ProdNo='" + iD + "'";
            // string sqry = "select c.category,d.Definition,b.prod_qty,b.units,a.Proddate from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and  b.prodno in (select MAX(prodno)  from tbltransproductionstock)";
            string sqry = "select c.category,d.Definition,b.prod_qty,b.units,a.Proddate,RIGHT(a.Proddate, 7) as [Time] from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and  b.prodno in (select MAX(prodno)  from tbltransproductionstock)";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet PSDetNellai()
        {
            DataSet ds = new DataSet();

            //  string sqry = "select * from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and a.ProdNo='" + iD + "'";
            string sqry = "select c.category,d.Definition,b.prod_qty,b.units,a.Proddate from tblProductionStock3 a,tblTransProductionStock3 b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and  b.prodno in (select MAX(prodno)  from tbltransproductionstock3)";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet PSDetChennai()
        {
            DataSet ds = new DataSet();

            //  string sqry = "select * from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and a.ProdNo='" + iD + "'";
            string sqry = "select c.category,d.Definition,b.prod_qty,b.units,a.Proddate from tblProductionStock4 a,tblTransProductionStock4 b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and  b.prodno in (select MAX(prodno)  from tbltransproductionstock4)";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet PSDet2()
        {
            DataSet ds = new DataSet();

            //  string sqry = "select * from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and a.ProdNo='" + iD + "'";
            string sqry = "select c.category,d.Definition,b.prod_qty,b.units from tblProductionStock2 a,tblTransProductionStock2 b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and  b.prodno in (select MAX(prodno)  from tbltransproductionstock2)";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet GetMaxProdNo()
        {
            DataSet ds = new DataSet();

            string sqry = "select isnull(MAX(convert(int,ProdNo))+1,1) as ProdNO from tblProductionStock";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet GetMaxProdNo2()
        {
            DataSet ds = new DataSet();

            string sqry = "select MAX(convert(int,ProdNo))+1 as ProdNO from tblTransProductionStock2";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet GetMaxProdNoNellai()
        {
            DataSet ds = new DataSet();

            string sqry = "select MAX(convert(int,ProdNo))+1 as ProdNO from tblTransProductionStock3";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetMaxProdNoChennai()
        {
            DataSet ds = new DataSet();

            string sqry = "select MAX(convert(int,ProdNo))+1 as ProdNO from tblTransProductionStock4";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet PSDet_All()
        {
            DataSet ds = new DataSet();

            string sqry = "select c.category,d.Definition,b.Order_Qty,b.Received_Qty from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where  a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet getItems(int iCatid, string scode)
        {
            DataSet ds = new DataSet();

            string sqry = "";
            //string sqry = "select a.categoryid,a.category,b.CategoryUserID,b.Definition  from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.categoryid=" + iCatid + "";
            if (scode == "Production")
            {
                sqry = "select a.categoryid,a.category,b.CategoryUserID,b.Definition,c.prod_qty  from tblcategory a,tblCategoryUser b,tbltransproductionstock c where a.categoryid=b.CategoryID and b.CategoryUserID=c.descriptionid and c.ProdNo in (select MAX(prodno)  from tbltransproductionstock) and b.CategoryID=" + iCatid + " union  select a.categoryid,a.category,b.CategoryUserID,b.Definition,'0' as Prod_Qty    from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.CategoryID=" + iCatid + " and b.CategoryUserID not in (select descriptionid from tbltransproductionstock where ProdNo in (select MAX(prodno)  from tbltransproductionstock)) ";
            }
            if (scode == "Production2")
            {
                sqry = "select a.categoryid,a.category,b.CategoryUserID,b.Definition,c.prod_qty  from tblcategory a,tblCategoryUser b,tbltransproductionstock c where a.categoryid=b.CategoryID and b.CategoryUserID=c.descriptionid and c.ProdNo in (select MAX(prodno)  from tbltransproductionstock) and b.CategoryID=" + iCatid + " union  select a.categoryid,a.category,b.CategoryUserID,b.Definition,'0' as Prod_Qty    from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.CategoryID=" + iCatid + " and b.CategoryUserID not in (select descriptionid from tbltransproductionstock where ProdNo in (select MAX(prodno)  from tbltransproductionstock)) ";
            }
            if (scode == "Production3")
            {
                sqry = "select a.categoryid,a.category,b.CategoryUserID,b.Definition,c.prod_qty  from tblcategory a,tblCategoryUser b,tbltransproductionstock3 c where a.categoryid=b.CategoryID and b.CategoryUserID=c.descriptionid and c.ProdNo in (select MAX(prodno)  from tbltransproductionstock3) and b.CategoryID=" + iCatid + " union  select a.categoryid,a.category,b.CategoryUserID,b.Definition,'0' as Prod_Qty    from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.CategoryID=" + iCatid + " and b.CategoryUserID not in (select descriptionid from tbltransproductionstock3 where ProdNo in (select MAX(prodno)  from tbltransproductionstock3)) ";
            }

            if (scode == "Production4")
            {
                sqry = "select a.categoryid,a.category,b.CategoryUserID,b.Definition,c.prod_qty  from tblcategory a,tblCategoryUser b,tbltransproductionstock4 c where a.categoryid=b.CategoryID and b.CategoryUserID=c.descriptionid and c.ProdNo in (select MAX(prodno)  from tbltransproductionstock4) and b.CategoryID=" + iCatid + " union  select a.categoryid,a.category,b.CategoryUserID,b.Definition,'0' as Prod_Qty    from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.CategoryID=" + iCatid + " and b.CategoryUserID not in (select descriptionid from tbltransproductionstock4 where ProdNo in (select MAX(prodno)  from tbltransproductionstock4)) ";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet getItemsnew(int iCatid, string scode)
        {
            DataSet ds = new DataSet();

            string sqry = "";
            sqry = "select a.categoryid,a.category,b.CategoryUserID,b.Definition,c.prod_qty as Available_Qty  from tblcategory a,tblCategoryUser b,tbltransproductionstock c where a.categoryid=b.CategoryID and b.CategoryUserID=c.descriptionid and c.ProdNo in (select MAX(prodno)  from tbltransproductionstock) and b.CategoryID=" + iCatid + " union  select a.categoryid,a.category,b.CategoryUserID,b.Definition,'0' as Available_Qty    from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.CategoryID=" + iCatid + " and b.CategoryUserID not in (select descriptionid from tbltransproductionstock where ProdNo in (select MAX(prodno)  from tbltransproductionstock)) ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getItemsnewitems(int iCatid, string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "  select a.categoryid,a.category,b.CategoryUserID,b.Definition,isnull(c.prod_qty,0) as Available_Qty  from tblcategory a inner join tblCategoryUser b on a.categoryid=b.CategoryID left join tblProductionQty_" + scode + " c on b.CategoryUserID=c.descriptionid  where b.CategoryID=" + iCatid + " order by Definition asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet getItemsList(int iCatid)
        {
            DataSet ds = new DataSet();

            string sqry = "select a.categoryid,a.category,b.CategoryUserID,b.Definition  from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.categoryid=" + iCatid + "";
            // string sqry = "select a.categoryid,a.category,b.CategoryUserID,b.Definition,c.prod_qty  from tblcategory a,tblCategoryUser b,tbltransproductionstock c where a.categoryid=b.CategoryID and b.CategoryUserID=c.descriptionid and b.CategoryID=" + iCatid + " union  select a.categoryid,a.category,b.CategoryUserID,b.Definition,'0' as Prod_Qty    from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.CategoryID=" + iCatid + " and b.CategoryUserID not in (select descriptionid from tbltransproductionstock) ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet DalilystockRequest(int iCatid, string stable)
        {
            DataSet ds = new DataSet();

            //string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,c.Available_qty,'' as UOM from tblcategory a,tblcategoryuser b,tblstock_" + stable + " c where a.categoryid=b.categoryid and a.isDelete=0 and a.categoryid=" + iCatid + " and c.categoryid=a.categoryid and c.subcategoryid=b.categoryuserid and c.available_qty>0 union all select distinct a.categoryid,a.category,b.categoryuserid,b.definition,'0' as Available_qty,'' as UOM from tblcategory a,tblcategoryuser b where a.categoryid=b.categoryid and a.isDelete=0 and a.categoryid=" + iCatid + "  and b.categoryuserid  not  in(select subcategoryid from tblstock_" + stable + " where categoryid =" + iCatid + " and available_qty>0) order by c.Available_qty Desc ";

            //////string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,c.Available_qty,'' as UOM from tblcategory a,tblcategoryuser b,tblstock_" + stable + " c where a.categoryid=b.categoryid and a.IsActive='Yes' and a.categoryid=" + iCatid + " and c.categoryid=a.categoryid and c.subcategoryid=b.categoryuserid and c.available_qty>0 union all select distinct a.categoryid,a.category,b.categoryuserid,b.definition,'0' as Available_qty,'' as UOM from tblcategory a,tblcategoryuser b where a.categoryid=b.categoryid and a.isActive='Yes' and a.categoryid=" + iCatid + "  and b.categoryuserid  not  in(select subcategoryid from tblstock_" + stable + " where categoryid =" + iCatid + " and available_qty>0) order by c.Available_qty Desc ";
            string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,c.Available_qty,'' as UOM from tblcategory a,tblcategoryuser b,tblstock_" + stable + " c,tblCategoryuserBranch d where d.Itemid=b.CategoryUserID and a.categoryid=b.categoryid    and b.IsActive='Yes'   and d.IsActive='Yes' and d.BranchCode='" + stable + "'and a.IsActive='Yes' and a.categoryid=" + iCatid + " and c.categoryid=a.categoryid and c.subcategoryid=b.categoryuserid and c.available_qty>0 union all select distinct a.categoryid,a.category,b.categoryuserid,b.definition,'0' as Available_qty,'' as UOM from tblcategory a,tblcategoryuser b,tblCategoryuserBranch d where d.Itemid=b.CategoryUserID and a.categoryid=b.categoryid and a.isActive='Yes'    and b.IsActive='Yes'   and d.IsActive='Yes' and d.BranchCode='" + stable + "' and a.categoryid=" + iCatid + "  and b.categoryuserid  not  in(select subcategoryid from tblstock_" + stable + " where categoryid =" + iCatid + " and available_qty>0) order by c.Available_qty Desc ";

            // string sqry = "select a.categoryid,a.category,b.CategoryUserID,b.Definition,c.prod_qty  from tblcategory a,tblCategoryUser b,tbltransproductionstock c where a.categoryid=b.CategoryID and b.CategoryUserID=c.descriptionid and b.CategoryID=" + iCatid + " union  select a.categoryid,a.category,b.CategoryUserID,b.Definition,'0' as Prod_Qty    from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.CategoryID=" + iCatid + " and b.CategoryUserID not in (select descriptionid from tbltransproductionstock) ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet getUOM()
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tbluom where isactive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getPrimary_UOM()
        {
            DataSet ds = new DataSet();

            string sqry = "select primaryuomid,PrimaryName+'/'+cast(PrimaryValue as nvarchar) as name from tblPrimaryUom where Isactive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getSponge()
        {
            DataSet ds = new DataSet();

            string sqry = "(select *  from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and  b.categoryid=15 union all select *  from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and  b.categoryid=14 union all select *  from tblcategory a,tblCategoryUser b where a.categoryid=b.CategoryID and b.categoryid=13 ) ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet getCake(int iCatid)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblcakeorder where CategoryID=" + iCatid + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getCakeRate(int iCatid)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblCategoryUser where CategoryUserID=" + iCatid + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public int UpdateFromProduction(string RequestID, string sCode)
        {
            int iSucess = 0;
            string sQry = "Update tblPurchaseRequest_" + sCode + " set Status='Accepted and will be Deilvered Shortly',IsAccepted=1 where RequestNO='" + RequestID + "' ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            // iSucess = dbObj.InlineExecuteNonQueryMain(sQry);
            return iSucess;
        }

        public DataSet CheckEquals(string RequestID, string sCode)
        {
            DataSet ds = new DataSet();
            string sQry = " select * from tblTransPurchaseRequest_" + sCode + " where RequestID=" + RequestID + " and Order_Qty>0";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region Goods Transfer

        public DataSet GerBranchNames()
        {
            DataSet ds = new DataSet();

            string sqry = "select distinct case BranchID when '5' Then 'kk'  when '6' Then 'BY'when '7' Then 'BB' when '11' Then 'NP' end as Branch ,BranchID from tblPurchaseRequest_BY union all select distinct case BranchID when '5' Then 'kk'  when '6' Then 'BY'when '7' Then 'BB' when '11' Then 'NP' end as Branch,BranchID from tblPurchaseRequest_KK ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GerBranchNames2()
        {
            DataSet ds = new DataSet();

            string sqry = "select distinct case BranchID when '5' Then 'kk'  when '6' Then 'BY'when '7' Then 'BB' when '11' Then 'NP' end as Branch,BranchID from tblPurchaseRequest_BB union all  select distinct  case BranchID when '5' Then 'kk'  when '6' Then 'BY'when '7' Then 'BB' when '11' Then 'NP' end as Branch,BranchID from tblPurchaseRequest_NP";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GerBranchNamesNellai()
        {
            DataSet ds = new DataSet();

            string sqry = "select distinct case BranchID when '14' Then 'Nellai' end as Branch,BranchID from tblPurchaseRequest_NE";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GerBranchNamesChenai()
        {
            DataSet ds = new DataSet();

            string sqry = "select distinct  case BranchID  when '18' Then 'PU'  when '17' Then 'MD' end as Branch,BranchID from tblPurchaseRequest_MD union all select distinct  case BranchID  when '19' Then 'PU'  when '17' Then 'MD' end as Branch,BranchID from tblPurchaseRequest_PU ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        //public DataSet GoodTransferStatus(int BranchID)
        //{
        //    DataSet ds = new DataSet();

        //    string sqry = " select * from tblGoodTransfer where isTransfer=0 and isReceived=0 and  BranchID=" + BranchID + "";
        //    ds = dbObj.InlineExecuteDataSet(sqry);

        //    return ds;
        //}

        public DataSet bingSubCategory()
        {
            DataSet ds = new DataSet();

            string sqry = "select * from  tblCategoryUser";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetDCNO(string sCode)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblGoodTransfer where IsReceived=0 and BranchCode='" + sCode + "'";
            // ds = dbObj.InlineExecuteDataSet(sqry);
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }


        public DataSet GetDCNONew(string sCode, string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct s.DC_NO,s.RequestNO,s.dc_date  from tblGoodTransfer_" + Productioncode + " s inner join  tblTransGoodsTransfer_" + Productioncode + " ts on s.DC_NO=ts.DC_NO where  s.BranchCode='" + sCode + "' and isStocked=0 and Dispatchstatus='Y'";
            // ds = dbObj.InlineExecuteDataSet(sqry);
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        public DataSet GetDCNONew_Semi(string sCode, string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct s.DC_NO,s.RequestNO,s.dc_date  from tblsemiGoodTransfer_" + Productioncode + " s inner join  tblTranssemiGoodsTransfer_" + Productioncode + " ts on s.DC_NO=ts.DC_NO where  s.BranchCode='" + sCode + "' and isStocked=0";
            // ds = dbObj.InlineExecuteDataSet(sqry);
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        public DataSet GetDCNONewForNotification(string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct s.DC_NO,s.RequestNO,s.dc_date,s.branchcode,s.status  from tblGoodTransfer_" + Productioncode + " s inner join  tblTransGoodsTransfer_" + Productioncode + " ts on s.DC_NO=ts.DC_NO where  isStocked=0";
            // ds = dbObj.InlineExecuteDataSet(sqry);
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        // FOR STORE

        public DataSet GetDCNONewStore(string sCode, string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct s.DC_NO,s.RequestNO,s.dc_date  from tblGoodTransferStore_" + Productioncode + " s inner join  tblTransGoodsTransferStore_" + Productioncode + " ts on s.DC_NO=ts.DC_NO where  s.BranchCode='" + sCode + "' and isStocked=0";
            // ds = dbObj.InlineExecuteDataSet(sqry);
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }


        //public DataSet GetDCNO2(string sCode)
        //{
        //    DataSet ds = new DataSet();

        //    string sqry = "select * from tblGoodTransfer2 where IsReceived=0 and BranchCode='" + sCode + "'";
        //    //ds = dbObj.InlineExecuteDataSet(sqry);
        //    // Main Server
        //    ds = dbObj.InlineExecuteDataSetMain(sqry);

        //    return ds;
        //}

        public DataSet GetDCNOCH(string sCode)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblGoodTransfer4 where IsReceived=0 and BranchCode='" + sCode + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet GetDCNONellai(string sCode)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblGoodTransfer3 where IsReceived=0 and BranchCode='" + sCode + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet GetDCNONellai111(string sCode)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblGoodTransfer5 where IsReceived=0 and BranchCode='" + sCode + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        //public DataSet GetProductionStock(int isubcat)
        //{
        //    DataSet ds = new DataSet();

        //    string sqry = "select Prod_Qty from tblTransProductionStock where DescriptionId='" + isubcat + "'";
        //    ds = dbObj.InlineExecuteDataSet(sqry);

        //    return ds;
        //}
        public DataSet GetProductionStock(int isubcat, string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select Prod_Qty from tblProductionQty_" + Table + " where DescriptionId='" + isubcat + "' and Prod_Qty>0)";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet GetProductionStockNew(int isubcat)
        {
            DataSet ds = new DataSet();
            string sqry = "select Prod_Qty from tblProductionQty_Prod where DescriptionId='" + isubcat + "' and prodno in (select MAX(prodno) from tbltransproductionstock)";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetProductionStock2(int isubcat)
        {
            DataSet ds = new DataSet();

            string sqry = "select Prod_Qty from tblTransProductionStock2 where DescriptionId='" + isubcat + "' and prodno in (select MAX(prodno) from tbltransproductionstock2)";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetProductionStockNellai(int isubcat)
        {
            DataSet ds = new DataSet();

            string sqry = "select Prod_Qty from tblTransProductionStock3 where DescriptionId='" + isubcat + "' and prodno in (select MAX(prodno) from tbltransproductionstock3)";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet GetProductionStockchennai(int isubcat)
        {
            DataSet ds = new DataSet();

            string sqry = "select Prod_Qty from tblTransProductionStock4 where DescriptionId='" + isubcat + "' and prodno in (select MAX(prodno) from tbltransproductionstock4)";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet checkCountForUpdate(string ReqNo, string sCode)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblTransPurchaseRequest_" + sCode + " where Order_Qty>0 and RequestID=" + ReqNo + " and isTransfer=0";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public int InsertGoodTrasnfer(string Branch, string DC_NO, string DC_Date, string RequestNO, string Status, int isCancel, string ProductionName, int trans, string BranchID, int Received, string sent, string Table, string branchreqno, string Dispatchstatus, string dispatchno)
        {
            int isave = 0;


            // get trip number 
            string sq = " select isnull(max(Tripno+1),1) as no from tblgoodtransfer_" + Table + "  where branch='" + Branch + "' and cast(DC_date as date) >='" + Convert.ToDateTime(DC_Date).ToString("yyyy/MM/dd") + "'";
            DataSet dss = dbObj.InlineExecuteDataSet(sq);

            if (dss.Tables[0].Rows.Count > 0)
            {
                string tripno = dss.Tables[0].Rows[0]["no"].ToString();

                string sQry = "insert into tblGoodTransfer_" + Table + " (Branch,DC_NO,DC_Date,RequestNO,Status,isCancel,ProductionName,isTransfer,BranchCode,IsReceived,SentBY,BranchReqNo,Dispatchstatus,dispatchno,Tripno) values('" + Branch + "','" + DC_NO + "','" + DC_Date + "','" + RequestNO + "','" + Status + "'," + isCancel + ",'" + ProductionName + "'," + trans + ",'" + BranchID + "'," + Received + ",'" + sent + "','" + branchreqno + "','" + Dispatchstatus + "','" + dispatchno + "','" + tripno + "')";
                isave = dbObj.InlineExecuteNonQuery(sQry);
            }

            return isave;
        }


        public int InsertGoodTrasnfer_Semi(string Branch, string DC_NO, string DC_Date, string RequestNO, string Status, int isCancel, string ProductionName, int trans, string BranchID, int Received, string sent, string Table, string branchreqno)
        {
            int isave = 0;
            string sQry = "insert into tblsemiGoodTransfer_" + Table + " (Branch,DC_NO,DC_Date,RequestNO,Status,isCancel,ProductionName,isTransfer,BranchCode,IsReceived,SentBY,BranchReqNo) values('" + Branch + "','" + DC_NO + "','" + DC_Date + "','" + RequestNO + "','" + Status + "'," + isCancel + ",'" + ProductionName + "'," + trans + ",'" + BranchID + "'," + Received + ",'" + sent + "','" + branchreqno + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);

            return isave;
        }


        public int InsertGoodTrasnferStore(string Branch, string DC_NO, string DC_Date, string RequestNO, string Status, int isCancel, string ProductionName, int trans, string BranchID, int Received, string sent, string Table, string branchreqno)
        {
            int isave = 0;
            string sQry = "insert into tblGoodTransferStore_" + Table + " (Branch,DC_NO,DC_Date,RequestNO,Status,isCancel,ProductionName,isTransfer,BranchCode,IsReceived,SentBY,BranchReqNo) values('" + Branch + "','" + DC_NO + "','" + DC_Date + "','" + RequestNO + "','" + Status + "'," + isCancel + ",'" + ProductionName + "'," + trans + ",'" + BranchID + "'," + Received + ",'" + sent + "','" + branchreqno + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);

            return isave;
        }

        public int InsertGoodTrasnfer2(string Branch, string DC_NO, string DC_Date, string RequestNO, string Status, int isCancel, string ProductionName, int trans, string BranchID, int Received, string sent)
        {
            int isave = 0;
            string sQry = "insert into tblGoodTransfer2 (Branch,DC_NO,DC_Date,RequestNO,Status,isCancel,ProductionName,isTransfer,BranchCode,IsReceived,SentBY) values('" + Branch + "','" + DC_NO + "','" + DC_Date + "','" + RequestNO + "','" + Status + "'," + isCancel + ",'" + ProductionName + "'," + trans + ",'" + BranchID + "'," + Received + ",'" + sent + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int InsertGoodTrasnferNellai(string Branch, string DC_NO, string DC_Date, string RequestNO, string Status, int isCancel, string ProductionName, int trans, string BranchID, int Received, string sent)
        {
            int isave = 0;
            string sQry = "insert into tblGoodTransfer3 (Branch,DC_NO,DC_Date,RequestNO,Status,isCancel,ProductionName,isTransfer,BranchCode,IsReceived,SentBY) values('" + Branch + "','" + DC_NO + "','" + DC_Date + "','" + RequestNO + "','" + Status + "'," + isCancel + ",'" + ProductionName + "'," + trans + ",'" + BranchID + "'," + Received + ",'" + sent + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //    isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int InsertGoodTrasnferChennai(string Branch, string DC_NO, string DC_Date, string RequestNO, string Status, int isCancel, string ProductionName, int trans, string BranchID, int Received, string sent)
        {
            int isave = 0;
            string sQry = "insert into tblGoodTransfer4 (Branch,DC_NO,DC_Date,RequestNO,Status,isCancel,ProductionName,isTransfer,BranchCode,IsReceived,SentBY) values('" + Branch + "','" + DC_NO + "','" + DC_Date + "','" + RequestNO + "','" + Status + "'," + isCancel + ",'" + ProductionName + "'," + trans + ",'" + BranchID + "'," + Received + ",'" + sent + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            // isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int InsertTransGoodTrasnfer(string DC_NO, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal OrderQty, string expirydate, string iBranchID, int isStock, string Req, string Table, string Breqno)
        {
            int isave = 0;
            string sQry = "insert into tblTransGoodsTransfer_" + Table + " (DC_No,CategoryId,DescriptionId,Received_Qty,Units,Order_Qty,ExpiryDate,BranchCode,isStocked,RequestNo,BranchReqNo) values('" + DC_NO + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + OrderQty + "','" + Convert.ToDateTime(expirydate).ToString("yyyy-MM-dd") + "','" + iBranchID + "'," + isStock + ",'" + Req + "','" + Breqno + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }


        public int InsertTransGoodTrasnfer_semi(string DC_NO, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal OrderQty, string expirydate, string iBranchID, int isStock, string Req, string Table, string Breqno)
        {
            int isave = 0;
            string sQry = "insert into tblTranssemiGoodsTransfer_" + Table + " (DC_No,CategoryId,DescriptionId,Received_Qty,Units,Order_Qty,ExpiryDate,BranchCode,isStocked,RequestNo,BranchReqNo) values('" + DC_NO + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + OrderQty + "','" + Convert.ToDateTime(expirydate).ToString("yyyy-MM-dd") + "','" + iBranchID + "'," + isStock + ",'" + Req + "','" + Breqno + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int InsertTransGoodTrasnferStore(string DC_NO, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal OrderQty, string expirydate, string iBranchID, int isStock, string Req, string Table, string Breqno)
        {
            int isave = 0;
            string sQry = "insert into tblTransGoodsTransferStore_" + Table + " (DC_No,CategoryId,DescriptionId,Received_Qty,Units,Order_Qty,ExpiryDate,BranchCode,isStocked,RequestNo,BranchReqNo) values('" + DC_NO + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + OrderQty + "','" + Convert.ToDateTime(expirydate).ToString("yyyy-MM-dd") + "','" + iBranchID + "'," + isStock + ",'" + Req + "','" + Breqno + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int InsertTransGoodTrasnfer2(string DC_NO, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal OrderQty, string expirydate, string iBranchID, int isStock, string Req)
        {
            int isave = 0;
            string sQry = "insert into tblTransGoodsTransfer2 (DC_No,CategoryId,DescriptionId,Received_Qty,Units,Order_Qty,ExpiryDate,BranchCode,isStocked,RequestNo) values('" + DC_NO + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + OrderQty + "','06/06/2017','" + iBranchID + "'," + isStock + ",'" + Req + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int InsertTransGoodTrasnferNellai(string DC_NO, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal OrderQty, string expirydate, string iBranchID, int isStock, string Req)
        {
            int isave = 0;
            string sQry = "insert into tblTransGoodsTransfer3 (DC_No,CategoryId,DescriptionId,Received_Qty,Units,Order_Qty,ExpiryDate,BranchCode,isStocked,RequestNo) values('" + DC_NO + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + OrderQty + "','" + expirydate + "','" + iBranchID + "'," + isStock + ",'" + Req + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //    isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int InsertTransGoodTrasnferchennai(string DC_NO, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal OrderQty, string expirydate, string iBranchID, int isStock, string Req)
        {
            int isave = 0;
            string sQry = "insert into tblTransGoodsTransfer4 (DC_No,CategoryId,DescriptionId,Received_Qty,Units,Order_Qty,ExpiryDate,BranchCode,isStocked,RequestNo) values('" + DC_NO + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + OrderQty + "','" + expirydate + "','" + iBranchID + "'," + isStock + ",'" + Req + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int Updatetransfer(string sNO, int DescpID, string sCode)
        {
            int isave = 0;
            string sQry = "update tblTransPurchaseRequest_" + sCode + " set isTransfer=1 where RequestID='" + sNO + "' and DescriptionID=" + DescpID + " ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }
        public int Updatetransfer_PS1(int DescpID, double iQty, string Table)
        {
            int isave = 0;
            string sQry = "update tblProductionQty_" + Table + " set Prod_Qty=Prod_Qty-'" + iQty + "' where DescriptionID=" + DescpID + "  ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int Updatetransfer_PS1_Semi(int DescpID, double iQty, string Table)
        {
            int isave = 0;
            string sQry = "update tblSemiProductionQty_" + Table + " set Prod_Qty=Prod_Qty-'" + iQty + "' where DescriptionID=" + DescpID + "  ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int Updatetransfer_PS1Store(int DescpID, double iQty, string Table)
        {
            int isave = 0;
            string sQry = "update tblRawMatlStock_" + Table + " set Qty=Qty-'" + iQty + "' where IngredientID=" + DescpID + "  ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int Updatetransfer_PS(int DescpID, decimal iQty)
        {
            int isave = 0;
            string sQry = "update tblProductionQty_Prod set Prod_Qty='" + iQty + "' where DescriptionID=" + DescpID + "  ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }
        public int Updatetransfer_PS2(int DescpID, decimal iQty)
        {
            int isave = 0;
            string sQry = "update tblTransProductionStock2 set Prod_Qty='" + iQty + "' where DescriptionID=" + DescpID + " and prodno in (select MAX(prodno)  from tbltransproductionstock2)  ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            return isave;
        }

        public int Updatetransfer_Nellai(int DescpID, decimal iQty)
        {
            int isave = 0;
            string sQry = "update tblTransProductionStock3 set Prod_Qty='" + iQty + "' where DescriptionID=" + DescpID + " and prodno in (select MAX(prodno)  from tbltransproductionstock3)  ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            // isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }


        public int Updatetransfer_CHennai(int DescpID, decimal iQty)
        {
            int isave = 0;
            string sQry = "update tblTransProductionStock4 set Prod_Qty='" + iQty + "' where DescriptionID=" + DescpID + " and prodno in (select MAX(prodno)  from tbltransproductionstock4)  ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //  isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }
        public int UpdatetransferQty(int ID, int idescID, double dRecQty, string sCode)
        {
            int isave = 0;
            string sQry = "update tblTransPurchaseRequestProd_" + sCode + " set Received_Qty=Received_Qty+'" + dRecQty + "' where  RequestID=" + ID + " and DescriptionId=" + idescID + " ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }


        public int UpdatetransferQty_Semi(int ID, int idescID, decimal dRecQty, string sCode)
        {
            int isave = 0;
            string sQry = "update tblTranssemiPurchaseRequestLive_" + sCode + " set Received_Qty=Received_Qty+'" + dRecQty + "' where  RequestID=" + ID + " and DescriptionId=" + idescID + " ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int UpdatetransferQtyStore(int ID, int idescID, decimal dRecQty, string sCode)
        {
            int isave = 0;
            string sQry = "update tblTransPurchaseRequestProdStore_" + sCode + " set Received_Qty=Received_Qty+'" + dRecQty + "' where  RequestID=" + ID + " and DescriptionId=" + idescID + " ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            return isave;
        }

        public DataSet CheckSameQtyinRequest(string sCode, int ReqNo, int ItemId)
        {
            DataSet ds = new DataSet();
            string sqry = " select * from tblTransPurchaseRequestProd_" + sCode + " where RequestID=" + ReqNo + " and Order_Qty>0 and DescriptionId=" + ItemId + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet CheckSameQtyinRequest_semi(string sCode, int ReqNo, int ItemId)
        {
            DataSet ds = new DataSet();
            string sqry = " select * from tblTranssemiPurchaseRequestLive_" + sCode + " where RequestID=" + ReqNo + " and Order_Qty>0 and DescriptionId=" + ItemId + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        // FOR STRE

        public DataSet CheckSameQtyinRequestStore(string sCode, int ReqNo, int ItemId)
        {
            DataSet ds = new DataSet();
            string sqry = " select * from tblTransPurchaseRequestProdStore_" + sCode + " where RequestID=" + ReqNo + " and Order_Qty>0 and DescriptionId=" + ItemId + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }



        public int UpdatetransferQty_PS(string sNO, int idescID, decimal dRecQty, int BranchID)
        {
            int isave = 0;
            string sQry = "update tblTransProductionStock set Received_Qty='" + dRecQty + "' where  RequestID='" + sNO + "' and DescriptionId=" + idescID + " and BranchID=" + BranchID + " ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            return isave;
        }
        public int UpdateGoodstransfer(string sStatus, string sNo, string Branch)
        {
            int isave = 0;
            string sQry = "update tblGoodTransfer set isTransfer=1,isReceived=1,Status='" + sStatus + "' where DC_No='" + sNo + "'and BranchCode='" + Branch + "' ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int UpdateGoodstransfer2(string sStatus, string sNo, string Branch)
        {
            int isave = 0;
            string sQry = "update tblGoodTransfer2 set isTransfer=1,isReceived=1,Status='" + sStatus + "' where DC_No='" + sNo + "'and BranchCode='" + Branch + "' ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }
        public int UpdateGoodstransferNellai(string sStatus, string sNo, string Branch)
        {
            int isave = 0;
            string sQry = "update tblGoodTransfer3 set isTransfer=1,isReceived=1,Status='" + sStatus + "' where DC_No='" + sNo + "'and BranchCode='" + Branch + "' ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            return isave;
        }

        public int UpdateGoodstransferChennai(string sStatus, string sNo, string Branch)
        {
            int isave = 0;
            string sQry = "update tblGoodTransfer4 set isTransfer=1,isReceived=1,Status='" + sStatus + "' where DC_No='" + sNo + "'and BranchCode='" + Branch + "' ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }
        public int UpdatTranseGoodstransfer(int Dc, string sNo, string Branch, int subCatID)
        {
            int isave = 0;
            string sQry = "update tblTransGoodsTransfer set isStocked=1 where RequestNo='" + sNo + "'and BranchCode='" + Branch + "' and DC_No=" + Dc + " and Descriptionid=" + subCatID + "";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            return isave;
        }


        public int UpdatTranseGoodstransfer2(int Dc, string sNo, string Branch, int subCatID)
        {
            int isave = 0;

            string sQry1 = "select * from tblTransGoodsTransfer2 where RequestNo='" + sNo + "'and BranchCode='" + Branch + "' and DC_No=" + Dc + " and Descriptionid=" + subCatID + "";
            DataSet ds = dbObj.InlineExecuteDataSetMain(sQry1);

            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string sQry123 = "insert into tblTransGoodsTransfer2 (DC_No,CategoryId,DescriptionId,Received_Qty,Units,Order_Qty,ExpiryDate,BranchCode,isStocked,RequestNo) values('" + ds.Tables[0].Rows[i]["DC_NO"] + "','" + ds.Tables[0].Rows[i]["CategoryId"] + "','" + ds.Tables[0].Rows[i]["DescriptionId"] + "','" + ds.Tables[0].Rows[i]["Received_Qty"] + "','" + ds.Tables[0].Rows[i]["Units"] + "','" + ds.Tables[0].Rows[i]["Order_Qty"] + "','06/06/2017','" + ds.Tables[0].Rows[i]["BranchCode"] + "'," + ds.Tables[0].Rows[i]["isStocked"] + ",'" + ds.Tables[0].Rows[i]["RequestNo"] + "')";
                    isave = dbObj.InlineExecuteNonQuery(sQry123);
                }
            }

            string sQry = "update tblTransGoodsTransfer2 set isStocked=1 where RequestNo='" + sNo + "'and BranchCode='" + Branch + "' and DC_No=" + Dc + " and Descriptionid=" + subCatID + "";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }
        public int UpdatTranseGoodstransfer2main(int Dc, string sNo, string Branch, int subCatID)
        {
            int isave = 0;
            string sQry = "update tblTransGoodsTransfer2 set isStocked=1 where RequestNo='" + sNo + "'and BranchCode='" + Branch + "' and DC_No=" + Dc + " and Descriptionid=" + subCatID + "";
            isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int UpdatTranseGoodstransferNellai(int Dc, string sNo, string Branch, int subCatID)
        {
            int isave = 0;
            string sQry = "update tblTransGoodsTransfer3 set isStocked=1 where RequestNo='" + sNo + "'and BranchCode='" + Branch + "' and DC_No=" + Dc + " and Descriptionid=" + subCatID + "";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            return isave;
        }

        public int UpdatTranseGoodstransferChennai(int Dc, string sNo, string Branch, int subCatID)
        {
            int isave = 0;
            string sQry = "update tblTransGoodsTransfer4 set isStocked=1 where RequestNo='" + sNo + "'and BranchCode='" + Branch + "' and DC_No=" + Dc + " and Descriptionid=" + subCatID + "";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            return isave;
        }

        public int UpdatTranseGoodstransferChennaimain(int Dc, string sNo, string Branch, int subCatID)
        {
            int isave = 0;
            string sQry = "update tblTransGoodsTransfer4 set isStocked=1 where RequestNo='" + sNo + "'and BranchCode='" + Branch + "' and DC_No=" + Dc + " and Descriptionid=" + subCatID + "";
            isave = dbObj.InlineExecuteNonQueryMain(sQry);

            return isave;
        }
        public DataSet transferCount(string sCode, int dc)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from  tblTransGoodsTransfer where DC_No=" + dc + " and BranchCode='" + sCode + "' and isStocked=0  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            // Main Server
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        public DataSet transferCount2(string sCode, int dc)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from  tblTransGoodsTransfer2 b where DC_No=" + dc + " and BranchCode='" + sCode + "' and isStocked=0  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet transferCountNellai(string sCode, int dc)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from  tblTransGoodsTransfer3 where DC_No=" + dc + " and BranchCode='" + sCode + "' and isStocked=0  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet transferCountChenai(string sCode, int dc)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from  tblTransGoodsTransfer4 where DC_No=" + dc + " and BranchCode='" + sCode + "' and isStocked=0 ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet transferCountChenaimain(string sCode, int dc)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from  tblTransGoodsTransfer4 where DC_No=" + dc + " and BranchCode='" + sCode + "' and isStocked=0 ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            // Main Server
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }
        public DataSet GetTrasfDet(string sDate)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblGoodTransfer where convert(date,DC_Date) ='" + sDate + "'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }



        public DataSet GetTrasfDet_ByDate(string sFromDate, string sToDate)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblGoodTransfer where convert(date,DC_Date) between '" + sFromDate + "' and '" + sToDate + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetTrasfDet2(string sDate)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblGoodTransfer2 where convert(date,DC_Date) ='" + sDate + "'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetTrasfDet2_ByDate(string sFromDate, string sToDate)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblGoodTransfer2 where convert(date,DC_Date) between '" + sFromDate + "' and '" + sToDate + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetTrasfDetNellai(string sDate)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblGoodTransfer3 where convert(date,DC_Date) ='" + sDate + "'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetTrasfDetNellai_ByDate(string sFromDate, string sToDate)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblGoodTransfer3 where convert(date,DC_Date) between '" + sFromDate + "' and '" + sToDate + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet GetTrasfDetChennai(string sDate)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblGoodTransfer4 where convert(date,DC_Date) ='" + sDate + "'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetTrasfDetChennai_ByDate(string sFromDate, string sToDate)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblGoodTransfer4 where convert(date,DC_Date) between '" + sFromDate + "' and '" + sToDate + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetTransferReport_date(string sFromDate, string sToDate, string stable, string branchcode)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (branchcode == "All")
            {
                sqry = "  select * from tblGoodTransfer_" + stable + " where convert(date,DC_Date) between '" + sFromDate + "' and '" + sToDate + "' order by dc_No desc ";
            }
            else
            {
                sqry = "  select * from tblGoodTransfer_" + stable + " where convert(date,DC_Date) between '" + sFromDate + "' and '" + sToDate + "' and branchcode='" + branchcode + "' order by dc_No desc ";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetTransferReport_datestore(string sFromDate, string sToDate, string stable, string branchcode)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (branchcode == "All")
            {
                sqry = "  select * from tblGoodTransferstore_" + stable + " where convert(date,DC_Date) between '" + sFromDate + "' and '" + sToDate + "' order by dc_No desc ";
            }
            else
            {
                sqry = "  select * from tblGoodTransferstore_" + stable + " where convert(date,DC_Date) between '" + sFromDate + "' and '" + sToDate + "' and branchcode='" + branchcode + "' order by dc_No desc ";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetReceivedReport_date(string sFromDate, string sToDate, string stable)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblGoodReceived_" + stable + " where convert(date,RecDate) between '" + sFromDate + "' and '" + sToDate + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }



        public DataSet getDcNo(string iBranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "select isnull(max(convert(int,DC_NO))+1,1) as DC_No from tblGoodTransfer";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getDcNoNew(string iBranchID, string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(convert(int,DC_NO))+1,1) as DC_No from tblGoodTransfer_" + Table + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getDcNoNew_Semi(string iBranchID, string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(convert(int,DC_NO))+1,1) as DC_No from tblsemiGoodTransfer_" + Table + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        // FOR STORE
        public DataSet getDcNoNewStore(string iBranchID, string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(convert(int,DC_NO))+1,1) as DC_No from tblGoodTransferStore_" + Table + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetDCNO2(string sCode)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblGoodTransfer2 where IsReceived=0 and BranchCode='" + sCode + "'";
            //ds = dbObj.InlineExecuteDataSet(sqry);
            // Main Server
            ds = dbObj.InlineExecuteDataSetMain(sqry);

            return ds;
        }

        public DataSet getDcNoNellai(string iBranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "select max(convert(int,DC_NO))+1 as DC_No from tblGoodTransfer3 ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getDcNoCHennai(string iBranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "select max(convert(int,DC_NO))+1 as DC_No from tblGoodTransfer4 ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet getReceivedQty(string ReqNo, int descpID, int BranchID, string sCode)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblTransPurchaseRequest_" + sCode + " where RequestID='" + ReqNo + "'and Descriptionid=" + descpID + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GoodReceived(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblGoodTransfer  where DC_No='" + sDCNO + "'    and BranchCode='" + BranchID + "' ";
            //ds = dbObj.InlineExecuteDataSet(sqry);
            // Main Server
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }



        public DataSet GoodReceivedNew(string sDCNO, string BranchCode, string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "  select Distinct DC_NO,RequestNO,BranchReqNo,Dc_Date from tblGoodTransfer_" + Productioncode + "  where DC_No='" + sDCNO + "'    and BranchCode='" + BranchCode + "' ";
            //ds = dbObj.InlineExecuteDataSet(sqry);
            // Main Server
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }


        public DataSet GoodReceivedNew_Semi(string sDCNO, string BranchCode, string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "  select Distinct DC_NO,RequestNO,BranchReqNo,Dc_Date from tblsemiGoodTransfer_" + Productioncode + "  where DC_No='" + sDCNO + "'    and BranchCode='" + BranchCode + "' ";
            //ds = dbObj.InlineExecuteDataSet(sqry);
            // Main Server
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        // FOR STORE
        public DataSet GoodReceivedNewStore(string sDCNO, string BranchCode, string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "  select Distinct DC_NO,RequestNO,BranchReqNo,Dc_Date from tblGoodTransferStore_" + Productioncode + "  where DC_No='" + sDCNO + "'    and BranchCode='" + BranchCode + "' ";
            //ds = dbObj.InlineExecuteDataSet(sqry);
            // Main Server
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }


        public DataSet GoodReceived2(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblGoodTransfer2  where DC_No='" + sDCNO + "'    and BranchCode='" + BranchID + "' ";
            //ds = dbObj.InlineExecuteDataSet(sqry);
            // Main Server
            ds = dbObj.InlineExecuteDataSetMain(sqry);

            //if (ds.Tables[0].Rows.Count > 0)
            //{
            //    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            //    {
            //        string sQry = "insert into tblGoodTransfer2 (Branch,DC_NO,DC_Date,RequestNO,Status,isCancel,ProductionName,isTransfer,BranchCode,IsReceived,SentBY) values('" + ds.Tables[0].Rows[i]["Branch"] + "','" + ds.Tables[0].Rows[i]["DC_NO"] + "','" + ds.Tables[0].Rows[i]["DC_Date"] + "','" + ds.Tables[0].Rows[i]["RequestNO"] + "','" + ds.Tables[0].Rows[i]["Status"] + "'," + ds.Tables[0].Rows[i]["isCancel"] + ",'" + ds.Tables[0].Rows[i]["ProductionName"] + "'," + ds.Tables[0].Rows[i]["trans"] + ",'" + ds.Tables[0].Rows[i]["BranchID"] + "'," + ds.Tables[0].Rows[i]["Received"] + ",'" + ds.Tables[0].Rows[i]["sent"] + "')";
            //        int isave = dbObj.InlineExecuteNonQuery(sQry);
            //    }
            //}


            return ds;
        }
        public DataSet GoodReceived12(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblGoodTransfer2  where DC_No='" + sDCNO + "'    and BranchCode='" + BranchID + "' ";
            //ds = dbObj.InlineExecuteDataSet(sqry);
            // Main Server
            ds = dbObj.InlineExecuteDataSetMain(sqry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string sQry = "insert into tblGoodTransfer2 (Branch,DC_NO,DC_Date,RequestNO,Status,isCancel,ProductionName,isTransfer,BranchCode,IsReceived,SentBY) values('" + ds.Tables[0].Rows[i]["Branch"] + "','" + ds.Tables[0].Rows[i]["DC_NO"].ToString() + "','" + ds.Tables[0].Rows[i]["DC_Date"] + "','" + ds.Tables[0].Rows[i]["RequestNO"].ToString() + "','" + ds.Tables[0].Rows[i]["Status"].ToString() + "'," + ds.Tables[0].Rows[i]["isCancel"] + ",'" + ds.Tables[0].Rows[i]["ProductionName"].ToString() + "'," + ds.Tables[0].Rows[i]["istransfer"] + ",'" + ds.Tables[0].Rows[i]["Branchcode"].ToString() + "'," + ds.Tables[0].Rows[i]["isReceived"] + ",'" + ds.Tables[0].Rows[i]["sentby"].ToString() + "')";
                    int isave = dbObj.InlineExecuteNonQuery(sQry);
                }
            }


            return ds;
        }
        public DataSet GoodReceivedNellai(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblGoodTransfer3  where DC_No='" + sDCNO + "'    and BranchCode='" + BranchID + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GoodReceivedchennai(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblGoodTransfer4  where DC_No='" + sDCNO + "'    and BranchCode='" + BranchID + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet GoodReceivedList(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblTransGoodsTransfer b,tblcategory c,tblCategoryUser d  where  b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and b.BranchCode='" + BranchID + "' and b.DC_No=" + sDCNO + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }




        public DataSet GoodReceivedListNew(string sDCNO, string BranchID, string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "select *,case isstocked when 1 then 'Received' else 'Pending' end as stt   from tblTransGoodsTransfer_" + Productioncode + " b,tblcategory c,tblCategoryUser d  where  b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and b.BranchCode='" + BranchID + "' and b.DC_No=" + sDCNO + " ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        public DataSet GoodReceivedListNew_Semi(string sDCNO, string BranchID, string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "select *,case isstocked when 1 then 'Received' else 'Pending' end as stt   from tblTranssemiGoodsTransfer_" + Productioncode + " b,tblSemiCategory c,tblSemiIngridents d  " +
                " where  b.CategoryId=c.SemiCatID and b.DescriptionId=d.SemiIngridID and b.BranchCode='" + BranchID + "' and b.DC_No=" + sDCNO + " ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        // FOR STORE

        public DataSet GoodReceivedListNewStore(string sDCNO, string BranchID, string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblTransGoodsTransferStore_" + Productioncode + " b,tblingridentscategory c,tblingridents d  where  b.CategoryId=c.IngCatID " +
                " and b.DescriptionId=d.IngridID and b.BranchCode='" + BranchID + "' and b.DC_No=" + sDCNO + " ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }



        public DataSet GoodReceivedList2(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblTransGoodsTransfer2 b,tblcategory c,tblCategoryUser d  where  b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and b.BranchCode='" + BranchID + "' and b.DC_No=" + sDCNO + " ";
            //ds = dbObj.InlineExecuteDataSet(sqry);
            // Main Server
            ds = dbObj.InlineExecuteDataSetMain(sqry);

            return ds;
        }
        public DataSet GoodReceivedListNellai(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblTransGoodsTransfer3 b,tblcategory c,tblCategoryUser d  where  b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and b.BranchCode='" + BranchID + "' and b.DC_No=" + sDCNO + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GoodReceivedListChennai(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblTransGoodsTransfer4 b,tblcategory c,tblCategoryUser d  where  b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and b.BranchCode='" + BranchID + "' and b.DC_No=" + sDCNO + " ";
            //ds = dbObj.InlineExecuteDataSet(sqry);
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        public DataSet GoodTrasnferListExp(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            // string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer a,tblTransGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            string sqry = "select c.category,d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty,b.damage_Qty as damageQty,b.Missing_Qty as MissingQty from tblGoodTransfer_" + BranchID + " a,tbltransGoodsTransfer_" + BranchID + " b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and  a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GoodTrasnferListExpstore(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            // string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer a,tblTransGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            string sqry = "select d.IngredientName as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty,b.damage_Qty as damageQty,b.Missing_Qty as MissingQty " +
                " from tblGoodTransferstore_" + BranchID + " a,tbltransGoodsTransferstore_" + BranchID + " b,tblingridentscategory c,tblingridents d  " +
                " where a.DC_NO=b.DC_No and d.IngCatID=c.IngCatID  and b.DescriptionId=d.IngridID and  a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GoodReceivedListExp(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            // string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer a,tblTransGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty,b.damage_Qty as damageQty,b.Missing_Qty as MissingQty from tblGoodreceived_" + BranchID + " a,tbltransGoodsreceived_" + BranchID + " b,tblcategory c,tblCategoryUser d  where a.recid=b.recid and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and  a.recid='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }



        public DataSet GoodReceived(string sDCNO, string BranchID, string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "select  d.printitem,c.Categoryid,d.CategoryUserID,u.UOM,c.Category,d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer_" + Productioncode + " a,tblTransGoodsTransfer_" + Productioncode + " b,tblcategory c,tblCategoryUser d,tbluom u  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and u.UOMID=d.Unit and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and b.isStocked='0' ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        public DataSet GoodReceived_Semi(string sDCNO, string BranchID, string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "select  d.SemiIngredientName as printitem,c.SemiCatID as Categoryid,d.SemiIngridID as CategoryUserID,u.UOM,c.SemiCategory as Category,d.SemiIngredientName as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty " +
                " from tblSemiGoodTransfer_" + Productioncode + " a,tblTransSemiGoodsTransfer_" + Productioncode + " b,tblSemiCategory c,tblSemiIngridents d,tbluom u  where a.DC_NO=b.DC_No " +
                " and b.CategoryId=c.SemiCatID and b.DescriptionId=d.SemiIngridID and u.UOMID=d.Units and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' " +
                " and b.isStocked='0' ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        // FOR STORE

        public DataSet GoodReceivedStore(string sDCNO, string BranchID, string Productioncode)
        {
            DataSet ds = new DataSet();
            //string sqry = "select  c.IngCatID as Categoryid,d.IngridID as CategoryUserID,u.UOM,c.IngreCategory as Category,d.IngredientName as Item , " +
            //    " b.Order_Qty as OrderQty,b.Received_Qty as SentQty " +
            //    " from tblGoodTransferStore_" + Productioncode + " a,tblTransGoodsTransferStore_" + Productioncode + " b,tblingridentscategory c,tblingridents d,tbluom u  " +
            //    " where a.DC_NO=b.DC_No and b.CategoryId=c.IngCatID and b.DescriptionId=d.IngridID and u.UOMID=d.Units and a.BranchCode='" + BranchID + "'  " +
            //    " and a.DC_No='" + sDCNO + "'  ";

            string sqry = "  select  isnull(cu.CategoryID,0) as Fincatid,isnull(cu.categoryuserid,0) as Finitemid,isnull(cu.definition,'No Item Conversion') as FINitem,c.IngCatID as Categoryid,d.IngridID as CategoryUserID,u.UOM,c.IngreCategory as Category,d.IngredientName as Item , " +
  " b.Order_Qty as OrderQty,b.Received_Qty as SentQty  " +
   " from tblGoodTransferStore_" + Productioncode + " a inner join tblTransGoodsTransferStore_" + Productioncode + " b on a.DC_NO=b.DC_No " +
   " inner join tblingridentscategory c on b.CategoryId=c.IngCatID " +
   " inner join tblingridents as d on b.DescriptionId=d.IngridID " +
   " left join tblstoreSetting as f on f.ingid=d.IngridID " +
   " left join tblcategoryuser as cu on cu.categoryuserid=f.categoryuserid " +
   "  inner join tbluom u on u.UOMID=d.Units " +
   " where b.CategoryId=c.IngCatID and a.BranchCode='" + BranchID + "'   and a.DC_No='" + sDCNO + "' ";

            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        public DataSet GoodReceivedListExp2(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer2 a,tblTransGoodsTransfer2 b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }



        public DataSet GoodReceivedListExpNellai(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer3 a,tblTransGoodsTransfer3 b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GoodReceivedListExpChennai(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer4 a,tblTransGoodsTransfer4 b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }



        public DataSet GoodReceivedListReturn(string sDCNO, int BranchID)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblGoodTransfer a,tblTransGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchID=" + BranchID + " and a.DC_No='" + sDCNO + "' and a.IsReceived=1 ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        #endregion

        #region Stock Home Screen

        public DataSet ExpDateGrid(string stable)
        {
            DataSet ds = new DataSet();

            string sqry = "select a.category,b.Definition ,c.Available_QTY,c.Expirydate as Date  from tblcategory a,tblCategoryUser b,tblStock_" + stable + " c where a.categoryid=c.CategoryID  and b.CategoryUserID=c.SubCategoryID";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        #endregion

        #region Purchase Return

        public int insertPurchaseReturn(string Branch, string DC_No, string Ret_Np, string Ret_Date, string RequestNO, string TotalQty, string Status, int isCancel, string ProductionName, int isReturn, int BranchID)
        {
            int iSave = 0;
            string sQry = "insert into tblPurchaseReturn (Branch,DC_No,Ret_Np,Ret_Date,RequestNO,TotalQty,Status,isCancel,ProductionName,isReturn,BranchID) values('" + Branch + "','" + DC_No + "','" + Ret_Np + "','" + Ret_Date + "','" + RequestNO + "','" + TotalQty + "','" + Status + "','" + isCancel + "','" + ProductionName + "','" + isReturn + "','" + BranchID + "')";
            iSave = dbObj.InlineExecuteNonQuery(sQry);
            return iSave;

        }
        public DataSet ReturnGrid(string sFrom, string sTo)
        {
            DataSet ds = new DataSet();

            string sqry = "select c.Definition,b.Quantity,'KK Nagar' as Store,case a.iPayMode  when 1 then 'Wastage' when 2 then 'DateBar' when 3 then 'Excess Return' when 4 then 'Damage' when 5 then 'Wrong GRN' when 6 then 'shortage'  when 7 then 'Fungus'   when 8 then 'Fungus Before Date' when 9 then 'To Production' when 10 then 'Return To Production(Recycle)' when 11 then 'staff consumed' when 12 then  'To pothys' when 13 then  'Stock (+)(-)' when 14 then  'Stock Shift' when 15 then  'Stock Consumed' end as Reason,a.RetDate from tblReturn_CO1 a,tblTransReturn_CO1 b,tblCategoryUser c where a.RetNo=b.RetNo and c.CategoryUserID=b.SubCategoryID and convert(date,a.RetDate) between '" + sFrom + "' and '" + sTo + "' union select c.Definition,b.Quantity,'ByePass' as Store,case a.iPayMode  when 1 then 'Wastage' when 2 then 'DateBar' when 3 then 'Excess Return' when 4 then 'Damage' when 5 then 'Wrong GRN' when 6 then 'shortage'  when 7 then 'Fungus'   when 8 then 'Fungus Before Date' when 9 then 'To Production' when 10 then 'Return To Production(Recycle)' when 11 then 'staff consumed' when 12 then  'To pothys' when 13 then  'Stock (+)(-)' when 14 then  'Stock Shift' when 15 then  'Stock Consumed' end as Reason,a.RetDate from tblReturn_CO2 a,tblTransReturn_CO2 b,tblCategoryUser c  where a.RetNo=b.RetNo and c.CategoryUserID=b.SubCategoryID and convert(date,a.RetDate) between '" + sFrom + "' and '" + sTo + "'  union select c.Definition,b.Quantity,'BB kulam' as Store,case a.iPayMode  when 1 then 'Wastage' when 2 then  'DateBarred' when 3 then 'Excess' when 4 then 'Damage' end as Reason,a.RetDate from tblReturn_CO3 a,tblTransReturn_CO3  b,tblCategoryUser c where a.RetNo=b.RetNo and c.CategoryUserID=b.SubCategoryID and  convert(date,a.RetDate)  between '" + sFrom + "' and '" + sTo + "'   union  select c.Definition,b.Quantity,'Narayanapuram' as  Store,case a.iPayMode  when 1 then 'Wastage' when 2 then 'DateBarred' when 3 then 'Excess' when 4 then 'Damage'  end as Reason,a.RetDate from tblReturn_CO4 a,tblTransReturn_CO4 b,tblCategoryUser c where a.RetNo=b.RetNo and  c.CategoryUserID=b.SubCategoryID and convert(date,a.RetDate)  between '" + sFrom + "' and '" + sTo + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet ReturnGridHomePage(string sTable)
        {
            DataSet ds = new DataSet();

            string sqry = "select c.Definition,b.Quantity,'KK Nagar' as Store,case a.iPayMode  when 1 then 'Wastage' when 2 then 'DateBar' when 3 then 'Excess Return' when 4 then 'Damage' when 5 then 'Wrong GRN' when 6 then 'shortage'  when 7 then 'Fungus'   when 8 then 'Fungus Before Date' when 9 then 'To Production' when 10 then 'Return To Production(Recycle)' when 11 then 'staff consumed' when 12 then  'To pothys' when 13 then  'Stock (+)(-)' when 14 then  'Stock Shift' when 15 then  'Stock Consumed' end as Reason from tblReturn_" + sTable + " a,tblTransReturn_" + sTable + " b,tblCategoryUser c where a.RetNo=b.RetNo and c.CategoryUserID=b.SubCategoryID and convert(date,a.RetDate)=convert(date,getdate()) ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public int insertTransPurchaseReturn(string Ret_No, int CategoryId, int DescriptionId, string Qty, string Units, string Reason)
        {
            int iSave = 0;
            string sQry = "insert into tblTransPurchareReturn (Ret_No,CategoryId,DescriptionId,Qty,Units,Reason) values('" + Ret_No + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Reason + "')";
            iSave = dbObj.InlineExecuteNonQuery(sQry);
            return iSave;

        }

        public int insertTransPurchaseReturnNew(string Ret_No, int CategoryId, int DescriptionId, decimal Qty, int Units, int Reason)
        {
            int iSave = 0;
            string sQry = "insert into tblTransPurchareReturn (Ret_No,CategoryId,DescriptionId,Qty,Units,Reason) values('" + Ret_No + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Reason + "')";
            iSave = dbObj.InlineExecuteNonQuery(sQry);
            return iSave;

        }
        #endregion

        #region Validation

        public DataSet GerBranchOrders(int iBranchID, string sCode)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblPurchaseRequest_" + sCode + " where  BranchID ='" + iBranchID + "' and IsAccepted=1";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GoodTransferStatus(string scode)
        {
            DataSet ds = new DataSet();



            string sqry = " select * from tblGoodTransfer where isTransfer=0 and isReceived=0 and  BranchCode='" + scode + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GoodTransferStatusChennai(string scode)
        {
            DataSet ds = new DataSet();



            string sqry = " select * from tblGoodTransfer4 where isTransfer=0 and isReceived=0 and  BranchCode='" + scode + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GoodTransferStatus2(string scode)
        {
            DataSet ds = new DataSet();

            string sqry = " select * from tblGoodTransfer2 where isTransfer=0 and isReceived=0 and  BranchCode='" + scode + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GoodTransferStatus3(string scode)
        {
            DataSet ds = new DataSet();

            string sqry = " select * from tblGoodTransfer3 where isTransfer=0 and isReceived=0 and  BranchCode='" + scode + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet Validation()
        {
            DataSet ds = new DataSet();
            string sqry = "select top 2 * from tblPurchaseRequest_BY where IsAccepted=0  union all select top 2 * from tblPurchaseRequest_KK where IsAccepted=0  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet Validation2()
        {
            DataSet ds = new DataSet();
            string sqry = "  select top 1000 * from tblPurchaseRequest_BB where IsAccepted=0   union all select  top 1000 * from tblPurchaseRequest_NP where IsAccepted=0 ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet Validation3()
        {
            DataSet ds = new DataSet();
            string sqry = "  select top 2 * from tblPurchaseRequest_NE where IsAccepted=0 ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet ValidationCH()
        {
            DataSet ds = new DataSet();
            string sqry = "select  top 2 * from tblPurchaseRequest_MD where IsAccepted=0 union all select  top 2 * from tblPurchaseRequest_PU where IsAccepted=0 ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #region
        #endregion Customer Order
        public int CustomerOrder(int CustomerOrderNo, DateTime OrderDate, string CustomerName, string CustomerAddress, string PhoneNo, double TotalAmount, double Advance, double Balance, DateTime DeliveryDate, string DeilveryTime, string OrderTakenBy, int BranchID, string branchcode, int status)
        {
            int isave = 0;
            string sqry = "insert into tblCustomerOrder (CustomerOrderNo,OrderDate,CustomerName,CustomerAddress,PhoneNo,TotalAmount,Advance,Balance,DeliveryDate,DeilveryTime,OrderTakenBy,BranchID,BranchCode,Status) values('" + CustomerOrderNo + "','" + OrderDate + "','" + CustomerName + "','" + CustomerAddress + "','" + PhoneNo + "','" + TotalAmount + "','" + Advance + "','" + Balance + "','" + DeliveryDate + "','" + DeilveryTime + "','" + OrderTakenBy + "','" + BranchID + "','" + branchcode + "','" + status + "')";
            isave = dbObj.InlineExecuteNonQuery(sqry);
            return isave;
        }
        public int TransCustomerOrder(int CustomerOrderNo, int CategoryID, int SubCategoryID, double Qty, double Rate, double Amount, string Units)
        {
            int isave = 0;
            string sqry = "insert into tblTransCustomerOrder(CustomerOrderNo,CategoryID,SubCategoryID,Qty,Rate,Amount,Units)values('" + CustomerOrderNo + "','" + CategoryID + "','" + SubCategoryID + "','" + Qty + "','" + Rate + "','" + Amount + "','" + Units + "')";
            isave = dbObj.InlineExecuteNonQuery(sqry);
            return isave;
        }

        public int CancelCustomerOrder(int CustomerOrderNo, string sTable)
        {
            int isave = 0;
            DataSet ds = new DataSet();
            //   string sqry = "update tblsales_" + sTable + " set iEdit=1 where BillNo= " + CustomerOrderNo + "";
            string sqry = "select * from tblsales_" + sTable + " where orderno=" + CustomerOrderNo + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            int billno = Convert.ToInt16(ds.Tables[0].Rows[0]["billno"]);

            string sqryy = "update tblsales_" + sTable + " set cancelstatus='Yes' where billno=" + billno + "";
            isave = dbObj.InlineExecuteNonQuery(sqryy);

            //string sqryy = "delete from tblsales_" + sTable + " where billno=" + billno + "";
            //isave = dbObj.InlineExecuteNonQuery(sqryy);

            //string tsqryy = "delete from tbltranssales_" + sTable + " where salesid=" + billno + "";
            //isave = dbObj.InlineExecuteNonQuery(tsqryy);

            return isave;
        }

        public int UpdateOrder(int CustomerOrderNo, double Advance, string sTable)
        {
            int isave = 0;
            string sqry = "update tblsales_" + sTable + " set Advance='" + Advance + "' where BillNo=" + CustomerOrderNo + "";
            isave = dbObj.InlineExecuteNonQuery(sqry);
            return isave;
        }
        public DataSet GetCustomerOrderNo(string sTable)
        {
            DataSet ds = new DataSet();
            string sqry = "  select MAX(OrderNo)+1 as OrderNo from tblsales_" + sTable + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet printcancelorderBlaack(string BranchID, int salesid)
        {
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            string sqrry = "select * from tblorder_" + BranchID + " where orderid=" + salesid + " ";
            dss = dbObj.InlineExecuteDataSet(sqrry);

            int OrderNo = Convert.ToInt32(dss.Tables[0].Rows[0]["orderno"]);

            string sqry = "select e.gst/2 as gs,* from  tblorder_" + BranchID + " a, tblTransorder_" + BranchID + " b,tblCustomer c,tblcategory d, tblCategoryUser e where a.billno=b.billno and a.CustomerID=c.CustomerID and b.CategoryID=d.categoryid and b.SubCategoryID=e.CategoryUserID and a.OrderNo=" + OrderNo + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet selectmobilecancelorder(string table, string phone)
        {
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            string sQry = "select * from tblcustomer where mobileno='" + phone + "' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                int customerid = Convert.ToInt32(ds.Tables[0].Rows[0]["CustomerID"]);

                string sqryy = "select * from tblorder_" + table + " where customerid=" + customerid + " and iscancel=1 ";
                dss = dbObj.InlineExecuteDataSet(sqryy);
                // return dss;

            }
            return dss;
        }

        public DataSet custNAME(string phone)
        {
            DataSet ds = new DataSet();

            string sQry = "select * from tblcustomer where mobileno='" + phone + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);

            return ds;
        }
        public DataSet CustomerOrderBilling(int OrderNo, string BranchID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblsales_" + BranchID + " a,tbltransSales_" + BranchID + " b,tblCustomer c where a.BillNo=b.SalesID and a.OrderNo>0 and a.iEdit=0 and c.CustomerID=a.CustomerID and a.OrderNo=" + OrderNo + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet YetToDeliver(string sBranch)
        {
            DataSet ds = new DataSet();
            //string sqry = " select b.CustomerName,b.MobileNo,OrderNo,a.BillDate,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0  group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.BillDate having NetAmount-SUM(Advance) >0 order by a.BillDate desc ";
            //  string sqry = " select b.CustomerName,b.MobileNo,OrderNo,a.BillDate,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.cancelstatus='No'  group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.BillDate having NetAmount-SUM(Advance) >0 and a.deliverydate =convert(date,getdate()) order by a.BillDate desc ";
            // OLD QUERY (03/10/2015) string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.cancelstatus='No' group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo having (NetAmount)-SUM(Advance) >0 order by a.OrderNo desc";
            string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo having (((NetAmount)-SUM(Advance) >0) and ( convert(date,DeliveryDate) < convert(date,GETDATE()))) order by a.OrderNo desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }



        public DataSet OrderGridDet(int OrderNo, int UserID)
        {
            DataSet ds = new DataSet();
            string sqry = " select b.Quantity,c.category,d.Definition,case a.UserID when 5 then 'KK nagar' when 6 then 'ByePass' when 7 then 'BB Kulam' when 11 then 'NarayanaPuram' end as Store from tblsales_CO1 a, tblTransSales_CO1 b ,tblcategory c ,tblCategoryUser d where a.BillNo=b.SalesID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.OrderNo=" + OrderNo + " and a.UserID=" + UserID + " union all   select b.Quantity,c.category,d.Definition,case a.UserID when 5 then 'KK nagar' when 6 then 'ByePass' when 7 then 'BB Kulam' when 11 then 'NarayanaPuram' end as Store from tblsales_CO2 a, tblTransSales_CO2 b ,tblcategory c ,tblCategoryUser d where a.BillNo=b.SalesID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.OrderNo=" + OrderNo + " and a.UserID=" + UserID + " union all    select b.Quantity,c.category,d.Definition,case a.UserID when 5 then 'KK nagar' when 6 then 'ByePass' when 7 then 'BB Kulam' when 11 then 'NarayanaPuram' end as Store from tblsales_CO3 a, tblTransSales_CO3 b ,tblcategory c ,tblCategoryUser d where a.BillNo=b.SalesID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.OrderNo=" + OrderNo + " and a.UserID=" + UserID + " union all     select b.Quantity,c.category,d.Definition,case a.UserID when 5 then 'KK nagar' when 6 then 'ByePass' when 7 then 'BB Kulam' when 11 then 'NarayanaPuram' end as Store from tblsales_CO4 a, tblTransSales_CO4 b ,tblcategory c ,tblCategoryUser d where a.BillNo=b.SalesID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.OrderNo=" + OrderNo + " and a.UserID=" + UserID + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet OrderdAdmin()
        {
            DataSet ds = new DataSet();
            string sqry = " select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance,a.UserID from tblsales_CO1 a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and convert(date,DeliveryDate)=CONVERT(date,getdate()+1)  group by OrderNo,DeliveryDate,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.UserID having NetAmount-SUM(Advance) >0 union all select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance,a.UserID from tblsales_CO2 a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and convert(date,DeliveryDate)=CONVERT(date,getdate()+1)  group by OrderNo,DeliveryDate,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.UserID having NetAmount-SUM(Advance) >0 union all  select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance,a.UserID from tblsales_CO3 a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and convert(date,DeliveryDate)=CONVERT(date,getdate()+1)  group by OrderNo,DeliveryDate,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.UserID having NetAmount-SUM(Advance) >0 union all  select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance,a.UserID from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and convert(date,DeliveryDate)=CONVERT(date,getdate()+1)  group by OrderNo,DeliveryDate,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.UserID having NetAmount-SUM(Advance) >0   ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet OrderGridAdmin()
        {
            DataSet ds = new DataSet();
            string sqry = "  select  *,convert(nvarchar(50), DeliveryDate,103)+'-'+DeilveryTime as Deilvery,BranchCode+'-'+CONVERT(nvarchar, CustomerOrderNo) as OrderNo from tblCustomerOrder  where Status=0 ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet printBlaack(string BranchID, int OrderNo)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from  tblsales_" + BranchID + " a, tblTransSales_" + BranchID + " b,tblCustomer c,tblcategory d, tblCategoryUser e where a.BillNo=b.SalesID and a.CustomerID=c.CustomerID and b.CategoryID=d.categoryid and b.SubCategoryID=e.CategoryUserID and a.OrderNo=" + OrderNo + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet CustomerOrdeFormDetails()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCustomerOrder a,tblTransCustomerOrder b ,tblcategory c,tblCategoryUser d where a.CustomerOrderNo=b.CustomerOrderNo and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and Status=0";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int testsales(int CategoryID, decimal Quantity, double UnitPrice, double Amount, int SubCategoryID)
        {
            int isave = 0;
            string sqry = "insert into tblTransSales (CategoryID,Quantity,UnitPrice,Amount,SubCategoryID) values('" + CategoryID + "','" + Quantity + "','" + UnitPrice + "','" + Amount + "','" + SubCategoryID + "')";
            isave = dbObj.InlineExecuteNonQuery(sqry);
            return isave;
        }

        public DataSet BindGrid(int id)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblTransSales where TransSalesID= " + id + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet CheckPendingAmountFromCustomer()
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct NetAmount,SUM(Advance) as PaidAmount, NetAmount-SUM(Advance) as Balance from tblsales_CO4 where OrderNo>0  group by NetAmount ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #endregion

        #region Stock Convertion
        public DataSet convertStock(int ibranchid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblSemiFinishedStock a,tblcategory b,tblCategoryUser c where a.CategoryID=b.categoryid and a.SubCategoryID=c.CategoryUserID and a.UserID= " + ibranchid + " and a.Available_QTY>0";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #region Sales Print
        public DataSet PrintingSales(int ID, string sTable, string Mode, string salestypeid)
        {
            DataSet ds = new DataSet();
            string sqry = "";
            //if (Mode == "Order")
            //{
            //    sqry = "select '' as paymenttype,d.gst/2 as cg, d.gst/2 as sg,a.SGST,a.CGST,a.NetAmount, * from tblsales_" + sTable + " a,tblTransSales_" + sTable + " b,tblcategory c,tblCategoryUser d,tblCustomer e where a.BillNo=b.SalesID and c.categoryid=d.CategoryID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and a.OrderNo=" + ID + "";

            //}

            //else
            //{
            //    sqry = "select d.printitem,a.isnormal,a.SalesOrder,f.paymenttype,d.gst/2 as cg, d.gst/2 as sg,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,a.Discount,b.UnitPrice,c.category,d.Definition,SUM(b.Amount) as Amount,SUM(b.Quantity) as Quantity,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,a.NetAmount  from tblsales_" + sTable + "  a,tblTransSales_" + sTable + " b,tblcategory c,tblCategoryUser d,tblCustomer e,tblsalestype f where a.salesid=b.salesuniqueid and  f.salestypeid=a.salestype and  a.BillNo=b.SalesID and c.categoryid=d.CategoryID and a.isnormal=b.isnormal and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and a.BillNo=" + ID + " and (a.salestype='" + salestypeid + "') group by e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,b.UnitPrice,c.category,d.Definition,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,d.gst,a.NetAmount,a.Discount,f.paymenttype,a.isnormal,a.SalesOrder,d.printitem ";
            //}

            if (Mode == "Order")
            {
                sqry = "select '' as paymenttype,d.gst/2 as cg, d.gst/2 as sg,a.SGST,a.CGST,a.NetAmount, * from tblsales_" + sTable + " a,tblTransSales_" + sTable + " b,tblcategory c,tblCategoryUser d,tblCustomer e where a.BillNo=b.SalesID and c.categoryid=d.CategoryID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and a.OrderNo=" + ID + "";

            }

            else
            {
                sqry = "select a.FullBill as FullBill,a.billno,b.SubCategoryID,d.HSNCode,g.PayMode,d.printitem,a.isnormal,a.SalesOrder,f.paymenttype,d.gst/2 as cg, d.gst/2 as sg, " +
                    " e.CustomerName,e.MobileNo,e.address,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,a.Discount,b.UnitPrice,c.category,d.Definition,SUM(b.Amount) as Amount " +
                " ,SUM(b.Quantity) as Quantity,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,a.NetAmount,isnull(a.Roundoff,0.00)as Roundoff,Gstno,a.salestype " +
                " from tblsales_" + sTable + "  a,tblTransSales_" + sTable + " b,tblcategory c,tblCategoryUser d,tblCustomer e,tblsalestype f, tblSalesPaymode g ,tbluom k " +
                " where a.salesid=b.salesuniqueid and  f.salestypeid=a.salestype and  a.BillNo=b.SalesID and c.categoryid=d.CategoryID and a.isnormal=b.isnormal " +
                " and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and a.BillNo=" + ID + " and " +
                " (a.salestype='" + salestypeid + "') and a.iPayMode = g.value   group by b.SubCategoryID,d.HSNCode,g.PayMode,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,b.UnitPrice,c.category,d.Definition,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,d.gst,a.NetAmount,a.Discount,f.paymenttype,a.isnormal,a.SalesOrder,d.printitem,a.Roundoff,a.FullBill,Gstno,e.address ";
            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet PrintingSalesNew(int ID, string sTable, string Mode, string salestypeid)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();

            string sqry = "";
            if (Mode == "Order")
            {
                sqry = "select d.printitem as printitem,'' as paymenttype,d.gst/2 as cg, d.gst/2 as sg,a.SGST,a.CGST,a.NetAmount, * from tblsales_" + sTable + " a,tblTransSales_" + sTable + " b,tblcategory c,tblCategoryUser d,tblCustomer e where a.BillNo=b.SalesID and c.categoryid=d.CategoryID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and a.OrderNo=" + ID + "";

                ds = dbObj.InlineExecuteDataSet(sqry);

                dmerge.Merge(ds);
            }

            else
            {
                sqry = "select d.printitem as printitem,b.cattype,cast(0 as int) as ComboId,d.printitem+' / '+d.hsncode as printite,a.isnormal,a.SalesOrder,f.paymenttype,d.gst/2 as cg, d.gst/2 as sg,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate, " +
                    " a.NetAmount,a.Advance,a.Total,a.Discount,b.UnitPrice,c.category,d.Definition,SUM(b.Amount) as Amount,SUM(b.Quantity) as Quantity, " +
                    " a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,a.NetAmount,d.mrp,(d.mrp * sum(b.quantity)) as amo,cast(d.gst as nvarchar)+' % '  as gst from tblsales_" + sTable + "  a,tblTransSales_" + sTable + " b, " +
                    " tblcategory c,tblCategoryUser d,tblCustomer e,tblsalestype f where a.salesid=b.salesuniqueid and  f.salestypeid=a.salestype and  a.BillNo=b.SalesID " +
                    " and c.categoryid=d.CategoryID and a.isnormal=b.isnormal and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and " +
                    " a.CustomerID=e.CustomerID and a.BillNo=" + ID + " and (a.salestype='" + salestypeid + "') and b.cattype='N'  " +
                    " group by b.cattype,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,b.UnitPrice,c.category,d.Definition,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,d.gst,a.NetAmount,a.Discount,f.paymenttype,a.isnormal,a.SalesOrder,d.printitem,d.hsncode,d.mrp ";

                ds = dbObj.InlineExecuteDataSet(sqry);

                dmerge.Merge(ds);

                sqry = "select d.printitem as printitem,b.cattype,cast(0 as int) as ComboId,d.printitem+' / '+d.hsncode as printite,a.isnormal,a.SalesOrder,f.paymenttype,d.gst/2 as cg, d.gst/2 as sg,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate, " +
                    " a.NetAmount,a.Advance,a.Total,a.Discount,b.UnitPrice,c.category,d.Definition,SUM(b.Amount) as Amount,SUM(b.Quantity) as Quantity, " +
                    " a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,a.NetAmount,d.mrp,(d.mrp * sum(b.quantity)) as amo,cast(d.gst as nvarchar)+' % '  as gst from tblsales_" + sTable + "  a,tblTransSales_" + sTable + " b, " +
                    " tblcategory c,tblCategoryUser d,tblCustomer e,tblsalestype f where a.salesid=b.salesuniqueid and  f.salestypeid=a.salestype and  a.BillNo=b.SalesID " +
                    " and c.categoryid=d.CategoryID and a.isnormal=b.isnormal and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and " +
                    " a.CustomerID=e.CustomerID and a.BillNo=" + ID + " and (a.salestype='" + salestypeid + "') and b.cattype='H'   " +
                    " group by b.cattype,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,b.UnitPrice,c.category,d.Definition,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,d.gst,a.NetAmount,a.Discount,f.paymenttype,a.isnormal,a.SalesOrder,d.printitem,d.hsncode,d.mrp ";

                ds = dbObj.InlineExecuteDataSet(sqry);

                dmerge.Merge(ds);


                string sqryy = "   select  b.cattype,d.ComboId,d.ComboName as printitem,d.ComboName as printite,a.isnormal,a.SalesOrder,f.paymenttype,b.tax/2 as cg, b.tax/2 as sg,e.CustomerName,e.MobileNo,a.BillNo, " +
  " a.BillDate,a.NetAmount,a.Advance,a.Total,a.Discount,sum(b.UnitPrice) as price,c.category,d.ComboName as Definition,SUM(b.Amount) as Amount, " +
  " (b.Quantity) as Quantity,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,a.NetAmount,cast(d.totalrate as nvarchar) as mrp,(d.totalrate * sum(b.quantity)) as amo ,cast(b.tax as nvarchar)+' % ' as gst  " +
  " from tblsales_" + sTable + "  a,tblTransSales_" + sTable + " b,tblcategory c,tblcombo d,tblCustomer e,tblsalestype f  " +
  " where a.salesid=b.salesuniqueid and  f.salestypeid=a.salestype and  a.BillNo=b.SalesID and c.categoryid=d.CategoryID  " +
  " and a.isnormal=b.isnormal and b.iscombo=d.ComboId and a.CustomerID=e.CustomerID " +
   " and a.BillNo=" + ID + " and (a.salestype='" + salestypeid + "') and b.cattype='C' group by b.cattype,d.ComboId,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate, " +
   " a.NetAmount,a.Advance,a.Total,b.quantity, " +
   " c.category,d.ComboName,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,b.tax,a.NetAmount, " +
   " a.Discount,f.paymenttype,a.isnormal,a.SalesOrder,d.totalrate";


                //               string sqryy = "   select  b.cattype,d.ComboId,d.ComboName as printitem,a.isnormal,a.SalesOrder,f.paymenttype, cast('0' as float) as cg, cast('0' as float) as sg,e.CustomerName,e.MobileNo,a.BillNo, " +
                //" a.BillDate,a.NetAmount,a.Advance,a.Total,a.Discount,sum(b.UnitPrice) as price,c.category,d.ComboName as Definition,SUM(b.Amount) as Amount, " +
                //" (b.Quantity) as Quantity,a.CashPaid,a.Balance,a.ipaymode,cast('0' as money) as Tax,a.Biller,a.Attender,cast('0' as float) as SGST,cast('0' as float) as CGST,a.NetAmount   " +
                //" from tblsales_" + sTable + "  a,tblTransSales_" + sTable + " b,tblcategory c,tblcombo d,tblCustomer e,tblsalestype f  " +
                //" where a.salesid=b.salesuniqueid and  f.salestypeid=a.salestype and  a.BillNo=b.SalesID and c.categoryid=d.CategoryID  " +
                //" and a.isnormal=b.isnormal and b.iscombo=d.ComboId and a.CustomerID=e.CustomerID " +
                // " and a.BillNo=" + ID + " and (a.salestype='" + salestypeid + "') and b.cattype='C' group by b.cattype,d.ComboId,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate, " +
                // " a.NetAmount,a.Advance,a.Total,b.quantity, " +
                // " c.category,d.ComboName,a.CashPaid,a.Balance,a.ipaymode,a.Biller,a.Attender,a.NetAmount, " +
                // " a.Discount,f.paymenttype,a.isnormal,a.SalesOrder,d.totalrate";

                DataSet ds1 = dbObj.InlineExecuteDataSet(sqryy);

                dmerge.Merge(ds1);


            }

            //ds = dbObj.InlineExecuteDataSet(sqry);
            return dmerge;
        }

        public DataSet gettaxdetailedgrid(string iSalesID, string sSalesTable, string salestypeid)
        {
            DataSet ds = new DataSet();
            string sQry = "select ts.tax as taxtype,isnull(cu.hsncode,0) as hsncode,(ts.amount) as itemvalue,ts.disc,s.Tax " +
                          " from tblsales_" + sSalesTable + " as s inner join tbltranssales_" + sSalesTable + " as ts on ts.salesuniqueid=s.salesid " +
                          " inner join tblcategoryuser as cu on cu.categoryuserid=ts.subcategoryid " +
                          " where  s.BillNo='" + iSalesID + "' and   (s.salestype='" + salestypeid + "') ";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet PrintingNEWSalesNew(string typee, string id, string salesno, string stablename)
        {
            DataSet ds = new DataSet();

            string sqr = string.Empty;

            if (typee == "C")
            {
                sqr = "Select '*' as emptys,cu.Definition+' X '+ cast(ts.shwqty as nvarchar) as def from tblcombo as c " +
                    " inner join tbltranscombo as tc on tc.comboid=c.comboid inner join tblcategoryuser as cu on cu.itemid=tc.categoryuserid " +
                    " inner join tbltranssales_" + stablename + " as ts on ts.iscombo=cast(c.comboid as nvarchar) and ts.subcategoryid=cu.itemid " +
                    " where c.comboid='" + id + "' and ts.SalesID='" + salesno + "'";
            }
            else if (typee == "H")
            {
                sqr = "Select '*' as emptys,cu.Definition+' X '+ cast(ts.shwqty as nvarchar) as def from tbloffer as c inner join tbltransoffer as tc on tc.offerid=c.offerid inner join tblcategoryuser as cu on cu.itemid=tc.categoryuserid inner join tbltranssales_" + stablename + " as ts on ts.iscombo=c.ofid and ts.subcategoryid=cu.itemid where c.ofid='" + id + "' and ts.SalesID='" + salesno + "'";
            }

            ds = dbObj.InlineExecuteDataSet(sqr);

            return ds;

        }



        public DataSet PrintingSalesLiveKitchen(int ID, string sTable, string Mode, string salestypeid)
        {
            DataSet ds = new DataSet();
            string sqry = "";
            if (Mode == "Order")
            {
                sqry = "select d.gst/2 as cg, d.gst/2 as sg,a.SGST,a.CGST,a.NetAmount, * from tblsales_" + sTable + " a,tblTransSales_" + sTable + " b,tblcategory c,tblCategoryUser d,tblCustomer e where a.BillNo=b.SalesID and c.categoryid=d.CategoryID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and a.OrderNo=" + ID + "  and c.IsLiveKitchen=1 ";

            }

            else
            {
                // sqry = "select d.gst/2 as cg, d.gst/2 as sg,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,a.Discount,b.UnitPrice,c.category,d.Definition,SUM(b.Amount) as Amount,SUM(b.Quantity) as Quantity,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,a.NetAmount  from tblsales_" + sTable + "  a,tblTransSales_" + sTable + " b,tblcategory c,tblCategoryUser d,tblCustomer e where a.BillNo=b.SalesID and c.categoryid=d.CategoryID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and a.BillNo=" + ID + " and c.IsLiveKitchen=1 group by e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,b.UnitPrice,c.category,d.Definition,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,d.gst,a.NetAmount,a.Discount  ";
                sqry = "select d.gst/2 as cg, d.gst/2 as sg,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,a.Discount,b.UnitPrice,c.category,d.Definition,SUM(b.Amount) as Amount,SUM(b.Quantity) as Quantity,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,a.NetAmount  from tblsales_" + sTable + "  a,tblTransSales_" + sTable + " b,tblcategory c,tblCategoryUser d,tblCustomer e where a.BillNo=b.SalesID and c.categoryid=d.CategoryID and a.salesid=b.Salesuniqueid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and a.BillNo=" + ID + " and (a.salestype='" + salestypeid + "') and c.IsLiveKitchen=1 group by e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,b.UnitPrice,c.category,d.Definition,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,d.gst,a.NetAmount,a.Discount  ";
            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }




        public DataSet PrintingOrderSales(int ID, string sTable, string Mode)
        {
            DataSet ds = new DataSet();
            string sqry = "";
            if (Mode == "Order")
            {
                sqry = "select (d.mrp * (cast(b.Qty as float))) as amo,cast(d.gst as nvarchar)+' % '  as gst,d.printitem+' / '+d.hsncode as printite,'0' as  ComboId,d.gst/2 as cg, d.gst/2 as sg,*,b.Qty as Quantity,b.Rate as Unitprice,(a.total - a.advance) as gndtot from tblorder_" + sTable + " a,tblTransorder_" + sTable + " b,tblcategory c,tblCategoryUser d,tblCustomer e where a.BillNo=b.BillNo and c.categoryid=d.CategoryID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and a.OrderNo=" + ID + "";

            }

            else
            {
                sqry = "select (d.mrp * (cast(b.Qty as float))) as amo,cast(d.gst as nvarchar)+' % '  as gst,d.printitem+' / '+d.hsncode as printite,d.gst/2 as cg, d.gst/2 as sg,e.CustomerName,e.MobileNo,a.BillNo,a.orderdate,a.NetAmount,a.Advance,a.Total,b.Rate,c.category,d.Definition,SUM(b.Amount) as Amount,SUM(b.Qty) as Quantity,a.CashPaid,a.Balance,a.Tax   from tblorder_" + sTable + "  a,tblTransorder_" + sTable + " b,tblcategory c,tblCategoryUser d,tblCustomer e where a.BillNo=b.BillNo and c.categoryid=d.CategoryID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and a.BillNo=" + ID + " group by e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,b.UnitPrice,c.category,d.Definition,a.CashPaid,a.Balance,a.Tax,a.Biller,a.attender,d.gst ";
            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #region LedgerGroup

        public DataSet GetGroup()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblGroups";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet CustomerSalesBranch(string sBranch, DateTime sFmdate, DateTime sToDate)
        {
            string store = "";
            //if (sBranch == "CO1")
            //{
            //    store = "KK Nagar";
            //}
            //else if (sBranch == "CO2")
            //{
            //    store = "Byepass";
            //}
            //else if (sBranch == "CO3")
            //{
            //    store = "BB Kulam";
            //}
            //else if (sBranch == "CO4")
            //{
            //    store = "Narayanapuram";
            //}
            //else if (sBranch == "CO5")
            //{
            //    store = "Nellai";
            //}



            //else if (sBranch == "CO6")
            //{
            //    store = "Maduravayol";
            //}
            //else if (sBranch == "CO7")
            //{
            //    store = "Purasavakkam";
            //}
            //else if (sBranch == "CO8")
            //{
            //    store = "Chennai Pothys";
            //}
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance,s.NetAmount,s.Total from tblsales_CO4 as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where (OrderNo=0 or OrderNo <>0) and s.ContactTypeID=1  order by s.BillDate desc ";
            //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
            //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage' when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage' when 7 then 'BB KULAM'  end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
            string sqry = "select s.salesid,s.salestype as typeid,'" + sBranch + "' as Branch, cu.CustomerName,s.BillNo,s.fullbill,s.BillDate,(s.CGST + s.SGST) as Tax,s.NetAmount,((s.Discount )) as discount,s.Total,'Sales' as type, " +
            " sp.PayMode as SalesType,s.Provider,s.Approved,'' as Mobileno from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID inner join tblSalesPaymode as sp on sp.Value=s.iPayMode where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No'   order by s.BillDate desc ";
            //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            //dss.Merge(ds);

            //string sqtyy = " select 'Narayana Puram' as Branch,'Advance' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.advance as Netamount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo<>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            //ds1 = dbObj.InlineExecuteDataSet(sqtyy);
            //dss.Merge(ds1);
            return ds;
        }

        public DataSet CustomerHoldSalesBranch(string sBranch, DateTime sFmdate, DateTime sToDate)
        {
            string store = "";

            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();

            string sqry = "select case s.istempcompleted when 0 then 'Still Hold/Cancel' else 'Completed' end as nam,s.cancelstatus as status,isnull(SalesTypeOrderNo,0) as typeno,isnull(SalesBillno,0) as bno,'" + store + "' as Branch, cu.CustomerName,s.BillNo,s.BillDate,(s.CGST + s.SGST) as Tax,s.NetAmount,((s.NetAmount * s.Discount ) /100) as discount,s.Total,'Sales' as type, " +
            " sp.PayMode as SalesType,s.Provider,s.Approved,'' as Mobileno from tbltempsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID inner join tblSalesPaymode as sp on sp.Value=s.iPayMode where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet CustomerSalesBranchorder(string sBranch, DateTime sFmdate, DateTime sToDate)
        {
            string store = "";

            DataSet ds = new DataSet();
            //string sqry = " (select '" + store + "' as Branch, cu.CustomerName,s.BillNo,s.OrderDate as BillDate,'' as Tax,s.Advance as 'NetAmount',s.Total,'Order Form' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType,s.Paytype,s.BookNo from tblorder_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and convert(date,s.orderdate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.orderdate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.iscancel=0) ";
            // string sqry = " (select '" + store + "' as Branch, cu.CustomerName,s.BillNo,Convert(varchar(20),s.OrderDate,105) as BillDate,'' as Tax,s.Advance as 'NetAmount',s.Total,'Order Form' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType,s.Paytype,s.BookNo,OrderTime from tblorder_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and convert(date,s.orderdate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.orderdate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.iscancel=0) ";

            string sqry = "(select distinct '" + sBranch + "' as Branch, cu.CustomerName,s.BillNo,toa.Billdate as BillDate,ts.Gst as Tax, " +
                          "round((toa.Amount/(ts.gst+100)*100),2) as 'NetAmount',round((round((toa.Amount/(ts.gst+100)*100),2) * ts.Gst /100),2) as taxamount ,toa.amount as 'Payamount',s.Total,'Order Form' as type, st.paymode as  SalesType,toa.type as Paytype,s.BookNo,OrderTime from tblorder_" + sBranch + " as s inner join tblTransOrder_" + sBranch + " as ts on ts.BillNo=s.BillNo " +
                          " inner join tbltransorderamount_" + sBranch + " as toa on toa.billno=s.billno inner join tblsalespaymode as st on st.value=toa.paymode inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where toa.orderno=s.orderno and  s.OrderNo>0  " +
                          " and convert(date,toa.Billdate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,toa.Billdate)  <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.iscancel=0)";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet CustomerSalesBranchpaymodenew(string sBranch, DateTime sFmdate, DateTime sToDate, string paymode)
        {
            string sqry = "";
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            string store = "";
            if (sBranch == "CO1")
            {
                store = "KK Nagar";
            }
            else if (sBranch == "CO2")
            {
                store = "Byepass";
            }
            else if (sBranch == "CO3")
            {
                store = "BB Kulam";
            }
            else if (sBranch == "CO4")
            {
                store = "Narayanapuram";
            }
            else if (sBranch == "CO5")
            {
                store = "Nellai";
            }


            else if (sBranch == "CO6")
            {
                store = "Maduravayol";
            }

            else if (sBranch == "CO7")
            {
                store = "Purasavakkam";
            }

            //if (paymode != "12")
            //{

            //    //"select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,'Order Form' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' ";

            //    //sqry = "(select '" + store + "' as Branch, cu.CustomerName,s.BillNo,s.OrderDate as BillDate,'' as Tax,s.Advance as 'NetAmount',s.Total,'Order Form' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType,s.Paytype,s.BookNo from tblorder_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and convert(date,s.orderdate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.orderdate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.iscancel=0 and  s.ipaymode=" + paymode + ") ";

            //    sqry = "(select '" + store + "' as Branch, cu.CustomerName,s.BillNo,Convert(varchar(20),s.OrderDate,105) as BillDate,'' as Tax,s.Advance as 'NetAmount',s.Total,'Order Form' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType,s.Paytype,s.BookNo,OrderTime from tblorder_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and convert(date,s.orderdate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.orderdate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.iscancel=0 and  s.ipaymode=" + paymode + ") ";

            //}
            //else
            //{
            //    sqry = "(select '" + store + "' as Branch, cu.CustomerName,s.BillNo,Convert(varchar(20),s.OrderDate,105) as BillDate,'' as Tax,s.Advance as 'NetAmount',s.Total,'Order Form' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType,s.Paytype,s.BookNo,OrderTime from tblorder_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and convert(date,s.orderdate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.orderdate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.iscancel=0) ";


            //}

            if (paymode == "All")
            {
                sqry = "(select distinct'" + sBranch + "' as Branch, cu.CustomerName,s.BillNo,toa.Billdate as BillDate,ts.Gst as Tax, " +
                         " round((toa.Amount/(ts.gst+100)*100),2) as 'NetAmount',round((round((toa.Amount/(ts.gst+100)*100),2) * ts.Gst /100),2) as taxamount ,toa.amount as 'Payamount',s.Total,'Order Form' as type, st.paymode as  SalesType,toa.type as Paytype,s.BookNo,OrderTime from tblorder_" + sBranch + " as s inner join tblTransOrder_" + sBranch + " as ts on ts.BillNo=s.BillNo " +
                         " inner join tbltransorderamount_" + sBranch + " as toa on toa.billno=s.billno inner join tblsalespaymode as st on st.value=toa.paymode inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where toa.orderno=s.orderno and  s.OrderNo>0  " +
                         " and convert(date,toa.Billdate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,toa.Billdate)  <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.iscancel=0)";
            }
            else
            {
                sqry = "(select distinct '" + sBranch + "' as Branch, cu.CustomerName,s.BillNo,toa.Billdate as BillDate,ts.Gst as Tax, " +
                         " round((toa.Amount/(ts.gst+100)*100),2) as 'NetAmount',round((round((toa.Amount/(ts.gst+100)*100),2) * ts.Gst /100),2) as taxamount ,toa.amount as 'Payamount',s.Total,'Order Form' as type, st.paymode as  SalesType,toa.type as Paytype,s.BookNo,OrderTime from tblorder_" + sBranch + " as s inner join tblTransOrder_" + sBranch + " as ts on ts.BillNo=s.BillNo " +
                         " inner join tbltransorderamount_" + sBranch + " as toa on toa.billno=s.billno inner join tblsalespaymode as st on st.value=toa.paymode inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where toa.orderno=s.orderno and  s.OrderNo>0  " +
                         " and convert(date,toa.Billdate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,toa.Billdate)  <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.iscancel=0 and toa.paymode='" + paymode + "')";
            }

            ds = dbObj.InlineExecuteDataSet(sqry);



            return ds;
        }

        public DataSet CustomerSalesBranchpaymode(string sBranch, DateTime sFmdate, DateTime sToDate, string paymode)
        {
            string store = "";
            //if (sBranch == "CO1")
            //{
            //    store = "KK Nagar";
            //}
            //else if (sBranch == "CO2")
            //{
            //    store = "Byepass";
            //}
            //else if (sBranch == "CO3")
            //{
            //    store = "BB Kulam";
            //}
            //else if (sBranch == "CO4")
            //{
            //    store = "Narayanapuram";
            //}
            //else if (sBranch == "CO5")
            //{
            //    store = "Nellai";
            //}


            //else if (sBranch == "CO7")
            //{
            //    store = "Maduravayol";
            //}
            //else if (sBranch == "CO8")
            //{
            //    store = "Chennai Pothys";
            //}
            //else if (sBranch == "CO9")
            //{
            //    store = "Palayam";
            //}
            //else if (sBranch == "CO10")
            //{
            //    store = "Periyar";
            //}
            //else if (sBranch == "CO11")
            //{
            //    store = "NewBusStand";
            //}
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            if (paymode == "All")
            {
                //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
                // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
                // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance,s.NetAmount,s.Total from tblsales_CO4 as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where (OrderNo=0 or OrderNo <>0) and s.ContactTypeID=1  order by s.BillDate desc ";
                //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,'Order Form' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage' when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage' when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";

                //  old string sqry = "select '" + store + "' as Branch,s.BillNo,s.BillDate,(s.CGST + s.SGST) as Tax,s.NetAmount,((s.discount/100)*s.total) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType,s.Provider,s.Approved,c.customername,c.mobileNo from tblsales_" + sBranch + " as s,tblcustomer c where s.customerid=c.customerid and OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No'  order by s.BillDate desc ";
                //string sqry = "select s.salesid,s.salestype as typeid,'" + store + "' as Branch,s.BillNo,CONVERT(VARCHAR(20), [BillDate], 103) AS DATEPART,CONVERT(VARCHAR(20), [BillDate], 108) AS TIMEPART,s.BillDate,sum((((b.Amount) * cc.GST) / 100 )) as tax ,s.NetAmount,((s.Discount )) as discount,s.Total,'Sales' as type, " +
                //" sp.PayMode as SalesType,s.Provider,s.Approved,c.customername,c.mobileNo from tblsales_" + sBranch + " s, tblcustomer c,tblTransSales_" + sBranch + " b,tblCategoryUser cc,tblSalesPaymode as sp  where sp.Value=s.iPayMode and  s.customerid=c.customerid and s.BillNo=b.Salesid and b.subcategoryid=cc.categoryuserid  and OrderNo=0  and convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' group by s.BillNo,s.BillDate,s.NetAmount,s.discount,s.total,s.iPayMode,s.Provider,s.Approved, c.customername,c.mobileNo,sp.paymode,s.salesid,s.salestype  order by s.BillDate desc  ";
                string sqry = "select s.salesid,s.salestype as typeid,'" + sBranch + "' as Branch,s.BillNo,s.fullbill,CONVERT(VARCHAR(20), [BillDate], 103) AS DATEPART,CONVERT(VARCHAR(20), [BillDate], 108) AS TIMEPART,s.BillDate,(s.CGST + s.SGST) as Tax,s.NetAmount,((s.Discount)) as discount,s.Total,'Sales' as type, " +
               " sp.PayMode  as SalesType,s.Provider,s.Approved ,c.customername,c.mobileNo from tblsales_" + sBranch + " as s,tblcustomer c,tblSalesPaymode as sp where sp.Value=s.iPayMode and s.customerid=c.customerid and OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No'  order by s.BillDate desc ";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,'Order Form' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM'  end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM'  end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                string sqry = "select s.salesid,s.salestype as typeid,'" + sBranch + "' as Branch,s.BillNo,s.fullbill,CONVERT(VARCHAR(20), [BillDate], 103) AS DATEPART,CONVERT(VARCHAR(20), [BillDate], 108) AS TIMEPART,s.BillDate,(s.CGST + s.SGST) as Tax,s.NetAmount,((s.Discount)) as discount,s.Total,'Sales' as type, " +
                " sp.PayMode  as SalesType,s.Provider,s.Approved ,c.customername,c.mobileNo from tblsales_" + sBranch + " as s,tblcustomer c,tblSalesPaymode as sp where sp.Value=s.iPayMode and s.customerid=c.customerid and OrderNo=0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No'  order by s.BillDate desc ";
                //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            //dss.Merge(ds);

            //string sqtyy = " select 'Narayana Puram' as Branch,'Advance' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.advance as Netamount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo<>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            //ds1 = dbObj.InlineExecuteDataSet(sqtyy);
            //dss.Merge(ds1);
            return ds;
        }

        public DataSet CustomerHoldSalesBranchpaymode(string sBranch, DateTime sFmdate, DateTime sToDate, string paymode)
        {
            string store = "";

            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            if (paymode == "All")
            {

                string sqry = "select case s.istempcompleted when 0 then 'Still Hold/Cancel' else 'Completed' end as nam,s.cancelstatus as status,isnull(SalesTypeOrderNo,0) as typeno,isnull(SalesBillno,0) as bno,'" + store + "' as Branch,s.BillNo,s.BillDate,sum((((b.Amount) * cc.GST) / 100 )) as tax ,s.NetAmount,((s.NetAmount * s.Discount ) /100) as discount,s.Total,'Sales' as type, " +
                " sp.PayMode as SalesType,s.Provider,s.Approved,c.customername,c.mobileNo from tblTempsales_" + sBranch + " s, tblcustomer c,tbltempTransSales_" + sBranch + " b,tblCategoryUser cc,tblSalesPaymode as sp  where sp.Value=s.iPayMode " +
                " and  s.customerid=c.customerid and s.BillNo=b.Salesid and b.subcategoryid=cc.categoryuserid  and OrderNo=0  and convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' group by s.BillNo,s.BillDate,s.NetAmount,s.discount,s.total,s.iPayMode,s.Provider,s.Approved, c.customername,c.mobileNo,sp.paymode,SalesTypeOrderNo,SalesBillno,s.istempcompleted,s.cancelstatus  order by s.BillDate desc  ";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else if (paymode == "0" || paymode == "1")
            {

                string sqry = "select case s.istempcompleted when 0 then 'Still Hold/Cancel' else 'Completed' end as nam,s.cancelstatus as status,isnull(SalesTypeOrderNo,0) as typeno,isnull(SalesBillno,0) as bno,'" + store + "' as Branch,s.BillNo,s.BillDate,(s.CGST + s.SGST) as Tax,s.NetAmount,((s.NetAmount * s.Discount ) /100) as discount,s.Total,'Sales' as type, " +
                " sp.PayMode  as SalesType,s.Provider,s.Approved ,c.customername,c.mobileNo from tblTempsales_" + sBranch + " as s,tblcustomer c,tblSalesPaymode as sp where sp.Value=s.iPayMode " +
                " and s.customerid=c.customerid and OrderNo=0 and s.isTempcompleted='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No'  order by s.BillDate desc ";

                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else if (paymode == "Yes")
            {
                string sqry = "select case s.istempcompleted when 0 then 'Still Hold/Cancel' else 'Completed' end as nam,s.cancelstatus as status,isnull(SalesTypeOrderNo,0) as typeno,isnull(SalesBillno,0) as bno,'" + store + "' as Branch,s.BillNo,s.BillDate,(s.CGST + s.SGST) as Tax,s.NetAmount,((s.NetAmount * s.Discount ) /100) as discount,s.Total,'Sales' as type, " +
                " sp.PayMode  as SalesType,s.Provider,s.Approved ,c.customername,c.mobileNo from tblTempsales_" + sBranch + " as s,tblcustomer c,tblSalesPaymode as sp where sp.Value=s.iPayMode " +
                " and s.customerid=c.customerid and OrderNo=0 and s.cancelstatus='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";

                ds = dbObj.InlineExecuteDataSet(sqry);
            }

            return ds;
        }



        public DataSet CustomerSalesBranchpaymodeDiscount(string sBranch, DateTime sFmdate, DateTime sToDate, string paymode)
        {
            string store = "";
            //if (sBranch == "CO1")
            //{
            //    store = "KK Nagar";
            //}
            //else if (sBranch == "CO2")
            //{
            //    store = "Byepass";
            //}
            //else if (sBranch == "CO3")
            //{
            //    store = "BB Kulam";
            //}
            //else if (sBranch == "CO4")
            //{
            //    store = "Narayanapuram";
            //}
            //else if (sBranch == "CO5")
            //{
            //    store = "Nellai";
            //}



            //else if (sBranch == "CO6")
            //{
            //    store = "Maduravayol";
            //}

            //else if (sBranch == "CO7")
            //{
            //    store = "Purasavakkam";
            //}
            //else if (sBranch == "CO8")
            //{
            //    store = "Chennai Pothys";
            //}
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            if (paymode == "All")
            {
                //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
                // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
                // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance,s.NetAmount,s.Total from tblsales_CO4 as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where (OrderNo=0 or OrderNo <>0) and s.ContactTypeID=1  order by s.BillDate desc ";
                //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,'Order Form' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage' when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage' when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";

                //  old  string sqry = "select '" + store + "' as Branch,s.BillNo,s.BillDate,(s.CGST + s.SGST) as Tax,s.NetAmount,((s.discount/100)*s.NetAmount) as discount,round(s.Total,0) as Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType ,s.Provider,s.Approved,'' as customername,'' as mobileno from tblsales_" + sBranch + " as s where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' and Discount>0  order by s.BillDate desc ";

                string sqry = "select s.salesid,s.salestype as typeid,'" + sBranch + "' as Branch,s.BillNo,s.FullBill,s.BillDate,sum((((b.Amount) * cc.GST) / 100 )) as tax ,s.NetAmount,((s.Discount)) as discount,round(s.Total,0) as Total,'Sales' as type, " +
                " sp.PayMode  as SalesType ,s.Provider,s.Approved,'' as customername,'' as mobileno from tblsales_" + sBranch + " s ,tblcustomer c,tblTransSales_" + sBranch + " b,tblCategoryUser cc,tblSalesPaymode as sp where sp.Value=s.iPayMode and s.customerid=c.customerid and s.BillNo=b.Salesid and b.subcategoryid=cc.categoryuserid  and OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' and s.Discount>0  group by s.BillNo,s.BillDate,s.NetAmount,s.discount,s.total,s.iPayMode,s.Provider,s.Approved, c.customername,c.mobileNo,sp.paymode,s.salesid,s.salestype  order by s.BillDate desc  ";

                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,'Order Form' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM'  end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM'  end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                string sqry = "select s.salesid,s.salestype as typeid,'" + sBranch + "' as Branch,s.BillNo,s.fullbill,s.BillDate,(s.CGST + s.SGST) as Tax,s.NetAmount,((s.Discount )) as discount,round(s.Total,0) as Total,'Sales' as type, " +
                " sp.PayMode as  SalesType,s.Provider,s.Approved,'' as customername,'' as mobileno from tblsales_" + sBranch + " as s,tblSalesPaymode as sp where sp.Value=s.iPayMode and OrderNo=0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No'  and s.Discount>0  order by s.BillDate desc ";
                //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            //dss.Merge(ds);

            //string sqtyy = " select 'Narayana Puram' as Branch,'Advance' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.advance as Netamount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo<>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            //ds1 = dbObj.InlineExecuteDataSet(sqtyy);
            //dss.Merge(ds1);
            return ds;
        }
        public DataSet CustomerSalesBranch1(string sBranch)
        {
            DataSet ds = new DataSet();
            //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
            string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.NetAmount from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance as NetAmount from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet CustomerSalesBranchreport(string sBranch, string sFmdate, string sToDate, string name)
        {
            DataSet ds = new DataSet();
            //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
            string sqry = "select  '" + name + "' as StoreName, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance,s.NetAmount from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where (OrderNo=0 or OrderNo <>0) and s.ContactTypeID=1 and  s.BillDate >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "'   order by s.BillDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet CustomerSalesdetailedreport(int sBillno, string sTable)
        {
            DataSet ds = new DataSet();
            //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
            string sqry = "select s.orderID,s.orderDate,ts.Qty,ts.Rate,ts.Amount,cu.Definition,s.NetAmount,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType,s.Paytype from tblOrder_" + sTable + " as s inner join tblTransorder_" + sTable + " as ts on s.BillNo=ts.Billno inner join tblCategoryUser as cu on cu.CategoryUserID=ts.SubCategoryID where s.BillNo=" + sBillno + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet CustomerSalesdetailed(int sBillno, string sTable, string salestype)
        {
            DataSet ds = new DataSet();
            //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
            // string sqry = "select s.salesid,s.Billdate,ts.Quantity,ts.unitPrice,ts.Amount,cu.Definition,s.NetAmount,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType,s.Provider,s.Approved from tblsales_" + sTable + " as s inner join tblTranssales_" + sTable + " as ts on s.BillNo=ts.salesid inner join tblCategoryUser as cu on cu.CategoryUserID=ts.SubCategoryID where s.BillNo=" + sBillno + " ";
            //Comment by shanthi for FullBill 
            //string sqry = "select cu.printitem,s.salesid,s.Billdate,ts.Quantity,ts.unitPrice,ts.Amount,cu.Definition,s.NetAmount,i.paymode  as SalesType,s.Provider,s.Approved from tblsales_" + sTable + " as s inner join tblTranssales_" + sTable + " as ts on s.BillNo=ts.salesid inner join tblsalespaymode as i on i.value=s.ipaymode inner join tblCategoryUser as cu on cu.CategoryUserID=ts.SubCategoryID where s.salesid=ts.salesuniqueid and  s.BillNo=" + sBillno + " and s.salestype='" + salestype + "' ";
            string sqry = "select cu.printitem,s.salesid,s.Billdate,ts.Quantity,ts.unitPrice,ts.Amount,cu.Definition,s.NetAmount,i.paymode  as SalesType,s.Provider,s.Approved from tblsales_" + sTable + " as s inner join tblTranssales_" + sTable + " as ts on s.BillNo=ts.salesid inner join tblsalespaymode as i on i.value=s.ipaymode inner join tblCategoryUser as cu on cu.CategoryUserID=ts.SubCategoryID where s.salesid=ts.salesuniqueid and  s.billno=" + sBillno + " and s.salestype='" + salestype + "'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet CustomerSalesdetailed1(int sfullBillno, string sTable, string salestype, string billno)
        {
            DataSet ds = new DataSet();
            //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
            // string sqry = "select s.salesid,s.Billdate,ts.Quantity,ts.unitPrice,ts.Amount,cu.Definition,s.NetAmount,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType,s.Provider,s.Approved from tblsales_" + sTable + " as s inner join tblTranssales_" + sTable + " as ts on s.BillNo=ts.salesid inner join tblCategoryUser as cu on cu.CategoryUserID=ts.SubCategoryID where s.BillNo=" + sBillno + " ";
            //Comment by shanthi for FullBill 
            //string sqry = "select cu.printitem,s.salesid,s.Billdate,ts.Quantity,ts.unitPrice,ts.Amount,cu.Definition,s.NetAmount,i.paymode  as SalesType,s.Provider,s.Approved from tblsales_" + sTable + " as s inner join tblTranssales_" + sTable + " as ts on s.BillNo=ts.salesid inner join tblsalespaymode as i on i.value=s.ipaymode inner join tblCategoryUser as cu on cu.CategoryUserID=ts.SubCategoryID where s.salesid=ts.salesuniqueid and  s.BillNo=" + sBillno + " and s.salestype='" + salestype + "' ";
            string sqry = "select cu.printitem,s.salesid,s.Billdate,ts.Quantity,ts.unitPrice,ts.Amount,cu.Definition,s.NetAmount,i.paymode  as SalesType,s.Provider,s.Approved from tblsales_" + sTable + " as s inner join tblTranssales_" + sTable + " as ts on s.BillNo=ts.salesid inner join tblsalespaymode as i on i.value=s.ipaymode inner join tblCategoryUser as cu on cu.CategoryUserID=ts.SubCategoryID where s.salesid=ts.salesuniqueid and  s.fullbill=" + sfullBillno  + " and s.salestype='" + salestype + "' and s.billno='" + billno  + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet CustomerHoldSalesdetailed(int sBillno, string sTable)
        {
            DataSet ds = new DataSet();
            //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
            string sqry = "select s.tempsalesid as salesid,s.Billdate,ts.Quantity,ts.unitPrice,ts.Amount,cu.Definition,s.NetAmount,i.paymode as SalesType,s.Provider,s.Approved from tbltempsales_" + sTable + " as s inner join tbltempTranssales_" + sTable + " as ts on s.BillNo=ts.salesid inner join tblsalespaymode as i on i.value=s.ipaymode inner join tblCategoryUser as cu on cu.CategoryUserID=ts.SubCategoryID where s.BillNo=" + sBillno + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet selectbranchmaster()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tbllogin  where IsSuperAdmin=0 order by BranchCode ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectbranchmaster(int userid)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tbllogin  where userid =" + userid + " order by BranchCode ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet DayClosing(string sTable)
        {
            DataSet ds = new DataSet();
            string sQry = " select sum(Amount) as Amount from tblPaymentEntry_" + sTable + " where Date=convert(date, GETDATE())union all(select sum(Advance) as Amount  from tblsales_" + sTable + " where OrderNo>0 and convert(date,BillDate)='2015-09-19') union all(select sum(NetAmount) as Amount  from tblsales_" + sTable + " where OrderNo=0 and convert(date,BillDate)='2015-09-19') ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        //public DataSet CustomerSalesdetailedreport(int sBillno)
        //{
        //    DataSet ds = new DataSet();
        //    //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
        //    // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
        //    string sqry = "select s.SalesID,s.BillDate,ts.Quantity,ts.UnitPrice,ts.Amount,cu.Definition from tblsales_CO4 as s inner join tblTransSales_CO4 as ts on s.BillNo=ts.SalesID inner join tblCategoryUser as cu on cu.CategoryUserID=ts.SubCategoryID where s.BillNo="+ sBillno +" ";
        //    ds = dbObj.InlineExecuteDataSet(sqry);
        //    return ds;
        //}
        #endregion

        #region
        public DataSet ProductionDailyReport(string sDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select c.category,d.Definition,b.prod_qty,b.units from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and  b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and CONVERT(date, b.createdate) = '" + sDate + "'  and  b.prodno in (select MAX(prodno)  from tbltransproductionstock) ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet gettime(string sDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct CONVERT(time, b.createdate) as Date from tblProductionStock a,  tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and   b.CategoryID=c.CategoryID and  b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and   CONVERT(date, b.createdate) = '" + sDate + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetStores(int Userid, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct case UserID when 11 then 'NarayanaPuram' when 5 then 'KK nagar' when 6 then 'ByePass' when 7 then 'BBKulam' end as Branch,UserID from tblStock_" + stable + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetStoresStock(string userID)
        {
            DataSet ds = new DataSet();
            string sqry = "select b.category,c.Definition,a.Available_QTY from tblStock_" + userID + " a,tblcategory b,tblCategoryUser c where a.CategoryID=b.categoryid and a.SubCategoryID=c.CategoryUserID ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet selectStockdecription(int catid, string stable)
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategoryuser";
            string sQry = " select *,a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblcategoryuser a,tblStock_" + stable + " b where  a.CategoryUserID=b.SubCategoryID  and available_Qty>0 and b.categoryid=" + catid + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet GetStoreStockDetails(int iSubCatID, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = " select * from tblcategoryuser a,tblStock_" + stable + " b where  a.CategoryUserID=b.SubCategoryID and   b.stockid=" + iSubCatID + "  and isdelete=0  ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        //public DataSet SelectItems(int iCategory, int userID)
        //{
        //    DataSet ds = new DataSet();
        //    string sQry = "select *, a.Definition+'-'+convert(varchar,convert(datetime,b.Expirydate,120),10) as Item from tblCategoryUser a,tblStock b where a.CategoryUserID=b.SubCategoryID and  a.categoryid=" + iCategory + "  and isdelete=0  and b.Available_QTY>0 and b.UserID=" + userID + "";
        //    ds = dbObj.InlineExecuteDataSet(sQry);
        //    return ds;
        //}

        public int StockTransfer(int ReQNo, string ReqDate, string FromStore, string ToStore, int CategoryID, int SubCategoryID, double Qty, string RequestBy, int StockID)
        {
            int isave = 0;
            string sQry = "insert into tblstockTransfer (ReQNo,ReqDate,FromStore,ToStore,CategoryID,SubCategoryID,Qty,IsSent,RequestBy,StockID) values(" + ReQNo + ",'" + ReqDate + "','" + FromStore + "','" + ToStore + "'," + CategoryID + "," + SubCategoryID + "," + Qty + ",0,'" + RequestBy + "'," + StockID + ")";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            return isave;
        }


        public DataSet StockReqNo(int userID)
        {
            DataSet ds = new DataSet();
            string sQry = "select MAX(ReQNo)+1 as ReqNo from tblstockTransfer ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet RequestFromStore(string userID)
        {
            DataSet ds = new DataSet();
            string sQry = "select *,case when FromStore='CO1' then 'KK Nagar'  when FromStore='CO2' then 'ByePass' when FromStore='CO3' then 'BB Kulam' when FromStore='CO4'  then 'NarayanaPuram'  when FromStore='CO5'  then 'Nellai' when FromStore='CO6'  then 'Maduravayol' when FromStore='CO7'  then 'Purasavakkam' end as Branch,a.Requestby from tblstockTransfer a,tblcategory b,tblCategoryUser c where ToStore='" + userID + "' and IsSent=0 and a.CategoryID=b.categoryid and a.SubCategoryID=c.CategoryUserID and convert(date,ReqDate)=convert(date,getdate())";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int UpdateStockReq(int ReQNo, int SubCategoryID, int StockID, string name)
        {
            int isave = 0;
            string sQry = "Update tblstockTransfer set IsSent=1,AcceptDate='" + DateTime.Now.ToString() + "',Accetedby='" + name + "' where ReqNo=" + ReQNo + " and SubCategoryID =" + SubCategoryID + " and StockID =" + StockID + " ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            return isave;
        }

        public DataSet CheckStockQty(int StockID, string userID)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblstock_" + userID + " where StockID=" + StockID + " ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public int SubStockQty(int SubCategoryID, int StockID, decimal Qty, string stable, string REQNO)
        {
            int isave = 0;
            string sQry = "Update tblstock_" + stable + " set Available_QTY='" + Qty + "' where  SubCategoryID =" + SubCategoryID + " and StockID =" + StockID + "";
            isave = dbObj.InlineExecuteNonQuery(sQry);

            //string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign)VAlues('Stock Transfer','" + Qty + "','" + REQNO + "','-')";
            //isave = dbObj.InlineExecuteNonQuery(AuditQty);
            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('M-SubStockQty','" + Qty + "','" + REQNO + "','-','" + SubCategoryID + "','" + StockID + "')";
            isave = dbObj.InlineExecuteNonQuery(AuditQty);


            return isave;
        }

        public int ADDStockQty(int SubCategoryID, decimal Qty, string stable)
        {
            int isave = 0;
            string sQry = "Update tblstock_" + stable + " set Available_QTY='" + Qty + "' where  SubCategoryID =" + SubCategoryID + "";
            isave = dbObj.InlineExecuteNonQuery(sQry);

            //  string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId)VAlues('MTD-ADDSTOCKQTY','" + Qty + "','0')";
            //  isave = dbObj.InlineExecuteNonQuery(AuditQty);
            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('MTD-ADDSTOCKQTY','" + Qty + "','0','+','" + SubCategoryID + "','0')";
            isave = dbObj.InlineExecuteNonQuery(AuditQty);

            return isave;
        }

        public DataSet getCount(string UserID)
        {
            DataSet ds = new DataSet();
            string sQry = "select distinct ReQNo , case FromStore when 'co1' then 'Kk Nagar' when 'co2' then 'Byepass' when 'co3' then 'BB Kulam'when 'co4' then 'Npuram'when 'co5' then 'Nellai'when 'co6' then 'maduravayol'when 'co7' then 'Purasawalkam' end as Store from tblstockTransfer where IsSent=0 and ToStore='" + UserID + "' and convert(date,ReqDate)=convert(date,getdate()) ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet PIECHART(string stable)
        {
            DataSet ds = new DataSet();
            // string sQry = " select SUM(Total) as TotalSales,'Narayanapuram' as Branch from tblsales_CO4 union all     select SUM(Total) as TotalSales,'BB kulam' as Branch from tblsales_CO3 union all       select SUM(Total) as TotalSales,'Bye Pass' as Branch from tblsales_CO2 union all        select SUM(Total) as TotalSales,'KK Nagar' as Branch from tblsales_CO1 ";
            string sQry = " select SUM(Total) as TotalSales,'Narayanapuram' as Branch from tblsales_" + stable + "  ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion

        #region All branch
        public DataSet Branchto()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tbllogin where issuperadmin=0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region Default branch
        public DataSet Branchfrom(string branch)
        {
            DataSet ds = new DataSet();
            string sQry = "  select * from tbllogin where userid='" + branch + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region Final_Report
        public DataSet GetCash_sales(string Date, string sTableName)
        {
            DataSet ds = new DataSet();

            // string sqry = "select SUM(Total)as Sum from tblsales_" + sTableName + " where (iPayMode='1' or Ipaymode='4' )  and cast(BillDate as date)='" + Date + "' and cancelstatus='No'  and OrderNo=0";
            string sqry = "select SUM(Total)as Sum from tblsales_" + sTableName + " where (iPayMode='1')  and cast(BillDate as date)='" + Date + "' and cancelstatus='No'  and OrderNo=0";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet sales_distribution(string Date, string sTableName, string salestype)
        {
            DataSet ds = new DataSet();

            //  string sqry = "select sum(total)as Total, sp.paymode as  SalesType  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode where cast (billdate as Date)='" + Date + "'  and cancelstatus='No' group by paymode ";
            string SQRY = "  select sum(s.total)as Total, sp.paymode as  SalesType,st.paymenttype  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode " +
                          " inner join tblsalestype as st on st.SalesTypeID=s.salestype " +
                         " where cast (billdate as Date)='" + Date + "' and s.salestype in (" + salestype + ")  and cancelstatus='No' group by paymode,st.paymenttype,VALUE ORDER BY VALUE asc ";
            ds = dbObj.InlineExecuteDataSet(SQRY);

            return ds;
        }

        public DataSet Onlinesales_distribution(string Date, string sTableName, string salestype)
        {
            DataSet ds = new DataSet();

            //  string sqry = "select sum(total)as Total, sp.paymode as  SalesType  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode where cast (billdate as Date)='" + Date + "'  and cancelstatus='No' group by paymode ";
            string sqry = "select sum(((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) " +
 " + ((((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) * s.Saletypemargin) /100)) " +
" as Total, sp.paymode as  SalesType,st.paymenttype  from tblsales_" + sTableName + " as  s inner join tbltranssales_" + sTableName + " as ts on ts.salesid=s.billno " +
" inner join tblcategoryuser as cu on cu.categoryuserid=ts.subcategoryid inner join tblsalespaymode as sp on sp.value=s.ipaymode  " +
                          "  inner join tblsalestype as st on st.SalesTypeID=s.salestype  " +
                          " where cast (billdate as Date)='" + Date + "' and s.salestype NOT in (" + salestype + ")  and cancelstatus='No' and s.salesid=ts.Salesuniqueid group by paymode,st.paymenttype,VALUE ORDER BY VALUE asc";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet Onlinesales_distribution_datewise(string sTableName, string salestype, DateTime From, DateTime To)
        {
            DataSet ds = new DataSet();

            //  string sqry = "select sum(total)as Total, sp.paymode as  SalesType  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode where cast (billdate as Date)='" + Date + "'  and cancelstatus='No' group by paymode ";
            string sqry = "select sum(((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) " +
 " + ((((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) * s.Saletypemargin) /100)) " +
" as Total, sp.paymode as  SalesType,st.paymenttype  from tblsales_" + sTableName + " as  s inner join tbltranssales_" + sTableName + " as ts on ts.salesid=s.billno " +
" inner join tblcategoryuser as cu on cu.categoryuserid=ts.subcategoryid inner join tblsalespaymode as sp on sp.value=s.ipaymode  " +
                          "  inner join tblsalestype as st on st.SalesTypeID=s.salestype  " +
                          " where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and s.salestype NOT in (" + salestype + ")  and cancelstatus='No' and s.salesid=ts.Salesuniqueid group by paymode,st.paymenttype,VALUE ORDER BY VALUE asc";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet Salesreturn_distribution(string Date, string sTableName)
        {
            DataSet ds = new DataSet();

            //  string sqry = "select sum(total)as Total, sp.paymode as  SalesType  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode where cast (billdate as Date)='" + Date + "'  and cancelstatus='No' group by paymode ";
            string SQRY = "  select sum(total) as Total,re.reason from tblreason as re inner join tblreturn_" + sTableName + " as r  on r.ipaymode=re.reasonid " +
                        " where cast (r.retdate as Date)='" + Date + "'  group by re.reason order by total desc";
            ds = dbObj.InlineExecuteDataSet(SQRY);

            return ds;
        }

        public DataSet sales_distributionFromTodate(string FromDate, string Todate, string sTableName, string radbutton)
        {
            DataSet ds = new DataSet();

            if (radbutton == "0")
            {
                //  string sqry = "select sum(total)as Total, sp.paymode as  SalesType  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode where cast (billdate as Date)='" + Date + "'  and cancelstatus='No' group by paymode ";
                string SQRY = "  select '" + sTableName + "' as bnch, sum(s.total)as Total, sp.paymode as  SalesType,st.paymenttype  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode " +
                              " inner join tblsalestype as st on st.SalesTypeID=s.salestype " +
                             " where cast (billdate as Date)>='" + FromDate + "' and cast (billdate as Date)<='" + Todate + "'  and cancelstatus='No' group by paymode,st.paymenttype,VALUE ORDER BY VALUE asc ";
                ds = dbObj.InlineExecuteDataSet(SQRY);
            }
            else
            {
                string SQRY = "  select '" + sTableName + "' as bnch,sum(s.total)as Total, sp.paymode as  SalesType,'' as paymenttype  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode " +
                             " where cast (billdate as Date)>='" + FromDate + "' and cast (billdate as Date)<='" + Todate + "'  and cancelstatus='No' group by paymode,VALUE ORDER BY VALUE asc ";
                ds = dbObj.InlineExecuteDataSet(SQRY);
            }

            return ds;
        }

        public DataSet sales_distributionFromTodate_paymentflow(string FromDate, string Todate, string sTableName, string radbutton)
        {
            DataSet ds = new DataSet();

            if (radbutton == "0")
            {
                //  string sqry = "select sum(total)as Total, sp.paymode as  SalesType  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode where cast (billdate as Date)='" + Date + "'  and cancelstatus='No' group by paymode ";
                //string SQRY = "  select '" + sTableName + "' as bnch, sum(s.total)as Total, sp.paymode as  SalesType,st.paymenttype  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode " +
                //              " inner join tblsalestype as st on st.SalesTypeID=s.salestype " +
                //             " where cast (billdate as Date)>='" + FromDate + "' and cast (billdate as Date)<='" + Todate + "'  and cancelstatus='No' group by paymode,st.paymenttype,VALUE ORDER BY VALUE asc ";
                string SQRY = " select '" + sTableName + "' as bnch, sum(ts.amount)as Total, sp.paymode as  SalesType,st.paymenttype  " +
                    " from tblsales_" + sTableName + " as  s inner join tbltranssalesAmount_" + sTableName + " as ts on ts.salesid=s.salesid " +
                    " inner join tblsalespaymode as sp on sp.value=ts.paymode    inner join tblsalestype as st on st.SalesTypeID=ts.salestypeid " +
                    " where cast (ts.billdate as Date)>='" + FromDate + "' and cast (ts.billdate as Date)<='" + Todate + "'  and cancelstatus='No' " +
                    " group by ts.paymode,st.paymenttype,VALUE,sp.paymode ORDER BY VALUE asc ";


                ds = dbObj.InlineExecuteDataSet(SQRY);
            }
            else
            {
                //string SQRY = "  select '" + sTableName + "' as bnch,sum(s.total)as Total, sp.paymode as  SalesType,'' as paymenttype  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode " +
                //             " where cast (billdate as Date)>='" + FromDate + "' and cast (billdate as Date)<='" + Todate + "'  and cancelstatus='No' group by paymode,VALUE ORDER BY VALUE asc ";

                string SQRY = "select '" + sTableName + "' as bnch,sum(ts.Amount)as Total, sp.paymode as  SalesType,'' as paymenttype   " +
                    " from tblsales_" + sTableName + " as  s inner join tbltranssalesAmount_" + sTableName + " as ts on ts.salesid=s.salesid " +
                    " inner join tblsalespaymode as sp on sp.value=ts.paymode  " +
                    " where cast (ts.billdate as Date)>='" + FromDate + "' and cast (ts.billdate as Date)<='" + Todate + "'  and cancelstatus='No' " +
                    " group by sp.paymode,VALUE ORDER BY VALUE asc ";

                ds = dbObj.InlineExecuteDataSet(SQRY);
            }

            return ds;
        }

        public DataSet Order_distribution(string Date, string sTableName, string paymode, string typename)
        {
            DataSet ds = new DataSet();

            // string sqry = "select SUM(advance) as Total,PayType from tblorder_" + sTableName + " where convert(date, orderdate)='" + Date + "' and iscancel=0 group by paytype";
            string sqry = " select sum(toa.Amount) as total,sp.paymode from tbltransorderamount_" + sTableName + " as toa inner join tblorder_" + sTableName + " as o on o.billno=toa.billno " +
                          " inner join tblsalespaymode as sp on sp.Value=toa.paymode where convert(date, billdate)='" + Date + "' and sp.value NOT in (" + paymode + ") and type in (" + typename + ") " +
                          " group by sp.paymode,VALUE ORDER BY VALUE asc";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet Order_distributionforonline(string Date, string sTableName, string paymode)
        {
            DataSet ds = new DataSet();

            // string sqry = "select SUM(advance) as Total,PayType from tblorder_" + sTableName + " where convert(date, orderdate)='" + Date + "' and iscancel=0 group by paytype";
            string sqry = " select sum(toa.Amount) as total,'Online-Cake Order' as paytype,sp.paymode,type from tbltransorderamount_" + sTableName + " as toa inner join tblorder_" + sTableName + " as o on o.billno=toa.billno " +
                          " inner join tblsalespaymode as sp on sp.Value=toa.paymode where convert(date, billdate)='" + Date + "' and sp.value in (" + paymode + ") " +
                          " group by type,sp.paymode,VALUE ORDER BY VALUE asc";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet Order_distributionFromTodate(string FromDate, string Todate, string sTableName, string radbutton)
        {
            DataSet ds = new DataSet();

            if (radbutton == "0")
            {
                // string sqry = "select SUM(advance) as Total,PayType from tblorder_" + sTableName + " where convert(date, orderdate)='" + Date + "' and iscancel=0 group by paytype";
                string sqry = " select '" + sTableName + "' as Branch, sum(toa.Amount) as total,type as paytype,sp.paymode from tbltransorderamount_" + sTableName + " as toa inner join tblorder_" + sTableName + " as o on o.billno=toa.billno " +
                              " inner join tblsalespaymode as sp on sp.Value=toa.paymode where convert(date, billdate)>='" + FromDate + "' and convert(date, billdate)<='" + Todate + "' " +
                              " group by type,sp.paymode,VALUE ORDER BY VALUE asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                string sqry = " select '" + sTableName + "' as Branch,sum(toa.Amount) as total,'' as  paytype,sp.paymode from tbltransorderamount_" + sTableName + " as toa inner join tblorder_" + sTableName + " as o on o.billno=toa.billno " +
              " inner join tblsalespaymode as sp on sp.Value=toa.paymode where toa.type <>'Refund' and convert(date, billdate)>='" + FromDate + "' and convert(date, billdate)<='" + Todate + "' " +
              " group by sp.paymode ,VALUE ORDER BY VALUE asc";
                DataSet ds1 = dbObj.InlineExecuteDataSet(sqry);

                ds.Merge(ds1);

                string sqry1 = " select '" + sTableName + "' as Branch,sum(toa.Amount) as total,'' as  paytype,'Cash Refund' as paymode from tbltransorderamount_" + sTableName + " as toa inner join tblorder_" + sTableName + " as o on o.billno=toa.billno " +
             " inner join tblsalespaymode as sp on sp.Value=toa.paymode where toa.type ='Refund' and convert(date, billdate)>='" + FromDate + "' and convert(date, billdate)<='" + Todate + "' " +
             " group by sp.paymode ,VALUE ORDER BY VALUE asc";
                DataSet dss = dbObj.InlineExecuteDataSet(sqry1);

                ds.Merge(dss);




            }

            return ds;
        }

        public DataSet orderCard(string Date, string sTableName)
        {
            DataSet ds = new DataSet();

            string sqry = "select SUM(advance) as Total from tblorder_" + sTableName + " where convert(date, orderdate)='" + Date + "' and iscancel=0 and ipaymode=4";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet GetCredit_sales(string Date, string sTableName)
        {
            DataSet ds = new DataSet();

            string sqry = "  select sum(sum) as sum from (select sum(total) as sum from tblsales_" + sTableName + " where iPayMode=2 and cancelstatus='No'   and convert(date,BillDate)='" + Date + "' union all select sum(total) as sum from tblsales_" + sTableName + " where iPayMode=5 and cancelstatus='No'   and convert(date,BillDate)='" + Date + "' union all select sum(Advance) as sum from tblOrder_" + sTableName + " where iPayMode=2  and   isCancel=0 and  convert(date,orderdate )='" + Date + "' union all select sum(Advance) as sum from tblOrder_" + sTableName + " where iPayMode= 5 and   isCancel=0 and  convert(date,orderdate )='" + Date + "') as a ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet GetCompliment_sales(string Date, string sTableName)
        {
            DataSet ds = new DataSet();

            string sqry = "select SUM(NetAmount)as Sum from tblsales_" + sTableName + " where iPayMode='3'and cast(BillDate as date)='" + Date + "' and cancelstatus='No' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet GetCard_sales(string Date, string sTableName)
        {
            DataSet ds = new DataSet();

            string sqry = "select sum(Sum) as Sum from(select SUM(Total) as Sum from tblsales_" + sTableName + " where iPayMode='4'and cast(BillDate as date)='" + Date + "'  and cancelstatus='No' and orderno=0 union all select SUM(Advance)as Sum  from tblorder_" + sTableName + " where iPayMode='4'and cast(orderdate as date)='" + Date + "' and iscancel='0' and orderno>0 union all (select SUM(Amount)as Sum  from tblPaymentEntry_" + sTableName + " where inSales='1'  and cast(Date as date)='" + Date + "'  and paymode='card')union all (select SUM(Credit)as Sum  from tblAmt_" + sTableName + " where cast(Date as date)='" + Date + "'  and paymode='4')) as a";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet GetOrder_sales(string Date, string sTableName)
        {
            DataSet ds = new DataSet();

            string sqry = "select sum(Sum)-SUM(D) as Sum from ((select SUM(Credit)as Sum,SUM(Debit)as D  from tblamt_" + sTableName + " where    cast(Date as date)='" + Date + "' and paymode=1)  union all  (select SUM(Advance)as Sum ,'' as D from tblOrder_" + sTableName + " where (iPayMode='1' or iPayMode='4')  and cast(orderdate as date)='" + Date + "' and OrderNo<>0 and iscancel=0))as a";
            //"select sum(Sum) as Sum from ((select SUM(Amount)as Sum  from tblPaymentEntry_" + sTableName + " where inSales='1'  and cast(Date as date)='" + Date + "' ) union all(select SUM(Advance)as Sum  from tblorder_" + sTableName + " where (iPayMode='1' or iPayMode='4') and cast(orderdate as date)='" + Date + "' and OrderNo<>0 and iscancel=0))as a ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet paymentgrid_Report(string sTableName, string Date)
        {
            DataSet ds = new DataSet();
            string paygird = "select sum(Amount)as Amount,LedgerName from tblPaymentEntry_" + sTableName + " a,tblledger b where a.ledgerid=b.ledgerid and cast(Date as date)='" + Date + "' Group by LedgerName";

            ds = dbObj.InlineExecuteDataSet(paygird);
            return ds;
        }
        #region Denomination
        public int Denominations(string sTable, string Date, int Thous, int Fivehun, int hund, int Fifty, int Twenty, int Tens, int Fives, int twos, int ones, int coins, decimal total, int Twothou, int twohundr)
        {
            int iSuccess = 0;
            string sQry = "insert into tblDenomination_" + sTable + "(Date,Thousands,FiveHundreds,Hundreds,Fiftys,Twentys,Tens,Fives,Twos,ones,Coins,Total,TwoThousand,Twohundred) values('" + Date + "'," + Thous + ",'" + Fivehun + "','" + hund + "','" + Fifty + "','" + Twenty + "','" + Tens + "','" + Fives + "','" + twos + "','" + ones + "','" + coins + "','" + Convert.ToDouble(total) + "','" + Twothou + "','" + twohundr + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }
        public DataSet check_denomination(string sTable, string Date)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblDenomination_" + sTable + " where cast(Date as date)='" + Date + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public int updateDenominations(string sTable, int demoniationid, string Date, int Thous, int Fivehun, int hund, int Fifty, int Twenty, int Tens, int Fives, int twos, int ones, int coins, decimal total, int twothousand, int twohundre)
        {
            int iSuccess = 0;
            string sQry = "Update tblDenomination_" + sTable + " set TwoThousand='" + twothousand + "',Twohundred='" + twohundre + "',Date='" + Date + "',Thousands='" + Thous + "',FiveHundreds='" + Fivehun + "',Hundreds='" + hund + "',Fiftys='" + Fifty + "',Twentys='" + Twenty + "',Tens='" + Tens + "',Fives='" + Fives + "',Twos='" + twos + "',ones='" + ones + "',Coins='" + coins + "',Total='" + total + "' where Denomination_ID=" + demoniationid + " ";
            //   string sQry = "insert into tblDenomination_" + sTable + "(Date,Thousands,FiveHundreds,Hundreds,Fiftys,Twentys,Tens,Fives,Twos,ones,Coins,Total) values('" + Date + "'," + Thous + ",'" + Fivehun + "','" + hund + "','" + Fifty + "','" + Twenty + "','" + Tens + "','" + Fives + "','" + twos + "','" + ones + "','" + coins + "','" + Convert.ToDouble(total) + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }

        #endregion
        public DataSet GetWastage(string Date, string sTableName)
        {
            DataSet ds = new DataSet();

            string sqry = "select SUM(Total)as Sum from tblReturn_" + sTableName + " where iPayMode='1' and cast(RetDate as date)='" + Date + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetExcess(string Date, string sTableName)
        {
            DataSet ds = new DataSet();

            string sqry = "select SUM(Total)as Sum from tblReturn_" + sTableName + " where iPayMode='3' and cast(RetDate as date)='" + Date + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet GetDateBar(string Date, string sTableName)
        {
            DataSet ds = new DataSet();

            string sqry = "select SUM(Total)as Sum from tblReturn_" + sTableName + " where iPayMode='2' and cast(RetDate as date)='" + Date + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        #region DateBar
        public DataSet getbbkulam(string Date, string sTableName)
        {
            DataSet ds = new DataSet();

            string sqry = "select SUM(total)as Sum from tblsales_" + sTableName + " where iPayMode='7' and cast(BillDate as date)='" + Date + "' and OrderNo=0 and cancelstatus='No' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        #endregion
        #endregion


        public DataSet expensegroupreport(string sBranch, DateTime sFmdate, DateTime sToDate)
        {
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();

            string sqr = "select * from tblledger";
            dss = dbObj.InlineExecuteDataSet(sqr);

            if (dss.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
                {
                    int ledger = Convert.ToInt32(dss.Tables[0].Rows[i]["ledgerid"]);
                    string sqry = "select l.LedgerName,SUM(amount) as Amount,p.LedgerID  from tblPaymentEntry_" + sBranch + " as p inner join tblLedger as l on  l.LedgerID =p.LedgerID where p.LedgerID=" + ledger + "   and  convert(date,p.Date) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,p.date) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' group by p.LedgerID,l.LedgerName ";

                    ds = dbObj.InlineExecuteDataSet(sqry);
                    ds1.Merge(ds);
                }
            }
            //dss.Merge(ds);

            //string sqtyy = " select 'Narayana Puram' as Branch,'Advance' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.advance as Netamount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo<>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            //ds1 = dbObj.InlineExecuteDataSet(sqtyy);
            //dss.Merge(ds1);
            return ds1;
        }

        public DataSet expensegroupdetailedreport(int sBillno, string sTable, DateTime startdate, DateTime endate)
        {
            DataSet ds = new DataSet();
            //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
            string sqry = "select * from tblPaymentEntry_" + sTable + " where LedgerID=" + sBillno + " and  convert(date,Date) >='" + Convert.ToDateTime(startdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,date) <='" + Convert.ToDateTime(endate).ToString("yyyy-MM-dd hh:mm") + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet CustomerSaleshourreport(string sBranch, DateTime sFmdate, string stime, string etime)
        {
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            string dst = Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd");
            string[] myStrings = new string[] { dst, stime };
            String sfrmdatetime = String.Join(" ", myStrings);

            string dst1 = Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd");
            string[] myStrings1 = new string[] { dst1, etime };
            String senddatetime = String.Join(" ", myStrings1);
            //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance,s.NetAmount,s.Total from tblsales_CO4 as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where (OrderNo=0 or OrderNo <>0) and s.ContactTypeID=1  order by s.BillDate desc ";
            //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
            string sqry = "select ISNULL(SUM(NetAmount), 0 ) as  Amount from tblsales_" + sBranch + " as s where s.BillDate>='" + sfrmdatetime + "'  and s.BillDate<='" + senddatetime + "' ";
            //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            //dss.Merge(ds);

            //string sqtyy = " select 'Narayana Puram' as Branch,'Advance' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.advance as Netamount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo<>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            //ds1 = dbObj.InlineExecuteDataSet(sqtyy);
            //dss.Merge(ds1);
            return ds;
        }


        public DataSet CustomerSaleshourreportnew(string sBranch, DateTime sFmdate)
        {
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            string stime = string.Empty;
            string etime = string.Empty;

            string sqryy = "select * from tbltimespan ";
            DataSet dtime = dbObj.InlineExecuteDataSet(sqryy);

            if (dtime.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < dtime.Tables[0].Rows.Count; i++)
                {
                    string stime1 = dtime.Tables[0].Rows[i]["starttime"].ToString();
                    string etime1 = dtime.Tables[0].Rows[i]["endtime"].ToString();

                    if (stime1 == "8.00 AM")
                    {
                        stime = "08:00:00";
                    }
                    else if (stime1 == "9.00 AM")
                    {
                        stime = "09:00:00";
                    }
                    else if (stime1 == "10.00 AM")
                    {
                        stime = "10:00:00";
                    }
                    else if (stime1 == "11.00 AM")
                    {
                        stime = "11:00:00";
                    }
                    else if (stime1 == "12.00 PM")
                    {
                        stime = "12:00:00";
                    }
                    //else if (stime1 == "12.00 AM")
                    //{
                    //    stime = "12:00:00";
                    //}
                    else if (stime1 == "1.00 PM")
                    {
                        stime = "13:00:00";
                    }
                    else if (stime1 == "2.00 PM")
                    {
                        stime = "14:00:00";
                    }
                    else if (stime1 == "3.00 PM")
                    {
                        stime = "15:00:00";
                    }
                    else if (stime1 == "4.00 PM")
                    {
                        stime = "16:00:00";
                    }
                    else if (stime1 == "5.00 PM")
                    {
                        stime = "17:00:00";
                    }
                    else if (stime1 == "6.00 PM")
                    {
                        stime = "18:00:00";
                    }
                    else if (stime1 == "7.00 PM")
                    {
                        stime = "19:00:00";
                    }
                    else if (stime1 == "8.00 PM")
                    {
                        stime = "20:00:00";
                    }
                    else if (stime1 == "9.00 PM")
                    {
                        stime = "21:00:00";
                    }
                    else if (stime1 == "10.00 PM")
                    {
                        stime = "22:00:00";
                    }



                    //For end time
                    if (etime1 == "9.00 AM")
                    {
                        etime = "09:00:00";
                    }

                    else if (etime1 == "10.00 AM")
                    {
                        etime = "10:00:00";
                    }
                    else if (etime1 == "11.00 AM")
                    {
                        etime = "11:00:00";
                    }
                    else if (etime1 == "12.00 PM")
                    {
                        etime = "12:00:00";
                    }
                    //else if (etime1 == "12.00 AM")
                    //{
                    //    etime = "12:00:00";
                    //}
                    else if (etime1 == "1.00 PM")
                    {
                        etime = "13:00:00";
                    }
                    else if (etime1 == "2.00 PM")
                    {
                        etime = "14:00:00";
                    }
                    else if (etime1 == "3.00 PM")
                    {
                        etime = "15:00:00";
                    }
                    else if (etime1 == "4.00 PM")
                    {
                        etime = "16:00:00";
                    }
                    else if (etime1 == "5.00 PM")
                    {
                        etime = "17:00:00";
                    }
                    else if (etime1 == "6.00 PM")
                    {
                        etime = "18:00:00";
                    }
                    else if (etime1 == "7.00 PM")
                    {
                        etime = "19:00:00";
                    }
                    else if (etime1 == "8.00 PM")
                    {
                        etime = "20:00:00";
                    }
                    else if (etime1 == "9.00 PM")
                    {
                        etime = "21:00:00";
                    }
                    else if (etime1 == "10.00 PM")
                    {
                        etime = "22:00:00";
                    }
                    else if (etime1 == "11.00 PM")
                    {
                        etime = "23:00:00";
                    }

                    // stime = Convert.ToDateTime(stime1).ToString("HH:mm:ss");

                    //  etime = Convert.ToDateTime(etime1).ToString("HH:mm:ss");

                    string dst = Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd");
                    string[] myStrings = new string[] { dst, stime };
                    String sfrmdatetime = String.Join(" ", myStrings);

                    string dst1 = Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd");
                    string[] myStrings1 = new string[] { dst1, etime };
                    String senddatetime = String.Join(" ", myStrings1);
                    //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
                    // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
                    // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance,s.NetAmount,s.Total from tblsales_CO4 as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where (OrderNo=0 or OrderNo <>0) and s.ContactTypeID=1  order by s.BillDate desc ";
                    //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                    string sqry = "select '" + stime1 + "-" + etime1 + "' as Time, ISNULL(SUM(NetAmount), 0 ) as  Amount from tblsales_" + sBranch + " as s where s.BillDate>='" + sfrmdatetime + "'  and s.BillDate<='" + senddatetime + "' and s.cancelstatus='No' and OrderNo=0 ";
                    //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sqry);
                    dss.Merge(ds);

                    string sqry1 = "select '" + stime1 + "-" + etime1 + "' as Time, ISNULL(SUM(Advance), 0 ) as  Amount from tblsales_" + sBranch + " as s where s.BillDate>='" + sfrmdatetime + "'  and s.BillDate<='" + senddatetime + "' and s.cancelstatus='No' and OrderNo<>0 ";
                    //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
                    DataSet dsss = dbObj.InlineExecuteDataSet(sqry1);
                    dss.Merge(dsss);




                }
            }
            //string sqtyy = " select 'Narayana Puram' as Branch,'Advance' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.advance as Netamount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo<>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            //ds1 = dbObj.InlineExecuteDataSet(sqtyy);
            //dss.Merge(ds1);
            return dss;
        }


        public DataSet CustomerSaleshourreportnewtotal(string sBranch, DateTime sFmdate)
        {
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            string stime = string.Empty;
            string etime = string.Empty;

            string sqryy = "select * from tbltimespan ";
            DataSet dtime = dbObj.InlineExecuteDataSet(sqryy);

            if (dtime.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < dtime.Tables[0].Rows.Count; i++)
                {
                    string stime1 = dtime.Tables[0].Rows[i]["starttime"].ToString();
                    string etime1 = dtime.Tables[0].Rows[i]["endtime"].ToString();

                    if (stime1 == "8.00 AM")
                    {
                        stime = "08:00:00";
                    }
                    else if (stime1 == "9.00 AM")
                    {
                        stime = "09:00:00";
                    }
                    else if (stime1 == "10.00 AM")
                    {
                        stime = "10:00:00";
                    }
                    else if (stime1 == "11.00 AM")
                    {
                        stime = "11:00:00";
                    }
                    else if (stime1 == "12.00 PM")
                    {
                        stime = "12:00:00";
                    }
                    //else if (stime1 == "12.00 AM")
                    //{
                    //    stime = "12:00:00";
                    //}
                    else if (stime1 == "1.00 PM")
                    {
                        stime = "13:00:00";
                    }
                    else if (stime1 == "2.00 PM")
                    {
                        stime = "14:00:00";
                    }
                    else if (stime1 == "3.00 PM")
                    {
                        stime = "15:00:00";
                    }
                    else if (stime1 == "4.00 PM")
                    {
                        stime = "16:00:00";
                    }
                    else if (stime1 == "5.00 PM")
                    {
                        stime = "17:00:00";
                    }
                    else if (stime1 == "6.00 PM")
                    {
                        stime = "18:00:00";
                    }
                    else if (stime1 == "7.00 PM")
                    {
                        stime = "19:00:00";
                    }
                    else if (stime1 == "8.00 PM")
                    {
                        stime = "20:00:00";
                    }
                    else if (stime1 == "9.00 PM")
                    {
                        stime = "21:00:00";
                    }
                    else if (stime1 == "10.00 PM")
                    {
                        stime = "22:00:00";
                    }



                    //For end time
                    if (etime1 == "9.00 AM")
                    {
                        etime = "09:00:00";
                    }

                    else if (etime1 == "10.00 AM")
                    {
                        etime = "10:00:00";
                    }
                    else if (etime1 == "11.00 AM")
                    {
                        etime = "11:00:00";
                    }
                    else if (etime1 == "12.00 PM")
                    {
                        etime = "12:00:00";
                    }
                    //else if (etime1 == "12.00 AM")
                    //{
                    //    etime = "12:00:00";
                    //}
                    else if (etime1 == "1.00 PM")
                    {
                        etime = "13:00:00";
                    }
                    else if (etime1 == "2.00 PM")
                    {
                        etime = "14:00:00";
                    }
                    else if (etime1 == "3.00 PM")
                    {
                        etime = "15:00:00";
                    }
                    else if (etime1 == "4.00 PM")
                    {
                        etime = "16:00:00";
                    }
                    else if (etime1 == "5.00 PM")
                    {
                        etime = "17:00:00";
                    }
                    else if (etime1 == "6.00 PM")
                    {
                        etime = "18:00:00";
                    }
                    else if (etime1 == "7.00 PM")
                    {
                        etime = "19:00:00";
                    }
                    else if (etime1 == "8.00 PM")
                    {
                        etime = "20:00:00";
                    }
                    else if (etime1 == "9.00 PM")
                    {
                        etime = "21:00:00";
                    }
                    else if (etime1 == "10.00 PM")
                    {
                        etime = "22:00:00";
                    }
                    else if (etime1 == "11.00 PM")
                    {
                        etime = "23:00:00";
                    }

                    // stime = Convert.ToDateTime(stime1).ToString("HH:mm:ss");

                    //  etime = Convert.ToDateTime(etime1).ToString("HH:mm:ss");

                    string dst = Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd");
                    string[] myStrings = new string[] { dst, stime };
                    String sfrmdatetime = String.Join(" ", myStrings);

                    string dst1 = Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd");
                    string[] myStrings1 = new string[] { dst1, etime };
                    String senddatetime = String.Join(" ", myStrings1);
                    //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
                    // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
                    // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance,s.NetAmount,s.Total from tblsales_CO4 as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where (OrderNo=0 or OrderNo <>0) and s.ContactTypeID=1  order by s.BillDate desc ";
                    //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                    //  string sqry = "select '" + stime1 + "-" + etime1 + "' as Time, ISNULL(SUM(NetAmount), 0 ) as  Amount,'Sales' as salestype from tblsales_" + sBranch + " as s where s.BillDate>='" + sfrmdatetime + "'  and s.BillDate<='" + senddatetime + "' and s.cancelstatus='No' and OrderNo=0 ";
                    string sqry = "select  '" + stime1 + "-" + etime1 + "' as Time,sum(Amount) as Totalamount from (select  '" + stime1 + "-" + etime1 + "' as Time, ISNULL(SUM(NetAmount), 0 ) as  Amount from tblsales_" + sBranch + " as s where  s.BillDate>='" + sfrmdatetime + "'  and s.BillDate<='" + senddatetime + "' and s.cancelstatus='No' and OrderNo=0 union all select  '" + stime1 + "-" + etime1 + "' as Time, ISNULL(SUM(Advance), 0 ) as  Amount from tblsales_" + sBranch + " as s where  s.BillDate>='" + sfrmdatetime + "'  and s.BillDate<='" + senddatetime + "' and s.cancelstatus='No' and OrderNo<>0) a group by time";
                    //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sqry);
                    dss.Merge(ds);
                }
            }
            //string sqtyy = " select 'Narayana Puram' as Branch,'Advance' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.advance as Netamount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo<>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            //ds1 = dbObj.InlineExecuteDataSet(sqtyy);
            //dss.Merge(ds1);
            return dss;
        }


        public DataSet CustomerSaleshourreportneworderform(string sBranch, DateTime sFmdate)
        {
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            string stime = string.Empty;
            string etime = string.Empty;

            string sqryy = "select * from tbltimespan ";
            DataSet dtime = dbObj.InlineExecuteDataSet(sqryy);

            if (dtime.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < dtime.Tables[0].Rows.Count; i++)
                {
                    string stime1 = dtime.Tables[0].Rows[i]["starttime"].ToString();
                    string etime1 = dtime.Tables[0].Rows[i]["endtime"].ToString();

                    if (stime1 == "8.00 AM")
                    {
                        stime = "08:00:00";
                    }
                    else if (stime1 == "9.00 AM")
                    {
                        stime = "09:00:00";
                    }
                    else if (stime1 == "10.00 AM")
                    {
                        stime = "10:00:00";
                    }
                    else if (stime1 == "11.00 AM")
                    {
                        stime = "11:00:00";
                    }
                    else if (stime1 == "12.00 PM")
                    {
                        stime = "12:00:00";
                    }
                    //else if (stime1 == "12.00 AM")
                    //{
                    //    stime = "12:00:00";
                    //}
                    else if (stime1 == "1.00 PM")
                    {
                        stime = "13:00:00";
                    }
                    else if (stime1 == "2.00 PM")
                    {
                        stime = "14:00:00";
                    }
                    else if (stime1 == "3.00 PM")
                    {
                        stime = "15:00:00";
                    }
                    else if (stime1 == "4.00 PM")
                    {
                        stime = "16:00:00";
                    }
                    else if (stime1 == "5.00 PM")
                    {
                        stime = "17:00:00";
                    }
                    else if (stime1 == "6.00 PM")
                    {
                        stime = "18:00:00";
                    }
                    else if (stime1 == "7.00 PM")
                    {
                        stime = "19:00:00";
                    }
                    else if (stime1 == "8.00 PM")
                    {
                        stime = "20:00:00";
                    }
                    else if (stime1 == "9.00 PM")
                    {
                        stime = "21:00:00";
                    }
                    else if (stime1 == "10.00 PM")
                    {
                        stime = "22:00:00";
                    }


                    //For end time
                    if (etime1 == "9.00 AM")
                    {
                        etime = "09:00:00";
                    }

                    else if (etime1 == "10.00 AM")
                    {
                        etime = "10:00:00";
                    }
                    else if (etime1 == "11.00 AM")
                    {
                        etime = "11:00:00";
                    }
                    else if (etime1 == "12.00 PM")
                    {
                        etime = "12:00:00";
                    }
                    //else if (etime1 == "12.00 AM")
                    //{
                    //    etime = "12:00:00";
                    //}
                    else if (etime1 == "1.00 PM")
                    {
                        etime = "13:00:00";
                    }
                    else if (etime1 == "2.00 PM")
                    {
                        etime = "14:00:00";
                    }
                    else if (etime1 == "3.00 PM")
                    {
                        etime = "15:00:00";
                    }
                    else if (etime1 == "4.00 PM")
                    {
                        etime = "16:00:00";
                    }
                    else if (etime1 == "5.00 PM")
                    {
                        etime = "17:00:00";
                    }
                    else if (etime1 == "6.00 PM")
                    {
                        etime = "18:00:00";
                    }
                    else if (etime1 == "7.00 PM")
                    {
                        etime = "19:00:00";
                    }
                    else if (etime1 == "8.00 PM")
                    {
                        etime = "20:00:00";
                    }
                    else if (etime1 == "9.00 PM")
                    {
                        etime = "21:00:00";
                    }
                    else if (etime1 == "10.00 PM")
                    {
                        etime = "22:00:00";
                    }
                    else if (etime1 == "11.00 PM")
                    {
                        etime = "23:00:00";
                    }


                    // stime = Convert.ToDateTime(stime1).ToString("HH:mm:ss");

                    //  etime = Convert.ToDateTime(etime1).ToString("HH:mm:ss");

                    string dst = Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd");
                    string[] myStrings = new string[] { dst, stime };
                    String sfrmdatetime = String.Join(" ", myStrings);

                    string dst1 = Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd");
                    string[] myStrings1 = new string[] { dst1, etime };
                    String senddatetime = String.Join(" ", myStrings1);
                    //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
                    // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
                    // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance,s.NetAmount,s.Total from tblsales_CO4 as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where (OrderNo=0 or OrderNo <>0) and s.ContactTypeID=1  order by s.BillDate desc ";
                    //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                    string sqry = "select '" + stime1 + "-" + etime1 + "' as Time, ISNULL(SUM(Advance), 0 ) as  Amount,'OrderForm' as salestype from tblsales_" + sBranch + " as s where s.BillDate>='" + sfrmdatetime + "'  and s.BillDate<='" + senddatetime + "' and s.cancelstatus='No' and OrderNo<>0 ";
                    //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sqry);
                    dss.Merge(ds);
                }
            }
            //string sqtyy = " select 'Narayana Puram' as Branch,'Advance' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.advance as Netamount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo<>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            //ds1 = dbObj.InlineExecuteDataSet(sqtyy);
            //dss.Merge(ds1);
            return dss;
        }

        public DataSet CustomerSalesmonthreport(string sBranch, DateTime sFmdate, DateTime sToDate)
        {
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();

            string month = sFmdate.Month.ToString();

            //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance,s.NetAmount,s.Total from tblsales_CO4 as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where (OrderNo=0 or OrderNo <>0) and s.ContactTypeID=1  order by s.BillDate desc ";
            //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
            string sqry = "select ISNULL(SUM(NetAmount), 0 ) as  Amount,datename(month,dateadd(month, " + month + " - 1, 0)) as Month from tblsales_" + sBranch + " as s where convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' ";
            //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            //dss.Merge(ds);

            //string sqtyy = " select 'Narayana Puram' as Branch,'Advance' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.advance as Netamount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo<>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            //ds1 = dbObj.InlineExecuteDataSet(sqtyy);
            //dss.Merge(ds1);
            return ds;
        }

        #region Sales Hour new report:
        public DataSet gettimespan()
        {
            string sqryy = "select * from tbltimespan ";
            DataSet dss = dbObj.InlineExecuteDataSet(sqryy);
            return dss;
        }
        public DataSet CustomerSaleshourreportnew(string sBranch, string startdate, string endadte)
        {
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            string stime = string.Empty;
            string etime = string.Empty;

            string sqry = "select ISNULL(SUM(total), 0 ) as  Amount from tblsales_" + sBranch + " as s where s.BillDate>='" + startdate + "'  and s.BillDate<'" + endadte + "' and s.cancelstatus='No' and OrderNo=0 ";

            ds = dbObj.InlineExecuteDataSet(sqry);
            //dss.Merge(ds);

            return ds;
        }


        public DataSet CustomerSaleshourreportnewtotal(string sBranch, string sFmdate, string endate)
        {
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            string stime = string.Empty;
            string etime = string.Empty;


            string sqry = "select  isnull (sum(Amount),0) as TotalAmount from (select  isnull(SUM(Advance),0) as  Amount,'OrderForm' as salestype from tblsales_" + sBranch + " as s where s.BillDate between '" + sFmdate + "' and '" + endate + "'    and s.cancelstatus='No' and OrderNo<>0  union all select  isnull(SUM(Total),0) as  Amount,'OrderForm' as salestype from tblsales_" + sBranch + " as s where s.BillDate between '" + sFmdate + "' and '" + endate + "'     and s.cancelstatus='No' and OrderNo=0  union all select  isnull(SUM(Advance),0) as  Amount,'OrderForm' as salestype from tblOrder_" + sBranch + " as s where s.Orderdate between '" + sFmdate + "' and '" + endate + "'    and s.isCancel=0 ) as a";
            //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet CustomerSaleshourreportneworderform(string sBranch, string sFmdate, string endate)
        {
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            string stime = string.Empty;
            string etime = string.Empty;

            string sqry = "select isNull (sum(Amount),0) as Amount from (select  ISNULL(SUM(Advance), 0 ) as  Amount,'OrderForm' as salestype from tblsales_" + sBranch + " as s where s.BillDate between '" + sFmdate + "' and '" + endate + "'  and s.cancelstatus='No' and OrderNo<>0 union all select  ISNULL(SUM(Advance), 0 ) as  Amount,'OrderForm' as salestype from tblorder_" + sBranch + " as s where s.Orderdate between '" + sFmdate + "' and '" + endate + "'    and s.iscancel=0 ) as a";
            //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion

        public DataSet salesconversionytpe(string sBranch, DateTime date)
        {
            DataSet ds = new DataSet();

            string dtt = date.ToString("yyyy-MM-dd");

            string sqry = "select BillDate,BillNo,Total,iPayMode,Salesid from tblsales_" + sBranch + " where CONVERT(date,BillDate)='" + dtt + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet orderconversionytpe(string sBranch, DateTime date)
        {
            DataSet ds = new DataSet();

            string dtt = date.ToString("yyyy-MM-dd");

            string sqry = "select orderdate,orderno,Advance,iPayMode,orderid from tblorder_" + sBranch + " where CONVERT(date,orderdate)='" + dtt + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet salesnilltrteirve(string sBranch, string value)
        {
            DataSet ds = new DataSet();

            string sqry = "select BillDate,BillNo,Total,iPayMode,Salesid from tblsales_" + sBranch + " where salesid ='" + value + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet ordernilltrteirve(string sBranch, string value)
        {
            DataSet ds = new DataSet();

            string sqry = "select orderdate,orderno,advance,iPayMode,orderid from tblorder_" + sBranch + " where orderid ='" + value + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public int salesconversionchange(string sTable, string salesid, string paymode)
        {
            int iSuccess = 0;

            string sqry = "update tblsales_" + sTable + " set ipaymode='" + paymode + "' where salesid=" + salesid + " ";
            iSuccess = dbObj.InlineExecuteNonQuery(sqry);

            return iSuccess;
        }


        public int orderconversionchange(string sTable, string salesid, string paymode)
        {
            int iSuccess = 0;

            string sqry = "update tblorder_" + sTable + " set ipaymode='" + paymode + "' where orderid=" + salesid + " ";
            iSuccess = dbObj.InlineExecuteNonQuery(sqry);

            return iSuccess;
        }
        public DataSet NewStockReport(string Date, string sTable, int UserID)
        {
            DataSet ds = new DataSet();
            string sQry = "select distinct a.Definition,sum(b.Available_QTY)+sum(d.Quantity) as OpeningStock,sum(d.Quantity)as SalesQty,sum(b.Available_QTY) as CurrentStock  from tblCategoryUser a, tblstock_" + sTable + " b,tblsales_" + sTable + " c,tblTransSales_" + sTable + " d where c.BillNo=d.SalesID   and CONVERT(date,c.BillDate)='" + Date + "' and a.CategoryUserID=b.SubCategoryID and a.CategoryUserID=d.SubCategoryID   group by a.Definition";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet GRN(string From, string TO, string sCode, int userid)
        {
            DataSet ds = new DataSet();
            string toDt = Convert.ToDateTime(TO).ToString("yyyy-MM-dd");
            string Dt = Convert.ToDateTime(From).ToString("yyyy-MM-dd");
            string sQry = "";
            // string sQry = "select b.Definition,a.Available_Qty from tblstock a,tblcategoryuser b where UserID="+UserID+" and cast(Expirydate as Date)='" + Dt + "' and Toolid=1 and a.subcategoryid=b.categoryuserid";
            //if (sCode == "BY" || sCode == "KK")
            {
                //sQry = "select distinct c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer a,tbltransgoodstransfer b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode group by c.Category,d.definition  union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name order by category";
                //  sQry = "select distinct a.DC_Date as Date,c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer a,tbltransgoodstransfer b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode group by c.Category,d.definition,a.DC_Date  union all  select distinct a.Date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name,a.Date order by Date desc";
                sQry = "select distinct a.date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By',a.type+'-'+a.frombranchcode as type,isnull(a.requestno,0) as reqno,isnull(a.dc_no,0) as dcno from tblgrn a,tblcategoryuser b,tblcategory c where  cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid  group by c.Category,b.definition,a.name,a.Date,a.type,a.requestno,a.dc_no,a.frombranchcode  order by Date desc";
            }
            //else if (sCode == "NP" || sCode == "BB")
            //{
            //    //sQry = "select distinct c.Category,d.definition,sum(b.Received_Qty) as Qty ,'' as 'GRN By' from tblgoodtransfer2 a,tbltransgoodstransfer2 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode group by c.Category,d.definition   union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name  order by category";
            //    sQry = "select distinct a.DC_Date as Date,c.Category,d.definition,sum(b.Received_Qty) as Qty ,'' as 'GRN By' from tblgoodtransfer2 a,tbltransgoodstransfer2 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode group by c.Category,d.definition,a.DC_Date   union all  select distinct a.Date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name,a.Date  order by Date desc";
            //}
            //else if (sCode == "NE")
            //{
            //    //sQry = "select distinct c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer3 a,tbltransgoodstransfer3 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode group by c.Category,d.definition   union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'   and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name  order by category";
            //    sQry = "select distinct a.DC_Date as Date,c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer3 a,tbltransgoodstransfer3 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode group by c.Category,d.definition,a.DC_Date   union all  select distinct a.Date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'   and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name,a.Date  order by Date desc";
            //}

            //else if (sCode == "PU" || sCode == "MD")
            //{
            //    //sQry = "select distinct c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode  group by c.Category,d.definition  union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name  order by category";
            //    sQry = "select distinct a.DC_Date as Date,c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode  group by c.Category,d.definition,a.DC_Date  union all  select distinct a.Date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name,a.Date  order by Date desc";
            //}

            //else if (sCode == "CH")
            //{
            //    //sQry = "select distinct c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode  group by c.Category,d.definition  union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name  order by category";
            //    sQry = "select distinct a.DC_Date as Date,c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode  group by c.Category,d.definition,a.DC_Date  union all  select distinct a.Date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name,a.Date  order by Date desc";
            //}

            //else if (sCode == "TH")
            //{
            //    //sQry = "select distinct c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode  group by c.Category,d.definition  union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name  order by category";
            //    sQry = "select distinct a.DC_Date as Date,c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode  group by c.Category,d.definition,a.DC_Date  union all  select distinct a.Date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name,a.Date  order by Date desc";
            //}

            //else if (sCode == "PER")
            //{
            //    //sQry = "select distinct c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode  group by c.Category,d.definition  union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name  order by category";
            //    sQry = "select distinct a.DC_Date as Date,c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode  group by c.Category,d.definition,a.DC_Date  union all  select distinct a.Date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name,a.Date  order by Date desc";
            //}
            //else if (sCode == "PAL1")
            //{
            //    //sQry = "select distinct c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode  group by c.Category,d.definition  union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name  order by category";
            //    sQry = "select distinct a.DC_Date as Date,c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode  group by c.Category,d.definition,a.DC_Date  union all  select distinct a.Date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name,a.Date  order by Date desc";
            //}
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GRNPMREPORT(string From, string TO, string sCode, int userid)
        {
            DataSet ds = new DataSet();
            string toDt = Convert.ToDateTime(TO).ToString("yyyy-MM-dd");
            string Dt = Convert.ToDateTime(From).ToString("yyyy-MM-dd");
            string sQry = "";
            // string sQry = "select b.Definition,a.Available_Qty from tblstock a,tblcategoryuser b where UserID="+UserID+" and cast(Expirydate as Date)='" + Dt + "' and Toolid=1 and a.subcategoryid=b.categoryuserid";
            //if (sCode == "BY" || sCode == "KK")
            {
                //sQry = "select distinct c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer a,tbltransgoodstransfer b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode group by c.Category,d.definition  union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name order by category";
                //  sQry = "select distinct a.DC_Date as Date,c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer a,tbltransgoodstransfer b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and a.branchcode=a.branchcode group by c.Category,d.definition,a.DC_Date  union all  select distinct a.Date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid group by c.Category,b.definition,a.name,a.Date order by Date desc";
                sQry = "select distinct a.date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,b.rate,(sum(a.grn_Qty) * b.rate) as totalrate,a.Name as 'GRN By',a.grntype as type,a.signa from tblGRNmp a,tblcategoryuser b,tblcategory c where  cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid  group by c.Category,b.definition,a.name,a.Date,a.grntype,a.signa,b.rate  order by Date desc";
            }

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet InterbranchGRN(string From, string TO, string stable)
        {
            DataSet ds = new DataSet();
            string Dt = Convert.ToDateTime(TO).ToString("yyyy-MM-dd");
            string toDt = Convert.ToDateTime(From).ToString("yyyy-MM-dd");
            string sQry = "select b.category,c.definition +'-'+case ToStore when 'CO1' then 'kknagar' when 'CO2' then 'Byepass' when 'CO3' then 'BbKulam' when 'CO4' then 'Npuram' when 'CO5' then 'Palay' when 'CO6' then 'Maduravayol'  when 'CO7' then 'Purasavakkam' when 'CO8' then 'Chennai Pothys' end as Definition ,a.Qty as Quantity  from tblstocktransfer a ,tblcategory b,tblcategoryuser c where a.categoryid=b.categoryid and a.subcategoryid=c.categoryuserid and issent=1 and convert(date,a.Acceptdate) between '" + From + "'and '" + TO + "' and Fromstore='" + stable + "'";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet InterbranchGRNCat(string From, string TO, string stable, int catid)
        {
            DataSet ds = new DataSet();
            string Dt = Convert.ToDateTime(TO).ToString("yyyy-MM-dd");
            string toDt = Convert.ToDateTime(From).ToString("yyyy-MM-dd");
            string sQry = "select b.category,c.definition +'-'+case ToStore when 'CO1' then 'kknagar' when 'CO2' then 'Byepass' when 'CO3' then 'BbKulam' when 'CO4' then 'Npuram' when 'CO5' then 'Palay' when 'CO6' then 'Maduravayol'  when 'CO7' then 'Purasavakkam' when 'CO8' then 'Chennai Pothys'  end as Definition ,a.Qty as Quantity  from tblstocktransfer a ,tblcategory b,tblcategoryuser c where a.categoryid=b.categoryid and a.subcategoryid=c.categoryuserid and issent=1 and convert(date,a.Acceptdate) between '" + From + "'and '" + TO + "' and Fromstore='" + stable + "' and b.categoryid=" + catid + "";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet InterbranchGRNItem(string From, string TO, string stable, int itemid)
        {
            DataSet ds = new DataSet();
            string Dt = Convert.ToDateTime(TO).ToString("yyyy-MM-dd");
            string toDt = Convert.ToDateTime(From).ToString("yyyy-MM-dd");
            string sQry = "select b.category,c.definition +'-'+case ToStore when 'CO1' then 'kknagar' when 'CO2' then 'Byepass' when 'CO3' then 'BbKulam' when 'CO4' then 'Npuram' when 'CO5' then 'Palay' when 'CO6' then 'Maduravayol'  when 'CO7' then 'Purasavakkam'  end as Definition ,a.Qty as Quantity  from tblstocktransfer a ,tblcategory b,tblcategoryuser c where a.categoryid=b.categoryid and a.subcategoryid=c.categoryuserid and issent=1 and convert(date,a.Acceptdate) between '" + From + "'and '" + TO + "' and Fromstore='" + stable + "' and c.categoryuserid=" + itemid + "";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet GRNSearch(string From, string TO, string sCode, int userid, int subcat)
        {
            DataSet ds = new DataSet();
            string toDt = Convert.ToDateTime(TO).ToString("yyyy-MM-dd");
            string Dt = Convert.ToDateTime(From).ToString("yyyy-MM-dd");
            string sQry = "";
            // string sQry = "select b.Definition,a.Available_Qty from tblstock a,tblcategoryuser b where UserID="+UserID+" and cast(Expirydate as Date)='" + Dt + "' and Toolid=1 and a.subcategoryid=b.categoryuserid";
            // if (sCode == "BY" || sCode == "KK")
            {
                //sQry = "select distinct c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN by' from tblgoodtransfer a,tbltransgoodstransfer b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and  a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty   union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name  order by category";
                // sQry = "select distinct a.DC_Date as Date,c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN by' from tblgoodtransfer a,tbltransgoodstransfer b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and  a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty,a.DC_Date   union all  select distinct a.date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name,a.Date  order by Date desc";
                sQry = "select distinct a.date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By',a.type,isnull(a.requestno,0) as reqno,isnull(a.dc_no,0) as dcno from tblgrn a,tblcategoryuser b,tblcategory c where  cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name,a.Date,a.type,a.requestno,a.dc_no  order by Date desc";
            }
            //else if (sCode == "NP" || sCode == "BB")
            //{
            //    //sQry = "select distinct c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN by' from tblgoodtransfer2 a,tbltransgoodstransfer2 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty  union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and  b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name  order by category";
            //    sQry = "select distinct a.DC_Date as Date,c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN by' from tblgoodtransfer2 a,tbltransgoodstransfer2 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty,a.DC_Date  union all  select distinct a.date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and  b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name,a.Date  order by Date desc";

            //}
            //else if (sCode == "NE")
            //{
            //    //sQry = "select distinct c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN by' from tblgoodtransfer3 a,tbltransgoodstransfer3 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty  union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'   and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and b.categoryuserid=" + subcat + " group by c.Category,b.definition ,a.name  order by category";
            //    sQry = "select distinct a.DC_Date as Date,c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN by' from tblgoodtransfer3 a,tbltransgoodstransfer3 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty,a.DC_Date  union all  select distinct a.date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'   and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and b.categoryuserid=" + subcat + " group by c.Category,b.definition ,a.name,a.Date  order by Date desc";

            //}

            //else if (sCode == "PU" || sCode == "MD")
            //{
            //    //sQry = "select c.Category,d.definition,b.Received_Qty as Qty,'' as 'GRN by' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty  union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and  b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name  order by category";
            //    sQry = "select a.DC_Date as Date,c.Category,d.definition,b.Received_Qty as Qty,'' as 'GRN by' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty,a.DC_Date  union all  select distinct a.date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and  b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name,a.Date  order by Date desc";
            //}
            //else if (sCode == "CH")
            //{
            //    //sQry = "select c.Category,d.definition,b.Received_Qty as Qty,'' as 'GRN by' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty  union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and  b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name  order by category";
            //    sQry = "select a.DC_Date as Date,c.Category,d.definition,b.Received_Qty as Qty,'' as 'GRN by' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty,a.DC_Date  union all  select distinct a.date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and  b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name,a.Date  order by Date desc";
            //}

            //else if (sCode == "TH")
            //{
            //    //sQry = "select c.Category,d.definition,b.Received_Qty as Qty,'' as 'GRN by' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty  union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and  b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name  order by category";
            //    sQry = "select a.DC_Date as Date,c.Category,d.definition,b.Received_Qty as Qty,'' as 'GRN by' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty,a.DC_Date  union all  select distinct a.date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and  b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name,a.Date  order by Date desc";
            //}
            //else if (sCode == "PER")
            //{
            //    //sQry = "select c.Category,d.definition,b.Received_Qty as Qty,'' as 'GRN by' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty  union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and  b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name  order by category";
            //    sQry = "select a.DC_Date as Date,c.Category,d.definition,b.Received_Qty as Qty,'' as 'GRN by' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty,a.DC_Date  union all  select distinct a.date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and  b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name,a.Date  order by Date desc";
            //}
            //// else if (sCode == "PAL1")
            //else
            //{
            //    //sQry = "select c.Category,d.definition,b.Received_Qty as Qty,'' as 'GRN by' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty  union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and  b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name  order by category";
            //    sQry = "select a.DC_Date as Date,c.Category,d.definition,b.Received_Qty as Qty,'' as 'GRN by' from tblgoodtransfer4 a,tbltransgoodstransfer4 b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and d.categoryuserid=" + subcat + " group by c.Category,d.definition,b.Received_Qty,a.DC_Date  union all  select distinct a.date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and  b.categoryuserid=" + subcat + " group by c.Category,b.definition,a.name,a.Date  order by Date desc";
            //}
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GRNSearchcategory(string From, string TO, string sCode, int userid, int subcat)
        {
            DataSet ds = new DataSet();
            string toDt = Convert.ToDateTime(TO).ToString("yyyy-MM-dd");
            string Dt = Convert.ToDateTime(From).ToString("yyyy-MM-dd");
            string sQry = "";
            // string sQry = "select b.Definition,a.Available_Qty from tblstock a,tblcategoryuser b where UserID="+UserID+" and cast(Expirydate as Date)='" + Dt + "' and Toolid=1 and a.subcategoryid=b.categoryuserid";
            //if (sCode == "BY" || sCode == "KK")
            {
                // sQry = " select distinct c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer a,tbltransgoodstransfer b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and c.categoryid=" + subcat + " group by c.Category,d.definition   union all  select distinct c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'   and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and c.categoryid=" + subcat + " group by c.Category,b.definition,a.name  order by category";
                //sQry = " select distinct a.DC_Date as Date,c.Category,d.definition,sum(b.Received_Qty) as Qty,'' as 'GRN By' from tblgoodtransfer a,tbltransgoodstransfer b,tblcategory c,tblcategoryuser d  where a.isreceived=1 and a.Dc_no=b.dc_no and c.categoryid=d.categoryid and b.descriptionid=d.categoryuserid and convert(date,a.DC_date) between '" + Dt + "' and '" + toDt + "' and a.Branch='" + sCode + "' and c.categoryid=" + subcat + " group by c.Category,d.definition,a.DC_Date   union all  select distinct a.date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By' from tblgrn a,tblcategoryuser b,tblcategory c where UserID=" + userid + " and cast(Date as Date) between '" + Dt + "' and '" + toDt + "'   and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and c.categoryid=" + subcat + " group by c.Category,b.definition,a.name,a.Date  order by Date desc";
                sQry = "select distinct a.date as Date,c.category,b.Definition,sum(a.GRN_Qty) as Qty,a.Name as 'GRN By',a.type,isnull(a.requestno,0) as reqno,isnull(a.dc_no,0) as dcno from tblgrn a,tblcategoryuser b,tblcategory c where  cast(Date as Date) between '" + Dt + "' and '" + toDt + "'  and a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and c.categoryid=" + subcat + " group by c.Category,b.definition,a.name,a.Date,a.type,a.requestno,a.dc_no  order by Date desc";

            }

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GRNGRO(int GRnNo)
        {
            DataSet ds = new DataSet();
            string sQry = "";
            // string sQry = "select b.Definition,a.Available_Qty from tblstock a,tblcategoryuser b where UserID="+UserID+" and cast(Expirydate as Date)='" + Dt + "' and Toolid=1 and a.subcategoryid=b.categoryuserid";


            sQry = " select c.category,b.Definition,a.GRN_Qty as Qty from tblgrn a,tblcategoryuser b,tblcategory c where  a.categoryuserid=b.categoryuserid and b.categoryid=c.categoryid and a.GRNNo=" + GRnNo + " order by category";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GRNList(int userid, string date)
        {
            DataSet ds = new DataSet();
            string sQry = "";



            sQry = "select * from tblsubgrn where userid=" + userid + " and convert(date, Date)='" + date + "'";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet Cuurrentstock(int UserId, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = " select distinct b.Definition,sum(a.Available_Qty) as Qty,b.categoryuserid  from tblstock_" + stable + " a,tblcategoryuser b where  a.subcategoryid=b.categoryuserid and a.available_qty>0 group by b.Definition,b.categoryuserid";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet SalesQtysearch(string stable, string Date, int subcat, string TO)
        {
            DataSet ds = new DataSet();
            // string sQry = " select distinct c.category,d.Definition,sum(a.Quantity) as Quantity from tblTransSales_" + stable + " a, tblsales_" + stable + " b ,  tblcategory c,tblCategoryUser d where a.SalesID=b.BillNo and c.CategoryID=d.CategoryID  and b.cancelstatus='No'  and a.SubCategoryID=d.CategoryUserID and convert(date,b.BillDate) between '" + TO + "' and'" + Date + "' and a.SubCategoryID=" + subcat + " group by c.category,d.Definition ";
            string sQry = " select distinct cast(b.BillDate as Date) Date,c.category,d.Definition,sum(a.Quantity) as Quantity from tblTransSales_" + stable + " a, tblsales_" + stable + " b ,  tblcategory c,tblCategoryUser d where b.salesid=a.salesuniqueid and a.SalesID=b.BillNo and c.CategoryID=d.CategoryID  and b.cancelstatus='No'  and a.SubCategoryID=d.CategoryUserID and convert(date,b.BillDate) between '" + Date + "' and'" + TO + "' and a.SubCategoryID=" + subcat + " group by c.category,d.Definition,cast(b.BillDate as Date) order by Date desc ";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }




        public DataSet SalesQtysearchcat(string stable, string Date, int subcat, string To)
        {
            DataSet ds = new DataSet();
            // string sQry = " select distinct c.category,d.Definition,sum(a.Quantity) as Quantity from tblTransSales_" + stable + " a, tblsales_" + stable + " b ,  tblcategory c,tblCategoryUser d where a.SalesID=b.BillNo and c.CategoryID=d.CategoryID  and b.cancelstatus='No'  and a.SubCategoryID=d.CategoryUserID and convert(date,b.BillDate) between'" + Date + "' and '" + To + "' and c.CategoryID=" + subcat + " group by c.category,d.Definition ";
            string sQry = " select distinct cast(b.BillDate as Date) Date,c.category,d.Definition,sum(a.Quantity) as Quantity from tblTransSales_" + stable + " a, tblsales_" + stable + " b ,  tblcategory c,tblCategoryUser d where b.salesid=a.salesuniqueid and  a.SalesID=b.BillNo and c.CategoryID=d.CategoryID  and b.cancelstatus='No'  and a.SubCategoryID=d.CategoryUserID and convert(date,b.BillDate) between'" + Date + "' and '" + To + "' and c.CategoryID=" + subcat + " group by c.category,d.Definition,cast(b.BillDate as Date)  order by Date desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet DailySalesQty(string stable, string ToDate, string from)
        {
            DataSet ds = new DataSet();
            //  string sQry = " select distinct c.category,d.Definition,sum(a.Quantity) as Quantity from tblTransSales_" + stable + " a, tblsales_" + stable + " b ,  tblcategory c,tblCategoryUser d where a.SalesID=b.BillNo and c.CategoryID=d.CategoryID   and a.SubCategoryID=d.CategoryUserID and convert(date,b.BillDate) between'" + Date + "' and '" + To + "' and b.cancelstatus='No'  group by c.category,d.Definition   ";
            string sQry = " select distinct cast(b.BillDate as Date) Date,c.category,d.Definition,sum(a.Quantity) as Quantity from tblTransSales_" + stable + " a, tblsales_" + stable + " b ,  tblcategory c,tblCategoryUser d where b.salesid=a.salesuniqueid and a.SalesID=b.BillNo and c.CategoryID=d.CategoryID   and a.SubCategoryID=d.CategoryUserID and convert(date,b.BillDate) between'" + from + "' and '" + ToDate + "' and b.cancelstatus='No'  group by c.category,d.Definition,cast(b.BillDate as Date) order by Date desc   ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }



        public DataSet chkstock(int UserId, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = " select * from tblstock_" + stable + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet SalesQty(string sTable, string sDate)
        {
            DataSet ds = new DataSet();
            string sQry = "select distinct c.Definition,sum( b.Quantity) as Qty,c.categoryuserid from tblsales_" + sTable + " a,tbltranssales_" + sTable + " b,tblcategoryuser c where a.billno=b.salesid and b.subcategoryid=c.categoryuserid and convert(date,a.billdate)='" + sDate + "' group by c.definition,c.categoryuserid";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet grnQty(int UserID, string sCode, string sDate, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "select  distinct a.Definition,sum(b.Quantity) as Qty,a.categoryuserid from tblcategoryuser a,tblstock_" + stable + " b where a.CategoryUserID=b.SubCategoryID and  b.ToolID=1 and convert(date,b.Expirydate)='" + sDate + "' group by a.Definition,a.categoryuserid union all  select  distinct a.Definition, sum(c.Received_Qty) as Qty,a.categoryuserid from tblcategoryuser a,tblGoodTransfer b,tblTransGoodsTransfer c where a.CategoryUserID=c.DescriptionId and b.BranchCode='" + sCode + "' and  convert(date,b.DC_Date)='" + sDate + "' and b.DC_NO=c.DC_No group by a.Definition,a.categoryuserid";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet OpeningStock(int UserID)
        {

            DataSet ds = new DataSet();
            string sQry = "  select distinct a.Definition,a.CategoryUserID,SUM(b.Qty) as Qty from tblCategoryUser a,tblopeningstock b where a.CategoryUserID=b.subcategoryid and b.UserID=" + UserID + " and b.Qty>0 group by a.Definition,a.CategoryUserID";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;


        }


        public int InsertOpeningStock(int iCatID, int iSubCat, double Qty, int iuserID)
        {
            int isave = 0;
            string insert = "insert into tblOpeningStock (CategoryID,SubcategoryID,Qty,UserID) values(" + iCatID + "," + iSubCat + ",'" + Qty + "'," + iuserID + ") ";
            isave = dbObj.InlineExecuteNonQuery(insert);
            return isave;
        }

        public int DeleteOpeningStock(int iuserID)
        {
            int isave = 0;
            string insert = "Delete tblOpeningStock where UserID=" + iuserID + " ";
            isave = dbObj.InlineExecuteNonQuery(insert);
            return isave;
        }
        public DataSet GetDamage(string Date, string sTableName)
        {
            DataSet ds = new DataSet();

            string sqry = "select SUM(Total)as Sum from tblReturn_" + sTableName + " where iPayMode='4' and cast(RetDate as date)='" + Date + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public int InsertReturn(string sSalesTable, int UserID, string BillNo, string BillDate, int CustomerID, double NetAmount, double Total, double Tax, double Discount, int iEdit, int Icnt, double dAdvance, int iPayMode, string name, int Reasonsid, string saveDatetime, string notes)
        {
            int iSuccess = 0;
            DataSet billnonew = new DataSet();
            string sqryy = "select MAX(Retno+1) as RetNo from " + sSalesTable + "";
            billnonew = dbObj.InlineExecuteDataSet(sqryy);
            string billnonw = billnonew.Tables[0].Rows[0]["RetNo"].ToString();
            if (billnonw == "")
                billnonw = "1";
            int billno1 = Convert.ToInt32(billnonw);


            string sQry = "insert into " + sSalesTable + "(UserID, Retno, RetDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,Advance,iPayMode,CancelStatus,Name,Reasonsid,SaveDateTime,Notes) values ('" + UserID + "','" + billnonw + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "','" + Discount + "'," + iEdit + ",'" + dAdvance + "'," + iPayMode + ",'No','" + name + "'," + Reasonsid + ",'" + saveDatetime + "','" + notes + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return billno1;

        }

        public int InsertReturnBilling(string sSalesTable, int UserID, string BillNo, string BillDate, int CustomerID, double NetAmount, double Total, double Tax, double Discount, int iEdit, int Icnt, double dAdvance, int iPayMode, string name, int Reasonsid, string saveDatetime, string notes, string LocalBranch, int LocalRetNo)
        {
            int iSuccess = 0;
            DataSet billnonew = new DataSet();
            string sqryy = "select MAX(Retno+1) as RetNo from " + sSalesTable + "";
            billnonew = dbObj.InlineExecuteDataSet(sqryy);
            string billnonw = billnonew.Tables[0].Rows[0]["RetNo"].ToString();
            if (billnonw == "")
                billnonw = "1";
            int billno1 = Convert.ToInt32(billnonw);


            string sQry = "insert into " + sSalesTable + "(UserID, Retno, RetDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,Advance,iPayMode,CancelStatus,Name,Reasonsid,SaveDateTime,Notes,LocalRetNo,LocalBranch) values ('" + UserID + "','" + billnonw + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "','" + Discount + "'," + iEdit + ",'" + dAdvance + "'," + iPayMode + ",'No','" + name + "'," + Reasonsid + ",'" + saveDatetime + "','" + notes + "','" + LocalRetNo + "','" + LocalBranch + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return billno1;

        }

        public int InsertReturnProd(string sSalesTable, int UserID, string BillNo, string BillDate, int CustomerID, double NetAmount, double Total, double Tax, double Discount, int iEdit, int Icnt, double dAdvance, int iPayMode, string name, int Reasonsid, string saveDatetime, string notes, string LocalBranch, int LocalRetNo)
        {
            int iSuccess = 0;
            DataSet billnonew = new DataSet();
            string sqryy = "select MAX(Retno+1) as RetNo from " + sSalesTable + "";
            billnonew = dbObj.InlineExecuteDataSetMain(sqryy);
            string billnonw = billnonew.Tables[0].Rows[0]["RetNo"].ToString();
            if (billnonw == "")
                billnonw = "1";
            int billno1 = Convert.ToInt32(billnonw);


            string sQry = "insert into " + sSalesTable + "(UserID, Retno, RetDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,Advance,iPayMode,CancelStatus,Name,Reasonsid,SaveDateTime,Notes,LocalRetNo,LocalBranch) values ('" + UserID + "','" + billnonw + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "','" + Discount + "'," + iEdit + ",'" + dAdvance + "'," + iPayMode + ",'No','" + name + "'," + Reasonsid + ",'" + saveDatetime + "','" + notes + "','" + LocalRetNo + "','" + LocalBranch + "')";
            iSuccess = dbObj.InlineExecuteNonQueryMain(sQry);
            return billno1;

        }

        public int insertTransReturn(string sTransSalesTable, int SalesID, int CategoryID, double Quantity, double UnitPrice, double Amount, int iSubCategoryID, int StockID)
        {
            int iSuccess = 0;
            string sQry = "insert into " + sTransSalesTable + "( RetNo, CategoryID,  Quantity,UnitPrice,Amount,SubCategoryID,StockID) values ('" + SalesID + "','" + CategoryID + "','" + Quantity + "','" + UnitPrice + "','" + Amount + "'," + iSubCategoryID + "," + StockID + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        public int insertTransReturnBilling(string sTransSalesTable, int SalesID, int CategoryID, double Quantity, double UnitPrice, double Amount, int iSubCategoryID, int StockID)
        {
            int iSuccess = 0;
            string sQry = "insert into " + sTransSalesTable + "( RetNo, CategoryID,  Quantity,UnitPrice,Amount,SubCategoryID,StockID) values ('" + SalesID + "','" + CategoryID + "','" + Quantity + "','" + UnitPrice + "','" + Amount + "'," + iSubCategoryID + "," + StockID + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        public int insertTransReturnProd(string sTransSalesTable, int SalesID, int CategoryID, double Quantity, double UnitPrice, double Amount, int iSubCategoryID, int StockID)
        {
            int iSuccess = 0;
            string sQry = "insert into " + sTransSalesTable + "( RetNo, CategoryID,  Quantity,UnitPrice,Amount,SubCategoryID,StockID) values ('" + SalesID + "','" + CategoryID + "','" + Quantity + "','" + UnitPrice + "','" + Amount + "'," + iSubCategoryID + "," + StockID + ")";
            iSuccess = dbObj.InlineExecuteNonQueryMain(sQry);
            return iSuccess;

        }


        public DataSet ReturnGrid(string sTableName)
        {
            DataSet ds = new DataSet();


            // string sqry = "select a.Branch,a.DC_NO,a.Ret_Np,a.RequestNO, c.category,d.Definition,b.Qty,case b.Reason when 1 then 'Damaged' when 2 then 'Date Bar' when 3 then 'Fungus' when 4 then 'Compliment'  end as Reason,a.Ret_Date from tblpurchasereturn a ,tblTransPurchareReturn b,tblcategory c,tblCategoryUser d where a.Ret_Np=b.Ret_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchID=" + BranchID + "";
            string sqry = "select convert(date,a.RetDate) as ReturnDate,c.Definition,b.Quantity,b.Amount,b.RetNo,case a.iPayMode  when 1 then 'Wastage' when 2 then 'DateBar' when 3 then 'Excess Return' when 4 then 'Damage' when 5 then 'Wrong GRN' when 6 then 'shortage'  when 7 then 'Fungus'   when 8 then 'Fungus Before Date' when 9 then 'To Production' when 10 then 'Return To Production(Recycle)' when 11 then 'staff consumed' when 12 then  'To pothys' when 13 then  'Stock (+)(-)' when 14 then  'Stock Shift' when 15 then  'Stock Consumed' end as Reason from tblReturn_" + sTableName + " a,tblTransReturn_" + sTableName + " b,tblCategoryUser c where a.RetNo=b.RetNo and b.SubCategoryID=c.CategoryUserID";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet ReturnGridTotal(string sTableName)
        {
            DataSet ds = new DataSet();


            // string sqry = "select a.Branch,a.DC_NO,a.Ret_Np,a.RequestNO, c.category,d.Definition,b.Qty,case b.Reason when 1 then 'Damaged' when 2 then 'Date Bar' when 3 then 'Fungus' when 4 then 'Compliment'  end as Reason,a.Ret_Date from tblpurchasereturn a ,tblTransPurchareReturn b,tblcategory c,tblCategoryUser d where a.Ret_Np=b.Ret_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchID=" + BranchID + "";
            string sqry = "select sum(Total) as Total from tblReturn_" + sTableName + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet ReturnGridSearch(string sTableName, string sFrom, string sTo)
        {
            DataSet ds = new DataSet();

            string sqry = "";
            sqry = "select CONVERT(VARCHAR(20), [RetDate], 103) AS DATEPART,CONVERT(VARCHAR(20), [RetDate], 108) AS TIMEPART,convert(datetime,a.RetDate) as ReturnDate,d.Category,c.Definition,b.Quantity,b.Amount,b.RetNo,f.reason as Reason,e.SubReasons,'' as Store,a.Name,a.saveDateTime,a.notes  " +
                " from tblReturn_" + sTableName + " a,tblTransReturn_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f where f.reasonid=a.ipaymode and c.categoryid=d.categoryid and a.RetNo=b.RetNo and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and CONVERT(date, a.RetDate ) between '" + sFrom + "' and '" + sTo + "' order by a.RetDate asc";

            //sqry = "select convert(datetime,a.RetDate) as ReturnDate,a.RetNo,f.reason as Reason,a.Name,a.saveDateTime,a.notes,e.SubReasons,a.total  " +
            //    " from tblReturn_" + sTableName + " a,tblSubReasons e,tblreason f where f.reasonid=a.ipaymode " +
            //    " and e.id=a.Reasonsid and CONVERT(date, a.RetDate ) between '" + sFrom + "' and '" + sTo + "' order by a.RetDate asc";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet ReturnGridSearchbyidprint(string sTableName, string rtnno)
        {
            DataSet ds = new DataSet();

            string sqry = "";
            sqry = "select convert(datetime,a.RetDate) as ReturnDate,d.Category,c.Definition,b.Quantity,b.Amount,b.RetNo,f.reason as Reason,e.SubReasons,'' as Store,a.Name,a.saveDateTime,a.notes  " +
                " from tblReturn_" + sTableName + " a,tblTransReturn_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f " +
                " where f.reasonid=a.ipaymode and c.categoryid=d.categoryid and a.RetNo=b.RetNo and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and a.retno='" + rtnno + "' order by a.RetDate asc";

            //sqry = "select convert(datetime,a.RetDate) as ReturnDate,a.RetNo,f.reason as Reason,a.Name,a.saveDateTime,a.notes,e.SubReasons,a.total  " +
            //    " from tblReturn_" + sTableName + " a,tblSubReasons e,tblreason f where f.reasonid=a.ipaymode " +
            //    " and e.id=a.Reasonsid and CONVERT(date, a.RetDate ) between '" + sFrom + "' and '" + sTo + "' order by a.RetDate asc";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet ReturnGridSearchDetailsnew(string sTableName, string sFrom, string sTo)
        {
            DataSet ds = new DataSet();

            string sqry = "";
            //sqry = "select convert(datetime,a.RetDate) as ReturnDate,d.Category,c.Definition,b.Quantity,b.Amount,b.RetNo,f.reason as Reason,e.SubReasons,'' as Store,a.Name,a.saveDateTime  " +
            //    " from tblReturn_" + sTableName + " a,tblTransReturn_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f where f.reasonid=a.ipaymode and c.categoryid=d.categoryid and a.RetNo=b.RetNo and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and CONVERT(date, a.RetDate ) between '" + sFrom + "' and '" + sTo + "' order by a.RetDate asc";

            sqry = "select convert(datetime,a.RetDate) as ReturnDate,a.RetNo,f.reason as Reason,a.Name,a.saveDateTime,a.notes,e.SubReasons,a.total  " +
                " from tblReturn_" + sTableName + " a,tblSubReasons e,tblreason f where f.reasonid=a.ipaymode " +
                " and e.id=a.Reasonsid and CONVERT(date, a.RetDate ) between '" + sFrom + "' and '" + sTo + "' order by a.RetDate asc";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet ReturnGridSearchDetailsnewbyreason(string sTableName, string sFrom, string sTo, int reason)
        {
            DataSet ds = new DataSet();

            string sqry = "";
            //sqry = "select convert(datetime,a.RetDate) as ReturnDate,d.Category,c.Definition,b.Quantity,b.Amount,b.RetNo,f.reason as Reason,e.SubReasons,'' as Store,a.Name,a.saveDateTime  " +
            //    " from tblReturn_" + sTableName + " a,tblTransReturn_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f where f.reasonid=a.ipaymode and c.categoryid=d.categoryid and a.RetNo=b.RetNo and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and CONVERT(date, a.RetDate ) between '" + sFrom + "' and '" + sTo + "' order by a.RetDate asc";

            sqry = "select convert(datetime,a.RetDate) as ReturnDate,a.RetNo,f.reason as Reason,a.Name,a.saveDateTime,a.notes,e.SubReasons,a.total  " +
                " from tblReturn_" + sTableName + " a,tblSubReasons e,tblreason f where f.reasonid=a.ipaymode " +
                " and e.id=a.Reasonsid and CONVERT(date, a.RetDate ) between '" + sFrom + "' and '" + sTo + "' and a.iPayMode=" + reason + " order by a.RetDate asc";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet ReturnGridSearchExport(string sTableName, string sFrom, string sTo)
        {
            DataSet ds = new DataSet();


            // string sqry = "select a.Branch,a.DC_NO,a.Ret_Np,a.RequestNO, c.category,d.Definition,b.Qty,case b.Reason when 1 then 'Damaged' when 2 then 'Date Bar' when 3 then 'Fungus' when 4 then 'Compliment'  end as Reason,a.Ret_Date from tblpurchasereturn a ,tblTransPurchareReturn b,tblcategory c,tblCategoryUser d where a.Ret_Np=b.Ret_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchID=" + BranchID + "";
            string sqry = "select convert(date,a.RetDate)  as RetDate,c.Definition as Item,b.Quantity as Qty,b.Amount as Amt,case a.iPayMode  when 1 then 'Wastage' when 2 then 'DateBar' when 3 then 'Excess Return' when 4 then 'Damage' when 5 then 'Wrong GRN' when 6 then 'shortage'  when 7 then 'Fungus'   when 8 then 'Fungus Before Date' when 9 then 'To Production' when 10 then 'Return To Production(Recycle)' when 11 then 'staff consumed' when 12 then  'To pothys' when 13 then  'Stock (+)(-)' when 14 then  'Stock Shift' when 15 then  'Stock Consumed' end as Reason  from tblReturn_" + sTableName + " a,tblTransReturn_" + sTableName + " b,tblCategoryUser c where a.RetNo=b.RetNo and b.SubCategoryID=c.CategoryUserID and CONVERT(date, a.RetDate ) between '" + sFrom + "' and '" + sTo + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet ReturnGridSearchReason(string sTableName, string sFrom, string sTo, int ID)
        {
            DataSet ds = new DataSet();


            // string sqry = "select a.Branch,a.DC_NO,a.Ret_Np,a.RequestNO, c.category,d.Definition,b.Qty,case b.Reason when 1 then 'Damaged' when 2 then 'Date Bar' when 3 then 'Fungus' when 4 then 'Compliment'  end as Reason,a.Ret_Date from tblpurchasereturn a ,tblTransPurchareReturn b,tblcategory c,tblCategoryUser d where a.Ret_Np=b.Ret_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchID=" + BranchID + "";
            //string sqry = "select convert(datetime,a.RetDate) as ReturnDate,d.category,c.Definition,b.Quantity,b.Amount,b.RetNo,case a.iPayMode  when 1 then 'Wastage' when 2 then 'DateBar' when 3 then 'Excess Return' when 4 then 'Damage' when 5 then 'Wrong GRN' when 6 then 'shortage'  when 7 then 'Fungus'   when 8 then 'Fungus Before Date' when 9 then 'To Production' when 10 then 'Return To Production(Recycle)' when 11 then 'staff consumed' when 12 then  'To pothys' when 13 then  'Stock (+)(-)' when 14 then  'Stock Shift' when 15 then  'Stock Consumed' end as Reason,a.Name,convert(DateTime,a.saveDateTime) as saveDateTime  from tblReturn_" + sTableName + " a,tblTransReturn_" + sTableName + " b,tblCategoryUser c,tblcategory d where a.RetNo=b.RetNo and c.categoryid=d.categoryid and b.SubCategoryID=c.CategoryUserID and CONVERT(date, a.RetDate ) between '" + sFrom + "' and '" + sTo + "' and a.iPayMode=" + ID + " order by a.RetDate asc";
            string sqry = "select CONVERT(VARCHAR(20), [RetDate], 103) AS DATEPART,CONVERT(VARCHAR(20), [RetDate], 108) AS TIMEPART, convert(datetime,a.RetDate) as ReturnDate,d.category,c.Definition,b.Quantity,b.Amount,b.RetNo,f.reason as Reason,e.SubReasons,a.Name,convert(DateTime,a.saveDateTime) as saveDateTime  " +
                " from tblReturn_" + sTableName + " a,tblTransReturn_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f where f.reasonid=a.ipaymode and a.RetNo=b.RetNo and c.categoryid=d.categoryid and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and CONVERT(date, a.RetDate ) between '" + sFrom + "' and '" + sTo + "' and a.iPayMode=" + ID + " order by a.RetDate asc";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet ReturnGridSearchTotal(string sTableName, string sFrom, string sTo)
        {
            DataSet ds = new DataSet();


            // string sqry = "select a.Branch,a.DC_NO,a.Ret_Np,a.RequestNO, c.category,d.Definition,b.Qty,case b.Reason when 1 then 'Damaged' when 2 then 'Date Bar' when 3 then 'Fungus' when 4 then 'Compliment'  end as Reason,a.Ret_Date from tblpurchasereturn a ,tblTransPurchareReturn b,tblcategory c,tblCategoryUser d where a.Ret_Np=b.Ret_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchID=" + BranchID + "";
            string sqry = "select sum(Total) as Total from tblReturn_" + sTableName + " where CONVERT(date, RetDate )  between '" + sFrom + "' and '" + sTo + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet getimage()
        {
            DataSet ds = new DataSet();
            string getimg = "select * from tbl_logo ";
            ds = dbObj.InlineExecuteDataSet(getimg);
            return ds;

        }
        public DataSet ReturnGridSearchTotalReason(string sTableName, string sFrom, string sTo, int ID)
        {
            DataSet ds = new DataSet();


            // string sqry = "select a.Branch,a.DC_NO,a.Ret_Np,a.RequestNO, c.category,d.Definition,b.Qty,case b.Reason when 1 then 'Damaged' when 2 then 'Date Bar' when 3 then 'Fungus' when 4 then 'Compliment'  end as Reason,a.Ret_Date from tblpurchasereturn a ,tblTransPurchareReturn b,tblcategory c,tblCategoryUser d where a.Ret_Np=b.Ret_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchID=" + BranchID + "";
            string sqry = "select sum(Total) as Total from tblReturn_" + sTableName + " where CONVERT(date, RetDate ) between '" + sFrom + "' and '" + sTo + "' and iPayMode=" + ID + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet ReturnNo(string sSalesTable)
        {

            DataSet ds = new DataSet();
            string sQry = "select (MAX(RetNo)+1) as RetNo from " + sSalesTable + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        #region FeedBack
        public int FeedBack(string store, string lobbies, string FB, string Amb, string Service, string Exp, string name, string email, string phone, int CO, DateTime date)
        {
            int iSuccess = 0;
            string sQry = "insert into tbl_Feedback(Store,Lobbies,F_B,Ambition,Service,Overall_Exp,Customer_Name,Address, Phone, Date, Comp_id) values ('" + store + "','" + lobbies + "','" + FB + "','" + Amb + "','" + Service + "','" + Exp + "','" + name + "','" + email + "','" + phone + "','" + date + "'," + CO + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }
        #endregion

        #region CancelnormalsalesBill
        public bool CheckIfnormalsales(int cat, string table)
        {
            DataSet ds = new DataSet();
            int qty = 0;
            // string sqry = "select * from tblCategory where isdelete=0  ";
            string sqry = "select COUNT(*) from tblsales_" + table + " Where orderno=0 and cancelstatus='No' and salesID =" + cat.ToString();

            object qtyObj = dbObj.InlineExecuteScalar(sqry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }

        }

        public int normalsalescancel(string table, int salesid, string Ref, string stable, string reason, string OnliOrder, string MOnliOrder, string BranchID, string Reason)
        {
            int iSuccess = 0;
            int iupdate = 0;
            string salestype = string.Empty;
            string SalesOrder = string.Empty;
            DateTime Billdate = DateTime.Now;
            string Requesttype = "DIR ORD";
            string CStatus = "Y";
            int billno = 0;
            //CDate

            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet dqty = new DataSet();

            string sqry1 = "select * from tblsales_" + table + " where orderno=0 and cancelstatus='No' and salesid='" + salesid + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry1);

            if (ds.Tables[0].Rows.Count > 0)
            {

                billno = Convert.ToInt32(ds.Tables[0].Rows[0]["billNo"]);
                //int salesidd = Convert.ToInt32(ds.Tables[0].Rows[0]["salesid"]);

                salestype = Convert.ToString(ds.Tables[0].Rows[0]["salestype"]);
                SalesOrder = Convert.ToString(ds.Tables[0].Rows[0]["SalesOrder"]);
                Billdate = Convert.ToDateTime(ds.Tables[0].Rows[0]["Billdate"]);



                // need to get branchid,Ref

                string strans = "select * from tbltranssales_" + table + " where Salesid='" + billno + "' and salesuniqueid='" + salesid + "'";
                dss = dbObj.InlineExecuteDataSet(strans);
                if (dss.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
                    {
                        int stockid = Convert.ToInt32(dss.Tables[0].Rows[i]["stockid"]);
                        int qty = Convert.ToInt32(dss.Tables[0].Rows[i]["Quantity"]);
                        int cqty = Convert.ToInt32(dss.Tables[0].Rows[i]["Cqty"]);

                        string getstoc = "select * from tblStock_" + stable + " where stockid='" + stockid + "'";
                        dqty = dbObj.InlineExecuteDataSet(getstoc);

                        if (dqty.Tables[0].Rows.Count > 0)
                        {
                            int avali = Convert.ToInt32(dqty.Tables[0].Rows[0]["Available_QTY"]);
                            string itemid = dqty.Tables[0].Rows[0]["SubCategoryID"].ToString();

                            int sqty = (qty * cqty);

                            int finalqty = sqty + avali;

                            string update = "Update tblStock_" + stable + " set Available_QTY = '" + finalqty + "' where stockid='" + stockid + "' ";
                            iupdate = dbObj.InlineExecuteNonQuery(update);

                            //  string AuditQty = "Insert into TblAuditQty_" + table + "(Screen,Qty,RefId)VAlues('Sales/Cancel','" + qty + "','" + salesid + "')";
                            //  iupdate = dbObj.InlineExecuteNonQuery(AuditQty);
                            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('Sales/Cancel','" + sqty + "','" + salesid + "','+','" + itemid + "','" + stockid + "')";
                            iupdate = dbObj.InlineExecuteNonQuery(AuditQty);

                        }

                    }
                }

            }

            string sQry = "update tblsales_" + table + " set cancelstatus='Yes',Reference=" + Ref + ",Reason='" + reason + "',Canceltine= getdate() where salesid='" + salesid + "' and orderno=0 ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "update tbltranssalesAmount_" + table + " set IsCancelStatus='Yes',Canceldatetime= getdate() where salesid='" + salesid + "'";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry1);

            if (OnliOrder == "Y")
            {
                string mainsqry = "Update tblOnlineOrderNumber set Reason='" + Reason + "', CStatus='Y',CDate=getdate() where onlinetype='" + salestype + "' and BranchCode='" + table + "' and OnlineNumber='" + SalesOrder + "' and Kotno='" + billno + "' ";
                iupdate = dbObj.InlineExecuteNonQueryMain(mainsqry);
            }

            if (MOnliOrder == "Y")
            {
                string sqry = "insert into tblOnlineOrderNumber(OnlineType,OnlineNumber,BranchCode,BranchId,EntryBy,Status,KotNo,RequestType,KotDate,Cstatus,Cdate,Reason) " +
                " values('" + salestype + "','" + SalesOrder + "','" + table + "','" + BranchID + "','" + Ref + "','Y','" + billno + "','" + Requesttype + "','" + Billdate + "','Y',getdate(),'" + Reason + "')";
                iupdate = dbObj.InlineExecuteNonQueryMain(sqry);
            }


            return iSuccess;

        }


        public DataSet SelectedSales(string sBranch, int cat)
        {
            string store = "";
            //if (sBranch == "CO1")
            //{
            //    store = "KK Nagar";
            //}
            //else if (sBranch == "CO2")
            //{
            //    store = "Byepass";
            //}
            //else if (sBranch == "CO3")
            //{
            //    store = "BB Kulam";
            //}
            //else if (sBranch == "CO4")
            //{
            //    store = "Narayanapuram";
            //}
            //else if (sBranch == "CO5")
            //{
            //    store = "Nellai";
            //}



            //else if (sBranch == "CO6")
            //{
            //    store = "Maduravoyal";
            //}

            //else if (sBranch == "CO7")
            //{
            //    store = "Purasavakkam";
            //}
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance,s.NetAmount,s.Total from tblsales_CO4 as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where (OrderNo=0 or OrderNo <>0) and s.ContactTypeID=1  order by s.BillDate desc ";
            //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
            //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage' when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage' when 7 then 'BB KULAM'  end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
            string sqry = "select s.salestype,'" + store + "' as Branch,case s.OrderNo when 0 then 'Allow to cancel' else 'Not allow to Cancel' end as labl,s.cancelstatus, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,((s.discount)) as discount,s.Tax,s.Total,'Sales' as type, " +
            " sp.PayMode as  SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID inner join tblSalesPaymode as sp on sp.Value=s.iPayMode where salesid='" + cat + "' ";
            //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            //dss.Merge(ds);

            //string sqtyy = " select 'Narayana Puram' as Branch,'Advance' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.advance as Netamount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo<>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            //ds1 = dbObj.InlineExecuteDataSet(sqtyy);
            //dss.Merge(ds1);
            return ds;
        }


        public DataSet CustomerSalescacnelbill(string sBranch, DateTime sFmdate, DateTime sToDate)
        {
            string store = "";
            if (sBranch == "CO1")
            {
                store = "KK Nagar";
            }
            else if (sBranch == "CO2")
            {
                store = "Byepass";
            }
            else if (sBranch == "CO3")
            {
                store = "BB Kulam";
            }
            else if (sBranch == "CO4")
            {
                store = "Narayanapuram";
            }
            else if (sBranch == "CO5")
            {
                store = "Nellai";
            }

            else if (sBranch == "CO6")
            {
                store = "Maduravoyal";
            }
            else if (sBranch == "CO7")
            {
                store = "purasavakkam";
            }
            else if (sBranch == "CO8")
            {
                store = "Chennai Pothys";
            }
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
            // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance,s.NetAmount,s.Total from tblsales_CO4 as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where (OrderNo=0 or OrderNo <>0) and s.ContactTypeID=1  order by s.BillDate desc ";
            //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
            //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage' when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage' when 7 then 'BB KULAM'  end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
            //string sqry = "select '" + sBranch + "' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,((s.discount/100)*s.total) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'   when 9 then 'Kk Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType,Reference,s.Canceltine from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='Yes'   order by s.BillDate desc ";
            string sqry = "select s.salesid,s.salestype as typeid,'" + sBranch + "' as Branch, cu.CustomerName,s.BillNo,s.BillDate,(s.CGST + s.SGST) as Tax,s.NetAmount,((s.Discount )) as discount,s.Total,'Sales' as type, " +
            " sp.PayMode as SalesType,s.Provider,s.Approved,'' as Mobileno,Reference from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID inner join tblSalesPaymode as sp on sp.Value=s.iPayMode where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='Yes'   order by s.BillDate desc ";
            //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            //dss.Merge(ds);

            //string sqtyy = " select 'Narayana Puram' as Branch,'Advance' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.advance as Netamount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo<>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            //ds1 = dbObj.InlineExecuteDataSet(sqtyy);
            //dss.Merge(ds1);
            return ds;
        }
        public DataSet OrderFormCancel(string sBranch, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select '" + sBranch + "' as branch, a.Cancelled,a.CancelDate,a.OrderDate,b.CustomerName,b.MobileNo,OrderNo,convert(date, DeliveryDate) as DeliveryDate ,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance,a.bookno from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=1 and convert(date,a.CancelDate) between '" + sFmdate + "' and '" + sToDate + "' group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.bookno,a.OrderDate,a.CancelDate,a.Cancelled order by a.OrderNo desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet CustomerSalesBranchbillcancel(string sBranch, DateTime sFmdate, DateTime sToDate, string paymode)
        {
            string store = "";
            if (sBranch == "CO1")
            {
                store = "KK Nagar";
            }
            else if (sBranch == "CO2")
            {
                store = "Byepass";
            }
            else if (sBranch == "CO3")
            {
                store = "BB Kulam";
            }
            else if (sBranch == "CO4")
            {
                store = "Narayanapuram";
            }
            else if (sBranch == "CO5")
            {
                store = "Nellai";
            }

            else if (sBranch == "CO6")
            {
                store = "Maduravoyal";
            }
            else if (sBranch == "CO7")
            {
                store = "purasavakkam";
            }
            else if (sBranch == "CO8")
            {
                store = "Chennai Pothys";
            }

            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            if (paymode == "0" || paymode == "All")
            {
                //string sqry = "(select 'Branch 1' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1) order by a.BillDate desc";
                // string sqry = "select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno=0 union select 'Narayana Puram' as Branch, b.CustomerName,a.BillNo,a.BillDate,a.Tax,a.Advance,a.Advance as NetAmount,a.Total from tblsales_CO4 a,tblCustomer b where a.CustomerID=b.CustomerID and a.ContactTypeID=1 and a.orderno<>0  order by a.BillDate desc";
                // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance,s.NetAmount,s.Total from tblsales_CO4 as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where (OrderNo=0 or OrderNo <>0) and s.ContactTypeID=1  order by s.BillDate desc ";
                //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,case s.ContactTypeID when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,'Order Form' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage' when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage' when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                //string sqry = "select '" + sBranch + "' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount-(s.Total)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType,Reference from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='Yes'  order by s.BillDate desc ";
                string sqry = "select s.salesid,s.salestype as typeid,'" + sBranch + "' as Branch,s.BillNo,CONVERT(VARCHAR(20), [BillDate], 103) AS DATEPART,CONVERT(VARCHAR(20), [BillDate], 108) AS TIMEPART,s.BillDate,(s.CGST + s.SGST) as Tax,s.NetAmount,((s.Discount)) as discount,s.Total,'Sales' as type, " +
              " sp.PayMode  as SalesType,s.Provider,s.Approved ,c.customername,c.mobileNo,Reference from tblsales_" + sBranch + " as s,tblcustomer c,tblSalesPaymode as sp where sp.Value=s.iPayMode and s.customerid=c.customerid and OrderNo=0   and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='Yes'  order by s.BillDate desc ";
                //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                // string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.Advance as 'NetAmount',s.Total,'Order Form' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo>0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM'  end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                //  string sqry = "select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' union all select 'Narayana Puram' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,(s.netamount*(s.discount/100)) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Date Bared' when 6 then 'Wastage'  when 7 then 'BB KULAM'  end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'  order by s.BillDate desc ";
                //string sqry = "select '" + sBranch + "' as Branch, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,((s.discount/100)*s.total) as discount,s.Total,'Sales' as type,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' when 5 then 'Staff Credit' when 6 then 'Wastage' when 7 then 'BB KULAM' when 8 then 'Byepass'  when 9 then 'KK Nagar'  when 10 then 'NP' when 11 then 'Bank' when 12 then 'Staff Consumption' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='Yes'  order by s.BillDate desc ";
                string sqry = "select s.salesid,s.salestype as typeid,'" + sBranch + "' as Branch,s.BillNo,CONVERT(VARCHAR(20), [BillDate], 103) AS DATEPART,CONVERT(VARCHAR(20), [BillDate], 108) AS TIMEPART,s.BillDate,(s.CGST + s.SGST) as Tax,s.NetAmount,((s.Discount)) as discount,s.Total,'Sales' as type, " +
                " sp.PayMode  as SalesType,s.Provider,s.Approved ,c.customername,c.mobileNo,Reference from tblsales_" + sBranch + " as s,tblcustomer c,tblSalesPaymode as sp where sp.Value=s.iPayMode and s.customerid=c.customerid and OrderNo=0 and s.ipaymode='" + paymode + "'  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='Yes'  order by s.BillDate desc ";
                //string sqry = "select 'Narayana Puram' as Branch,'normal sales' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.NetAmount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            //dss.Merge(ds);

            //string sqtyy = " select 'Narayana Puram' as Branch,'Advance' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.advance as Netamount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo<>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            //ds1 = dbObj.InlineExecuteDataSet(sqtyy);
            //dss.Merge(ds1);
            return ds;
        }




        #endregion


        #region
        public DataSet selectLocalSales(string sTable, string sdate)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblsales_" + sTable + " where convert(date,Billdate)='" + sdate + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectLocalTransSales(string sTable, string sdate)
        {
            DataSet ds = new DataSet();
            string sQry = "select b.SalesID,b.CategoryID,b.UnitPrice,b.Amount,b.SubCategoryID,b.Disc,b.Quantity,b.StockId from tblsales_" + sTable + " a,tbltranssales_" + sTable + " b where a.BillNo= b.SalesId and convert(date,a.Billdate)='" + sdate + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet BingGridView(string sTable, string sdate)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.BillNo,a.BillDate,c.Definition,b.Quantity from tblsales_" + sTable + " a,tbltranssales_" + sTable + " b, tblcategoryuser c where a.BillNo=b.SalesID and b.Subcategoryid=c.categoryuserid and convert(date,a.Billdate)='" + sdate + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public int insertToServeSales(string sTableName, int UserId, string sBillNo, string bDate, int CustID, Double Total, Double NetAmount, Double Discount, int ContactType, Double Advance, int OrderNo, string Msg, string sTaken, DateTime DelDate, string dDate, string DelTime, string Notes, int PayMode, string sStatue)
        {
            int isave = 0;
            string query = "insert into tblsales_" + sTableName + "(UserID,BillNo,BillDate,CustomerID,Total,NetAmount,Discount,ContactTypeID,Advance,OrderNo,Messege,DeliveryDate,DeilveryTime,OrderTakenBy,Notes,iPayMode,cancelstatus) values('" + UserId + "','" + sBillNo + "','" + bDate + "'," + CustID + " , '" + Total + "','" + NetAmount + "','" + Discount + "'," + ContactType + ",'" + Advance + "'," + OrderNo + ",'" + Msg + "','" + dDate + "','" + DelTime + "','" + sTaken + "','" + Notes + "','" + PayMode + "','" + sStatue + "' )";
            isave = dbObj.InlineExecuteNonQuery(query);
            return isave;
        }


        public int insertToServeTransSales(string sTableName, int SalesID, int CaTid, Double Price, Double Amount, int SubCatID, Double Disc, Double Qty, int StockID)
        {
            int isave = 0;
            string query = "insert into tbltranssales_" + sTableName + "(SalesID,CategoryID,UnitPrice,Amount,SubCategoryID,Disc,Quantity,StockId) values('" + SalesID + "','" + CaTid + "','" + Price + "'," + Amount + " , '" + SubCatID + "','" + Disc + "','" + Qty + "'," + StockID + ")";
            isave = dbObj.InlineExecuteNonQuery(query);
            return isave;
        }
        #endregion

        #region Good Transfer per Rounds
        public DataSet getDetaiedTransfer(string sdate, string scode)
        {
            string sQry = "";
            DataSet dRet = new DataSet();
            DataSet ds = new DataSet();
            if (scode == "Production")
            {
                sQry = "select dc_no from tblgoodtransfer where dc_date='" + sdate + "' ";
            }
            else
            {
                sQry = "select dc_no from tblgoodtransfer2 where dc_date='" + sdate + "' ";
            }

            ds = dbObj.InlineExecuteDataSet(sQry);

            if (ds.Tables[0].Rows.Count > 0)
            {

                DataTable dt = new DataTable();
                dt.Columns.Add("Item");
                dt.Columns.Add("Qty");

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    int dcNo = Convert.ToInt32(ds.Tables[0].Rows[i]["dc_no"].ToString());
                    string Qry = "";
                    if (scode == "Production")
                    {
                        Qry = "select c.Definition,b.Received_Qty from tblgoodtransfer a,tbltransgoodstransfer  b,tblcategoryuser c where a.DC_No=b.Dc_No and a.dc_date='" + sdate + "' and b.Descriptionid=c.categoryuserid and a.DC_No=" + dcNo + " ";
                    }

                    else
                    {
                        Qry = "select c.Definition,b.Received_Qty from tblgoodtransfer2 a,tbltransgoodstransfer2  b,tblcategoryuser c where a.DC_No=b.Dc_No and a.dc_date='" + sdate + "' and b.Descriptionid=c.categoryuserid and a.DC_No=" + dcNo + " ";
                    }

                    DataSet dValues = dbObj.InlineExecuteDataSet(Qry);

                    if (dValues.Tables[0].Rows.Count > 0)
                    {
                        int cnt = dValues.Tables[0].Rows.Count;

                        for (int c = 0; c < cnt; c++)
                        {
                            DataRow dr = dt.NewRow();
                            dr["Item"] = dValues.Tables[0].Rows[c]["Definition"].ToString();
                            dr["Qty"] = dValues.Tables[0].Rows[c]["Received_Qty"].ToString();
                            dt.Rows.Add(dr);

                        }
                    }
                }

                dRet.Tables.Add(dt);
            }
            return dRet;
        }

        #endregion
        #region
        public int DelPayment(string sCode, int PaymentID)
        {
            DataSet ds = new DataSet();
            string sQry = "select DaybookID  from tblpaymententry_" + sCode + " where PaymentEntryID=" + PaymentID + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                int Del = 0;
                string sQry22 = "Delete from tblDaybook_" + sCode + " where Transno=" + ds.Tables[0].Rows[0]["DaybookID"] + "";
                Del = dbObj.InlineExecuteNonQuery(sQry22);
            }

            int De2l = 0;
            string sQry2 = "Delete from tblpaymententry_" + sCode + " where PaymentEntryID=" + PaymentID + "";
            De2l = dbObj.InlineExecuteNonQuery(sQry2);
            return De2l;
        }
        #endregion


        #region SalesHour Report
        public DataSet allDate(string sFrom, string sTo)
        {

            DataSet ds = new DataSet();
            string sQry = "DECLARE @StartDateTime DATETIME DECLARE @EndDateTime DATETIME SET @StartDateTime = '" + sFrom + "' SET @EndDateTime = '" + sTo + "'; WITH DateRange(DateData) AS (    SELECT @StartDateTime as Date    UNION ALL    SELECT DATEADD(d,1,DateData)    FROM DateRange     WHERE DateData < @EndDateTime)SELECT convert(date,DateData) as Dates FROM DateRange OPTION (MAXRECURSION 0)";
            ds = dbObj.InlineExecuteDataSet(sQry);

            return ds;
        }

        public DataSet getAmt(string sFrom, string sTo, string sdate, string stable)
        {

            DataSet ds = new DataSet();
            string sQry = "select sum(Sales) as Total from (select convert(varchar(8),billdate,108) as Time,sum(Total) as Sales from tblsales_" + stable + " where convert(date,billdate)=convert(date,'" + sdate + "') and convert(varchar(8),billdate,108) between '" + sFrom + "' and '" + sTo + "' and Orderno=0 group by billdate  union all  select convert(varchar(8),billdate,108) as Time,sum(Total) as Sales from tblsales_" + stable + " where convert(date,billdate)=convert(date,'" + sdate + "') and convert(varchar(8),billdate,108) between '" + sFrom + "' and '" + sTo + "' and Orderno<>0 group by billdate  union all    select convert(varchar(8),orderdate,108) as Time,sum(Advance) as Sales from tblorder_" + stable + " where convert(date,orderdate)=convert(date,'" + sdate + "') and convert(varchar(8),orderdate,108) between '" + sFrom + "' and '" + sTo + "' and Orderno>0  group by orderdate ) as s";
            ds = dbObj.InlineExecuteDataSet(sQry);

            return ds;
        }

        public DataSet getTime(bool value)
        {

            DataSet ds = new DataSet();
            string sQry = "";
            if (value == true)
                sQry = "select * from tbltime";
            else
                sQry = "select * from tblmin";
            ds = dbObj.InlineExecuteDataSet(sQry);

            return ds;
        }
        #endregion

        public DataSet PayBill(int OrderNo, string BranchID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblOrder_" + BranchID + " a,tblTransorder_" + BranchID + " b,tblCustomer c where a.BillNo=b.BillNo and a.OrderNo>0 and a.isCancel=0 and c.CustomerID=a.CustomerID and a.OrderNo=" + OrderNo + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getpaidorderdetails(int OrderNo, string BranchID)
        {
            DataSet ds = new DataSet();
            string sqry = "select toa.*,sp.paymode as mod from tbltransOrderAmount_" + BranchID + " as toa inner join tblsalespaymode as sp on sp.value=toa.paymode where OrderNo='" + OrderNo + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getcancelBill(int OrderNo, string BranchID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblOrder_" + BranchID + " a,tblTransorder_" + BranchID + " b,tblCustomer c where a.BillNo=b.BillNo and a.OrderNo>0 and a.isCancel=1 and c.CustomerID=a.CustomerID and a.OrderNo=" + OrderNo + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int insertCakeOrder(string sSalesTable, string BillNo, string BillDate, int CustomerID, double NetAmount, double Total, int Icnt, double dAdvance, int Ordeeno, string msg, string takenBy, string DeliveryDate, string DeliveryTime, int iPayMode, int BkNo, string paytype, string place, string pay, string ordertime, double CGST, double SGST, double STotal, string ordertype, string pickup, string delivercharge, int Ceremonies, bool checkedtype, string branchcode)
        {
            int iSuccess = 0;
            string sQry = "insert into " + sSalesTable + "( BillNo, OrderDate, CustomerID, NetAmount, Total,isCancel,ContactID,Advance,OrderNo,Messege,OrderTakenBy,DeliveryDate,Deliverytime,iPayMode,BookNo,PayType,Place,Paybill,OrderTime,CGST,SGST,STotal,OrderType,PickUpLocation,DeliveryCharge,Ceremonies) values ('" + BillNo + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "',0,1,'" + dAdvance + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "'," + iPayMode + "," + BkNo + ",'" + paytype + "','" + place + "','" + pay + "','" + ordertime + "','" + CGST + "','" + SGST + "','" + STotal + "','" + ordertype + "','" + pickup + "','" + delivercharge + "'," + Ceremonies + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            // FOR LOCAL ENTRY
            string ordesummarylocal = "insert into tblordersummary_" + branchcode + "(OrderNo,OrderDate,DeliveryDate,DeliveryTime,Bookno,IsTransfer,BranchCode,billno)values('" + Ordeeno + "','" + BillDate + "','" + DeliveryDate + "','" + DeliveryTime + "','" + BkNo + "','0','" + branchcode + "','" + BillNo + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(ordesummarylocal);



            if (checkedtype == true)
            {
                string ordesummary = "insert into tblordersummary_" + branchcode + "(OrderNo,OrderDate,DeliveryDate,DeliveryTime,Bookno,IsTransfer,BranchCode,billno)values('" + Ordeeno + "','" + BillDate + "','" + DeliveryDate + "','" + DeliveryTime + "','" + BkNo + "','0','" + branchcode + "','" + BillNo + "')";
                iSuccess = dbObj.InlineExecuteNonQueryMain(ordesummary);


                string updateorder = "Update tblordersummary_" + branchcode + " set istransfer='1' where orderno='" + Ordeeno + "' and BranchCode='" + branchcode + "'";
                iSuccess = dbObj.InlineExecuteNonQuery(updateorder);

            }

            return iSuccess;

        }


        public int insertCakeOrderNew(string sSalesTable, string BillNo, string BillDate, int CustomerID, double NetAmount, double Total, int Icnt, double dAdvance, int Ordeeno, string msg, string takenBy, string DeliveryDate, string DeliveryTime, int iPayMode, string BkNo, string paytype, string place, string pay, string ordertime, double CGST, double SGST, double STotal, string ordertype, string pickup, string delivercharge, int Ceremonies, bool checkedtype, string branchcode, double balance, string status, string discper, string discamount, string transamounttable, string discemp, string Fullbookno, string pbranch, string onlinecomment)
        {
            int iSuccess = 0;
            string onlinesync = "N";

            if (checkedtype == true)
            {
                onlinesync = "Y";
            }

            string sQry = "insert into " + sSalesTable + "( BillNo, OrderDate, CustomerID, NetAmount, Total,isCancel,ContactID,Advance,AdvanceDate,OrderNo,Messege,OrderTakenBy,DeliveryDate,Deliverytime,iPayMode,BookNo,PayType,Place,Paybill,OrderTime,CGST,SGST,STotal,OrderType,PickUpLocation,DeliveryCharge,Ceremonies,BalancePaid,Balance,Status,DiscountPer,DiscountAmount,DiscEmp,FullBookNo,Pbranch,OnlineSync,onlinecomment) values ('" + BillNo + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "',0,1,'" + dAdvance + "','" + BillDate + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + Convert.ToDateTime(DeliveryDate).ToString("yyyy/MM/dd") + "','" + DeliveryTime + "'," + iPayMode + ",'" + BkNo + "','" + paytype + "','" + place + "','" + pay + "','" + ordertime + "','" + CGST + "','" + SGST + "','" + STotal + "','" + ordertype + "','" + pickup + "','" + delivercharge + "'," + Ceremonies + ",'" + balance + "','" + balance + "','" + status + "','" + discper + "','" + discamount + "','" + discemp + "','" + Fullbookno + "','" + pbranch + "','" + onlinesync + "','" + onlinecomment + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            // FOR LOCAL ENTRY
            string ordesummarylocal = "insert into tblordersummary_" + branchcode + "(OrderNo,OrderDate,DeliveryDate,DeliveryTime,Bookno,IsTransfer,BranchCode,billno,Pbranch,OnlineSync,onlinecomment)values('" + Ordeeno + "','" + BillDate + "','" + Convert.ToDateTime(DeliveryDate).ToString("yyyy/MM/dd") + "','" + DeliveryTime + "','" + BkNo + "','0','" + branchcode + "','" + BillNo + "','" + pbranch + "','" + onlinesync + "','" + onlinecomment + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(ordesummarylocal);

            // Trans Amount
            string amountentry = "insert into " + transamounttable + "(Billno,Billdate,OrderNO,BookNo,Amount,Type,Paymode,EntryBy,DiscPer,Discamount) values('" + BillNo + "','" + BillDate + "','" + Ordeeno + "','" + BkNo + "','" + dAdvance + "','" + paytype + "','" + iPayMode + "','" + takenBy + "','" + discper + "','" + discamount + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(amountentry);


            if (checkedtype == true)
            {
                string ordestatus = "insert into tblOrderStatusHistory(Statusid,Statusname,Narration,BranchCode,OrderNo,Bookno,Entryby)values('1','Pending','Cake Ordered','" + branchcode + "','" + Ordeeno + "','" + BkNo + "','" + takenBy + "')";
                iSuccess = dbObj.InlineExecuteNonQueryMain(ordestatus);


                string ordesummary = "insert into tblordersummary_" + branchcode + "(OrderNo,OrderDate,DeliveryDate,DeliveryTime,Bookno,IsTransfer,BranchCode,billno,Pbranch,OnlineSync,onlinecomment,Deliverstatus,Deliveryid)values('" + Ordeeno + "','" + BillDate + "','" + Convert.ToDateTime(DeliveryDate).ToString("yyyy/MM/dd") + "','" + DeliveryTime + "','" + BkNo + "','0','" + branchcode + "','" + BillNo + "','" + pbranch + "','" + onlinesync + "','" + onlinecomment + "','Pending',1)";
                iSuccess = dbObj.InlineExecuteNonQueryMain(ordesummary);


                string updateorder = "Update tblordersummary_" + branchcode + " set istransfer='1' where orderno='" + Ordeeno + "' and BranchCode='" + branchcode + "'";
                iSuccess = dbObj.InlineExecuteNonQuery(updateorder);

            }




            return iSuccess;

        }


        public int EditCakeOrderNew(string sSalesTable, string BillNo, string BillDate, int CustomerID, double NetAmount, double Total, int Icnt, double dAdvance, int Ordeeno, string msg, string takenBy, string DeliveryDate, string DeliveryTime, int iPayMode, string BkNo, string paytype, string place, string pay, string ordertime, double CGST, double SGST, double STotal, string ordertype, string pickup, string delivercharge, int Ceremonies, bool checkedtype, string branchcode, double balance, string status, string discper, string discamount, string refundamount, string transamounttable, string Epaymode, string entryby, string discemp)
        {
            int iSuccess = 0;
            string Balancedate = DateTime.Now.ToString("yyyy-MM-dd hh:mm tt"); ;
            //  string sQry = "insert into " + sSalesTable + "( BillNo, OrderDate, CustomerID, NetAmount, Total,isCancel,ContactID,Advance,AdvanceDate,OrderNo,Messege,OrderTakenBy,DeliveryDate,Deliverytime,iPayMode,BookNo,PayType,Place,Paybill,OrderTime,CGST,SGST,STotal,OrderType,PickUpLocation,DeliveryCharge,Ceremonies,BalancePaid,Balance,Status,DiscountPer,DiscountAmount) values ('" + BillNo + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "',0,1,'" + dAdvance + "','" + BillDate + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "'," + iPayMode + "," + BkNo + ",'" + paytype + "','" + place + "','" + pay + "','" + ordertime + "','" + CGST + "','" + SGST + "','" + STotal + "','" + ordertype + "','" + pickup + "','" + delivercharge + "'," + Ceremonies + ",'" + balance + "','" + balance + "','" + status + "','" + discper + "','" + discamount + "')";
            if (refundamount != "0")
            {

                string sQry = "Update " + sSalesTable + " set  DiscountPer='" + discper + "',DiscountAmount='" + discamount + "',DiscEmp='" + discemp + "',orderdate='" + BillDate + "',Netamount='" + NetAmount + "',Total='" + Total + "',CGST='" + CGST + "',SGST='" + SGST + "',STotal='" + STotal + "',balancepaid='" + balance + "',refundamount='" + refundamount + "' where orderno='" + Ordeeno + "' ";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            else
            {
                string sQry = "Update " + sSalesTable + " set  DiscountPer='" + discper + "',DiscountAmount='" + discamount + "',DiscEmp='" + discemp + "', status='N',orderdate='" + BillDate + "',Netamount='" + NetAmount + "',Total='" + Total + "',CGST='" + CGST + "',SGST='" + SGST + "',STotal='" + STotal + "',balancepaid='" + balance + "' where orderno='" + Ordeeno + "' ";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }

            //// FOR LOCAL ENTRY
            //string ordesummarylocal = "insert into tblordersummary_" + branchcode + "(OrderNo,OrderDate,DeliveryDate,DeliveryTime,Bookno,IsTransfer,BranchCode,billno)values('" + Ordeeno + "','" + BillDate + "','" + DeliveryDate + "','" + DeliveryTime + "','" + BkNo + "','0','" + branchcode + "','" + BillNo + "')";
            //iSuccess = dbObj.InlineExecuteNonQuery(ordesummarylocal);

            if (refundamount != "0")
            {

                // Trans Amount
                string amountentry = "insert into " + transamounttable + "(Billno,Billdate,OrderNO,BookNo,Amount,Type,Paymode,Entryby) values('" + BillNo + "','" + Balancedate + "','" + Ordeeno + "','" + BkNo + "','" + refundamount + "','Refund','" + Epaymode + "','" + entryby + "')";
                //string amountentry = "insert into " + transamounttable + "(Billno,Billdate,OrderNO,BookNo,Amount,Type,Paymode,EntryBy,DiscPer,Discamount) values('" + BillNo + "','" + Balancedate + "','" + Ordeeno + "','" + BkNo + "','" + refundamount + "','Refund','" + Epaymode + "','" + entryby + "','" + discper + "','" + discamount + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(amountentry);
            }


            return iSuccess;

        }

        public int Updatepaymentnew(string sSalesTable, string orderno, string balance, string currentstatus, string transamounttable, string pay, string billno, string bookno, string paymode, string bal, string entryby)
        {
            int iSuccess = 0;
            string Balancedate = DateTime.Now.ToString("yyyy-MM-dd hh:mm tt"); ;
            if (bal == "0.00" || bal == "0")
            {
                // string sQry = "insert into " + sSalesTable + "( BillNo, OrderDate, CustomerID, NetAmount, Total,isCancel,ContactID,Advance,AdvanceDate,OrderNo,Messege,OrderTakenBy,DeliveryDate,Deliverytime,iPayMode,BookNo,PayType,Place,Paybill,OrderTime,CGST,SGST,STotal,OrderType,PickUpLocation,DeliveryCharge,Ceremonies,BalancePaid,Status,DiscountPer,DiscountAmount) values ('" + BillNo + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "',0,1,'" + dAdvance + "','" + BillDate + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "'," + iPayMode + "," + BkNo + ",'" + paytype + "','" + place + "','" + pay + "','" + ordertime + "','" + CGST + "','" + SGST + "','" + STotal + "','" + ordertype + "','" + pickup + "','" + delivercharge + "'," + Ceremonies + ",'" + balance + "','" + status + "','" + discper + "','" + discamount + "')";
                string sQry = "Update " + sSalesTable + " set Balancedate='" + Balancedate + "',Balance=Balance-" + balance + ",BalancePaid=Balancepaid-" + balance + ",Status='Y' where orderno='" + orderno + "'";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            else
            {
                string sQry = "Update " + sSalesTable + " set Balancedate='" + Balancedate + "',Balance=Balance-" + balance + ",BalancePaid=Balancepaid-" + balance + ",Status='N' where orderno='" + orderno + "'";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            //if (currentstatus == "N")
            {
                string amountentry = "insert into " + transamounttable + "(Billno,Billdate,OrderNO,BookNo,Amount,Type,Paymode,Entryby) values('" + billno + "','" + Balancedate + "','" + orderno + "','" + bookno + "','" + balance + "','" + pay + "','" + paymode + "','" + entryby + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(amountentry);
            }

            return iSuccess;

        }


        public int UpdateCakeOrderNew(string sSalesTable, string orderno, string balance, string status, string currentstatus, string transamounttable, string pay, string billno, string bookno, string paymode, string entryby, string isdelivery, string deliveryname, bool ischeck)
        {
            int iSuccess = 0;
            string Balancedate = DateTime.Now.ToString("yyyy-MM-dd hh:mm tt"); ;
            string sQry = string.Empty;

            // string sQry = "insert into " + sSalesTable + "( BillNo, OrderDate, CustomerID, NetAmount, Total,isCancel,ContactID,Advance,AdvanceDate,OrderNo,Messege,OrderTakenBy,DeliveryDate,Deliverytime,iPayMode,BookNo,PayType,Place,Paybill,OrderTime,CGST,SGST,STotal,OrderType,PickUpLocation,DeliveryCharge,Ceremonies,BalancePaid,Status,DiscountPer,DiscountAmount) values ('" + BillNo + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "',0,1,'" + dAdvance + "','" + BillDate + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "'," + iPayMode + "," + BkNo + ",'" + paytype + "','" + place + "','" + pay + "','" + ordertime + "','" + CGST + "','" + SGST + "','" + STotal + "','" + ordertype + "','" + pickup + "','" + delivercharge + "'," + Ceremonies + ",'" + balance + "','" + status + "','" + discper + "','" + discamount + "')";
            if (ischeck == true)
            {
                sQry = "Update " + sSalesTable + " set DeliveryStatus='" + isdelivery + "',DeliveryBy='" + deliveryname + "',Balancedate='" + Balancedate + "',BalancePaid='0',Status='Y' where orderno='" + orderno + "'";
            }
            else
            {
                sQry = "Update " + sSalesTable + " set Balancedate='" + Balancedate + "',BalancePaid='0',Status='Y' where orderno='" + orderno + "'";
            }
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            if (currentstatus == "N")
            {
                string amountentry = "insert into " + transamounttable + "(Billno,Billdate,OrderNO,BookNo,Amount,Type,Paymode,Entryby) values('" + billno + "','" + Balancedate + "','" + orderno + "','" + bookno + "','" + balance + "','" + pay + "','" + paymode + "','" + entryby + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(amountentry);
            }

            return iSuccess;

        }


        public int InsertTransCakeorder(string sTransSalesTable, int SalesID, int CategoryID, double Quantity, double UnitPrice, double Amount, int iSubCategoryID, bool checktype, string branchcode, string gst, string disc, string modelno, string Modelimgpath, string online, string notes, string packingtype, string noofpack)
        {
            int iSuccess = 0;
            string onlinesync = "N";
            if (checktype == true)
            {
                onlinesync = "Y";
            }
            string sQry = "insert into " + sTransSalesTable + "( BillNo, CategoryID,  Qty,Rate,Amount,SubCategoryID,Gst,Disc,modelno,Modelimgpath,OnlineSync,onlinecomment,Packingnotes,packingtype,noofpack) values ('" + SalesID + "','" + CategoryID + "','" + Quantity + "','" + UnitPrice + "','" + Amount + "'," + iSubCategoryID + ",'" + gst + "','" + disc + "','" + modelno + "','" + Modelimgpath + "','" + onlinesync + "','" + online + "','" + notes + "','" + packingtype + "','" + noofpack + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);


            //FOR LOCAL QUERY
            string ordersummarytrans = "Insert into tbltransordersummary_" + branchcode + "(Billno,Categoryid,SubCategoryid,Qty,BranchCode,Istransfer,modelno,Modelimgpath,OnlineSync,onlinecomment,Packingnotes,packingtype,noofpack) values('" + SalesID + "','" + CategoryID + "','" + iSubCategoryID + "','" + Quantity + "','" + branchcode + "','0','" + modelno + "','" + Modelimgpath + "','" + onlinesync + "','" + online + "','" + notes + "','" + packingtype + "','" + noofpack + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(ordersummarytrans);

            if (checktype == true)
            {
                string ordersummarytranslive = "Insert into tbltransordersummary_" + branchcode + "(Billno,Categoryid,SubCategoryid,Qty,BranchCode,Istransfer,modelno,Modelimgpath,OnlineSync,onlinecomment,packingnotes) values('" + SalesID + "','" + CategoryID + "','" + iSubCategoryID + "','" + Quantity + "','" + branchcode + "','0','" + modelno + "','" + Modelimgpath + "','" + onlinesync + "','" + online + "','" + notes + "')";
                iSuccess = dbObj.InlineExecuteNonQueryMain(ordersummarytranslive);

                string update = "Update tbltransordersummary_" + branchcode + " set istransfer='1' where Billno='" + SalesID + "' and branchcode='" + branchcode + "'";
                iSuccess = dbObj.InlineExecuteNonQuery(update);

            }

            return iSuccess;

        }

        public DataSet GetCakerOrderNo(string sTable)
        {
            DataSet ds = new DataSet();
            string sqry = "  select MAX(OrderNo)+1 as OrderNo from tblOrder_" + sTable + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetCakerOrderINFO(string sTable, DateTime deliverydate)
        {
            DataSet ds = new DataSet();
            //  string sqry = "select * from " + sTable + " as o inner join tblCustomer as c on o.customerid=c.customerid where o.iscancel='0' and  convert( date, deliverydate) ='" + Convert.ToDateTime(deliverydate).ToString("yyyy/MM/dd") + "'";
            string sqry = "select * from " + sTable + " as o inner join tblCustomer as c on o.customerid=c.customerid where o.iscancel='0' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetCakerOrderINFONew(string sTable, DateTime Fromdate, DateTime Todate, string sbranch)
        {
            DataSet ds = new DataSet();
            string sqry = "select *,'" + sbranch + "' as bname from " + sTable + " as o inner join tblCustomer as c on o.customerid=c.customerid where o.iscancel='0' and CONVERT(date, orderdate ) between  '" + Convert.ToDateTime(Fromdate).ToString("yyyy/MM/dd") + "' and '" + Convert.ToDateTime(Todate).ToString("yyyy/MM/dd") + "' order by c.CustomerName,c.MobileNo asc ";
            //string sqry = "select * from " + sTable + " as o inner join tblCustomer as c on o.customerid=c.customerid where o.iscancel='0' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetCakerOrderItemINFO(string sTable, string billno)
        {
            DataSet ds = new DataSet();
            string sqry = "select *,Definition+'-'+qty as itemna from " + sTable + " as too inner join tblcategoryuser as cu on cu.categoryuserid=too.subcategoryid where billno='" + billno + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int Deletetransorder(string sbranch, string billno, bool checklive)
        {
            int isave = 0;

            string sqry = "Delete from tbltransorder_" + sbranch + " where billno='" + billno + "'";
            isave = dbObj.InlineExecuteNonQuery(sqry);


            // LOCAL SERVER
            string sqry1 = "Delete from tbltransordersummary_" + sbranch + " where billno='" + billno + "'";
            isave = dbObj.InlineExecuteNonQuery(sqry1);

            // LIVE SERVER UPDATE
            string sqry12 = "Delete from tbltransordersummary_" + sbranch + " where billno='" + billno + "'";
            isave = dbObj.InlineExecuteNonQueryMain(sqry12);

            //if (checklive == true)
            //{
            //    string sqry2 = "Delete from tblordersummary_" + sbranch + " where billno='" + billno + "'";
            //    isave = dbObj.InlineExecuteNonQueryMain(sqry2);
            //}

            return isave;
        }

        public int CancelCakeOrder(int CustomerOrderNo, string sTable, string name, string refundamount, string paymode)
        {
            int isave = 0;
            string CancelDate = DateTime.Now.ToString("yyyy-MM-dd hh:mm tt");

            string sqry = "Select * from tblorder_" + sTable + " where orderno='" + CustomerOrderNo + "'";
            DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string billno = ds.Tables[0].Rows[0]["Billno"].ToString();
                string orderno = ds.Tables[0].Rows[0]["orderno"].ToString();
                string bookno = ds.Tables[0].Rows[0]["Bookno"].ToString();

                string sqryy = "update tblorder_" + sTable + " set isCancel=1,Cancelled='" + name + "',CancelDate='" + CancelDate + "',RefundAmount='" + refundamount + "' where orderno=" + CustomerOrderNo + "";
                isave = dbObj.InlineExecuteNonQuery(sqryy);

                string amountentry = "insert into tbltransorderamount_" + sTable + "(Billno,Billdate,OrderNO,BookNo,Amount,Type,Entryby,Paymode) values('" + billno + "','" + CancelDate + "','" + orderno + "','" + bookno + "','" + refundamount + "','Refund/Cancel','" + name + "','" + paymode + "')";
                isave = dbObj.InlineExecuteNonQuery(amountentry);
            }
            return isave;
        }


        public DataSet CakeOrderGrid(string sBranch)
        {
            DataSet ds = new DataSet();
            // OLD QUERY (03/10/2015) string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.cancelstatus='No' group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo having (NetAmount)-SUM(Advance) >0 order by a.OrderNo desc";
            //  string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo having (((NetAmount)-SUM(Advance) >0) or ( convert(date,DeliveryDate) >= convert(date,GETDATE()))) order by a.OrderNo desc";
            string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance,a.bookno from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 and  convert(date,orderdate) = convert(date,GETDATE()) and   convert(date,deliveryDate) = convert(date,GETDATE())  group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.bookno  order by a.OrderNo desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet TodayDelivery(string sBranch)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();

            // OLD QUERY (03/10/2015) string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.cancelstatus='No' group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo having (NetAmount)-SUM(Advance) >0 order by a.OrderNo desc";
            //  string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo having (((NetAmount)-SUM(Advance) >0) or ( convert(date,DeliveryDate) >= convert(date,GETDATE()))) order by a.OrderNo desc";
            string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,(Advance) as PaidAmount,Total-(Advance) as Balance,a.bookno,a.balancedate,a.balancepaid,a.advancedate from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 and  convert(date,deliveryDate) = convert(date,GETDATE()) and status='N'  group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.bookno,a.balancedate,a.balancepaid,a.advancedate,a.advance,a.total  order by a.OrderNo desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            dmerge.Merge(ds);


            string sqry1 = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,(Advance + balance) as PaidAmount,Total-(Advance) as Balance,a.bookno,a.balancedate,a.balancepaid,a.advancedate from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 and  convert(date,deliveryDate) = convert(date,GETDATE()) and status='Y'  group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.bookno,a.balancedate,a.balancepaid,a.advancedate ,a.advance,a.balance,a.total order by a.OrderNo desc";
            DataSet ds1 = dbObj.InlineExecuteDataSet(sqry1);
            dmerge.Merge(ds1);


            return dmerge;
        }


        public DataSet RefundAmount(string sBranch, string orderno)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();

            // OLD QUERY (03/10/2015) string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.cancelstatus='No' group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo having (NetAmount)-SUM(Advance) >0 order by a.OrderNo desc";
            //string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance,a.bookno from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 and  convert(date,deliveryDate) = convert(date,GETDATE())  group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.bookno  order by a.OrderNo desc";
            string sqry = "select advance as refund from " + sBranch + " where orderno='" + orderno + "' and status='N'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            dmerge.Merge(ds);


            string sqry1 = "select (advance + balance) as refund from " + sBranch + " where orderno='" + orderno + "' and status='Y'";
            DataSet ds1 = dbObj.InlineExecuteDataSet(sqry1);
            dmerge.Merge(ds1);

            return dmerge;
        }

        public DataSet getoverallpaidamount(string sBranch, string orderno)
        {
            DataSet ds = new DataSet();

            string sqry = "select isnull(sum(amount),0) as amt from tbltransorderamount_" + sBranch + " where type in ('adv','Bal','Full','Partial Amount') and orderno='" + orderno + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;

        }

        public DataSet getoverallrefundamount(string sBranch, string orderno)
        {
            DataSet ds = new DataSet();

            string sqry = "select isnull(sum(amount),0) as amt from tbltransorderamount_" + sBranch + " where type in ('Refund','Refund/Cancel') and orderno='" + orderno + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;

        }


        public DataSet RestOrder(string sBranch)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();

            // OLD QUERY (03/10/2015) string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.cancelstatus='No' group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo having (NetAmount)-SUM(Advance) >0 order by a.OrderNo desc";
            //string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance,a.bookno from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 and  convert(date,deliveryDate) = convert(date,GETDATE())  group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.bookno  order by a.OrderNo desc";
            string sqry = "select a.deliverystatus,b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total as NetAmount,(Advance) as PaidAmount,Total-(Advance) as Balance,a.Fullbookno as Bookno,a.balancedate,a.balancepaid,a.advancedate,a.RefundAmount from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 and    convert(date,DeliveryDate) > convert(date,GETDATE()) and status='N'  group by OrderNo,DeliveryDate,NetAmount,b.CustomerName,b.MobileNo,a.fullbookno,a.balancedate,a.balancepaid,a.advancedate,a.advance,a.total,a.RefundAmount,a.deliverystatus order by a.OrderNo desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            dmerge.Merge(ds);


            string sqry1 = "select b.CustomerName,a.deliverystatus,b.MobileNo,OrderNo,DeliveryDate,Total as NetAmount,(Advance + Balance ) as PaidAmount,Total-(Advance) as Balance,a.Fullbookno as bookno,a.balancedate,a.balancepaid,a.advancedate,a.RefundAmount from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 and    convert(date,DeliveryDate) > convert(date,GETDATE()) and status='Y'  group by OrderNo,DeliveryDate,NetAmount,b.CustomerName,b.MobileNo,a.fullbookno,a.balancedate,a.balancepaid,a.advancedate,a.advance,a.balance,a.total,a.RefundAmount,a.deliverystatus order by a.OrderNo desc";
            DataSet ds1 = dbObj.InlineExecuteDataSet(sqry1);
            dmerge.Merge(ds1);
            dmerge.Tables[0].DefaultView.Sort = "OrderNo desc";

            return dmerge;
        }

        public DataSet Pending(string sBranch)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();
            // OLD QUERY (03/10/2015) string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.cancelstatus='No' group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo having (NetAmount)-SUM(Advance) >0 order by a.OrderNo desc";
            //string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance,a.bookno from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 and  convert(date,deliveryDate) = convert(date,GETDATE())  group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.bookno  order by a.OrderNo desc";
            string sqry = "select a.PendingMsg,b.CustomerName,a.deliverystatus,b.MobileNo,OrderNo,DeliveryDate,Total as NetAmount,(Advance) as PaidAmount,Total-(Advance) as Balance,a.Fullbookno as bookno,DATEDIFF(d, DeliveryDate, GETDATE()) as PendingDays,a.balancedate,a.balancepaid,a.advancedate,a.RefundAmount  from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 and    convert(date,DeliveryDate) < convert(date,GETDATE()) and (status='N' OR a.deliverystatus='Pending')   group by OrderNo,a.advance,DeliveryDate,NetAmount,b.CustomerName,b.MobileNo,a.fullbookno,a.balancedate,a.balancepaid,a.advancedate,a.total,a.RefundAmount,a.deliverystatus,a.PendingMsg having NetAmount<>SUM(Advance) order by a.OrderNo desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            dmerge.Merge(ds);

            //   string sqry1 = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total as NetAmount,(Advance + balance) as PaidAmount,Total-(Advance) as Balance,a.bookno,DATEDIFF(d, DeliveryDate, GETDATE()) as PendingDays,a.balancedate,a.balancepaid,a.advancedate,a.RefundAmount  from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 and    convert(date,DeliveryDate) < convert(date,GETDATE())  and status='Y'    group by OrderNo,a.advance,DeliveryDate,NetAmount,b.CustomerName,b.MobileNo,a.bookno,a.balancedate,a.balancepaid,a.advancedate,a.balance,a.total,a.RefundAmount having NetAmount<>SUM(Advance) order by a.OrderNo desc";
            //   DataSet ds1 = dbObj.InlineExecuteDataSet(sqry1);
            //   dmerge.Merge(ds1);

            return dmerge;
        }

        public DataSet Pendingchecknew(string sBranch, string status)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();
            // OLD QUERY (03/10/2015) string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.cancelstatus='No' group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo having (NetAmount)-SUM(Advance) >0 order by a.OrderNo desc";
            //string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance,a.bookno from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 and  convert(date,deliveryDate) = convert(date,GETDATE())  group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.bookno  order by a.OrderNo desc";
            string sqry = "select a.PendingMsg,b.CustomerName,a.deliverystatus,b.MobileNo,OrderNo,DeliveryDate,Total as NetAmount,(Advance) as PaidAmount,Total-(Advance) as Balance,a.Fullbookno as bookno,DATEDIFF(d, DeliveryDate, GETDATE()) as PendingDays,a.balancedate,a.balancepaid,a.advancedate,a.RefundAmount  from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 and    convert(date,DeliveryDate) < convert(date,GETDATE()) and  a.deliverystatus='" + status + "'   group by OrderNo,a.advance,DeliveryDate,NetAmount,b.CustomerName,b.MobileNo,a.fullbookno,a.balancedate,a.balancepaid,a.advancedate,a.total,a.RefundAmount,a.deliverystatus,a.PendingMsg having NetAmount<>SUM(Advance) order by a.OrderNo desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            dmerge.Merge(ds);

            //   string sqry1 = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total as NetAmount,(Advance + balance) as PaidAmount,Total-(Advance) as Balance,a.bookno,DATEDIFF(d, DeliveryDate, GETDATE()) as PendingDays,a.balancedate,a.balancepaid,a.advancedate,a.RefundAmount  from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 and    convert(date,DeliveryDate) < convert(date,GETDATE())  and status='Y'    group by OrderNo,a.advance,DeliveryDate,NetAmount,b.CustomerName,b.MobileNo,a.bookno,a.balancedate,a.balancepaid,a.advancedate,a.balance,a.total,a.RefundAmount having NetAmount<>SUM(Advance) order by a.OrderNo desc";
            //   DataSet ds1 = dbObj.InlineExecuteDataSet(sqry1);
            //   dmerge.Merge(ds1);

            return dmerge;
        }
        public DataSet getorderDate(string sBranch, int orderno)
        {
            DataSet ds = new DataSet();
            // OLD QUERY (03/10/2015) string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.cancelstatus='No' group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo having (NetAmount)-SUM(Advance) >0 order by a.OrderNo desc";
            //  string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblOrder_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.isCancel=0 group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo having (((NetAmount)-SUM(Advance) >0) or ( convert(date,DeliveryDate) >= convert(date,GETDATE()))) order by a.OrderNo desc";
            string sqry = "select * from tblorder_" + sBranch + " where orderno=" + orderno + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet PrintCakeOrder(string BranchID, int OrderNo)
        {
            DataSet ds = new DataSet();
            string sqry = "select cast(e.gst as nvarchar)+' % ' as gs,* from  tblOrder_" + BranchID + " a, tblTransOrder_" + BranchID + " b,tblCustomer c,tblcategory d, tblCategoryUser e where a.BillNo=b.BillNo and a.CustomerID=c.CustomerID and b.CategoryID=d.categoryid and b.SubCategoryID=e.CategoryUserID and a.OrderNo=" + OrderNo + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet PrintCakeOrder_summary(string BranchID, int OrderNo)
        {
            DataSet ds = new DataSet();
            //string sqry = "select e.gst/2 as gs,* from  tblOrdersummary_"+BranchID+" a, tblTransOrdersummary_"+BranchID+" b, tblcategory d, tblCategoryUser e where a.BillNo=b.BillNo and  b.CategoryID=d.categoryid  " +
            //            " and b.SubCategoryID=e.CategoryUserID and a.OrderNo=" + OrderNo + " ";

            string sqry = "select e.gst/2 as gs,*,isnull(customername,'Not Assign') as Empname from  tblOrdersummary_" + BranchID + " as  a inner join  tblTransOrdersummary_" + BranchID + " as  b on a.BillNo=b.BillNo " +
" inner join tblcategory as  d on b.CategoryID=d.categoryid inner join  tblCategoryUser as  e on b.SubCategoryID=e.CategoryUserID " +
" left join tblCustomer as c on c.IDCust=a.employeeid where a.BillNo=b.BillNo and  a.OrderNo=" + OrderNo + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet orderDetails(string BranchID, int OrderNo)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from  tblOrder_" + BranchID + " a,tblcustomer b where a.OrderNo=" + OrderNo + " and a.customerid=b.customerid ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet AutocompleteTexebox(string custname)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCustomer where CustomerName like '%" + custname + "%'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet PRoduction_Reports(string Date, string branch, string categoryid, string todate)
        {
            //DataTable dt = new DataTable();
            //DataRow dr;
            //dt.Columns.Add("Group");
            //dt.Columns.Add("Item");
            //dt.Columns.Add("BalanceQty");
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            //  string sqry = "select * from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and a.ProdNo='" + iD + "'";
            // string sqry = "select c.category,d.Definition,b.prod_qty,b.units from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and  b.prodno in (select MAX(prodno)  from tbltransproductionstock)";

            // string sqry = "select c.category,d.Definition,b.prod_qty,b.units from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and  b.prodno in (select MAX(prodno)  from tbltransproductionstock)";
            if (categoryid == "All")
            {
                sqry = "select requestNo,RequestDate,c.Category,cu.definition,tfm.readyqty,tfm.damageqty from tblFinishRawMaterials_" + branch + " as fm inner join tbltransFinishRawMaterials_" + branch + " as tfm  " +
    " on fm.requestno=tfm.requestid inner join tblcategoryuser as cu on cu.categoryuserid=tfm.itemid " +
    " inner join tblcategory as c on c.categoryid=cu.categoryid where convert(date,requestdate)>='" + Date + "' and convert(date,requestdate)<='" + todate + "' order by requestNo desc";
            }
            else
            {
                sqry = "select requestNo,RequestDate,c.Category,cu.definition,tfm.readyqty,tfm.damageqty from tblFinishRawMaterials_" + branch + " as fm inner join tbltransFinishRawMaterials_" + branch + " as tfm  " +
" on fm.requestno=tfm.requestid inner join tblcategoryuser as cu on cu.categoryuserid=tfm.itemid " +
" inner join tblcategory as c on c.categoryid=cu.categoryid where convert(date,requestdate)>='" + Date + "' and convert(date,requestdate)<='" + todate + "' and cu.categoryid='" + categoryid + "' order by requestNo desc";

            }

            ds = dbObj.InlineExecuteDataSet(sqry);


            return ds;
        }


        public DataSet PRoduction_Reportsbyraw(string Date, string branch, string categoryid, string todate)
        {

            DataSet ds = new DataSet();
            string sqry = string.Empty;

            if (categoryid == "All")
            {
                sqry = "select c.IngredientName,sum(qty) as qtyused from tblFinishRawMaterials_prod as a inner join tbltransFinishRawItem_prod as b on a.requestno=b.requestid " +
                        "  inner join tblIngridents as c on c.IngridID=b.RawItemId  where  " +
                       " convert(date,requestdate)>='" + Date + "' and convert(date,requestdate)<='" + todate + "' group by c.IngredientName";
            }
            else
            {
                sqry = "select f.IngredientName,sum(e.qty) as qtyused from tblFinishRawMaterials_" + branch + " as a inner join tbltransFinishRawMaterials_" + branch + " as b  " +
" on a.requestno=b.requestid inner join tblcategoryuser as c on c.categoryuserid=b.itemid " +
" inner join tblcategory as d on d.categoryid=c.categoryid inner join tbltransFinishRawItem_prod as e on a.requestno=e.requestid " +
" inner join tblIngridents as f on f.IngridID=e.RawItemId where convert(date,requestdate)>='" + Date + "' and convert(date,requestdate)<='" + todate + "' and c.categoryid='" + categoryid + "'  group by f.IngredientName";

            }

            ds = dbObj.InlineExecuteDataSet(sqry);


            return ds;
        }


        public DataTable Reports(string Date)
        {
            DataTable dt = new DataTable();
            DataRow dr;
            dt.Columns.Add("Group");
            dt.Columns.Add("Item");
            dt.Columns.Add("BalanceQty");
            DataSet ds = new DataSet();

            //  string sqry = "select * from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and a.ProdNo='" + iD + "'";
            string sqry = "select c.category,d.Definition,b.prod_qty,b.units from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and  b.prodno in (select MAX(prodno)  from tbltransproductionstock)";
            ds = dbObj.InlineExecuteDataSet(sqry);

            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                dr = dt.NewRow();
                dr["Group"] = ds.Tables[0].Rows[i]["category"].ToString();
                dr["Item"] = ds.Tables[0].Rows[i]["Definition"].ToString();
                dr["BalanceQty"] = ds.Tables[0].Rows[i]["prod_qty"].ToString();

                dt.Rows.Add(dr);
            }
            DataSet dcode = new DataSet();
            string code = "select distinct branchcode from tblgoodtransfer where branchcode<>'NP'";
            dcode = dbObj.InlineExecuteDataSet(code);

            DataSet dcode1 = new DataSet();
            string code1 = "select distinct branchcode from tblgoodtransfer2 where branchcode<>'BY'";
            dcode1 = dbObj.InlineExecuteDataSet(code1);




            for (int i = 0; i < dcode.Tables[0].Rows.Count; i++)
            {
                string Bcode = dcode.Tables[0].Rows[i]["branchcode"].ToString();
                DataSet ds1 = new DataSet();
                string sqry1 = "select c.category,d.definition,a.Received_Qty from tbltransgoodstransfer a,tblgoodtransfer b,tblcategory c,tblcategoryuser d where a.Dc_no=b.dc_no and convert(date,dc_date)='" + Date + "' and branch='" + Bcode + "' and a.categoryid=c.categoryid and a.descriptionid=d.categoryuserid";

                ds1 = dbObj.InlineExecuteDataSet(sqry1);
                dt.Columns.Add(Bcode);
                foreach (DataRow row in dt.Rows)
                {
                    for (int k = 0; k < ds1.Tables[0].Rows.Count; k++)
                    {
                        if (row["Item"].ToString() == ds1.Tables[0].Rows[k]["definition"].ToString())
                        {
                            row[Bcode] = ds1.Tables[0].Rows[k]["Received_Qty"].ToString();
                            //dt.Rows.Add(row);
                        }
                    }
                }

            }


            for (int i = 0; i < dcode1.Tables[0].Rows.Count; i++)
            {
                string Bcode = dcode1.Tables[0].Rows[i]["branchcode"].ToString();
                DataSet ds1 = new DataSet();
                string sqry1 = "select c.category,d.definition,a.Received_Qty from tbltransgoodstransfer2 a,tblgoodtransfer2 b,tblcategory c,tblcategoryuser d where a.Dc_no=b.dc_no and convert(date,dc_date)='" + Date + "' and branch='" + Bcode + "' and a.categoryid=c.categoryid and a.descriptionid=d.categoryuserid";

                ds1 = dbObj.InlineExecuteDataSet(sqry1);
                dt.Columns.Add(Bcode);
                foreach (DataRow row in dt.Rows)
                {
                    for (int k = 0; k < ds1.Tables[0].Rows.Count; k++)
                    {
                        if (row["Item"].ToString() == ds1.Tables[0].Rows[k]["definition"].ToString())
                        {
                            row[Bcode] = ds1.Tables[0].Rows[k]["Received_Qty"].ToString();
                            //dt.Rows.Add(row);
                        }
                    }
                }

            }
            return dt;
        }
        public DataTable ReportsNellai(string Date)
        {
            DataTable dt = new DataTable();
            DataRow dr;
            dt.Columns.Add("Group");
            dt.Columns.Add("Item");
            dt.Columns.Add("BalanceQty");
            DataSet ds = new DataSet();

            //  string sqry = "select * from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and a.ProdNo='" + iD + "'";
            string sqry = "select c.category,d.Definition,b.prod_qty,b.units from tblProductionStock3 a,tblTransProductionStock3 b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and  b.prodno in (select MAX(prodno)  from tbltransproductionstock3)";
            ds = dbObj.InlineExecuteDataSet(sqry);

            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                dr = dt.NewRow();
                dr["Group"] = ds.Tables[0].Rows[i]["category"].ToString();
                dr["Item"] = ds.Tables[0].Rows[i]["Definition"].ToString();
                dr["BalanceQty"] = ds.Tables[0].Rows[i]["prod_qty"].ToString();

                dt.Rows.Add(dr);
            }
            DataSet dcode = new DataSet();
            string code = "select distinct branchcode from tblgoodtransfer3 ";
            dcode = dbObj.InlineExecuteDataSet(code);






            for (int i = 0; i < dcode.Tables[0].Rows.Count; i++)
            {
                string Bcode = dcode.Tables[0].Rows[i]["branchcode"].ToString();
                DataSet ds1 = new DataSet();
                string sqry1 = "select c.category,d.definition,a.Received_Qty from tbltransgoodstransfer3 a,tblgoodtransfer3 b,tblcategory c,tblcategoryuser d where a.Dc_no=b.dc_no and convert(date,dc_date)='" + Date + "' and branch='" + Bcode + "' and a.categoryid=c.categoryid and a.descriptionid=d.categoryuserid";

                ds1 = dbObj.InlineExecuteDataSet(sqry1);
                dt.Columns.Add(Bcode);
                foreach (DataRow row in dt.Rows)
                {
                    for (int k = 0; k < ds1.Tables[0].Rows.Count; k++)
                    {
                        if (row["Item"].ToString() == ds1.Tables[0].Rows[k]["definition"].ToString())
                        {
                            row[Bcode] = ds1.Tables[0].Rows[k]["Received_Qty"].ToString();
                            //dt.Rows.Add(row);
                        }
                    }
                }

            }



            return dt;
        }
        public DataTable ReportsChennai(string Date)
        {
            DataTable dt = new DataTable();
            DataRow dr;
            dt.Columns.Add("Group");
            dt.Columns.Add("Item");
            dt.Columns.Add("BalanceQty");
            DataSet ds = new DataSet();

            //  string sqry = "select * from tblProductionStock a,tblTransProductionStock b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and a.ProdNo='" + iD + "'";
            string sqry = "select c.category,d.Definition,b.prod_qty,b.units from tblProductionStock4 a,tblTransProductionStock4 b,tblcategory c,tblCategoryUser d where a.ProdNo=b.prodno and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Prod_Qty!=0 and  b.prodno in (select MAX(prodno)  from tbltransproductionstock4)";
            ds = dbObj.InlineExecuteDataSet(sqry);

            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                dr = dt.NewRow();
                dr["Group"] = ds.Tables[0].Rows[i]["category"].ToString();
                dr["Item"] = ds.Tables[0].Rows[i]["Definition"].ToString();
                dr["BalanceQty"] = ds.Tables[0].Rows[i]["prod_qty"].ToString();

                dt.Rows.Add(dr);
            }
            DataSet dcode = new DataSet();
            string code = "select distinct branchcode from tblgoodtransfer4 ";
            dcode = dbObj.InlineExecuteDataSet(code);






            for (int i = 0; i < dcode.Tables[0].Rows.Count; i++)
            {
                string Bcode = dcode.Tables[0].Rows[i]["branchcode"].ToString();
                DataSet ds1 = new DataSet();
                string sqry1 = "select c.category,d.definition,a.Received_Qty from tbltransgoodstransfer4 a,tblgoodtransfer4 b,tblcategory c,tblcategoryuser d where a.Dc_no=b.dc_no and convert(date,dc_date)='" + Date + "' and branch='" + Bcode + "' and a.categoryid=c.categoryid and a.descriptionid=d.categoryuserid";

                ds1 = dbObj.InlineExecuteDataSet(sqry1);
                dt.Columns.Add(Bcode);
                foreach (DataRow row in dt.Rows)
                {
                    for (int k = 0; k < ds1.Tables[0].Rows.Count; k++)
                    {
                        if (row["Item"].ToString() == ds1.Tables[0].Rows[k]["definition"].ToString())
                        {
                            row[Bcode] = ds1.Tables[0].Rows[k]["Received_Qty"].ToString();
                            //dt.Rows.Add(row);
                        }
                    }
                }

            }



            return dt;
        }


        public int Messege(string date, string msg, string end, int To, string from)
        {
            int save = 0;
            string sQry = "insert tblprod_messege (Date,Messege,isDisplay,EndDate,[TO],[from]) values ('" + date + "','" + msg + "',0,'" + end + "'," + To + ",'" + from + "')";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;
        }

        public DataSet ViewMessege(int User)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblprod_messege where [TO]=" + User + " and convert(date,Date) =convert(date,getdate()) and  CONVERT(VARCHAR(5),getdate(),108) < CONVERT(VARCHAR(5),enddate,108) ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;
        }

        public DataSet SentMessege(string User)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblprod_messege a ,tbllogin b where a.[To]=b.UserID and [from]='" + User + "'  ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public int deletemessege(int id)
        {
            int save = 0;
            string sQry = "delete from tblprod_messege where id=" + id + "";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;
        }


        public DataSet ViewStock(int User, int itemid, string stable)
        {
            DataSet save = new DataSet();
            string sQry = "select Available_Qty from tblstock_" + stable + " where    Available_qty>0 and subcategoryid=" + itemid + " ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public int updateopcash(int userid, decimal amt)
        {
            int iupdate = 0;
            string sQry = "update tbllogin set Opcash=" + amt + " where userid=" + userid + "";
            iupdate = dbObj.InlineExecuteNonQuery(sQry);
            return iupdate;
        }



        public DataSet checkingRights(string Mobile)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblmobileno where mobileno='" + Mobile + "'";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public DataSet inserRewRep(string sfrom, string sto, string stable)
        {
            DataSet save = new DataSet();
            string sQry = "select b.category,c.Definition,a.Qty as OrderQty,a.RequestBy,a.ReqDate,case a.FromStore when 'CO1' then 'KK Nagar' when 'CO2' then 'Byepass' when 'CO3' then 'BB Kulam' when 'CO4' then 'NPuram' when 'CO5' then 'Nellai'  when 'CO6' then 'Maduravayol' when 'CO7' then 'Purasavakkam'  end as FromStore,case a.ToStore when 'CO1' then 'KK Nagar' when 'CO2' then 'Byepass' when 'CO3' then 'BB Kulam' when 'CO4' then 'NPuram' when 'CO5' then 'Nellai' when 'CO6' then 'Maduravayol' when 'CO7' then 'Purasavakkam'  end as ToStore,a.Accetedby   from tblstockTransfer a,tblcategory b,tblCategoryUser c where a.CategoryID=b.categoryid and a.SubCategoryID=c.CategoryUserID and CONVERT(date,a.ReqDate) between '" + sfrom + "' and '" + sto + "' and a.Fromstore='" + stable + "' ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet TransferInter(string sfrom, string sto, string stable)
        {
            DataSet save = new DataSet();
            string sQry = "select b.category,c.Definition,a.Qty as OrderQty,a.RequestBy,a.ReqDate,case a.FromStore when 'CO1' then 'KK Nagar' when 'CO2' then 'Byepass' when 'CO3' then 'BB Kulam' when 'CO4' then 'NPuram' when 'CO5' then 'Nellai'  when 'CO6' then 'Maduravayol' when 'CO7' then 'Purasavakkam'  end as TOStore,case a.ToStore when 'CO1' then 'KK Nagar' when 'CO2' then 'Byepass' when 'CO3' then 'BB Kulam' when 'CO4' then 'NPuram' when 'CO5' then 'Nellai' when 'CO6'  then 'Maduravayol' when 'CO7' then 'Purasavakkam' end as FromStore,a.Accetedby   from tblstockTransfer a,tblcategory b,tblCategoryUser c where a.CategoryID=b.categoryid and a.SubCategoryID=c.CategoryUserID and CONVERT(date,a.ReqDate) between '" + sfrom + "' and '" + sto + "' and a.ToStore='" + stable + "' and a.issent=1 ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public DataSet AdvancaPayment(string stable, string from, string to)
        {
            DataSet save = new DataSet();
            string sQry = "select OrderNo,BookNo,CONVERT(DECIMAL(10,2),Advance) As Amount from tblorder_" + stable + " where Paytype='Adv'  and convert(date,orderdate) between '" + from + "' and  '" + to + "' and iscancel=0 order by BookNo asc";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet BalancePayment(string stable, string from, string to)
        {
            DataSet save = new DataSet();
            string sQry = "select OrderNo,BookNo, CONVERT(DECIMAL(10,2),Advance) As Amount from tblorder_" + stable + " where Paytype='Balance'  and convert(date,orderdate) between '" + from + "' and  '" + to + "' and iscancel=0 order by BookNo asc";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet FullPayment(string stable, string from, string to)
        {
            DataSet save = new DataSet();
            string sQry = "select OrderNo,BookNo,CONVERT(DECIMAL(10,2),Advance) As Amount from tblorder_" + stable + " where Paytype='Full'  and convert(date,orderdate) between '" + from + "' and  '" + to + "' and iscancel=0 order by BookNo asc";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public DataTable OrderPayMode(string stable, string from, string to)
        {
            DataTable dt = new DataTable();
            DataSet save = new DataSet();
            string sQry = "select OrderNo,BookNo,NetAmount as 'Total Amount',sum(Advance) as Advance,(NetAmount)-sum(Advance) as 'Balance',(NetAmount)-sum(Advance) as 'Remaining'   from   tblorder_" + stable + " where  convert(date,orderdate) between '" + from + "' and  '" + to + "' and iscancel=0  group by OrderNo,BookNo,NetAmount ,Total order by BookNo asc ";
            //"( select OrderNo,BookNo,CONVERT(DECIMAL(10,2),Advance) As Amount,paytype from tblorder_" + stable + " where Paytype='Adv'  and convert(date,orderdate) between '" + from + "' and  '" + to + "' and iscancel=0   union select OrderNo,BookNo,CONVERT(DECIMAL(10,2),Advance) As Amount,paytype from tblorder_" + stable + " where Paytype='Balance'  and convert(date,orderdate) between '" + from + "' and  '" + to + "' and iscancel=0   union select OrderNo,BookNo,CONVERT(DECIMAL(10,2),Advance) As Amount,paytype from tblorder_" + stable + " where Paytype='Full'  and convert(date,orderdate) between '" + from + "' and  '" + to + "' and iscancel=0 ) order by bookno asc";
            save = dbObj.InlineExecuteDataSet(sQry);
            dt = save.Tables[0];
            //dt.Columns.Add("OrderNo");
            //dt.Columns.Add("BookNo");
            //dt.Columns.Add("Total Amount");
            //dt.Columns.Add("Adv");
            //dt.Columns.Add("Balance");
            //dt.Columns.Add("Remaining");

            //for (int i = 0; i < save.Tables[0].Rows.Count; i++)
            //{
            //    DataRow dr = dt.NewRow();

            //    dr["OrderNo"] = save.Tables[0].Rows[i]["OrderNo"].ToString();
            //    dr["BookNo"] = save.Tables[0].Rows[i]["BookNo"].ToString();
            //    if (save.Tables[0].Rows[i]["paytype"].ToString() == "Adv")
            //        dr["Adv"] = save.Tables[0].Rows[i]["Amount"].ToString();
            //    if (save.Tables[0].Rows[i]["paytype"].ToString() == "Balance")
            //        dr["Balance"] = save.Tables[0].Rows[i]["Amount"].ToString();
            //    if (save.Tables[0].Rows[i]["paytype"].ToString() == "Full")
            //        dr["Full"] = save.Tables[0].Rows[i]["Amount"].ToString();


            //    dt.Rows.Add(dr);
            //}

            return dt;
        }


        public DataTable RequestReport(string date)
        {
            DataSet save = new DataSet();
            string sQry = "select a.categoryid,b.categoryuserid,a.Category,b.definition from tblcategory a ,tblcategoryuser b where  a.categoryid=b.categoryid and a.categoryid in  (select distinct categoryid from tbltranspurchaserequest_kk where order_qty>0)";
            save = dbObj.InlineExecuteDataSet(sQry);

            DataTable dt = new DataTable();
            dt.Columns.Add("CatID");
            dt.Columns.Add("ItemID");
            dt.Columns.Add("Group");
            dt.Columns.Add("Item");

            for (int a = 0; a < save.Tables[0].Rows.Count; a++)
            {
                DataRow dr = dt.NewRow();

                dr["CatID"] = save.Tables[0].Rows[a]["categoryid"].ToString();
                dr["ItemID"] = save.Tables[0].Rows[a]["categoryuserid"].ToString();
                dr["Group"] = save.Tables[0].Rows[a]["Category"].ToString();
                dr["Item"] = save.Tables[0].Rows[a]["definition"].ToString();

                dt.Rows.Add(dr);

            }
            DataSet Branch = new DataSet();
            string bran = " select Branchcode from tbllogin where issuperadmin=0 and branchcode<>'NE'";
            Branch = dbObj.InlineExecuteDataSet(bran);
            for (int i = 0; i < Branch.Tables[0].Rows.Count; i++)
            {

                string code = Branch.Tables[0].Rows[i]["branchcode"].ToString();
                dt.Columns.Add(code);

                DataSet OrderKK = new DataSet();
                string KK = "select categoryid,Descriptionid,order_Qty from tbltranspurchaserequest_" + code + " where order_qty>0 and convert(date,orderdate)='" + date + "'";
                OrderKK = dbObj.InlineExecuteDataSet(KK);

                foreach (DataRow Row in dt.Rows)
                {

                    for (int M = 0; M < OrderKK.Tables[0].Rows.Count; M++)
                    {
                        if (Row["ItemID"].ToString() == OrderKK.Tables[0].Rows[M]["Descriptionid"].ToString())
                        {
                            Row[code] = OrderKK.Tables[0].Rows[M]["order_Qty"].ToString();
                        }

                    }
                }



            }
            dt.Columns.Add("Total");

            foreach (DataRow Row in dt.Rows)
            {
                int Kna = 0; int bbk = 0; int by = 0; int np = 0;
                if (Row["KK"].ToString() != "")
                    Kna = Convert.ToInt32(Row["KK"].ToString());
                if (Row["BY"].ToString() != "")
                    by = Convert.ToInt32(Row["BY"].ToString());
                if (Row["BB"].ToString() != "")
                    bbk = Convert.ToInt32(Row["BB"].ToString());
                if (Row["NP"].ToString() != "")
                    np = Convert.ToInt32(Row["NP"].ToString());


                Row["Total"] = Kna + bbk + by + np;


                //dt.Rows.Add(Row);

            }


            return dt;

        }

        public int insertselect(string stable)
        {
            int save = 0;

            string sQry = "insert into tblopeningstock_" + stable + "(categoryid,subcategoryid,qty,Date,DayCloseDate) select categoryid,subcategoryid,Available_Qty,GetDate()+1,Getdate() from tblstock_" + stable + "";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;

        }

        public int insertdayclosing(string stable, string date, string openingmoney, string entryby, string pmamouunt)
        {
            int save = 0;

            string sQry = "insert into tblDayclose_" + stable + "(DaycloseDate,ClosingPettyCash,EntryBy,OpeningDate,PMAmount)values(getdate(),'" + openingmoney + "','" + entryby + "',getdate()+1,'" + pmamouunt + "')";
            //(categoryid,subcategoryid,qty,Date,DayCloseDate) " + 
            //select categoryid,subcategoryid,Available_Qty,GetDate()+1,Getdate() from tblstock_" + stable + "";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;

        }

        public DataSet checkdayclose(string stable, string date)
        {
            int save = 0;
            DataSet ds = new DataSet();
            string sQry = "select * from tbldayclose_" + stable + " where convert(date,DaycloseDate) = convert(date,'" + date + "') ";
            //(categoryid,subcategoryid,qty,Date,DayCloseDate) " + 
            //select categoryid,subcategoryid,Available_Qty,GetDate()+1,Getdate() from tblstock_" + stable + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        public int delOpening(string stable)
        {
            int save = 0;

            string sQry = "delete from tblopeningstock_" + stable + " where convert(date,Date)= convert(date,GetDate()+1)";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;

        }

        public DataSet checkinser(string stable)
        {
            DataSet ds = new DataSet();
            string s = "select * from tblOpeningStock_" + stable + "  where convert(date,Date)= convert(date,getdate()+1) ";
            ds = dbObj.InlineExecuteDataSet(s);
            return ds;
        }

        public DataSet getdenominationmaster(string cur)
        {
            DataSet ds = new DataSet();
            string s = "select * from tbldenominationmaster where Isactive='Yes' and Currency='"+cur+"' order by ordertype asc ";
            ds = dbObj.InlineExecuteDataSet(s);
            return ds;
        }

        public DataSet SessionClose(string stable, string date, string Name)
        {
            DataSet dSession = new DataSet();
            string ses = "select isnull(MAX(session),0)+1 as Session from tblsession_" + stable + " where convert(date,Datetime)=CONVERT(date,getdate())";
            dSession = dbObj.InlineExecuteDataSet(ses);

            DataSet bill = new DataSet();
            string Qry = "select max(billno) as BillNo from tblsales_" + stable + "";
            bill = dbObj.InlineExecuteDataSet(Qry);

            DataSet Order = new DataSet();
            string sorder = "select max(orderid) as orderid from tblorder_" + stable + "";
            Order = dbObj.InlineExecuteDataSet(sorder);

            DataSet ds = new DataSet();

            if (dSession.Tables[0].Rows[0]["Session"].ToString().Trim() == "1")
            {



                string s = "select 'Sales' as Mode,'' as 'Paytype',isnull(SUM(Total),0) as Total  "
          + " from tblsales_" + stable + " where CONVERT(date,billdate)='" + date + "' and Cancelstatus='No'  union all "
          + " select 'Order' as Mode, '' as PayType,isnull(SUM(Advance),0) as Total   "
         + " from tblOrder_" + stable + " where CONVERT(date,OrderDate)='" + date + "' and  iscancel='0' ";


                ds = dbObj.InlineExecuteDataSet(s);

                if (ds.Tables[0].Rows.Count > 0)
                {


                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string Mode = ds.Tables[0].Rows[i]["Mode"].ToString();
                        string Paytype = ds.Tables[0].Rows[i]["Paytype"].ToString();
                        string Total = ds.Tables[0].Rows[i]["Total"].ToString();
                        string Session = dSession.Tables[0].Rows[0]["Session"].ToString();
                        string Bill = bill.Tables[0].Rows[0]["Billno"].ToString();
                        string sordera = Order.Tables[0].Rows[0]["orderid"].ToString();
                        string sq = " insert into tblsession_" + stable + " (Name,Mode,Tyoe,Cash,Datetime,Session,BillNo,Orderid) values('" + Name + "','" + Mode + "','" + Paytype + "','" + Total + "','" + DateTime.Now.ToString("yyyy-MM-dd hh:mm") + "','" + Session + "'," + Bill + "," + sordera + ") ";

                        int Insert = dbObj.InlineExecuteNonQuery(sq);
                    }
                }
            }
            else
            {
                DataSet sbill = new DataSet();
                string sQry = "select top 1 *  from tblsession_" + stable + "  order by sessionid desc";
                sbill = dbObj.InlineExecuteDataSet(sQry);

                string s = "select 'Sales' as Mode,'' as 'Paytype',isnull(SUM(Total),0) as Total  "
+ " from tblsales_" + stable + " where CONVERT(date,billdate)='" + date + "' and billno>" + sbill.Tables[0].Rows[0]["billno"].ToString() + " and Cancelstatus='No'  union all "
+ " select 'Order' as Mode, '' as PayType,isnull(SUM(Advance),0) as Total "
+ " from tblOrder_" + stable + " where CONVERT(date,OrderDate)='" + date + "' and orderid>" + sbill.Tables[0].Rows[0]["orderid"].ToString() + " and  iscancel='0' ";
                ds = dbObj.InlineExecuteDataSet(s);

                if (ds.Tables[0].Rows.Count > 0)
                {


                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string Mode = ds.Tables[0].Rows[i]["Mode"].ToString();
                        string Paytype = ds.Tables[0].Rows[i]["Paytype"].ToString();
                        string Total = ds.Tables[0].Rows[i]["Total"].ToString();
                        string Session = dSession.Tables[0].Rows[0]["Session"].ToString();
                        string Bill = bill.Tables[0].Rows[0]["Billno"].ToString();
                        string sordera = Order.Tables[0].Rows[0]["orderid"].ToString();
                        string sq = " insert into tblsession_" + stable + " (Name,Mode,Tyoe,Cash,Datetime,Session,BillNo,Orderid) values('" + Name + "','" + Mode + "','" + Paytype + "','" + Total + "','" + DateTime.Now.ToString("yyyy-MM-dd hh:mm") + "','" + Session + "'," + Bill + "," + sordera + ") ";
                        int Insert = dbObj.InlineExecuteNonQuery(sq);
                    }
                }
            }
            return ds;
        }


        public int RUN()
        {
            int save = 0;

            string sQry = "insert into tblopeningstock_co1(categoryid,subcategoryid,qty,Date) select categoryid,subcategoryid,Available_Qty,GetDate()+1 from tblstock_co1  " +
                          "insert into tblopeningstock_co2(categoryid,subcategoryid,qty,Date) select categoryid,subcategoryid,Available_Qty,GetDate()+1 from tblstock_co2  " +
                          "insert into tblopeningstock_co3(categoryid,subcategoryid,qty,Date) select categoryid,subcategoryid,Available_Qty,GetDate()+1 from tblstock_co3  " +
                          "insert into tblopeningstock_co4(categoryid,subcategoryid,qty,Date) select categoryid,subcategoryid,Available_Qty,GetDate()+1 from tblstock_co4  " +
                          "insert into tblopeningstock_co5(categoryid,subcategoryid,qty,Date) select categoryid,subcategoryid,Available_Qty,GetDate()+1 from tblstock_co5  " +
                          "insert into tblopeningstock_co7(categoryid,subcategoryid,qty,Date) select categoryid,subcategoryid,Available_Qty,GetDate()+1 from tblstock_co7  ";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;

        }

        //public DataTable dElobratedClosingStock(string stable, int userid, string date, string scode, string categoryselect, string stockchktype)
        //{
        //    DataTable dt = new DataTable();

        //    DateTime addday = Convert.ToDateTime(date).AddDays(1);

        //    string extraday = addday.ToString("yyyy-MM-dd");

        //    DataRow dr;
        //    dt.Columns.Add("GroupID");
        //    dt.Columns.Add("ItemID");
        //    dt.Columns.Add("Group");
        //    dt.Columns.Add("Item");
        //    dt.Columns.Add("Rate");
        //    dt.Columns.Add("OpeningStock");
        //    dt.Columns.Add("OpeningStockRate");
        //    dt.Columns.Add("GRNQty");
        //    dt.Columns.Add("GRNQtyRate");

        //    dt.Columns.Add("GRNQtyP");
        //    dt.Columns.Add("GRNQtyRateP");

        //    dt.Columns.Add("GRNQtyM");
        //    dt.Columns.Add("GRNQtyRateM");


        //    dt.Columns.Add("Available_Qty");
        //    dt.Columns.Add("Available_QtyRate");
        //    dt.Columns.Add("SalesQty");
        //    dt.Columns.Add("SalesQtyRate");
        //    dt.Columns.Add("Return");
        //    dt.Columns.Add("ReturnRate");
        //    dt.Columns.Add("ClosingStock");
        //    dt.Columns.Add("ClosingStockRate");

        //    dt.Columns.Add("StockPM");
        //    dt.Columns.Add("StockRatePM");


        //    string sqry = string.Empty;
        //    // GET ITEM

        //    if (categoryselect == "All")
        //    {
        //        sqry = "select * from tblcategoryuser as cu inner join tblcategory as c on c.categoryid=cu.categoryid inner join tblCategoryuserBranch as cb on cb.Itemid=cu.ItemID where BranchCode='" + scode + "' order by cu.categoryid asc";
        //    }
        //    else
        //    {
        //        sqry = "select * from tblcategoryuser as cu inner join tblcategory as c on c.categoryid=cu.categoryid inner join tblCategoryuserBranch as cb on cb.Itemid=cu.ItemID where (" + categoryselect + ") and BranchCode='" + scode + "' order by cu.categoryid asc";
        //    }
        //    DataSet getitem = dbObj.InlineExecuteDataSet(sqry);

        //    if (getitem.Tables[0].Rows.Count > 0)
        //    {

        //        for (int i = 0; i < getitem.Tables[0].Rows.Count; i++)
        //        {

        //            string categoryuserid = getitem.Tables[0].Rows[i]["Categoryuserid"].ToString();
        //            string definition = getitem.Tables[0].Rows[i]["definition"].ToString();
        //            string categoryid = getitem.Tables[0].Rows[i]["categoryid"].ToString();
        //            string category = getitem.Tables[0].Rows[i]["category"].ToString();
        //            string Rate = getitem.Tables[0].Rows[i]["Rate"].ToString();

        //            dr = dt.NewRow();
        //            dr["GroupID"] = categoryid;
        //            dr["ItemID"] = categoryuserid;
        //            dr["Group"] = category;
        //            dr["Item"] = definition;
        //            dr["Rate"] = Rate;

        //            // GET CURRENT STOCK

        //            string Scurstock = string.Empty;
        //            DataSet curstock = new DataSet();

        //            string curdate = DateTime.Now.ToString("yyyy-MM-dd");

        //            if (curdate == date)
        //            {
        //                Scurstock = "select distinct subcategoryid,sum(Available_Qty) as AvlQty from tblStock_" + scode + " where SubCategoryID='" + categoryuserid + "' group by subcategoryid";
        //            }
        //            else if (Convert.ToDateTime(curdate) < Convert.ToDateTime(date))
        //            {
        //                Scurstock = "select distinct subcategoryid,sum(Available_Qty) as AvlQty from tblStock_" + scode + " where SubCategoryID='" + categoryuserid + "' group by subcategoryid";
        //            }
        //            else
        //            {
        //                Scurstock = "select distinct subcategoryid, isnull(sum(Qty),0) as AvlQty from tblOpeningStock_" + scode + " where convert(date,Date)='" + extraday + "' and subcategoryid='" + categoryuserid + "' group by subcategoryid";
        //            }
        //            curstock = dbObj.InlineExecuteDataSet(Scurstock);

        //            if (curstock.Tables[0].Rows.Count > 0)
        //            {
        //                dr["Available_Qty"] = curstock.Tables[0].Rows[0]["AvlQty"].ToString();
        //                dr["Available_QtyRate"] = (Convert.ToDouble(curstock.Tables[0].Rows[0]["AvlQty"]) * Convert.ToDouble(Rate)).ToString();

        //            }
        //            else
        //            {
        //                dr["Available_Qty"] = "0";
        //                dr["Available_QtyRate"] = "0";
        //            }


        //            // GET OP_STOCK

        //            string Sopstock = string.Empty;
        //            DataSet opstock = new DataSet();

        //            Sopstock = "select distinct subcategoryid, isnull(sum(Qty),0) as OpQty from tblOpeningStock_" + scode + "  where convert(date,Date)='" + date + "' and subcategoryid='" + categoryuserid + "' " +
        //                       " group by subcategoryid";

        //            opstock = dbObj.InlineExecuteDataSet(Sopstock);

        //            if (opstock.Tables[0].Rows.Count > 0)
        //            {
        //                dr["OpeningStock"] = opstock.Tables[0].Rows[0]["OpQty"].ToString();
        //                dr["OpeningStockRate"] = (Convert.ToDouble(opstock.Tables[0].Rows[0]["OpQty"]) * Convert.ToDouble(Rate)).ToString();

        //            }
        //            else
        //            {
        //                dr["OpeningStock"] = "0";
        //                dr["OpeningStockRate"] = "0";
        //            }



        //            // GET GRN STOCK

        //            string SGRNSTOCK = string.Empty;
        //            DataSet GRNSTOCK = new DataSet();


        //            SGRNSTOCK = " select distinct CategoryUserID,sum(GRN_Qty) as GRNQty from tblgrn  where  cast(Date as Date) = '" + date + "' and categoryuserid='" + categoryuserid + "'  " +
        //                        " group by CategoryUserID ";
        //            GRNSTOCK = dbObj.InlineExecuteDataSet(SGRNSTOCK);

        //            if (GRNSTOCK.Tables[0].Rows.Count > 0)
        //            {
        //                dr["GRNQty"] = GRNSTOCK.Tables[0].Rows[0]["GRNQty"].ToString();
        //                dr["GRNQtyRate"] = (Convert.ToDouble(GRNSTOCK.Tables[0].Rows[0]["GRNQty"]) * Convert.ToDouble(Rate)).ToString();

        //            }
        //            else
        //            {
        //                dr["GRNQty"] = "0";
        //                dr["GRNQtyRate"] = "0";
        //            }

        //            // GET GRN STOCK (PLUS)

        //            string SGRNSTOCKP = string.Empty;
        //            DataSet GRNSTOCKP = new DataSet();


        //            SGRNSTOCKP = " select distinct CategoryUserID,sum(GRN_Qty) as GRNQty from tblGRNmp  where signa='+' and  cast(Date as Date) = '" + date + "' and categoryuserid='" + categoryuserid + "'  " +
        //                        " group by CategoryUserID ";
        //            GRNSTOCKP = dbObj.InlineExecuteDataSet(SGRNSTOCKP);

        //            if (GRNSTOCKP.Tables[0].Rows.Count > 0)
        //            {
        //                dr["GRNQtyP"] = GRNSTOCKP.Tables[0].Rows[0]["GRNQty"].ToString();
        //                dr["GRNQtyRateP"] = (Convert.ToDouble(GRNSTOCKP.Tables[0].Rows[0]["GRNQty"]) * Convert.ToDouble(Rate)).ToString();

        //            }
        //            else
        //            {
        //                dr["GRNQtyP"] = "0";
        //                dr["GRNQtyRateP"] = "0";
        //            }


        //            // GET GRN STOCK (MINUS)

        //            string SGRNSTOCKM = string.Empty;
        //            DataSet GRNSTOCKM = new DataSet();


        //            SGRNSTOCKM = " select distinct CategoryUserID,sum(GRN_Qty) as GRNQty from tblGRNmp  where signa='-' and  cast(Date as Date) = '" + date + "' and categoryuserid='" + categoryuserid + "'  " +
        //                        " group by CategoryUserID ";
        //            GRNSTOCKM = dbObj.InlineExecuteDataSet(SGRNSTOCKM);

        //            if (GRNSTOCKM.Tables[0].Rows.Count > 0)
        //            {
        //                dr["GRNQtyM"] = GRNSTOCKM.Tables[0].Rows[0]["GRNQty"].ToString();
        //                dr["GRNQtyRateM"] = (Convert.ToDouble(GRNSTOCKM.Tables[0].Rows[0]["GRNQty"]) * Convert.ToDouble(Rate)).ToString();

        //            }
        //            else
        //            {
        //                dr["GRNQtyM"] = "0";
        //                dr["GRNQtyRateM"] = "0";
        //            }

        //            // GET SALESTOCK

        //            string SALSTOCK = string.Empty;
        //            DataSet SALESTOCK = new DataSet();

        //            SALSTOCK = "select distinct SubCategoryID,SUM(quantity) as SLEQty from tblTransSales_" + scode + " a,tblsales_" + scode + " b  " +
        //                      " where b.billno=a.salesid and b.salesid=a.salesuniqueid and cancelstatus='No' and convert(date,billdate)='" + date + "' and subcategoryid='" + categoryuserid + "' " +
        //                      " group by SubCategoryID";
        //            SALESTOCK = dbObj.InlineExecuteDataSet(SALSTOCK);

        //            if (SALESTOCK.Tables[0].Rows.Count > 0)
        //            {
        //                dr["SalesQty"] = SALESTOCK.Tables[0].Rows[0]["SLEQty"].ToString();
        //                dr["SalesQtyRate"] = (Convert.ToDouble(SALESTOCK.Tables[0].Rows[0]["SLEQty"]) * Convert.ToDouble(Rate)).ToString();

        //            }
        //            else
        //            {
        //                dr["SalesQty"] = "0";
        //                dr["SalesQtyRate"] = "0";
        //            }

        //            // GET RETURN
        //            string clsstock = string.Empty;
        //            DataSet getclose = new DataSet();

        //            clsstock = " select distinct b.subcategoryid, sum(b.Quantity) as RETQty from tblreturn_" + scode + " a,tbltransreturn_" + scode + " b  " +
        //                       " where a.retno=b.retno and convert(date,Retdate)='" + date + "' and b.subcategoryid='" + categoryuserid + "' group by b.subcategoryid";
        //            getclose = dbObj.InlineExecuteDataSet(clsstock);

        //            if (getclose.Tables[0].Rows.Count > 0)
        //            {
        //                dr["Return"] = getclose.Tables[0].Rows[0]["RETQty"].ToString();
        //                dr["ReturnRate"] = (Convert.ToDouble(getclose.Tables[0].Rows[0]["RETQty"]) * Convert.ToDouble(Rate)).ToString();

        //            }
        //            else
        //            {
        //                dr["Return"] = "0";
        //                dr["ReturnRate"] = "0";
        //            }

        //            double TOTGRN = 0;
        //            double TOTQty = 0;
        //            double TOT = 0;
        //            TOTGRN = Convert.ToDouble(dr["GRNQty"]) + (Convert.ToDouble(dr["GRNQtyP"]) - Convert.ToDouble(dr["GRNQtyM"])) + Convert.ToDouble(dr["OpeningStock"]);

        //            TOTQty = Convert.ToDouble(dr["Return"]) + Convert.ToDouble(dr["SalesQty"]) + Convert.ToDouble(dr["Available_Qty"]);

        //            TOT = TOTGRN - TOTQty;

        //            dr["StockPM"] = TOTGRN - TOTQty;
        //            dr["StockRatePM"] = (Convert.ToDouble((TOT)) * Convert.ToDouble(Rate)).ToString();

        //            if (stockchktype == "0")
        //            {
        //                dt.Rows.Add(dr);
        //            }
        //            else if (stockchktype == "1")
        //            {

        //                if (TOT >= 1)
        //                {
        //                    dt.Rows.Add(dr);
        //                }
        //            }
        //            else if (stockchktype == "2")
        //            {

        //                if (TOT < 0)
        //                {
        //                    dt.Rows.Add(dr);
        //                }
        //            }
        //            else if (stockchktype == "3")
        //            {

        //                if (TOT == 0)
        //                {
        //                    dt.Rows.Add(dr);
        //                }
        //            }

        //            //for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
        //            //{
        //            //    dr = dt.NewRow();
        //            //    dr["GroupID"] = ds.Tables[0].Rows[i]["categoryid"].ToString();
        //            //    dr["ItemID"] = ds.Tables[0].Rows[i]["categoryuserid"].ToString();
        //            //    dr["Group"] = ds.Tables[0].Rows[i]["category"].ToString();
        //            //    dr["Item"] = ds.Tables[0].Rows[i]["definition"].ToString();

        //            //    dr["ClosingStock"] = Convert.ToDecimal(ds.Tables[0].Rows[i]["Available_Qty"]).ToString("f0");

        //            //    dt.Rows.Add(dr);

        //            //}





        //            //DataSet grn = new DataSet();
        //            //string sGRN = "";
        //            //if (scode == "BY" || scode == "KK")
        //            //{
        //            //    sGRN = "select distinct descriptionid as CategoryUserID  , sum(b.Received_Qty) as Qty from tblgoodtransfer a,tbltransgoodstransfer b where a.Dc_no=b.dc_no  and convert(date,a.DC_date)  ='" + date + "' and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid  union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'   group by CategoryUserID ";



        //            //}
        //            //else if (scode == "NP" || scode == "BB")
        //            //{
        //            //    sGRN = "select distinct descriptionid as CategoryUserID ,sum(b.Received_Qty) as Qty from tblgoodtransfer2 a,tbltransgoodstransfer2 b where a.Dc_no=b.dc_no  and convert(date,a.DC_date) = '" + date + "'  and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid   union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'    group by CategoryUserID ";
        //            //}
        //            //else if (scode == "NE")
        //            //{
        //            //    sGRN = "select distinct descriptionid as CategoryUserID ,sum(b.Received_Qty) as Qty from tblgoodtransfer3 a,tbltransgoodstransfer3 b where a.Dc_no=b.dc_no  and convert(date,a.DC_date) = '" + date + "'  and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid   union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'    group by CategoryUserID ";

        //            //}

        //            //else if (scode == "MD")
        //            //{
        //            //    sGRN = "select distinct descriptionid as CategoryUserID ,sum(b.Received_Qty) as Qty from tblgoodtransfer4 a,tbltransgoodstransfer4 b where a.Dc_no=b.dc_no  and convert(date,a.DC_date) = '" + date + "'  and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid   union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'    group by CategoryUserID ";

        //            //}

        //            //else if (scode == "PU")
        //            //{
        //            //    sGRN = "select distinct descriptionid as CategoryUserID ,sum(b.Received_Qty) as Qty from tblgoodtransfer4 a,tbltransgoodstransfer4 b where a.Dc_no=b.dc_no  and convert(date,a.DC_date) = '" + date + "'  and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid   union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'    group by CategoryUserID ";

        //            //}

        //            //else if (scode == "CH")
        //            //{
        //            //    sGRN = "select distinct descriptionid as CategoryUserID ,sum(b.Received_Qty) as Qty from tblgoodtransfer4 a,tbltransgoodstransfer4 b where a.Dc_no=b.dc_no  and convert(date,a.DC_date) = '" + date + "'  and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid   union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'    group by CategoryUserID ";

        //            //}

        //            //else if (scode == "TH")
        //            //{
        //            //    sGRN = "select distinct descriptionid as CategoryUserID ,sum(b.Received_Qty) as Qty from tblgoodtransfer4 a,tbltransgoodstransfer4 b where a.Dc_no=b.dc_no  and convert(date,a.DC_date) = '" + date + "'  and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid   union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'    group by CategoryUserID ";

        //            //}
        //            //else if (scode == "PER")
        //            //{
        //            //    sGRN = "select distinct descriptionid as CategoryUserID ,sum(b.Received_Qty) as Qty from tblgoodtransfer4 a,tbltransgoodstransfer4 b where a.Dc_no=b.dc_no  and convert(date,a.DC_date) = '" + date + "'  and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid   union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'    group by CategoryUserID ";

        //            //}
        //            ////sGRN = "select distinct CategoryUserID ,SUM(GRN_Qty) as Qty from tblgrn  where convert(date,date)='"+date+"' and Userid="+userid+" group by CategoryUserID ";

        //            //grn = dbObj.InlineExecuteDataSet(sGRN);



        //            //for (int g = 0; g < grn.Tables[0].Rows.Count; g++)
        //            //{
        //            //    foreach (DataRow gr in dt.Rows)
        //            //    {
        //            //        if (gr["ItemID"].ToString() == grn.Tables[0].Rows[g]["CategoryUserID"].ToString())
        //            //        {
        //            //            if (grn.Tables[0].Rows[g]["Qty"].ToString() != "")
        //            //                gr["GRNQty"] = Convert.ToDecimal(grn.Tables[0].Rows[g]["Qty"]).ToString("f0");
        //            //            else
        //            //                gr["GRNQty"] = "0";



        //            //        }
        //            //    }
        //            //}

        //            //DataSet dsales = new DataSet();

        //            //string sSales = "select distinct SubCategoryID,SUM(quantity) as Qty from tblTransSales_" + stable + " a,tblsales_" + stable + " b where b.billno=a.salesid and cancelstatus='No' and convert(date,billdate)='" + date + "' group by SubCategoryID";

        //            //dsales = dbObj.InlineExecuteDataSet(sSales);

        //            //for (int s = 0; s < dsales.Tables[0].Rows.Count; s++)
        //            //{
        //            //    foreach (DataRow sales in dt.Rows)
        //            //    {
        //            //        if (sales["ItemID"].ToString() == dsales.Tables[0].Rows[s]["SubCategoryID"].ToString())
        //            //        {
        //            //            if (dsales.Tables[0].Rows[s]["Qty"].ToString() != "")
        //            //                sales["SalesQty"] = Convert.ToDecimal(dsales.Tables[0].Rows[s]["Qty"]).ToString("f0");
        //            //            else
        //            //                sales["SalesQty"] = "0";

        //            //            //decimal TOT = Convert.ToDecimal(dsales.Tables[0].Rows[s]["Qty"].ToString()) + Convert.ToDecimal(sales["ClosingStock"].ToString());

        //            //            //sales["OpeningStock"] = TOT.ToString("f0");


        //            //        }
        //            //    }
        //            //}




        //            //DataSet Return = new DataSet();

        //            //string ret = "select distinct b.subcategoryid, sum(b.Quantity) as Qty from tblreturn_" + stable + " a,tbltransreturn_" + stable + " b where a.retno=b.retno and convert(date,Retdate)='" + date + "' group by b.subcategoryid";

        //            //Return = dbObj.InlineExecuteDataSet(ret);

        //            //for (int r = 0; r < Return.Tables[0].Rows.Count; r++)
        //            //{
        //            //    foreach (DataRow gr in dt.Rows)
        //            //    {
        //            //        if (gr["ItemID"].ToString() == Return.Tables[0].Rows[r]["subcategoryid"].ToString())
        //            //        {
        //            //            if (Return.Tables[0].Rows[r]["Qty"].ToString() != "")
        //            //                gr["Return"] = Return.Tables[0].Rows[r]["Qty"].ToString();
        //            //            else
        //            //                gr["Return"] = "0";

        //            //        }
        //            //    }
        //            //}


        //            //DataSet Opening = new DataSet();

        //            //string op = "select distinct subcategoryid, sum(Qty) as Qty from tblOpeningStock_" + stable + "  where convert(date,Date)='" + date + "' group by subcategoryid";

        //            //Opening = dbObj.InlineExecuteDataSet(op);

        //            //for (int r = 0; r < Opening.Tables[0].Rows.Count; r++)
        //            //{
        //            //    foreach (DataRow gr in dt.Rows)
        //            //    {
        //            //        if (gr["ItemID"].ToString() == Opening.Tables[0].Rows[r]["subcategoryid"].ToString())
        //            //        {
        //            //            if (Opening.Tables[0].Rows[r]["Qty"].ToString() != "")
        //            //                gr["OpeningStock"] = Convert.ToDecimal(Opening.Tables[0].Rows[r]["Qty"]).ToString("f0");
        //            //            else
        //            //                gr["OpeningStock"] = "0";

        //            //        }
        //            //    }
        //            //}

        //            //foreach (DataRow sales in dt.Rows)
        //            //{
        //            //    decimal sal = 0; decimal clos = 0; decimal gr = 0; decimal Ret = 0;
        //            //    //if (sales["SalesQty"].ToString() != "")
        //            //    //{
        //            //    //    sal = Convert.ToDecimal(sales["SalesQty"].ToString());
        //            //    //}
        //            //    if (sales["OpeningStock"].ToString() != "")
        //            //    {
        //            //        clos = Convert.ToDecimal(sales["OpeningStock"].ToString());
        //            //    }
        //            //    if (sales["GRNQty"].ToString() != "")
        //            //    {
        //            //        gr = Convert.ToDecimal(sales["GRNQty"].ToString());
        //            //    }

        //            //    //if (sales["Return"].ToString() != "")
        //            //    //{
        //            //    //    Ret = Convert.ToDecimal(sales["Return"].ToString());
        //            //    //}
        //            //    decimal TOT = sal + clos + gr + Ret;



        //            //    sales["Available_Qty"] = (TOT).ToString("f0");

        //            //}
        //        }
        //    }


        //    return dt;

        //}

        public DataTable dElobratedClosingStock(string stable, int userid, string date, string scode, string categoryselect, string stockchktype, string ClosingStockType)
        {
            DataTable dt = new DataTable();

            DateTime addday = Convert.ToDateTime(date).AddDays(1);

            string extraday = addday.ToString("yyyy-MM-dd");

            DataRow dr;
            dt.Columns.Add("GroupID");
            dt.Columns.Add("ItemID");
            dt.Columns.Add("Group");
            dt.Columns.Add("Item");
            dt.Columns.Add("Rate");
            dt.Columns.Add("OpeningStock");
            dt.Columns.Add("OpeningStockRate");
            dt.Columns.Add("GRNQty");
            dt.Columns.Add("GRNQtyRate");

            dt.Columns.Add("GRNQtyP");
            dt.Columns.Add("GRNQtyRateP");

            dt.Columns.Add("GRNQtyM");
            dt.Columns.Add("GRNQtyRateM");


            dt.Columns.Add("Available_Qty");
            dt.Columns.Add("Available_QtyRate");
            dt.Columns.Add("SalesQty");
            dt.Columns.Add("SalesQtyRate");
            dt.Columns.Add("Return");
            dt.Columns.Add("ReturnRate");
            dt.Columns.Add("ClosingStock");
            dt.Columns.Add("ClosingStockRate");

            dt.Columns.Add("StockPM");
            dt.Columns.Add("StockRatePM");


            string sqry = string.Empty;
            // GET ITEM

            if (categoryselect == "All")
            {
                sqry = "select * from tblcategoryuser as cu inner join tblcategory as c on c.categoryid=cu.categoryid inner join tblCategoryuserBranch as cb on cb.Itemid=cu.ItemID where BranchCode='" + scode + "' order by cu.categoryid asc";
            }
            else
            {
                sqry = "select * from tblcategoryuser as cu inner join tblcategory as c on c.categoryid=cu.categoryid inner join tblCategoryuserBranch as cb on cb.Itemid=cu.ItemID where (" + categoryselect + ") and BranchCode='" + scode + "' order by cu.categoryid asc";
            }

            DataSet getitem = dbObj.InlineExecuteDataSet(sqry);
            if (getitem.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < getitem.Tables[0].Rows.Count; i++)
                {
                    string categoryid = getitem.Tables[0].Rows[i]["categoryid"].ToString();
                    string categoryuserid = getitem.Tables[0].Rows[i]["Categoryuserid"].ToString();
                    string definition = getitem.Tables[0].Rows[i]["definition"].ToString();
                    string category = getitem.Tables[0].Rows[i]["category"].ToString();
                    string Rate = getitem.Tables[0].Rows[i]["Rate"].ToString();

                    dr = dt.NewRow();

                    dr["GroupID"] = categoryid;
                    dr["ItemID"] = categoryuserid;
                    dr["Group"] = category;
                    dr["Item"] = definition;
                    dr["Rate"] = Rate;


                    #region GET CURRENT STOCK

                    string Scurstock = string.Empty;
                    DataSet curstock = new DataSet();

                    string curdate = DateTime.Now.ToString("yyyy-MM-dd");

                    if (curdate == date)
                    {
                        Scurstock = "select distinct subcategoryid,sum(Available_Qty) as AvlQty from tblStock_" + scode + " where SubCategoryID='" + categoryuserid + "' group by subcategoryid";
                    }
                    else if (Convert.ToDateTime(curdate) < Convert.ToDateTime(date))
                    {
                        Scurstock = "select distinct subcategoryid,sum(Available_Qty) as AvlQty from tblStock_" + scode + " where SubCategoryID='" + categoryuserid + "' group by subcategoryid";
                    }
                    else
                    {
                        Scurstock = "select distinct subcategoryid, isnull(sum(Qty),0) as AvlQty from tblOpeningStock_" + scode + " where convert(date,Date)='" + extraday + "' and subcategoryid='" + categoryuserid + "' group by subcategoryid";
                    }
                    curstock = dbObj.InlineExecuteDataSet(Scurstock);

                    if (curstock.Tables[0].Rows.Count > 0)
                    {
                        dr["Available_Qty"] = curstock.Tables[0].Rows[0]["AvlQty"].ToString();
                        dr["Available_QtyRate"] = (Convert.ToDouble(curstock.Tables[0].Rows[0]["AvlQty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["Available_Qty"] = "0";
                        dr["Available_QtyRate"] = "0";
                    }
                    #endregion

                    #region GET OP_STOCK

                    string Sopstock = string.Empty;
                    DataSet opstock = new DataSet();

                    Sopstock = "select distinct subcategoryid, isnull(sum(Qty),0) as OpQty from tblOpeningStock_" + scode + "  where convert(date,Date)='" + date + "' and subcategoryid='" + categoryuserid + "' " +
                               " group by subcategoryid";

                    opstock = dbObj.InlineExecuteDataSet(Sopstock);

                    if (opstock.Tables[0].Rows.Count > 0)
                    {
                        dr["OpeningStock"] = opstock.Tables[0].Rows[0]["OpQty"].ToString();
                        dr["OpeningStockRate"] = (Convert.ToDouble(opstock.Tables[0].Rows[0]["OpQty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["OpeningStock"] = "0";
                        dr["OpeningStockRate"] = "0";
                    }
                    #endregion

                    #region GET GRN STOCK

                    string SGRNSTOCK = string.Empty;
                    DataSet GRNSTOCK = new DataSet();


                    SGRNSTOCK = " select distinct CategoryUserID,sum(GRN_Qty) as GRNQty from tblgrn  where  cast(Date as Date) = '" + date + "' and categoryuserid='" + categoryuserid + "'  " +
                                " group by CategoryUserID ";
                    GRNSTOCK = dbObj.InlineExecuteDataSet(SGRNSTOCK);

                    if (GRNSTOCK.Tables[0].Rows.Count > 0)
                    {
                        dr["GRNQty"] = GRNSTOCK.Tables[0].Rows[0]["GRNQty"].ToString();
                        dr["GRNQtyRate"] = (Convert.ToDouble(GRNSTOCK.Tables[0].Rows[0]["GRNQty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["GRNQty"] = "0";
                        dr["GRNQtyRate"] = "0";
                    }
                    #endregion

                    #region GET GRN STOCK (PLUS)

                    string SGRNSTOCKP = string.Empty;
                    DataSet GRNSTOCKP = new DataSet();


                    SGRNSTOCKP = " select distinct CategoryUserID,sum(GRN_Qty) as GRNQty from tblGRNmp  where signa='+' and   cast(Date as Date) = '" + date + "' and categoryuserid='" + categoryuserid + "'  " +
                                " group by CategoryUserID ";
                    GRNSTOCKP = dbObj.InlineExecuteDataSet(SGRNSTOCKP);

                    if (GRNSTOCKP.Tables[0].Rows.Count > 0)
                    {
                        dr["GRNQtyP"] = GRNSTOCKP.Tables[0].Rows[0]["GRNQty"].ToString();
                        dr["GRNQtyRateP"] = (Convert.ToDouble(GRNSTOCKP.Tables[0].Rows[0]["GRNQty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["GRNQtyP"] = "0";
                        dr["GRNQtyRateP"] = "0";
                    }
                    #endregion

                    #region GET GRN STOCK (MINUS)

                    string SGRNSTOCKM = string.Empty;
                    DataSet GRNSTOCKM = new DataSet();


                    SGRNSTOCKM = " select distinct CategoryUserID,sum(GRN_Qty) as GRNQty from tblGRNmp  where signa='-' and  cast(Date as Date) = '" + date + "' and categoryuserid='" + categoryuserid + "'  " +
                                " group by CategoryUserID ";
                    GRNSTOCKM = dbObj.InlineExecuteDataSet(SGRNSTOCKM);

                    if (GRNSTOCKM.Tables[0].Rows.Count > 0)
                    {
                        dr["GRNQtyM"] = GRNSTOCKM.Tables[0].Rows[0]["GRNQty"].ToString();
                        dr["GRNQtyRateM"] = (Convert.ToDouble(GRNSTOCKM.Tables[0].Rows[0]["GRNQty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["GRNQtyM"] = "0";
                        dr["GRNQtyRateM"] = "0";
                    }
                    #endregion

                    #region GET SALESTOCK

                    string SALSTOCK = string.Empty;
                    DataSet SALESTOCK = new DataSet();

                    SALSTOCK = "select distinct SubCategoryID,SUM(quantity) as SLEQty from tblTransSales_" + scode + " a,tblsales_" + scode + " b  " +
                              " where b.billno=a.salesid and b.salesid=a.salesuniqueid and cancelstatus='No' and convert(date,billdate)='" + date + "' and subcategoryid='" + categoryuserid + "' " +
                              " group by SubCategoryID";
                    SALESTOCK = dbObj.InlineExecuteDataSet(SALSTOCK);

                    if (SALESTOCK.Tables[0].Rows.Count > 0)
                    {
                        dr["SalesQty"] = SALESTOCK.Tables[0].Rows[0]["SLEQty"].ToString();
                        dr["SalesQtyRate"] = (Convert.ToDouble(SALESTOCK.Tables[0].Rows[0]["SLEQty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["SalesQty"] = "0";
                        dr["SalesQtyRate"] = "0";
                    }
                    #endregion

                    #region GET RETURN

                    string clsstock = string.Empty;
                    DataSet getclose = new DataSet();

                    clsstock = " select distinct b.subcategoryid, sum(b.Quantity) as RETQty from tblreturn_" + scode + " a,tbltransreturn_" + scode + " b  " +
                               " where a.retno=b.retno and convert(date,Retdate)='" + date + "' and b.subcategoryid='" + categoryuserid + "' group by b.subcategoryid";
                    getclose = dbObj.InlineExecuteDataSet(clsstock);

                    if (getclose.Tables[0].Rows.Count > 0)
                    {
                        dr["Return"] = getclose.Tables[0].Rows[0]["RETQty"].ToString();
                        dr["ReturnRate"] = (Convert.ToDouble(getclose.Tables[0].Rows[0]["RETQty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["Return"] = "0";
                        dr["ReturnRate"] = "0";
                    }

                    #endregion

                    double TOTGRN = 0;
                    double TOTQty = 0;
                    double TOT = 0;

                    TOTGRN = Convert.ToDouble(dr["GRNQty"]) + (Convert.ToDouble(dr["GRNQtyP"]) - Convert.ToDouble(dr["GRNQtyM"])) + Convert.ToDouble(dr["OpeningStock"]);

                    TOTQty = Convert.ToDouble(dr["Return"]) + Convert.ToDouble(dr["SalesQty"]) + Convert.ToDouble(dr["Available_Qty"]);

                    TOT = TOTGRN - TOTQty;

                    dr["StockPM"] = TOTGRN - TOTQty;
                    dr["StockRatePM"] = (Convert.ToDouble((TOT)) * Convert.ToDouble(Rate)).ToString();

                    //ClosingStockType,DisplayType

                    if (ClosingStockType == "All")
                    {
                        #region ClosingStockType
                        if (stockchktype == "0")
                        {
                            dt.Rows.Add(dr);
                        }
                        else if (stockchktype == "1")
                        {

                            if (TOT >= 1)
                            {
                                dt.Rows.Add(dr);
                            }
                        }
                        else if (stockchktype == "2")
                        {

                            if (TOT < 0)
                            {
                                dt.Rows.Add(dr);
                            }
                        }
                        else if (stockchktype == "3")
                        {

                            if (TOT == 0)
                            {
                                dt.Rows.Add(dr);
                            }
                        }

                        #endregion
                    }
                    else if (ClosingStockType == "1")
                    {
                        double Allow = 0;
                        if (curstock.Tables[0].Rows.Count > 0)
                        {
                            Allow = Convert.ToDouble(curstock.Tables[0].Rows[0]["AvlQty"].ToString());
                        }

                        #region ClosingStockType

                        if (Allow == 0)
                        {
                            if (stockchktype == "0")
                            {
                                dt.Rows.Add(dr);
                            }
                            else if (stockchktype == "1")
                            {

                                if (TOT >= 1)
                                {
                                    dt.Rows.Add(dr);
                                }
                            }
                            else if (stockchktype == "2")
                            {

                                if (TOT < 0)
                                {
                                    dt.Rows.Add(dr);
                                }
                            }
                            else if (stockchktype == "3")
                            {

                                if (TOT == 0)
                                {
                                    dt.Rows.Add(dr);
                                }
                            }
                        }
                        #endregion

                    }
                    else if (ClosingStockType == "2")
                    {
                        if (curstock.Tables[0].Rows.Count > 0)
                        {
                            #region ClosingStockType

                            if (Convert.ToDouble(curstock.Tables[0].Rows[0]["AvlQty"].ToString()) != 0)
                            {
                                if (stockchktype == "0")
                                {
                                    dt.Rows.Add(dr);
                                }
                                else if (stockchktype == "1")
                                {

                                    if (TOT >= 1)
                                    {
                                        dt.Rows.Add(dr);
                                    }
                                }
                                else if (stockchktype == "2")
                                {

                                    if (TOT < 0)
                                    {
                                        dt.Rows.Add(dr);
                                    }
                                }
                                else if (stockchktype == "3")
                                {

                                    if (TOT == 0)
                                    {
                                        dt.Rows.Add(dr);
                                    }
                                }
                            }
                            #endregion
                        }
                    }
                }
            }


            return dt;

        }



        public DataTable dElobratedClosingStockstore(string stable, int userid, string date, string scode, string categoryselect, string stockchktype, string ClosingStockType)
        {
            DataTable dt = new DataTable();

            DateTime addday = Convert.ToDateTime(date).AddDays(1);

            string extraday = addday.ToString("yyyy-MM-dd");

            DataRow dr;
            dt.Columns.Add("GroupID");
            dt.Columns.Add("ItemID");
            dt.Columns.Add("Group");
            dt.Columns.Add("Item");
            dt.Columns.Add("Rate");
            dt.Columns.Add("OpeningStock");
            dt.Columns.Add("OpeningStockRate");
            dt.Columns.Add("GRNQty");
            dt.Columns.Add("GRNQtyRate");

            dt.Columns.Add("TRAQty");
            dt.Columns.Add("TRAQtyRate");

            dt.Columns.Add("GRNQtyP");
            dt.Columns.Add("GRNQtyRateP");

            dt.Columns.Add("GRNQtyM");
            dt.Columns.Add("GRNQtyRateM");


            dt.Columns.Add("Available_Qty");
            dt.Columns.Add("Available_QtyRate");
            dt.Columns.Add("SalesQty");
            dt.Columns.Add("SalesQtyRate");
            dt.Columns.Add("Return");
            dt.Columns.Add("ReturnRate");
            dt.Columns.Add("ClosingStock");
            dt.Columns.Add("ClosingStockRate");

            dt.Columns.Add("StockPM");
            dt.Columns.Add("StockRatePM");


            string sqry = string.Empty;
            // GET ITEM

            if (categoryselect == "All")
            {
                // sqry = "select * from tblcategoryuser as cu inner join tblcategory as c on c.categoryid=cu.categoryid inner join tblCategoryuserBranch as cb on cb.Itemid=cu.ItemID where BranchCode='" + scode + "' order by cu.categoryid asc";
                sqry = "select * from tblingridents as a inner join tblingridentscategory as b on b.IngCatID=a.IngCatID order by b.IngreCategory asc ";
            }
            else
            {
                // sqry = "select * from tblcategoryuser as cu inner join tblcategory as c on c.categoryid=cu.categoryid inner join tblCategoryuserBranch as cb on cb.Itemid=cu.ItemID where (" + categoryselect + ") and BranchCode='" + scode + "' order by cu.categoryid asc";
                sqry = "select * from tblingridents as a inner join tblingridentscategory as b on b.IngCatID=a.IngCatID  where  (" + categoryselect + ") order by b.IngreCategory asc ";
            }

            DataSet getitem = dbObj.InlineExecuteDataSet(sqry);
            if (getitem.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < getitem.Tables[0].Rows.Count; i++)
                {
                    string categoryid = getitem.Tables[0].Rows[i]["IngCatID"].ToString();
                    string categoryuserid = getitem.Tables[0].Rows[i]["IngridID"].ToString();
                    string definition = getitem.Tables[0].Rows[i]["IngredientName"].ToString();
                    string category = getitem.Tables[0].Rows[i]["IngreCategory"].ToString();
                    string Rate = "0";
                    string sqryrate = "select * from tblRawMatlStock_" + scode + " where IngredientID='" + categoryuserid + "' ";
                    DataSet dsrate = dbObj.InlineExecuteDataSet(sqryrate);
                    if (dsrate.Tables[0].Rows.Count > 0)
                    {
                        Rate = Convert.ToDouble(dsrate.Tables[0].Rows[0]["Rate"]).ToString("0.00");
                    }
                    else
                    {
                        Rate = "0";
                    }

                    dr = dt.NewRow();

                    dr["GroupID"] = categoryid;
                    dr["ItemID"] = categoryuserid;
                    dr["Group"] = category;
                    dr["Item"] = definition;
                    dr["Rate"] = Rate;


                    #region GET CURRENT STOCK

                    string Scurstock = string.Empty;
                    DataSet curstock = new DataSet();

                    string curdate = DateTime.Now.ToString("yyyy-MM-dd");

                    if (curdate == date)
                    {
                        Scurstock = "select distinct IngredientID,sum(Qty) as AvlQty from tblRawMatlStock_" + scode + " where IngredientID='" + categoryuserid + "' group by IngredientID";
                    }
                    else if (Convert.ToDateTime(curdate) < Convert.ToDateTime(date))
                    {
                        Scurstock = "select distinct IngredientID,sum(Qty) as AvlQty from tblRawMatlStock_" + scode + " where IngredientID='" + categoryuserid + "' group by IngredientID";
                    }
                    else
                    {
                        Scurstock = "select distinct subcategoryid, isnull(sum(Qty),0) as AvlQty from tblOpeningStockstore_" + scode + " where convert(date,Date)='" + extraday + "' and subcategoryid='" + categoryuserid + "' group by subcategoryid";
                    }
                    curstock = dbObj.InlineExecuteDataSet(Scurstock);

                    if (curstock.Tables[0].Rows.Count > 0)
                    {
                        dr["Available_Qty"] = curstock.Tables[0].Rows[0]["AvlQty"].ToString();
                        dr["Available_QtyRate"] = (Convert.ToDouble(curstock.Tables[0].Rows[0]["AvlQty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["Available_Qty"] = "0";
                        dr["Available_QtyRate"] = "0";
                    }
                    #endregion

                    #region GET OP_STOCK

                    string Sopstock = string.Empty;
                    DataSet opstock = new DataSet();

                    Sopstock = "select distinct subcategoryid, isnull(sum(Qty),0) as OpQty from tblOpeningStockstore_" + scode + "  where convert(date,Date)='" + date + "' and subcategoryid='" + categoryuserid + "' " +
                               " group by subcategoryid";

                    opstock = dbObj.InlineExecuteDataSet(Sopstock);

                    if (opstock.Tables[0].Rows.Count > 0)
                    {
                        dr["OpeningStock"] = opstock.Tables[0].Rows[0]["OpQty"].ToString();
                        dr["OpeningStockRate"] = (Convert.ToDouble(opstock.Tables[0].Rows[0]["OpQty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["OpeningStock"] = "0";
                        dr["OpeningStockRate"] = "0";
                    }
                    #endregion

                    #region GET GRN STOCK

                    string SGRNSTOCK = string.Empty;
                    DataSet GRNSTOCK = new DataSet();


                    // SGRNSTOCK = " select distinct CategoryUserID,sum(GRN_Qty) as GRNQty from tblgrn  where  cast(Date as Date) = '" + date + "' and categoryuserid='" + categoryuserid + "'  " +
                    //           " group by CategoryUserID ";

                    SGRNSTOCK = "select distinct DescriptionId,isnull(sum(Received_Qty),0) as GRNQty from tblGoodTransfer_" + scode + " as a inner join tbltransGoodsTransfer_" + scode + " as b on a.dc_no=b.DC_no where cast(a.Dc_Date as Date)='" + date + "' and b.DescriptionId='" + categoryuserid + "' group by b.DescriptionId";

                    GRNSTOCK = dbObj.InlineExecuteDataSet(SGRNSTOCK);

                    if (GRNSTOCK.Tables[0].Rows.Count > 0)
                    {
                        dr["GRNQty"] = GRNSTOCK.Tables[0].Rows[0]["GRNQty"].ToString();
                        dr["GRNQtyRate"] = (Convert.ToDouble(GRNSTOCK.Tables[0].Rows[0]["GRNQty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["GRNQty"] = "0";
                        dr["GRNQtyRate"] = "0";
                    }
                    #endregion


                    #region GET TRANSFER STOCK

                    string STRASTOCK = string.Empty;
                    DataSet TRASTOCK = new DataSet();


                    // SGRNSTOCK = " select distinct CategoryUserID,sum(GRN_Qty) as GRNQty from tblgrn  where  cast(Date as Date) = '" + date + "' and categoryuserid='" + categoryuserid + "'  " +
                    //           " group by CategoryUserID ";

                    //SGRNSTOCK = "select distinct DescriptionId,isnull(sum(Received_Qty),0) as GRNQty from tblGoodTransfer_" + scode + " as a inner join tbltransGoodsTransfer_" + scode + " as b on a.dc_no=b.DC_no where cast(a.Dc_Date as Date)='" + date + "' and b.DescriptionId='" + categoryuserid + "' group by b.DescriptionId";
                    STRASTOCK = " select distinct rawitemid, isnull(sum(acceptqty),0) as Qty from tblAcceptRawMaterials_" + scode + " as a  " +
                                " inner join tbltransAcceptRawItem_" + scode + " as b on b.requestid=a.requestno where cast(requestdate as Date)='" + date + "' and b.rawitemid='" + categoryuserid + "'  " +
                                " group by rawitemid";

                    TRASTOCK = dbObj.InlineExecuteDataSet(STRASTOCK);

                    if (TRASTOCK.Tables[0].Rows.Count > 0)
                    {
                        dr["TRAQty"] = TRASTOCK.Tables[0].Rows[0]["Qty"].ToString();
                        dr["TRAQtyRate"] = (Convert.ToDouble(TRASTOCK.Tables[0].Rows[0]["Qty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["TRAQty"] = "0";
                        dr["TRAQtyRate"] = "0";
                    }
                    #endregion

                    #region GET GRN STOCK (PLUS)

                    string SGRNSTOCKP = string.Empty;
                    DataSet GRNSTOCKP = new DataSet();


                    // SGRNSTOCKP = " select distinct CategoryUserID,sum(GRN_Qty) as GRNQty from tblGRNmp  where signa='+' and  cast(Date as Date) = '" + date + "' and categoryuserid='" + categoryuserid + "'  " +
                    //           " group by CategoryUserID ";
                   // Shanthi for datetime error SGRNSTOCKP = "select distinct itemid,sum(stock) as GRNQty from tblPhysicalstock_" + scode + " where stock > 0 and cast(Date as Date)='" + date + "' and itemid='" + categoryuserid + "' group by itemid";
                    SGRNSTOCKP = "select distinct itemid,sum(stock) as GRNQty from tblPhysicalstock_" + scode + " where stock > 0 and  Date='" + date + "' and itemid='" + categoryuserid + "' group by itemid";

                    GRNSTOCKP = dbObj.InlineExecuteDataSet(SGRNSTOCKP);

                    if (GRNSTOCKP.Tables[0].Rows.Count > 0)
                    {
                        dr["GRNQtyP"] = GRNSTOCKP.Tables[0].Rows[0]["GRNQty"].ToString();
                        dr["GRNQtyRateP"] = (Convert.ToDouble(GRNSTOCKP.Tables[0].Rows[0]["GRNQty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["GRNQtyP"] = "0";
                        dr["GRNQtyRateP"] = "0";
                    }
                    #endregion

                    #region GET GRN STOCK (MINUS)

                    string SGRNSTOCKM = string.Empty;
                    DataSet GRNSTOCKM = new DataSet();


                    //  SGRNSTOCKM = " select distinct CategoryUserID,sum(GRN_Qty) as GRNQty from tblGRNmp  where signa='-' and  cast(Date as Date) = '" + date + "' and categoryuserid='" + categoryuserid + "'  " +
                    //             " group by CategoryUserID ";

                    SGRNSTOCKM = "select distinct itemid,sum(stock) as GRNQty from tblPhysicalstock_" + scode + " where stock < 0 and cast(Date as Date)='" + date + "' and itemid='" + categoryuserid + "' group by itemid";

                    GRNSTOCKM = dbObj.InlineExecuteDataSet(SGRNSTOCKM);

                    if (GRNSTOCKM.Tables[0].Rows.Count > 0)
                    {
                        dr["GRNQtyM"] = GRNSTOCKM.Tables[0].Rows[0]["GRNQty"].ToString();
                        dr["GRNQtyRateM"] = (Convert.ToDouble(GRNSTOCKM.Tables[0].Rows[0]["GRNQty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["GRNQtyM"] = "0";
                        dr["GRNQtyRateM"] = "0";
                    }
                    #endregion

                    #region GET SALESTOCK

                    string SALSTOCK = string.Empty;
                    DataSet SALESTOCK = new DataSet();

                    SALSTOCK = "select distinct IngredientID as SubCategoryID,SUM(qty) as SLEQty from tbltranskitchensales_" + scode + " a,tblkitchensales_" + scode + " b  " +
                              " where b.salesid=a.salesid  " +
                              " and convert(date,billdate)='" + date + "' and IngredientID='" + categoryuserid + "' " +
                              " group by IngredientID";
                    SALESTOCK = dbObj.InlineExecuteDataSet(SALSTOCK);

                    if (SALESTOCK.Tables[0].Rows.Count > 0)
                    {
                        dr["SalesQty"] = SALESTOCK.Tables[0].Rows[0]["SLEQty"].ToString();
                        dr["SalesQtyRate"] = (Convert.ToDouble(SALESTOCK.Tables[0].Rows[0]["SLEQty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["SalesQty"] = "0";
                        dr["SalesQtyRate"] = "0";
                    }
                    #endregion

                    #region GET RETURN

                    string clsstock = string.Empty;
                    DataSet getclose = new DataSet();

                    clsstock = " select distinct b.IngredientID, sum(b.Qty) as RETQty from tblkitchenPurchaseReturn_" + scode + " a,tbltranskitchenPurchaseReturn_" + scode + " b  " +
                               " where a.PurchaseRtnID=b.PurchaseRtnID and convert(date,PurchaseRtnDate)='" + date + "' and b.IngredientID='" + categoryuserid + "' group by b.IngredientID";
                    getclose = dbObj.InlineExecuteDataSet(clsstock);

                    if (getclose.Tables[0].Rows.Count > 0)
                    {
                        dr["Return"] = getclose.Tables[0].Rows[0]["RETQty"].ToString();
                        dr["ReturnRate"] = (Convert.ToDouble(getclose.Tables[0].Rows[0]["RETQty"]) * Convert.ToDouble(Rate)).ToString();

                    }
                    else
                    {
                        dr["Return"] = "0";
                        dr["ReturnRate"] = "0";
                    }

                    #endregion

                    double TOTGRN = 0;
                    double TOTQty = 0;
                    double TOT = 0;

                    TOTGRN = Convert.ToDouble(dr["GRNQtyP"]) + (Convert.ToDouble(dr["GRNQty"]) - Convert.ToDouble(dr["GRNQtyM"]) - Convert.ToDouble(dr["TRAQty"])) + Convert.ToDouble(dr["OpeningStock"]);

                    TOTQty = Convert.ToDouble(dr["Return"]) + Convert.ToDouble(dr["SalesQty"]) + Convert.ToDouble(dr["Available_Qty"]);

                    TOT = TOTGRN - TOTQty;

                    dr["StockPM"] = TOTGRN - TOTQty;
                    dr["StockRatePM"] = (Convert.ToDouble((TOT)) * Convert.ToDouble(Rate)).ToString();

                    //ClosingStockType,DisplayType

                    if (ClosingStockType == "All")
                    {
                        #region ClosingStockType
                        if (stockchktype == "0")
                        {
                            dt.Rows.Add(dr);
                        }
                        else if (stockchktype == "1")
                        {

                            if (TOT >= 1)
                            {
                                dt.Rows.Add(dr);
                            }
                        }
                        else if (stockchktype == "2")
                        {

                            if (TOT < 0)
                            {
                                dt.Rows.Add(dr);
                            }
                        }
                        else if (stockchktype == "3")
                        {

                            if (TOT == 0)
                            {
                                dt.Rows.Add(dr);
                            }
                        }

                        #endregion
                    }
                    else if (ClosingStockType == "1")
                    {
                        double Allow = 0;
                        if (curstock.Tables[0].Rows.Count > 0)
                        {
                            Allow = Convert.ToDouble(curstock.Tables[0].Rows[0]["AvlQty"].ToString());
                        }

                        #region ClosingStockType

                        if (Allow == 0)
                        {
                            if (stockchktype == "0")
                            {
                                dt.Rows.Add(dr);
                            }
                            else if (stockchktype == "1")
                            {

                                if (TOT >= 1)
                                {
                                    dt.Rows.Add(dr);
                                }
                            }
                            else if (stockchktype == "2")
                            {

                                if (TOT < 0)
                                {
                                    dt.Rows.Add(dr);
                                }
                            }
                            else if (stockchktype == "3")
                            {

                                if (TOT == 0)
                                {
                                    dt.Rows.Add(dr);
                                }
                            }
                        }
                        #endregion

                    }
                    else if (ClosingStockType == "2")
                    {
                        if (curstock.Tables[0].Rows.Count > 0)
                        {
                            #region ClosingStockType

                            if (Convert.ToDouble(curstock.Tables[0].Rows[0]["AvlQty"].ToString()) != 0)
                            {
                                if (stockchktype == "0")
                                {
                                    dt.Rows.Add(dr);
                                }
                                else if (stockchktype == "1")
                                {

                                    if (TOT >= 1)
                                    {
                                        dt.Rows.Add(dr);
                                    }
                                }
                                else if (stockchktype == "2")
                                {

                                    if (TOT < 0)
                                    {
                                        dt.Rows.Add(dr);
                                    }
                                }
                                else if (stockchktype == "3")
                                {

                                    if (TOT == 0)
                                    {
                                        dt.Rows.Add(dr);
                                    }
                                }
                            }
                            #endregion
                        }
                    }
                }
            }


            return dt;

        }


        public DataTable dElobratedGRN(string stable, int userid, string date, string scode)
        {
            DataTable dt = new DataTable();

            DataRow dr;
            dt.Columns.Add("GroupID");
            dt.Columns.Add("ItemID");
            dt.Columns.Add("Group");
            dt.Columns.Add("Item");
            dt.Columns.Add("OpeningStock");
            dt.Columns.Add("GRNQty");
            dt.Columns.Add("Available_Qty");
            dt.Columns.Add("SalesQty");
            dt.Columns.Add("Return");
            dt.Columns.Add("ClosingStock");

            DataSet ds = new DataSet();

            string sQry = "select distinct a.categoryid,c.categoryuserid,b.category,c.definition,sum(a.Available_Qty)  as Available_Qty  from tblstock_" + stable + " a,tblcategory b ,tblcategoryuser c where a.categoryid=b.categoryid and a.subcategoryid=c.categoryuserid and a.Available_Qty>=0 and a.categoryid<>11 and  a.categoryid<>12 group by a.categoryid,c.categoryuserid,b.category,c.definition";
            ds = dbObj.InlineExecuteDataSet(sQry);

            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                dr = dt.NewRow();

                dr["GroupID"] = ds.Tables[0].Rows[i]["categoryid"].ToString();
                dr["ItemID"] = ds.Tables[0].Rows[i]["categoryuserid"].ToString();
                dr["Group"] = ds.Tables[0].Rows[i]["category"].ToString();
                dr["Item"] = ds.Tables[0].Rows[i]["definition"].ToString();

                dr["ClosingStock"] = Convert.ToDecimal(ds.Tables[0].Rows[i]["Available_Qty"]).ToString("f0");

                dt.Rows.Add(dr);

            }





            DataSet grn = new DataSet();
            string sGRN = "";
            if (scode == "BY" || scode == "KK")
            {
                sGRN = "select distinct descriptionid as CategoryUserID  , sum(b.Received_Qty) as Qty from tblgoodtransfer a,tbltransgoodstransfer b where a.Dc_no=b.dc_no  and convert(date,a.DC_date)  ='" + date + "' and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid  union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'   group by CategoryUserID ";
            }
            else if (scode == "NP" || scode == "BB")
            {
                sGRN = "select distinct descriptionid as CategoryUserID ,sum(b.Received_Qty) as Qty from tblgoodtransfer2 a,tbltransgoodstransfer2 b where a.Dc_no=b.dc_no  and convert(date,a.DC_date) = '" + date + "'  and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid   union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'    group by CategoryUserID ";
            }
            else if (scode == "NE")
            {
                sGRN = "select distinct descriptionid as CategoryUserID ,sum(b.Received_Qty) as Qty from tblgoodtransfer3 a,tbltransgoodstransfer3 b where a.Dc_no=b.dc_no  and convert(date,a.DC_date) = '" + date + "'  and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid   union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'    group by CategoryUserID ";

            }

            else if (scode == "MD")
            {
                sGRN = "select distinct descriptionid as CategoryUserID ,sum(b.Received_Qty) as Qty from tblgoodtransfer4 a,tbltransgoodstransfer4 b where a.Dc_no=b.dc_no  and convert(date,a.DC_date) = '" + date + "'  and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid   union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'    group by CategoryUserID ";

            }

            else if (scode == "PU")
            {
                sGRN = "select distinct descriptionid as CategoryUserID ,sum(b.Received_Qty) as Qty from tblgoodtransfer4 a,tbltransgoodstransfer4 b where a.Dc_no=b.dc_no  and convert(date,a.DC_date) = '" + date + "'  and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid   union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'    group by CategoryUserID ";

            }

            else if (scode == "CH")
            {
                sGRN = "select distinct descriptionid as CategoryUserID ,sum(b.Received_Qty) as Qty from tblgoodtransfer4 a,tbltransgoodstransfer4 b where a.Dc_no=b.dc_no  and convert(date,a.DC_date) = '" + date + "'  and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid   union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'    group by CategoryUserID ";

            }

            else if (scode == "TH")
            {
                sGRN = "select distinct descriptionid as CategoryUserID ,sum(b.Received_Qty) as Qty from tblgoodtransfer4 a,tbltransgoodstransfer4 b where a.Dc_no=b.dc_no  and convert(date,a.DC_date) = '" + date + "'  and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid   union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'    group by CategoryUserID ";

            }
            else if (scode == "PER")
            {
                sGRN = "select distinct descriptionid as CategoryUserID ,sum(b.Received_Qty) as Qty from tblgoodtransfer4 a,tbltransgoodstransfer4 b where a.Dc_no=b.dc_no  and convert(date,a.DC_date) = '" + date + "'  and a.Branch='" + scode + "' and a.branchcode=a.branchcode and b.isstocked=1 group by descriptionid   union all  select distinct CategoryUserID,sum(GRN_Qty) as Qty from tblgrn  where UserID=" + userid + " and cast(Date as Date) = '" + date + "'    group by CategoryUserID ";

            }
            //sGRN = "select distinct CategoryUserID ,SUM(GRN_Qty) as Qty from tblgrn  where convert(date,date)='"+date+"' and Userid="+userid+" group by CategoryUserID ";

            grn = dbObj.InlineExecuteDataSet(sGRN);



            for (int g = 0; g < grn.Tables[0].Rows.Count; g++)
            {
                foreach (DataRow gr in dt.Rows)
                {
                    if (gr["ItemID"].ToString() == grn.Tables[0].Rows[g]["CategoryUserID"].ToString())
                    {
                        if (grn.Tables[0].Rows[g]["Qty"].ToString() != "")
                            gr["GRNQty"] = Convert.ToDecimal(grn.Tables[0].Rows[g]["Qty"]).ToString("f0");
                        else
                            gr["GRNQty"] = "0";



                    }
                }
            }

            DataSet dsales = new DataSet();

            string sSales = "select distinct SubCategoryID,SUM(quantity) as Qty from tblTransSales_" + stable + " a,tblsales_" + stable + " b where b.billno=a.salesid and cancelstatus='No' and convert(date,billdate)='" + date + "' group by SubCategoryID";

            dsales = dbObj.InlineExecuteDataSet(sSales);

            for (int s = 0; s < dsales.Tables[0].Rows.Count; s++)
            {
                foreach (DataRow sales in dt.Rows)
                {
                    if (sales["ItemID"].ToString() == dsales.Tables[0].Rows[s]["SubCategoryID"].ToString())
                    {
                        if (dsales.Tables[0].Rows[s]["Qty"].ToString() != "")
                            sales["SalesQty"] = Convert.ToDecimal(dsales.Tables[0].Rows[s]["Qty"]).ToString("f0");
                        else
                            sales["SalesQty"] = "0";

                        //decimal TOT = Convert.ToDecimal(dsales.Tables[0].Rows[s]["Qty"].ToString()) + Convert.ToDecimal(sales["ClosingStock"].ToString());

                        //sales["OpeningStock"] = TOT.ToString("f0");


                    }
                }
            }




            DataSet Return = new DataSet();

            string ret = "select distinct b.subcategoryid, sum(b.Quantity) as Qty from tblreturn_" + stable + " a,tbltransreturn_" + stable + " b where a.retno=b.retno and convert(date,Retdate)='" + date + "' group by b.subcategoryid";

            Return = dbObj.InlineExecuteDataSet(ret);

            for (int r = 0; r < Return.Tables[0].Rows.Count; r++)
            {
                foreach (DataRow gr in dt.Rows)
                {
                    if (gr["ItemID"].ToString() == Return.Tables[0].Rows[r]["subcategoryid"].ToString())
                    {
                        if (Return.Tables[0].Rows[r]["Qty"].ToString() != "")
                            gr["Return"] = Return.Tables[0].Rows[r]["Qty"].ToString();
                        else
                            gr["Return"] = "0";

                    }
                }
            }


            DataSet Opening = new DataSet();

            string op = "select distinct subcategoryid, sum(Qty) as Qty from tblOpeningStock_" + stable + "  where convert(date,Date)='" + date + "' group by subcategoryid";

            Opening = dbObj.InlineExecuteDataSet(op);

            for (int r = 0; r < Opening.Tables[0].Rows.Count; r++)
            {
                foreach (DataRow gr in dt.Rows)
                {
                    if (gr["ItemID"].ToString() == Opening.Tables[0].Rows[r]["subcategoryid"].ToString())
                    {
                        if (Opening.Tables[0].Rows[r]["Qty"].ToString() != "")
                            gr["OpeningStock"] = Convert.ToDecimal(Opening.Tables[0].Rows[r]["Qty"]).ToString("f0");
                        else
                            gr["OpeningStock"] = "0";

                    }
                }
            }

            foreach (DataRow sales in dt.Rows)
            {
                decimal sal = 0; decimal clos = 0; decimal gr = 0; decimal Ret = 0;
                //if (sales["SalesQty"].ToString() != "")
                //{
                //    sal = Convert.ToDecimal(sales["SalesQty"].ToString());
                //}
                if (sales["OpeningStock"].ToString() != "")
                {
                    clos = Convert.ToDecimal(sales["OpeningStock"].ToString());
                }
                if (sales["GRNQty"].ToString() != "")
                {
                    gr = Convert.ToDecimal(sales["GRNQty"].ToString());
                }

                //if (sales["Return"].ToString() != "")
                //{
                //    Ret = Convert.ToDecimal(sales["Return"].ToString());
                //}
                decimal TOT = sal + clos + gr + Ret;



                sales["Available_Qty"] = (TOT).ToString("f0");

            }


            return dt;

        }

        public DataSet RetList(string stable, string from)
        {
            DataSet save = new DataSet();
            string sQry = "select a.RetNo,a.RetDate,b.reason as Reason from tblreturn_" + stable + " a, tblreason b where a.ipaymode=b.reasonid  and convert(date,a.RetDate)='" + from + "'";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet SessionlistReport(string stable, string from)
        {
            DataSet save = new DataSet();
            string sQry = "SELECT SUM(cash) as Cash ,Mode,session   FROM tblsession_" + stable + " "
 + " where convert(date,Datetime)='" + from + "'  group by mode,session ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public DataSet RetListItems(string stable, int No)
        {
            DataSet save = new DataSet();
            string sQry = "select b.TransRetId,c.Definition,b.Quantity,b.Amount,b.RetNo,case a.iPayMode  when 1 then 'Wastage' when 2 then 'DateBar' when 3 then 'Excess Return' when 4 then 'Damage' when 5 then 'Wrong GRN' when 6 then 'shortage'  when 7 then 'Fungus'   when 8 then 'Fungus Before Date' when 9 then 'To Production' when 10 then 'Return To Production(Recycle)' when 11 then 'staff consumed' when 12 then  'To pothys' when 13 then  'Stock (+)(-)' when 14 then  'Stock Shift' when 15 then  'Stock Consumed' end as Reason,case a.UserId when 5 then 'KK nagar' when 6 then 'Byepass' when 7 then 'BB Kulam' when 11 then 'N-Puram' end as Store  from tblReturn_" + stable + " a,tblTransReturn_" + stable + " b,tblCategoryUser c,tblcategory d where c.categoryid=d.categoryid and a.RetNo=b.RetNo and b.SubCategoryID=c.CategoryUserID and b.retno=" + No + " order by a.RetNo  ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }



        public int UpdateReason(string stable, int No, int pay, int Reasonsid)
        {
            int iupdate = 0;
            string sQry = "update tblReturn_" + stable + " set iPaymode=" + pay + ",Reasonsid=" + Reasonsid + " where RetNo=" + No + "";
            iupdate = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "update tblReturnProd_" + stable + " set iPaymode=" + pay + ",Reasonsid=" + Reasonsid + " where LocalRetNo=" + No + " and LocalBranch='" + stable + "' ";
            iupdate = dbObj.InlineExecuteNonQueryMain(sQry1);

            return iupdate;
        }




        public int dayclosername(string name, int userid)
        {
            int iupdate = 0;
            string sQry = "update tbllogin set User1=getdate(),user2='" + name + "' where userid=" + userid + "";
            iupdate = dbObj.InlineExecuteNonQuery(sQry);
            return iupdate;
        }



        public DataSet getNo(string stable, int No)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblReturn_" + stable + " where RetNo=" + No + "";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public DataSet Waite(string stable)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblworkers where location ='" + stable + "' ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet Cashier(string stable)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblworkers where location ='" + stable + "' and Role='Cash' ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public DataSet Paymodevalues(string stable)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblsalespaymode where Branch=0 order by orderwise desc ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public DataSet chkpaymodedisc(string paymodeid)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblsalespaymode where value=" + paymodeid + " ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet chkdiscvalue()
        {
            DataSet save = new DataSet();
            string sQry = "select * from tbldiscountmaster where IsActive='Yes' ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet getdiscvalue(string attedner)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblattenderdisc where AttenderId='" + attedner + "'  ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet PaymodevaluesNew(string sid)
        {
            DataSet save = new DataSet();
            string sQry = "select * from  tbltranssalestype as ts inner join tblsalespaymode as s on s.value=ts.value   where salestypeid='" + sid + "' order by s.orderwise desc ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet Paymodevalues123(string stable)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblsalespaymode where BranchCode='" + stable + "'";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;
        }

        public DataSet Paymodevalues1231(string stable)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblsalespaymode where Branch =1 and BranchCode <>'" + stable + "'";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;
        }

        public DataSet ListofWaiters()
        {
            DataSet save = new DataSet();
            string sQry = "select empid,name,Role,code,case location when 'co1' then 'kk' when 'co2' then 'BY' when 'co3' then 'BBk' when 'co4' then 'NP' when 'co5' then 'Nellai' when 'co6' then 'CHMDU' when 'co7' then 'CHPU' when 'Pro' then 'Production' end as Location from tblworkers ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public int Insertworker(string name, string Role, string table, string code)
        {
            int iupdate = 0;
            string sQry = "insert into tblworkers(Name,Role,Location,Code)values('" + name + "','" + Role + "','" + table + "','" + code + "')";
            iupdate = dbObj.InlineExecuteNonQuery(sQry);
            return iupdate;
        }

        public int updateworker(string name, string Role, string table, string code, int id)
        {
            int iupdate = 0;
            string sQry = "update  tblworkers set Name='" + name + "',Role='" + Role + "',Location='" + table + "',Code= '" + code + "' where Empid=" + id + "";
            iupdate = dbObj.InlineExecuteNonQuery(sQry);
            return iupdate;
        }

        public int Deleteworker(int id)
        {
            int iupdate = 0;
            string sQry = "delete from  tblworkers where Empid=" + id + "";
            iupdate = dbObj.InlineExecuteNonQuery(sQry);
            return iupdate;
        }


        public DataSet Biller(string stable, string name)
        {
            DataSet save = new DataSet();
            //string sQry = "select * from tblworkers where location ='" + stable + "' and Role='Billing' and code='" + name + "'";
            string sQry = "select w.*,lt.logintypename from tblworkers as w inner join tbllogintype as lt on lt.LoginType=w.LoginType where location ='" + stable + "'  and code='" + name + "'";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }
        public DataSet SelectBiller(int id)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblworkers where empid =" + id + "";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }




        #region Dealer Sales

        public DataSet DealerList()
        {
            DataSet ds = new DataSet();
            string sQry = "select   *  from tblRegistration";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet DealerDetails(int dealerid)
        {
            DataSet ds = new DataSet();
            string sQry = "select   *  from tblRegistration where Vendorcode=" + dealerid + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet maxDealersalesNo()
        {
            DataSet save = new DataSet();
            string sQry = "select max(Billno)+1 as BillNo from tblDealerSales";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public int DealerSales(int BillNo, string billDate, int DealerID, double ExemptedTotal, double NetAmount, double VatTotal, double GrandTotal, string prepared)
        {
            int isave = 0;
            string sqry = "insert into tblDealerSales (Billno,BillDate,DealerID,ExemptedTotal,NetAmount,VatTotal,GrandTotal,Prepared) values(" + BillNo + ",'" + billDate + "'," + DealerID + "," + ExemptedTotal + "," + NetAmount + "," + VatTotal + "," + GrandTotal + ",'" + prepared + "')";
            isave = dbObj.InlineExecuteNonQuery(sqry);
            return isave;
        }



        public int TransDealerSales(int BillNo, int CategoryId, int CategoryUserID, double Rate, double Quantity, double Basic, double Margin, double Exempted, double NetAmount, double Vat, double Total)
        {
            int isave = 0;
            string sqry = "insert into tblTransDealerSales (BillNo,CategoryId,CategoryUserID,Rate,Quantity,Basic,Margin,Exempted,NetAmount,Vat,Total) values(" + BillNo + "," + CategoryId + "," + CategoryUserID + "," + Rate + "," + Quantity + "," + Basic + "," + Margin + "," + Exempted + "," + NetAmount + "," + Vat + "," + Total + ")";
            isave = dbObj.InlineExecuteNonQuery(sqry);
            return isave;
        }



        public DataSet DealerPrint(int Billno)
        {
            DataSet save = new DataSet();
            string sQry = "select *  from tblDealerSales where BillNo=" + Billno + "";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public DataSet itemlist(int Billno)
        {
            DataSet save = new DataSet();
            string sQry = "select *  from tblTransDealerSales a,tblcategory b,tblcategoryuser_Dealer c where a.BillNo=" + Billno + " and a.categoryid=b.categoryid and a.categoryuserid=c.categoryuserid";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public DataSet Dealerbillgrid()
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblDealerSales a,tblRegistration b where a.DealerID=b.VendorCode";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet Dealerbillgridsearch(int dealerid)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblDealerSales a,tblRegistration b where a.DealerID=b.VendorCode and a.dealerid=" + dealerid + "";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public DataSet DealerbillgridsearchDate(int dealerid, string from, string to)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblDealerSales a,tblRegistration b where a.DealerID=b.VendorCode and a.dealerid=" + dealerid + " and convert(date,Billdate) between '" + from + "' and '" + to + "' ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }



        public DataSet GRNSession(int userid)
        {
            DataSet ds = new DataSet();
            string sqry = "select b.category,c.definition, date as Date,GRNNo,Name,a.grn_Qty,a.type,isnull(a.requestno,0) as reqno,isnull(a.dc_no,0) as dcno from tblGrn a ,tblcategory b,tblCategoryUser c where a.CategoryID=b.categoryid and a.CategoryUserID=c.CategoryUserID and a.UserID=" + userid + " and CONVERT(date,date)=CONVERT(date,GETDATE() ) order by a.GRNNo asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet srchGRNSession(int userid, int slot)
        {
            DataSet ds = new DataSet();
            string sqry = "select  b.category,c.definition, CONVERT(date,date) as Date,GRNNo,Name,a.grn_Qty,a.type,isnull(a.requestno,0) as reqno,isnull(a.dc_no,0) as dcno from tblGrn a ,tblcategory b,tblCategoryUser c where a.CategoryID=b.categoryid and a.CategoryUserID=c.CategoryUserID and a.UserID=" + userid + " and CONVERT(date,date)=CONVERT(date,GETDATE() ) and a.GRNNo=" + slot + " order by a.GRNNo asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }




        public int MinQtySet(int catid, int itemid, decimal minqty, decimal set, int userid)
        {
            int isave = 0;
            string sqry = "insert into tblMinQty (categoryid,categoryuserid,MinQty,FixQty,userid) values(" + catid + "," + itemid + "," + minqty + "," + set + "," + userid + ")";
            isave = dbObj.InlineExecuteNonQuery(sqry);
            return isave;
        }


        public int updatesetQty(int itemid, decimal minqty, decimal set, int userid)
        {
            int isave = 0;
            string sqry = "update tblMinQty set MinQty=" + minqty + " ,FixQty=" + set + " where categoryuserid=" + itemid + " and userid=" + userid + "";
            isave = dbObj.InlineExecuteNonQuery(sqry);
            return isave;
        }


        public DataSet setQty(int itemid, int userid)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblMinQty where categoryuserid ='" + itemid + "'  and userid=" + userid + " ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public DataSet setQtyGrid(int userid)
        {
            DataSet save = new DataSet();
            string sQry = "select a.categoryuserid, b.category,c.definition,a.MinQty,a.FixQty from tblMinQty a,tblcategory b,tblcategoryuser c where a.categoryuserid=c.categoryuserid and a.categoryid=b.categoryid and userid=" + userid + " ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public int updatedayclose(int userid, string condition)
        {
            int iSuccess = 0;
            string sQry = "update tbllogin set DayClose='" + condition + "' where userid=" + userid + "";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }



        public int CrDr(decimal credit, decimal Debit, string date, int custid, string bookno, string pay, string tbl, int orderno)
        {
            int isave = 0;

            string sqry = "insert into tblAmt_" + tbl + " (Credit,Debit,Date,Customerid,Bookno,Paymode,OrderNo) values(" + credit + "," + Debit + ",'" + date + "'," + custid + ",'" + bookno + "'," + pay + "," + orderno + ")";

            isave = dbObj.InlineExecuteNonQuery(sqry);

            DataSet ds = new DataSet();
            string rec = "select isnull(max(id),0)as ID from tblAmt_" + tbl + " ";
            ds = dbObj.InlineExecuteDataSet(rec);
            isave = Convert.ToInt32(ds.Tables[0].Rows[0]["ID"].ToString());
            return isave;
        }

        public int Updstatus(string orderno, string entryname, string stablename, string statusname)
        {
            int isave = 0;

            string sqry = "update tblorder_" + stablename + " set DeliveryStatus='" + statusname + "',Deliveryby='" + entryname + "' where orderno='" + orderno + "'";

            isave = dbObj.InlineExecuteNonQuery(sqry);

            return isave;
        }

        public int UpdMSG(string orderno, string entryname, string stablename, string statusname)
        {
            int isave = 0;

            string sqry = "update tblorder_" + stablename + " set PendingMsg='" + statusname + "',PendingEntryBY='" + entryname + "' where orderno='" + orderno + "'";

            isave = dbObj.InlineExecuteNonQuery(sqry);

            return isave;
        }



        public DataSet Addless(string stabel, string date)
        {
            DataSet save = new DataSet();
            string sQry = "select sum(credit) as 'add', sum(Debit) as 'Less' from tblAmt_" + stabel + " where convert(date,date)='" + date + "'  ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;
        }

        public DataSet AddlessReport(string stabel, string from, string to)
        {
            DataSet save = new DataSet();
            string sQry = "select a.id, b.customername,a.Bookno, c.NetAmount,a.Credit,a.Debit, case debit when '0' then c.NetAmount+a.Credit end as 'Total'   from tblAmt_" + stabel + " a,tblcustomer b,tblorder_" + stabel + " c where a.Customerid=b.customerid and a.Bookno=c.BookNo and a.Debit = 0 and convert(date,date) between '" + from + "' and '" + to + "' and  a.orderno=c.orderno union all select a.id, b.customername,a.Bookno, c.NetAmount,a.Credit,a.Debit, case Credit when '0' then c.NetAmount-a.Debit end as 'Total'   from tblamt_" + stabel + " a,tblcustomer b,tblorder_" + stabel + " c where a.Customerid=b.customerid and a.Bookno=c.BookNo and a.Credit =0 and convert(date,date) between '" + from + "' and '" + to + "' and  a.orderno=c.orderno  ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;
        }


        public DataSet Currentlist(string stabel, string from, string to)
        {
            DataSet save = new DataSet();
            string sQry = " select distinct b.customername,a.bookno,a.netamount,'" + stabel + "' as bnch from tblorder_" + stabel + " a,tblcustomer b where a.customerid=b.customerid and   convert(date,deliverydate)>=convert(date,getdate())  ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;
        }

        public DataSet GetAddlessReport(string stabel, string bookino, string from, string to)
        {
            DataSet save = new DataSet();
            string sQry = "select sum(Credit) as 'Add',sum(Debit) as 'Less'  from tblAmt_" + stabel + "  where bookno='" + bookino + "' and  convert(date,Date) between '" + from + "'  and '" + to + "'  ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;
        }

        public DataSet GetAddlessReport2(string stabel, string bookino, string from, string to)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblAmt_" + stabel + "  where bookno='" + bookino + "' and  convert(date,Date) between '" + from + "'  and '" + to + "'  ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;
        }


        public DataSet todaydeliveryorders(string stabel)
        {
            DataSet save = new DataSet();

            DataSet dmerge = new DataSet();

            //  string sQry = "select distinct b.customername,a.bookno,a.deliverytime,a.deliverydate from tblorder_" + stabel + " a,tblcustomer b where a.customerid=b.customerid and convert(date,deliverydate)=convert(date,getdate()) order by a.bookno asc";
            string sQry = "select distinct a.Total as NetAmount,a.deliverystatus,a.advance as paidamount,a.balancepaid as Balance,a.BillNo,a.OrderDate,sum(convert(decimal, c.Qty)) as TotalQty,a.NetAmount,b.customername,b.MobileNo,a.Fullbookno as bookno,a.deliverytime,a.deliverydate,a.OrderNo,a.balancedate,a.balancepaid,a.advancedate,a.RefundAmount from tblorder_" + stabel + " a,tblcustomer b,tblTransorder_" + stabel + " c where c.BillNo=a.BillNo and a.customerid=b.customerid and convert(date,deliverydate)=convert(date,getdate()) and status='N' and iscancel='0' group by a.BillNo,a.OrderDate,a.NetAmount,b.customername,a.fullbookno,a.deliverytime,a.deliverydate,a.OrderNo,a.Total,a.advance,a.balancepaid ,b.MobileNo,a.balancedate,a.balancepaid,a.advancedate,a.RefundAmount,a.deliverystatus order by a.fullbookno asc";
            save = dbObj.InlineExecuteDataSet(sQry);
            dmerge.Merge(save);

            string sQry1 = "select distinct a.Total as NetAmount,a.deliverystatus,(a.advance+ a.balance) as paidamount,a.balancepaid as Balance,a.BillNo,a.OrderDate,sum(convert(decimal, c.Qty)) as TotalQty,a.NetAmount,b.customername,b.MobileNo,a.Fullbookno as bookno,a.deliverytime,a.deliverydate,a.OrderNo,a.balancedate,a.balancepaid,a.advancedate,a.RefundAmount from tblorder_" + stabel + " a,tblcustomer b,tblTransorder_" + stabel + " c where c.BillNo=a.BillNo and a.customerid=b.customerid and convert(date,deliverydate)=convert(date,getdate()) and status='Y' and iscancel='0' group by a.BillNo,a.OrderDate,a.NetAmount,b.customername,a.fullbookno,a.deliverytime,a.deliverydate,a.OrderNo,a.Total,a.advance,a.balancepaid ,b.MobileNo,a.balancedate,a.balancepaid,a.advancedate,a.balance,a.RefundAmount,a.deliverystatus order by a.fullbookno asc";
            DataSet save1 = dbObj.InlineExecuteDataSet(sQry1);
            dmerge.Merge(save1);

            return dmerge;
        }

        #endregion


        public DataSet getlast7dayssales(string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "select cast(billdate as date) as bdate,isnull(sum(total),0) as sales from tblSales_" + sTableName + " " +
" where  billdate>=dateadd(day,-7,cast(getdate() as date)) and billdate<cast(getdate() as date) group by cast(billdate as date)";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GenerateChart_CRMQuantity(string Type, string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            //string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount,F.Payment_Mode from 
            //tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where 
            //    A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date,A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.CategoryID";


            if (Type == "TopcatWise")
            {
                sqry = "select top 20 D.Category as Category, "
                      + " sum(l.Quantity ) as Quantity "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by d.Category order by Quantity desc";
            }

            else if (Type == "LastcatWise")
            {
                sqry = "select top 20 D.Category as Category, "
                      + " sum(l.Quantity ) as Quantity"
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by d.Category order by Quantity asc";
            }
            else if (Type == "TopitemWise")
            {
                sqry = "select top 20 CO.Definition as Product, "
                      + " sum(l.Quantity ) as Quantity"
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by Co.Definition order by Quantity desc";
            }
            else if (Type == "LastitemWise")
            {
                sqry = "select top 20 CO.Definition as Product, "
                      + " sum(l.Quantity ) as Quantity "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by Co.Definition order by Quantity asc";
            }
            else
            {
                //sqry = "select distinct st.State as State, "
                //     + " sum(CAST(TotalAmount as money) ) as Amount "
                //     + " from tblInvoice I inner join "
                //     + " tblLedger L on  I.SupplierID = L.VendorID inner join tblemployeedetails E on E.employee_id = L.createdby   "
                //     + " inner join tbldepartment D on D.departmentid = E.departmentid  "
                //     + " inner join tblCountry CO on L.Country = Co.Country_id "
                //     + " inner join tblstate St on L.state = st.state_id "
                //     + " inner join tblcity CI on L.city = ci.City_id "
                //     + " where st.State_id = '" + Type + "' and I.Status!='C' group by st.State order by amount desc"; 

                //sqry = "select distinct( st.State_id) ,count(st.state_id) as co, st.State as State from tblInvoice I "
                //    + " inner join  tblLedger L on  I.SupplierID = L.VendorID "
                //    + " inner join tblemployeedetails E on E.employee_id = L.createdby     "
                //    + " inner join tbldepartment D on D.departmentid = E.departmentid   "
                //    + " inner join tblCountry CO on L.Country = Co.Country_id  "
                //    + " inner join tblstate St on L.state = st.state_id  "
                //    + " inner join tblcity CI on L.city = ci.City_id  "
                //    + " where st.State_id = '" + Type + "' and I.Status!='C' group by st.State, st.State_id order by State asc";

            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet CategoryUsergetval1()
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblCategory "; //where Categoryid =" + id + "
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet GenerateChart_CRMsub(string Type, string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            //string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount,F.Payment_Mode from 
            //tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where 
            //    A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date,A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.CategoryID";


            if (Type == "TopcatWise")
            {
                sqry = "select top 20 CO.Definition, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by CO.Definition order by amount desc";
            }

            else if (Type == "LastcatWise")
            {
                sqry = "select top 20 CO.Definition, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by CO.Definition order by amount asc";
            }
            else if (Type == "TopitemWise")
            {
                sqry = "select top 20 CO.Definition, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by Co.Definition order by amount desc";
            }
            else if (Type == "LastitemWise")
            {
                sqry = "select top 20 CO.Definition, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by Co.Definition order by amount asc";
            }
            else
            {
                //sqry = "select distinct st.State as State, "
                //     + " sum(CAST(TotalAmount as money) ) as Amount "
                //     + " from tblInvoice I inner join "
                //     + " tblLedger L on  I.SupplierID = L.VendorID inner join tblemployeedetails E on E.employee_id = L.createdby   "
                //     + " inner join tbldepartment D on D.departmentid = E.departmentid  "
                //     + " inner join tblCountry CO on L.Country = Co.Country_id "
                //     + " inner join tblstate St on L.state = st.state_id "
                //     + " inner join tblcity CI on L.city = ci.City_id "
                //     + " where st.State_id = '" + Type + "' and I.Status!='C' group by st.State order by amount desc"; 

                //sqry = "select distinct( st.State_id) ,count(st.state_id) as co, st.State as State from tblInvoice I "
                //    + " inner join  tblLedger L on  I.SupplierID = L.VendorID "
                //    + " inner join tblemployeedetails E on E.employee_id = L.createdby     "
                //    + " inner join tbldepartment D on D.departmentid = E.departmentid   "
                //    + " inner join tblCountry CO on L.Country = Co.Country_id  "
                //    + " inner join tblstate St on L.state = st.state_id  "
                //    + " inner join tblcity CI on L.city = ci.City_id  "
                //    + " where st.State_id = '" + Type + "' and I.Status!='C' group by st.State, st.State_id order by State asc";

            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet GenerateChart_CRMQuantitysub(string Type, string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            //string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount,F.Payment_Mode from 
            //tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where 
            //    A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date,A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.CategoryID";


            if (Type == "TopcatWise")
            {
                sqry = "select top 20 CO.Definition, "
                      + " sum(l.Quantity ) as Quantity "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by CO.Definition order by Quantity desc";
            }

            else if (Type == "LastcatWise")
            {
                sqry = "select top 20 CO.Definition, "
                      + " sum(l.Quantity ) as Quantity"
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by CO.Definition order by Quantity asc";
            }
            else if (Type == "TopitemWise")
            {
                sqry = "select top 20 CO.Definition, "
                      + " sum(l.Quantity ) as Quantity"
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by Co.Definition order by Quantity desc";
            }
            else if (Type == "LastitemWise")
            {
                sqry = "select top 20 CO.Definition, "
                      + " sum(l.Quantity ) as Quantity "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by Co.Definition order by Quantity asc";
            }
            else
            {
                //sqry = "select distinct st.State as State, "
                //     + " sum(CAST(TotalAmount as money) ) as Amount "
                //     + " from tblInvoice I inner join "
                //     + " tblLedger L on  I.SupplierID = L.VendorID inner join tblemployeedetails E on E.employee_id = L.createdby   "
                //     + " inner join tbldepartment D on D.departmentid = E.departmentid  "
                //     + " inner join tblCountry CO on L.Country = Co.Country_id "
                //     + " inner join tblstate St on L.state = st.state_id "
                //     + " inner join tblcity CI on L.city = ci.City_id "
                //     + " where st.State_id = '" + Type + "' and I.Status!='C' group by st.State order by amount desc"; 

                //sqry = "select distinct( st.State_id) ,count(st.state_id) as co, st.State as State from tblInvoice I "
                //    + " inner join  tblLedger L on  I.SupplierID = L.VendorID "
                //    + " inner join tblemployeedetails E on E.employee_id = L.createdby     "
                //    + " inner join tbldepartment D on D.departmentid = E.departmentid   "
                //    + " inner join tblCountry CO on L.Country = Co.Country_id  "
                //    + " inner join tblstate St on L.state = st.state_id  "
                //    + " inner join tblcity CI on L.city = ci.City_id  "
                //    + " where st.State_id = '" + Type + "' and I.Status!='C' group by st.State, st.State_id order by State asc";

            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet GenerateChart_CRMsubnew(string catid, string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            sqry = "select top 20 CO.Definition, "
                  + " sum(CAST(l.Amount as money) ) as Amount "
                  + " from tblsales_" + sTableName + " I inner join "
                  + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                  + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                  + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID where l.CategoryID='" + catid + "'"
                  + " group by CO.Definition order by amount desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet GenerateChart_CRMQuantitysubnew(string catid, string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            sqry = "select top 20 CO.Definition, "
                  + " sum(l.Quantity ) as Quantity "
                  + " from tblsales_" + sTableName + " I inner join "
                  + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                  + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                  + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID where l.CategoryID='" + catid + "'"
                  + " group by CO.Definition order by Quantity desc";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet PurchaseReqGridBranchreports(int ibranch, string sCode, string frmdate, string todate)
        {
            DataSet ds = new DataSet();

            //string sqry = "select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,c.order_qty from tblcustomer a,tblPurchaseRequest_" + sCode + " b ,tblTransPurchaseRequest_" + sCode + " c where a.CustomerID=b.VendorID and c.requestid=b.requestno and b.BranchID='" + ibranch + "' and b.IsAccepted=0 and convert(date, b.RequestDate)  between '" + Convert.ToDateTime(frmdate).ToString("yyyy-MM-dd") + "' and '" + Convert.ToDateTime(todate).ToString("yyyy-MM-dd") + "'   order by b.RequestDate desc  ";

            // string sqry = "select a.CustomerName as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime from tblcustomer a,tblPurchaseRequest_" + sCode + " b  where a.CustomerID=b.VendorID  and b.BranchID='" + ibranch + "' and b.IsAccepted=0 and convert(date, b.RequestDate)  between '" + Convert.ToDateTime(frmdate).ToString("yyyy-MM-dd") + "' and '" + Convert.ToDateTime(todate).ToString("yyyy-MM-dd") + "'   order by b.RequestDate desc  ";
            string sqry = "select a.name as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime  " +
" from tblworkers a,tblPurchaseRequest_" + sCode + " b  where a.empid=b.VendorID  and b.BranchID='" + ibranch + "'  " +
" and b.IsAccepted=0 and convert(date, b.RequestDate)  between '" + Convert.ToDateTime(frmdate).ToString("yyyy-MM-dd") + "' and '" + Convert.ToDateTime(todate).ToString("yyyy-MM-dd") + "'   order by b.RequestDate desc  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet salestaxreport(int ibranch, string sCode, string date)
        {
            DataSet ds = new DataSet();
            //string sqry = " select isnull(sum(b.Amount),0) as Amount,isnull(((sum(b.Amount) * 0) / 100 ),0) as Vat from tblsales_" + sCode + " a inner join tblTransSales_" + sCode + " b on a.BillNo=b.Salesid inner join   tblCategoryUser c on b.subcategoryid=c.categoryuserid where c.GST='0' and convert(date, a.BillDate) = '" + date + "' and OrderNo=0  and a.cancelstatus='No' ";
            string sqry = " select c.gst,isnull(sum(b.Amount),0) as Amount,isnull(sum(B.Amount)*((c.GST/2)/100),0) as cgst,isnull(sum(B.Amount)*((c.GST/2)/100),0) as sgst  from tblsales_" + sCode + " a inner join tblTransSales_" + sCode + " b on a.BillNo=b.Salesid inner join   tblCategoryUser c on b.subcategoryid=c.categoryuserid where c.GST='0' and convert(date, a.BillDate) = '" + date + "' and OrderNo=0  and a.cancelstatus='No' group by c.gst ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet SalesVatReport1(int ibranch, string sCode, string date)
        {
            DataSet ds = new DataSet();
            string sqry = " select isnull(sum(b.Amount),0) as Amount,isnull(((sum(b.Amount) * 0) / 100 ),0) as Vat from tblsales_" + sCode + " a inner join tblTransSales_" + sCode + " b on a.BillNo=b.Salesid inner join   tblCategoryUser c on b.subcategoryid=c.categoryuserid where c.GST='0' and convert(date, a.BillDate) = '" + date + "' and OrderNo=0  and a.cancelstatus='No' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet SalesVatReport2(int ibranch, string sCode, string date)
        {
            DataSet ds = new DataSet();
            string sqry = " select isnull(sum(b.Amount),0) as Amount,isnull(((sum(b.Amount) * 5) / 100 ),0) as Vat from tblsales_" + sCode + " a inner join tblTransSales_" + sCode + " b on a.BillNo=b.Salesid inner join   tblCategoryUser c on b.subcategoryid=c.categoryuserid where c.GST='5' and convert(date, a.BillDate) = '" + date + "' and OrderNo=0  and a.cancelstatus='No'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet SalesVatReport3(int ibranch, string sCode, string date)
        {
            DataSet ds = new DataSet();
            string sqry = " select isnull(sum(b.Amount),0) as Amount,isnull(((sum(b.Amount) * 18) / 100 ),0) as Vat from tblsales_" + sCode + " a inner join tblTransSales_" + sCode + " b on a.BillNo=b.Salesid inner join   tblCategoryUser c on b.subcategoryid=c.categoryuserid where c.GST='18' and convert(date, a.BillDate) = '" + date + "' and OrderNo=0  and a.cancelstatus='No'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet Salesdiscamt(int ibranch, string sCode, string date)
        {
            DataSet ds = new DataSet();
            string sqry = " select ((NetAmount * Discount ) /100) as discount from tblsales_" + sCode + " where convert(date, BillDate) = '" + date + "' and OrderNo=0  and cancelstatus='No' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public int insert_stockrequest(int VendorID, string RequestNO, DateTime RequestDate, string Status, int isCancel, string sBranch, int isaccept, int Branch, string Sname, string sCodeBnch, string sRequestentrytime, string ScodeProd, DateTime entrydatetime, DateTime delaydate)
        {
            int iSucess = 0;
            string sQry = "insert into tblPurchaseRequest_" + sCodeBnch + " (VendorID,RequestNO,RequestDate,Status,isCancel,Branch,IsAccepted,BranchID,RequestBy,RequestEntryTime,ProdBranch,EntryTime,DelayDate) values('" + VendorID + "','" + RequestNO + "','" + Convert.ToDateTime(RequestDate).ToString("yyyy/MM/dd") + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "','" + sRequestentrytime + "','" + ScodeProd + "','" + Convert.ToDateTime(entrydatetime).ToString("yyyy/MM/dd hh:mm") + "','" + Convert.ToDateTime(delaydate).ToString("yyyy/MM/dd") + "')";
            // Local Server
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            // Main Server

            string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblPurchaseRequestProd_" + ScodeProd + " ";
            //////  DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            DataSet ds = dbObj.InlineExecuteDataSetMain(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string prodrequestno = ds.Tables[0].Rows[0]["RequestNo"].ToString();

                string sQryprod = "insert into tblPurchaseRequestProd_" + ScodeProd + " (VendorID,RequestNO,RequestDate,Status,isCancel,Branch,IsAccepted,BranchID,RequestBy,RequestEntryTime,BranchReqNo,StoreBranch,Delaydate) values('" + VendorID + "','" + prodrequestno + "','" + Convert.ToDateTime(RequestDate).ToString("yyyy/MM/dd") + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "','" + sRequestentrytime + "','" + RequestNO + "','" + sCodeBnch + "','" + Convert.ToDateTime(delaydate).ToString("yyyy/MM/dd") + "')";


                iSucess = dbObj.InlineExecuteNonQueryMain(sQryprod);

                iSucess = Convert.ToInt32(prodrequestno);
            }


            return iSucess;
        }


        public int insert_stockrequest_Semi(int VendorID, string RequestNO, DateTime RequestDate, string Status, int isCancel, string sBranch, int isaccept, int Branch, string Sname, string sCodeBnch, string sRequestentrytime, string ScodeProd, DateTime entrydatetime)
        {
            int iSucess = 0;
            string sQry = "insert into tblSemiPurchaseRequest_" + sCodeBnch + " (VendorID,RequestNO,RequestDate,Status,isCancel,Branch,IsAccepted,BranchID,RequestBy,RequestEntryTime,ProdBranch,EntryTime) values('" + VendorID + "','" + RequestNO + "','" + Convert.ToDateTime(RequestDate).ToString("yyyy/MM/dd") + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "','" + sRequestentrytime + "','" + ScodeProd + "','" + Convert.ToDateTime(entrydatetime).ToString("yyyy/MM/dd hh:mm") + "')";
            // Local Server
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            // Main Server

            string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblSemiPurchaseRequest_" + ScodeProd + " ";
            //////  DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            DataSet ds = dbObj.InlineExecuteDataSetMain(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string prodrequestno = ds.Tables[0].Rows[0]["RequestNo"].ToString();

                string sQryprod = "insert into tblSemiPurchaseRequestLive_" + ScodeProd + " (VendorID,RequestNO,RequestDate,Status,isCancel,Branch,IsAccepted,BranchID,RequestBy,RequestEntryTime,BranchReqNo,StoreBranch) values('" + VendorID + "','" + prodrequestno + "','" + Convert.ToDateTime(RequestDate).ToString("yyyy/MM/dd") + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "','" + sRequestentrytime + "','" + RequestNO + "','" + sCodeBnch + "')";

                iSucess = dbObj.InlineExecuteNonQueryMain(sQryprod);

                iSucess = Convert.ToInt32(prodrequestno);
            }

            return iSucess;
        }


        // FOR STORE REQUEST
        public int insert_stockrequestStore(int VendorID, string RequestNO, DateTime RequestDate, string Status, int isCancel, string sBranch, int isaccept, int Branch, string Sname, string sCodeBnch, string sRequestentrytime, string ScodeProd, DateTime entrydatetime)
        {
            int iSucess = 0;
            string sQry = "insert into tblPurchaseRequeststore_" + sCodeBnch + " (VendorID,RequestNO,RequestDate,Status,isCancel,Branch,IsAccepted,BranchID,RequestBy,RequestEntryTime,ProdBranch,EntryTime) values('" + VendorID + "','" + RequestNO + "','" + Convert.ToDateTime(RequestDate).ToString("yyyy/MM/dd") + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "','" + sRequestentrytime + "','" + ScodeProd + "','" + Convert.ToDateTime(entrydatetime).ToString("yyyy/MM/dd hh:mm") + "')";
            // Local Server
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            // Main Server

            string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblPurchaseRequestProdStore_" + ScodeProd + " ";
            //////  DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            DataSet ds = dbObj.InlineExecuteDataSetMain(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string prodrequestno = ds.Tables[0].Rows[0]["RequestNo"].ToString();

                string sQryprod = "insert into tblPurchaseRequestProdStore_" + ScodeProd + " (VendorID,RequestNO,RequestDate,Status,isCancel,Branch,IsAccepted,BranchID,RequestBy,RequestEntryTime,BranchReqNo,StoreBranch) values('" + VendorID + "','" + prodrequestno + "','" + Convert.ToDateTime(RequestDate).ToString("yyyy/MM/dd") + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "','" + sRequestentrytime + "','" + RequestNO + "','" + sCodeBnch + "')";

                iSucess = dbObj.InlineExecuteNonQueryMain(sQryprod);

                iSucess = Convert.ToInt32(prodrequestno);
            }


            return iSucess;
        }


        public int insert_stockrequestStoreDept(int VendorID, string RequestNO, DateTime RequestDate, string Status, int isCancel, string sBranch, int isaccept, int Branch, string Sname, string sCodeBnch, string sRequestentrytime, string ScodeProd, DateTime entrydatetime, string deptid)
        {
            int iSucess = 0;
            string sQry = "insert into tblPurchaseRequeststoreDept_" + ScodeProd + " (VendorID,RequestNO,RequestDate,Status,isCancel,Branch,IsAccepted,BranchID,RequestBy,RequestEntryTime,ProdBranch,EntryTime,Deptid) values('" + VendorID + "','" + RequestNO + "','" + Convert.ToDateTime(RequestDate).ToString("yyyy/MM/dd") + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "','" + sRequestentrytime + "','" + ScodeProd + "','" + Convert.ToDateTime(entrydatetime).ToString("yyyy/MM/dd hh:mm") + "','" + deptid + "')";
            // Local Server
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            // Main Server

            string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblPurchaseRequeststoreDept_" + ScodeProd + " ";
            //////  DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string prodrequestno = ds.Tables[0].Rows[0]["RequestNo"].ToString();
                iSucess = Convert.ToInt32(prodrequestno);
            }


            return iSucess;
        }

        //Report


        public DataSet Report_StockReqDetails(int sBillno, string sCode)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblPurchaseRequest_" + sCode + " a,tblTransPurchaseRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + sBillno + "' and b.Received_Qty<b.Order_Qty";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GenerateChart_CRMresons(string Type, string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            //string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount,F.Payment_Mode from 
            //tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where 
            //    A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date,A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.CategoryID";


            if (Type == "TopcatWise")
            {
                sqry = "select top 20 D.Category as Category, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblReturn_" + sTableName + " I inner join "
                      + " tbltransReturn_" + sTableName + " L on  I.RetNo = L.RetNo "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by d.Category order by amount desc";
            }

            else if (Type == "LastcatWise")
            {
                sqry = "select top 20 D.Category as Category, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblReturn_" + sTableName + " I inner join "
                      + " tbltransReturn_" + sTableName + " L on  I.RetNo = L.RetNo "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by d.Category order by amount asc";
            }
            else if (Type == "TopitemWise")
            {
                sqry = "select top 20 CO.Definition as Product, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblReturn_" + sTableName + " I inner join "
                      + " tbltransReturn_" + sTableName + " L on  I.RetNo = L.RetNo "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by Co.Definition order by amount desc";
            }
            else if (Type == "LastitemWise")
            {
                sqry = "select top 20 CO.Definition as Product, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblReturn_" + sTableName + " I inner join "
                      + " tbltransReturn_" + sTableName + " L on  I.RetNo = L.RetNo "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by Co.Definition order by amount asc";
            }



            else if (Type == "TopReasonsWise")
            {
                sqry = "select top 20 case i.ipayMode when 1 then 'Wastage' when 2 then 'DateBar' when 3 then 'Excess Return' when 4 then 'Damage' when 5 then 'Wrong GRN' when 6 then 'shortage'  when 7 then 'Fungus'   when 8 then 'Fungus Before Date' when 9 then 'To Production' when 10 then 'Return To Production(Recycle)' when 11 then 'staff consumed' when 12 then  'To pothys' when 13 then  'Stock (+)(-)' when 14 then  'Stock Shift' when 15 then  'Stock Consumed' end as  ipayMode, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblReturn_" + sTableName + " I inner join "
                      + " tbltransReturn_" + sTableName + " L on  I.RetNo = L.RetNo "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by i.ipayMode order by amount desc";
            }
            else if (Type == "LastReasonsWise")
            {
                sqry = "select top 20 case i.ipayMode when 1 then 'Wastage' when 2 then 'DateBar' when 3 then 'Excess Return' when 4 then 'Damage' when 5 then 'Wrong GRN' when 6 then 'shortage'  when 7 then 'Fungus'   when 8 then 'Fungus Before Date' when 9 then 'To Production' when 10 then 'Return To Production(Recycle)' when 11 then 'staff consumed' when 12 then  'To pothys' when 13 then  'Stock (+)(-)' when 14 then  'Stock Shift' when 15 then  'Stock Consumed' end as  ipayMode, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblReturn_" + sTableName + " I inner join "
                      + " tbltransReturn_" + sTableName + " L on  I.RetNo = L.RetNo "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by i.ipayMode order by amount asc";
            }
            else
            {
                //sqry = "select distinct st.State as State, "
                //     + " sum(CAST(TotalAmount as money) ) as Amount "
                //     + " from tblInvoice I inner join "
                //     + " tblLedger L on  I.SupplierID = L.VendorID inner join tblemployeedetails E on E.employee_id = L.createdby   "
                //     + " inner join tbldepartment D on D.departmentid = E.departmentid  "
                //     + " inner join tblCountry CO on L.Country = Co.Country_id "
                //     + " inner join tblstate St on L.state = st.state_id "
                //     + " inner join tblcity CI on L.city = ci.City_id "
                //     + " where st.State_id = '" + Type + "' and I.Status!='C' group by st.State order by amount desc"; 

                //sqry = "select distinct( st.State_id) ,count(st.state_id) as co, st.State as State from tblInvoice I "
                //    + " inner join  tblLedger L on  I.SupplierID = L.VendorID "
                //    + " inner join tblemployeedetails E on E.employee_id = L.createdby     "
                //    + " inner join tbldepartment D on D.departmentid = E.departmentid   "
                //    + " inner join tblCountry CO on L.Country = Co.Country_id  "
                //    + " inner join tblstate St on L.state = st.state_id  "
                //    + " inner join tblcity CI on L.city = ci.City_id  "
                //    + " where st.State_id = '" + Type + "' and I.Status!='C' group by st.State, st.State_id order by State asc";

            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GenerateChart_CRMQuantityresons(string Type, string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            //string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount,F.Payment_Mode from 
            //tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where 
            //    A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date,A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and cancelstatus='NO' order by B.CategoryID";


            if (Type == "TopcatWise")
            {
                sqry = "select top 20 D.Category as Category, "
                      + " sum(l.Quantity ) as Quantity "
                      + " from tblReturn_" + sTableName + " I inner join "
                      + " tbltransReturn_" + sTableName + " L on  I.RetNo = L.RetNo "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by d.Category order by Quantity desc";
            }

            else if (Type == "LastcatWise")
            {
                sqry = "select top 20 D.Category as Category, "
                      + " sum(l.Quantity ) as Quantity"
                      + " from tblReturn_" + sTableName + " I inner join "
                      + " tbltransReturn_" + sTableName + " L on  I.RetNo = L.RetNo "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by d.Category order by Quantity asc";
            }
            else if (Type == "TopitemWise")
            {
                sqry = "select top 20 CO.Definition as Product, "
                      + " sum(l.Quantity ) as Quantity"
                      + " from tblReturn_" + sTableName + " I inner join "
                      + " tbltransReturn_" + sTableName + " L on  I.RetNo = L.RetNo "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by Co.Definition order by Quantity desc";
            }
            else if (Type == "LastitemWise")
            {
                sqry = "select top 20 CO.Definition as Product, "
                      + " sum(l.Quantity ) as Quantity "
                      + " from tblReturn_" + sTableName + " I inner join "
                      + " tbltransReturn_" + sTableName + " L on  I.RetNo = L.RetNo "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by Co.Definition order by Quantity asc";
            }



            else if (Type == "TopReasonsWise")
            {
                sqry = "select top 20 case i.ipayMode when 1 Then 'Wastage'  when 2 Then 'DateBar'  when 3 Then 'Excess' when 4 Then 'Damage' when 5 Then 'Wrong GRN' "
 + "  when 6 Then 'Shortage'   when 7 Then 'Fungus'    when 8 Then 'Fungus Before Date'    when 9 Then 'To Production'   when 10 Then 'Return To Production(Recycle)'   when 11 Then 'Staff Consumed' "
 + "  when 12 Then 'To Pothys' end as  ipayMode, "
                      + " sum(l.Quantity ) as Quantity"
                      + " from tblReturn_" + sTableName + " I inner join "
                      + " tbltransReturn_" + sTableName + " L on  I.RetNo = L.RetNo "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by i.ipayMode order by Quantity desc";
            }
            else if (Type == "LastReasonsWise")
            {
                sqry = "select top 20 case i.ipayMode when 1 Then 'Wastage'  when 2 Then 'DateBar'  when 3 Then 'Excess' when 4 Then 'Damage' when 5 Then 'Wrong GRN' "
 + "  when 6 Then 'Shortage'   when 7 Then 'Fungus'    when 8 Then 'Fungus Before Date'    when 9 Then 'To Production'   when 10 Then 'Return To Production(Recycle)'   when 11 Then 'Staff Consumed' "
 + "  when 12 Then 'To Pothys' end as  ipayMode, "
                      + " sum(l.Quantity ) as Quantity "
                      + " from tblReturn_" + sTableName + " I inner join "
                      + " tbltransReturn_" + sTableName + " L on  I.RetNo = L.RetNo "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " group by i.ipayMode order by Quantity asc";
            }
            else
            {
                //sqry = "select distinct st.State as State, "
                //     + " sum(CAST(TotalAmount as money) ) as Amount "
                //     + " from tblInvoice I inner join "
                //     + " tblLedger L on  I.SupplierID = L.VendorID inner join tblemployeedetails E on E.employee_id = L.createdby   "
                //     + " inner join tbldepartment D on D.departmentid = E.departmentid  "
                //     + " inner join tblCountry CO on L.Country = Co.Country_id "
                //     + " inner join tblstate St on L.state = st.state_id "
                //     + " inner join tblcity CI on L.city = ci.City_id "
                //     + " where st.State_id = '" + Type + "' and I.Status!='C' group by st.State order by amount desc"; 

                //sqry = "select distinct( st.State_id) ,count(st.state_id) as co, st.State as State from tblInvoice I "
                //    + " inner join  tblLedger L on  I.SupplierID = L.VendorID "
                //    + " inner join tblemployeedetails E on E.employee_id = L.createdby     "
                //    + " inner join tbldepartment D on D.departmentid = E.departmentid   "
                //    + " inner join tblCountry CO on L.Country = Co.Country_id  "
                //    + " inner join tblstate St on L.state = st.state_id  "
                //    + " inner join tblcity CI on L.city = ci.City_id  "
                //    + " where st.State_id = '" + Type + "' and I.Status!='C' group by st.State, st.State_id order by State asc";

            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }



        public DataSet GenerateChart_CRMsubnewresons(string catid, string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            sqry = "select top 20 CO.Definition, "
                  + " sum(CAST(l.Amount as money) ) as Amount "
                  + " from tblReturn_" + sTableName + " I inner join "
                  + " tbltransReturn_" + sTableName + " L on  I.RetNo = L.RetNo "
                  + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                  + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID where l.CategoryID='" + catid + "'"
                  + " group by CO.Definition order by amount desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet GenerateChart_CRMQuantitysubnewresons(string catid, string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            sqry = "select top 20 CO.Definition, "
                  + " sum(l.Quantity ) as Quantity "
                  + " from tblReturn_" + sTableName + " I inner join "
                  + " tbltransReturn_" + sTableName + " L on  I.RetNo = L.RetNo "
                  + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                  + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID where l.CategoryID='" + catid + "'"
                  + " group by CO.Definition order by Quantity desc";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }




        public DataSet ordebyReasons2return(string sTableName, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            string paygird = "select A.ipayMode as Reasonsid,e.reason as  Reasons,A.CustomerID,B.CategoryID,B.SubCategoryID,A.retno as BillNo, " +
                " convert(date,a.retdate) as BillDate,Name as LedgerName,'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice ,(B.Quantity *B.UnitPrice) as NetAmount, " +
                " 0 as Payment_Mode from tblreturn_" + sTableName + " A,tblTransreturn_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblreason e where e.reasonid=a.ipaymode and A.retno=b.retno  and B.CategoryID=D.categoryid and B.SubCategoryID=C.CategoryUserID  and convert(date,A.retdate) between '" + sFmdate + "' and '" + sToDate + "' order by Reasons";
            ds = dbObj.InlineExecuteDataSet(paygird);
            return ds;
        }

        #region "sales,Stock Return Reports"

        public DataSet GenerateChart_Sales_Amount(string Type, string sTableName, DateTime dtFmdate, DateTime dtToDate)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            if (Type == "Daywise")
            {
                sqry = "SET DATEFIRST 7 ; with a as( "
                   + " SELECT sum(NetAmount) as Amount,CONVERT(VARCHAR(10),BillDate,103) as BillDate, DATENAME(dw, BillDate) AS Dayname from tblsales_" + sTableName + " "
                   + " where BillDate >= dateadd(day, 1-datepart(dw, getdate()), CONVERT(date,getdate()))"
                   + " AND BillDate <  dateadd(day, 8-datepart(dw, getdate()), CONVERT(date,getdate()))"
                   + " group by BillDate)"
                   + " select sum(Amount) as Amount,BillDate,Dayname as Day from a"
                   + " group by BillDate,Dayname order by BillDate,Dayname  asc";
            }
            else if (Type == "Datewise")
            {
                sqry = " ; with a as (select sum(netAmount) as Amount,CONVERT(VARCHAR(10),BillDate,103) as BillDate"
                    + " from tblsales_" + sTableName + ""
                    + " where  convert(date,BillDate) >='" + Convert.ToDateTime(dtFmdate).ToString("yyyy-MM-dd 00:00") + "'  and"
                    + " convert(date,BillDate) <='" + Convert.ToDateTime(dtToDate).ToString("yyyy-MM-dd hh:mm") + "'"
                    + " group by BillDate) select sum(Amount) as Amount,BillDate  from a"
                    + " group by BillDate";
            }
            else if (Type == "Weekwise")
            {
                sqry = "SELECT year(BillDate) as RYear,month(BillDate) as RMonth, datepart(week, BillDate) as RWeek, sum(NetAmount) as Amount"
                       + " FROM  tblsales_" + sTableName + ""
                       + " where month(BillDate)=month(getdate())"
                       + " GROUP BY year(BillDate), month(BillDate), datepart(week, BillDate)"
                       + " order by  year(BillDate), month(BillDate), datepart(week, BillDate) asc";
            }
            else if (Type == "Monthwise")
            {
                sqry = "SELECT year(BillDate) as RYear,month(BillDate) as RMonth,sum(NetAmount) as Amount"
                       + " FROM tblsales_" + sTableName + ""
                       + " GROUP BY year(BillDate), month(BillDate)"
                       + " order by  year(BillDate), month(BillDate) asc";
            }
            else
            {

            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }



        public DataSet GenerateChart_Sales_Quantity(string Type, string sTableName, DateTime dtFmdate, DateTime dtToDate)
        {
            DataSet ds = new DataSet();
            string sqry = "";


            if (Type == "Daywise")
            {
                sqry = "SET DATEFIRST 7 ; with a as( "
                     + " SELECT sum(Quantity) as Quantity,CONVERT(VARCHAR(10),BillDate,103) as BillDate, DATENAME(dw, BillDate) AS Dayname "
                     + " from tblsales_" + sTableName + " as sal"
                     + " inner join tblTransSales_" + sTableName + " as Tsal on Tsal.SalesID=sal.BillNo"
                     + " where BillDate >= dateadd(day, 1-datepart(dw, getdate()), CONVERT(date, getdate())) "
                     + " AND BillDate <  dateadd(day, 8-datepart(dw, getdate()), CONVERT(date, getdate()))"
                     + " group by BillDate)"
                     + " select sum(Quantity) as Quantity,BillDate,Dayname as Day from a"
                     + " group by BillDate,Dayname order by BillDate,Dayname  asc";
            }

            else if (Type == "Datewise")
            {
                sqry = " ; with a as( "
                      + " SELECT sum(Quantity) as Quantity,CONVERT(VARCHAR(10),BillDate,103) as BillDate "
                      + " from tblsales_" + sTableName + " as sal"
                      + " inner join tblTransSales_" + sTableName + " as Tsal on Tsal.SalesID=sal.BillNo"
                      + " where  convert(date,BillDate) >='" + Convert.ToDateTime(dtFmdate).ToString("yyyy-MM-dd 00:00") + "' "
                      + " AND  convert(date,BillDate) <='" + Convert.ToDateTime(dtToDate).ToString("yyyy-MM-dd hh:mm") + "'"
                      + " group by BillDate)"
                      + " select sum(Quantity) as Quantity,BillDate from a"
                      + " group by BillDate order by BillDate  asc";
            }

            else if (Type == "Weekwise")
            {
                sqry = "SELECT year(A.BillDate) as RYear,month(A.BillDate) as RMonth, datepart(week, A.BillDate) as RWeek, sum(B.Quantity) as Quantity"
                       + " FROM tblsales_" + sTableName + " as A"
                       + " inner join  tblTransSales_" + sTableName + " as B on B.SalesID=A.BillNo"
                       + " where month(A.BillDate)=month(getdate())"
                       + " GROUP BY year(A.BillDate), month(A.BillDate), datepart(week, A.BillDate)"
                       + " order by  year(A.BillDate), month(A.BillDate), datepart(week, A.BillDate) asc";
            }
            else if (Type == "Monthwise")
            {
                sqry = "SELECT year(A.BillDate) as RYear,month(A.BillDate) as RMonth, sum(B.Quantity) as Quantity"
                       + " FROM tblsales_" + sTableName + " as A"
                       + " inner join  tblTransSales_" + sTableName + " as B on B.SalesID=A.BillNo"
                       + " GROUP BY year(A.BillDate), month(A.BillDate)"
                       + " order by  year(A.BillDate), month(A.BillDate) asc";
            }
            else
            {


            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }




        public DataSet GenerateChart_SalesReturn_Amount(string Type, string sTableName, DateTime dtFmdate, DateTime dtToDate)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            if (Type == "Daywise")
            {
                sqry = "SET DATEFIRST 7 ; with a as( "
                   + " SELECT sum(NetAmount) as Amount,CONVERT(VARCHAR(10),RetDate,103) as RetDate, DATENAME(dw, RetDate) AS Dayname from tblreturn_" + sTableName + " "
                   + " where RetDate >= dateadd(day, 1-datepart(dw, getdate()), CONVERT(date,getdate()))"
                   + " AND RetDate <  dateadd(day, 8-datepart(dw, getdate()), CONVERT(date,getdate()))"
                   + " group by RetDate)"
                   + " select sum(Amount) as Amount,RetDate,Dayname as Day from a"
                   + " group by RetDate,Dayname order by RetDate,Dayname  asc";
            }
            else if (Type == "Datewise")
            {
                sqry = " ; with a as (select sum(netAmount) as Amount,CONVERT(VARCHAR(10),RetDate,103) as RetDate"
                    + " from tblreturn_" + sTableName + ""
                    + " where  convert(date,RetDate) >='" + Convert.ToDateTime(dtFmdate).ToString("yyyy-MM-dd 00:00") + "'  and"
                    + " convert(date,RetDate) <='" + Convert.ToDateTime(dtToDate).ToString("yyyy-MM-dd hh:mm") + "'"
                    + " group by RetDate) select sum(Amount) as Amount,RetDate from a"
                    + " group by RetDate";
            }
            else if (Type == "Weekwise")
            {
                sqry = "SELECT year(RetDate) as RYear,month(RetDate) as RMonth, datepart(week, RetDate) as RWeek, sum(NetAmount) as Amount"
                       + " FROM  tblreturn_" + sTableName + ""
                       + " where month(RetDate)=month(getdate())"
                       + " GROUP BY year(RetDate), month(RetDate), datepart(week, RetDate)"
                       + " order by  year(RetDate), month(RetDate), datepart(week, RetDate) asc";
            }
            else if (Type == "Monthwise")
            {
                sqry = "SELECT year(RetDate) as RYear,month(RetDate) as RMonth,sum(NetAmount) as Amount"
                       + " FROM tblreturn_" + sTableName + ""
                       + " GROUP BY year(RetDate), month(RetDate)"
                       + " order by  year(RetDate), month(RetDate) asc";
            }
            else
            {

            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet GenerateChart_SalesReturn_Quantity(string Type, string sTableName, DateTime dtFmdate, DateTime dtToDate)
        {
            DataSet ds = new DataSet();
            string sqry = "";


            if (Type == "Daywise")
            {
                sqry = "SET DATEFIRST 7 ; with a as( "
                     + " SELECT sum(Quantity) as Quantity,CONVERT(VARCHAR(10),RetDate,103) as RetDate, DATENAME(dw, RetDate) AS Dayname "
                     + " from tblreturn_" + sTableName + " as sal"
                     + " inner join tblTransreturn_" + sTableName + " as Tsal on Tsal.RetNo=sal.RetNo "
                     + " where RetDate >= dateadd(day, 1-datepart(dw, getdate()), CONVERT(date, getdate())) "
                     + " AND RetDate <  dateadd(day, 8-datepart(dw, getdate()), CONVERT(date, getdate()))"
                     + " group by RetDate)"
                     + " select sum(Quantity) as Quantity,RetDate,Dayname as Day from a"
                     + " group by RetDate,Dayname order by RetDate,Dayname  asc";
            }

            else if (Type == "Datewise")
            {
                sqry = " ; with a as( "
                      + " SELECT sum(Quantity) as Quantity,CONVERT(VARCHAR(10),RetDate,103) as RetDate "
                      + " from tblreturn_" + sTableName + " as sal"
                      + " inner join tblTransreturn_" + sTableName + " as Tsal on Tsal.RetNo=sal.RetNo "
                      + " where  convert(date,RetDate) >='" + Convert.ToDateTime(dtFmdate).ToString("yyyy-MM-dd 00:00") + "' "
                      + " AND  convert(date,RetDate) <='" + Convert.ToDateTime(dtToDate).ToString("yyyy-MM-dd hh:mm") + "'"
                      + " group by RetDate)"
                      + " select sum(Quantity) as Quantity,RetDate from a"
                      + " group by RetDate order by RetDate  asc";
            }

            else if (Type == "Weekwise")
            {
                sqry = "SELECT year(A.RetDate) as RYear,month(A.RetDate) as RMonth, datepart(week, A.RetDate) as RWeek, sum(B.Quantity) as Quantity"
                       + " FROM tblreturn_" + sTableName + " as A"
                       + " inner join  tblTransreturn_" + sTableName + " as B on B.RetNo=A.RetNo"
                       + " where month(A.RetDate)=month(getdate())"
                       + " GROUP BY year(A.RetDate), month(A.RetDate), datepart(week, A.RetDate)"
                       + " order by  year(A.RetDate), month(A.RetDate), datepart(week, A.RetDate) asc";
            }
            else if (Type == "Monthwise")
            {
                sqry = "SELECT year(A.RetDate) as RYear,month(A.RetDate) as RMonth, sum(B.Quantity) as Quantity"
                       + " FROM tblreturn_" + sTableName + " as A"
                       + " inner join  tblTransreturn_" + sTableName + " as B on B.RetNo=A.RetNo"
                       + " GROUP BY year(A.RetDate), month(A.RetDate)"
                       + " order by  year(A.RetDate), month(A.RetDate) asc";
            }
            else
            {


            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        # region "Todays Sales,Return Report"

        public DataSet GenerateChart_Sales_Amount_TodaysReport(string Type, string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            if (Type == "Highest")
            {
                sqry = "select top 10 CO.Definition as Product, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " where convert(date,BillDate)=convert(date,getdate())"
                      + " group by Co.Definition order by amount desc";



            }
            else if (Type == "Lowest")
            {
                sqry = "select top 10 CO.Definition as Product, "
                      + " sum(CAST(i.netAmount as money) ) as Amount "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                        + " where convert(date,BillDate)=convert(date,getdate())"
                      + " group by Co.Definition order by amount asc";
            }
            else
            {

            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }



        public DataSet GenerateChart_Sales_Quantity_TodaysReport(string Type, string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            if (Type == "Highest")
            {
                sqry = "select top 10 CO.Definition as Product, "
                      + " sum(L.Quantity) as Quantity "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                      + " where convert(date,BillDate)=convert(date,getdate())"
                      + " group by Co.Definition order by Quantity desc";



            }
            else if (Type == "Lowest")
            {
                sqry = "select top 10 CO.Definition as Product, "
                      + " sum(L.Quantity) as Quantity "
                      + " from tblsales_" + sTableName + " I inner join "
                      + " tblTransSales_" + sTableName + " L on  I.BillNo = L.SalesID "
                      + " inner join tblcategory D on L.CategoryID = D.CategoryID  "
                      + " inner join tblCategoryUser CO on L.SubCategoryID = Co.CategoryUserID "
                        + " where convert(date,BillDate)=convert(date,getdate())"
                      + " group by Co.Definition order by Quantity asc";
            }
            else
            {

            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }



        public DataSet GenerateChart_SalesReturn_Amount_TodaysReport(string Type, string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            if (Type == "Highest")
            {
                sqry = "select top 10 CO.Definition as Product, "
                       + " sum(CAST(SR.netAmount as money) ) as Amount"
                       + " from tblreturn_" + sTableName + " SR inner join "
                       + " tblTransreturn_" + sTableName + " TSR on  TSR.RetNo = SR.RetNo "
                       + " inner join tblcategory D on TSR.CategoryID = D.CategoryID "
                       + " inner join tblCategoryUser CO on TSR.SubCategoryID = Co.CategoryUserID "
                       + " where convert(date,SR.RetDate)=convert(date,getdate())"
                       + " group by Co.Definition order by Amount desc";



            }
            else if (Type == "Lowest")
            {
                sqry = "select top 10 CO.Definition as Product, "
                       + " sum(CAST(SR.netAmount as money) ) as Amount"
                       + " from tblreturn_" + sTableName + " SR inner join "
                       + " tblTransreturn_" + sTableName + " TSR on  TSR.RetNo = SR.RetNo "
                       + " inner join tblcategory D on TSR.CategoryID = D.CategoryID "
                       + " inner join tblCategoryUser CO on TSR.SubCategoryID = Co.CategoryUserID "
                       + " where convert(date,SR.RetDate)=convert(date,getdate())"
                       + " group by Co.Definition order by Amount asc";
            }
            else
            {

            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet GenerateChart_SalesReturn_Quantity_TodaysReport(string Type, string sTableName)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            if (Type == "Highest")
            {
                sqry = "select top 10 CO.Definition as Product, "
                       + " sum(TSR.Quantity) as Quantity"
                       + " from tblreturn_" + sTableName + " SR inner join "
                       + " tblTransreturn_" + sTableName + " TSR on  TSR.RetNo = SR.RetNo "
                       + " inner join tblcategory D on TSR.CategoryID = D.CategoryID "
                       + " inner join tblCategoryUser CO on TSR.SubCategoryID = Co.CategoryUserID "
                       + " where convert(date,SR.RetDate)=convert(date,getdate())"
                       + " group by Co.Definition order by Quantity desc";

            }
            else if (Type == "Lowest")
            {
                sqry = "select top 10 CO.Definition as Product, "
                       + " sum(TSR.Quantity) as Quantity"
                       + " from tblreturn_" + sTableName + " SR inner join "
                       + " tblTransreturn_" + sTableName + " TSR on  TSR.RetNo = SR.RetNo "
                       + " inner join tblcategory D on TSR.CategoryID = D.CategoryID "
                       + " inner join tblCategoryUser CO on TSR.SubCategoryID = Co.CategoryUserID "
                       + " where convert(date,SR.RetDate)=convert(date,getdate())"
                       + " group by Co.Definition order by Quantity asc";
            }
            else
            {

            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        #endregion

        #region "Categor&Item Master"







        #endregion








        #region "Orderform Update"

        public int Update_Order(int iOrderno, string sSalesTable, string BillNo, string BillDate, int CustomerID, double NetAmount, double Total, int Icnt, double dAdvance, int Ordeeno, string msg, string takenBy, string DeliveryDate, string DeliveryTime, int iPayMode, int BkNo, string paytype, string place, string pay, string ordertime, double CGST, double SGST, double STotal)
        {
            int iSuccess = 0;
            string sQry = "update " + sSalesTable + " set BillNo='" + BillNo + "', OrderDate='" + BillDate + "', CustomerID='" + CustomerID + "', NetAmount='" + NetAmount + "', Total='" + Total + "',isCancel=0,ContactID=1,Advance='" + dAdvance + "',OrderNo='" + Ordeeno + "',Messege='" + msg + "',OrderTakenBy='" + takenBy + "',DeliveryDate='" + DeliveryDate + "',Deliverytime='" + DeliveryTime + "',iPayMode=" + iPayMode + ",BookNo=" + BkNo + ",PayType='" + paytype + "',Place='" + place + "',Paybill='" + pay + "',OrderTime='" + ordertime + "', CGST='" + CGST + "', STotal='" + STotal + "', SGST='" + SGST + "' where OrderNo='" + iOrderno + "'";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }



        public int DeleteTransCakeorder(string sTransSalesTable, int iBillNo)
        {
            int iSuccess = 0;
            string sQry = "delete from " + sTransSalesTable + " where BillNo='" + iBillNo + "'";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        public DataSet Get_PreviousdayClosingdetails(string stable)
        {

            DataSet ds = new DataSet();
            string Qry = "select * from tblopeningstock_" + stable + " where convert(date,Date)= convert(date,getdate())";
            ds = dbObj.InlineExecuteDataSet(Qry);
            return ds;

        }


        //Report

        public DataSet Report_TodaysAdvancePaid(string stable)
        {

            DataSet ds = new DataSet();
            string Qry = "select '" + stable + "' as bname, c.CustomerName,c.MobileNo,a.OrderNo,d.amount as Advance,d.type"
                       + " from tblOrder_" + stable + " a,tblCustomer c,tbltransorderamount_" + stable + " d "
                       + " where a.OrderNo>0 and a.billno=d.billno and a.isCancel=0 and c.CustomerID=a.CustomerID"
                       + " and convert(date,a.OrderDate)= convert(date,getdate())";
            ds = dbObj.InlineExecuteDataSet(Qry);
            return ds;

        }


        public DataSet Report_TodaysTotalQty(string stable)
        {

            DataSet ds = new DataSet();
            string Qry = "select '" + stable + "' as bname, cat.category,item.Definition,Convert(varchar(20),sum(Convert(float,b.Qty))) + ' ' + 'Kgs' as Totalqty"
                       + " from  tblOrder_" + stable + " a "
                       + " inner join tblTransorder_" + stable + " b on b.BillNo=a.BillNo"
                       + " inner join tblcategory as cat on cat.categoryid=b.CategoryID"
                       + " inner join tblcategoryuser as item on item.CategoryUserID=b.SubcategoryID "
                       + " where convert(date,a.OrderDate)= convert(date,getdate())"
                       + " group by item.Definition,cat.category";

            ds = dbObj.InlineExecuteDataSet(Qry);
            return ds;

        }

        public DataSet selectsalearegrep(string stablename, string frmdate, string todate)
        {
            DataSet ds = new DataSet();
            string sQry = "  select  b.categoryid,c.Category,Sum(b.Quantity) as Quantity,sum(b.Amount) as Amount  from tblsales_" + stablename + " a inner join tblTranssales_" + stablename + " b on a.Billno=b.Salesid inner join  tblCategory  c  on c.categoryid=b.Categoryid inner join tblCategoryuser d on d.categoryuserid=b.subCategoryid where Convert(Date, a.BillDate) Between '" + Convert.ToDateTime(frmdate).ToString("yyyy-MM-dd hh:mm") + "' and '" + Convert.ToDateTime(todate).ToString("yyyy-MM-dd hh:mm") + "' group by b.categoryid,c.Category  order by Amount desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet selectsalearegrepitems(string frmdate, string todate, string stablename, int catid)
        {
            DataSet ds = new DataSet();
            string sQry = "  select b.categoryid,b.Subcategoryid,c.Category,d.Definition,Sum(b.Quantity) as Quantity,sum(b.Amount) as Amount  from tblsales_" + stablename + " a inner join tblTranssales_" + stablename + " b on a.Billno=b.Salesid inner join  tblCategory  c  on c.categoryid=b.Categoryid inner join tblCategoryuser d on d.categoryuserid=b.subCategoryid where Convert(Date, a.BillDate) Between '" + Convert.ToDateTime(frmdate).ToString("yyyy-MM-dd") + "' and '" + Convert.ToDateTime(todate).ToString("yyyy-MM-dd") + "' and b.Categoryid=" + catid + " group by b.categoryid,b.Subcategoryid,c.Category,d.Definition";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        #endregion

        #region "Close Previous day"

        public int dayclosername_Previousday(string name, int userid)
        {
            int iupdate = 0;
            string sQry = "update tbllogin set User1=getdate()-1,user2='" + name + "' where userid=" + userid + "";
            iupdate = dbObj.InlineExecuteNonQuery(sQry);
            return iupdate;
        }




        public DataSet checkinser_Previousday(string stable)
        {
            DataSet ds = new DataSet();
            string s = "select * from tblOpeningStock_" + stable + "  where convert(date,Date)= convert(date,getdate()) ";
            ds = dbObj.InlineExecuteDataSet(s);
            return ds;
        }

        public DataSet checkdenomination_Previousday(string stable)
        {
            DataSet ds = new DataSet();
            string s = "select * from tblDayClose_" + stable + "  where convert(date,DaycloseDate)= convert(date,getdate()) ";
            ds = dbObj.InlineExecuteDataSet(s);
            return ds;
        }

        public int delOpening_Previousday(string stable)
        {
            int save = 0;

            string sQry = "delete from tblopeningstock_" + stable + " where convert(date,Date)= convert(date,GetDate())";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;

        }


        public int insertselect_Previousday(string stable)
        {
            int save = 0;
            string sqr = "Select * from tblstock_" + stable + "";
            DataSet dss = dbObj.InlineExecuteDataSet(sqr);
            if (dss.Tables[0].Rows.Count > 0)
            {
                string sQry = "insert into tblopeningstock_" + stable + "(categoryid,subcategoryid,qty,Date,DayCloseDate) select categoryid,subcategoryid,Available_Qty,GetDate(),GetDate()-1 from tblstock_" + stable + "";
                save = dbObj.InlineExecuteNonQuery(sQry);
            }
            else
            {
                string sQry = "insert into tblopeningstock_" + stable + "(categoryid,subcategoryid,qty,Date,DayCloseDate) values('1','1','0',GetDate(),GetDate()-1)";
                save = dbObj.InlineExecuteNonQuery(sQry);
            }
            return save;

        }
        #endregion




        public DataSet GetFullValuesForSales(string sTableName)
        {
            DataSet ds = new DataSet();
            string sQry = "select (D.GST / 2) as CGST,c.Category,d.Definition,d.GST,sum(b.Quantity) as Qty,d.Rate,(((d.Rate * D.GST)/100 ) + d.Rate ) as RateTax,(sum(b.Quantity) * d.Rate) as TotalRate,"
+ " (sum(b.Quantity) * (((d.Rate * D.GST)/100 ) + d.Rate )) as TotalValue,"
+ "(((sum(b.Quantity) * (((d.Rate * D.GST)/100 ) + d.Rate )) * D.GST) /100) as Margin"
+ ",(d.Rate/ (100 +D.GST) * 100 * sum(b.Quantity)) as BasicValue"
+ ",(((d.Rate/ (100 +D.GST) * 100 * sum(b.Quantity)) * (D.GST /2)) /100)as CGSTAmt,"
+ "(d.Rate/ (100 +D.GST) * 100 * sum(b.Quantity)) + (((d.Rate/ (100 +D.GST) * 100 * sum(b.Quantity)) * (D.GST /2)) /100) + "
+ "(((d.Rate/ (100 +D.GST) * 100 * sum(b.Quantity)) * (D.GST /2)) /100) as NetAmount"
 + " from tblsales_" + sTableName + " a inner join tblTransSales_" + sTableName + " b on a.BillNo=b.salesid inner join "
 + " tblcategory c on b.CategoryID=c.categoryid inner join tblCategoryUser d on b.SubCategoryID=d.CategoryUserID where a.cancelstatus='No' and a.salesid=b.Salesuniqueid"
 + " group by c.Category,d.Definition,d.GST,d.Rate, D.GST"
 + " order by category asc  ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }



        public DataSet GetFullValuesForSalesdate(string sTableName, string Date)
        {
            DataSet ds = new DataSet();
            string sQry = "select (D.GST / 2) as CGST,c.Category,d.Definition,d.GST,sum(b.Quantity) as Qty,d.Rate,(((d.Rate * D.GST)/100 ) + d.Rate ) as RateTax,(sum(b.Quantity) * d.Rate) as TotalRate,"
+ " (sum(b.Quantity) * (((d.Rate * D.GST)/100 ) + d.Rate )) as TotalValue,"
+ "(((sum(b.Quantity) * (((d.Rate * D.GST)/100 ) + d.Rate )) * D.GST) /100) as Margin"
+ ",(d.Rate/ (100 +D.GST) * 100 * sum(b.Quantity)) as BasicValue"
+ ",(((d.Rate/ (100 +D.GST) * 100 * sum(b.Quantity)) * (D.GST /2)) /100)as CGSTAmt,"
+ "(d.Rate/ (100 +D.GST) * 100 * sum(b.Quantity)) + (((d.Rate/ (100 +D.GST) * 100 * sum(b.Quantity)) * (D.GST /2)) /100) + "
+ "(((d.Rate/ (100 +D.GST) * 100 * sum(b.Quantity)) * (D.GST /2)) /100) as NetAmount"
 + " from tblsales_" + sTableName + " a inner join tblTransSales_" + sTableName + " b on a.BillNo=b.salesid inner join "
 + " tblcategory c on b.CategoryID=c.categoryid inner join tblCategoryUser d on b.SubCategoryID=d.CategoryUserID where convert(date,a.BillDate) ='" + Date + "' and a.cancelstatus='No' and a.salesid=b.Salesuniqueid "
 + " group by c.Category,d.Definition,d.GST,d.Rate, D.GST"
 + " order by category asc  ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }



        public DataSet GetFullValuesForSalesdate1(string sTableName, string Date, string Date1)
        {
            DataSet ds = new DataSet();
            //           string sQry = "select (D.GST / 2) as CGST,c.Category,d.Definition,d.GST,sum(b.Quantity) as Qty,d.Rate,(sum(b.Quantity) * d.Rate) as TotalRate,   ( d.Rate / (100 + d.GST) * 100 * sum(b.Quantity) ) as  BasicValue, ((sum(b.Quantity) * d.Rate) -( d.Rate / (100 + d.GST) * 100 * sum(b.Quantity) )) as  Margin,"
            // + "  ( d.Rate / (100 + d.GST) * 100 * sum(b.Quantity) ) * (d.GST /2 ) /100 as  GSTAmt,"
            // + "  ( d.Rate / (100 + d.GST) * 100 * sum(b.Quantity) ) +    ( d.Rate / (100 + d.GST) * 100 * sum(b.Quantity) ) * (d.GST /2 ) /100 +   ( d.Rate / (100 + d.GST) * 100 * sum(b.Quantity) ) * (d.GST /2 ) /100 as NetAmount"
            //+ " from tblsales_" + sTableName + " a inner join tblTransSales_" + sTableName + " b on a.BillNo=b.salesid inner join "
            //+ " tblcategory c on b.CategoryID=c.categoryid inner join tblCategoryUser d on b.SubCategoryID=d.CategoryUserID where convert(date,a.BillDate) >='" + Date + "' and convert(date,a.BillDate) <='" + Date1 + "'and a.cancelstatus='No'"
            //+ " group by c.Category,d.Definition,d.GST,d.Rate, D.GST"
            //+ " order by category asc  ";

            string sQry = "select (b.Tax / 2) as CGST,c.Category,d.Definition,b.Tax,sum(b.Quantity) as Qty,b.UnitPrice,(sum(b.Quantity) * b.UnitPrice) as TotalRate,   ( b.UnitPrice / (100 + b.Tax) * 100 * sum(b.Quantity) ) as  BasicValue, ((sum(b.Quantity) * b.UnitPrice) -( b.UnitPrice / (100 + b.Tax) * 100 * sum(b.Quantity) )) as  Margin,"
 + "  ( b.UnitPrice / (100 + b.Tax) * 100 * sum(b.Quantity) ) * (b.Tax /2 ) /100 as  GSTAmt,"
 + "  ( b.UnitPrice / (100 + b.Tax) * 100 * sum(b.Quantity) ) +    ( b.UnitPrice / (100 + b.Tax) * 100 * sum(b.Quantity) ) * (b.Tax /2 ) /100 +   ( b.UnitPrice / (100 + b.Tax) * 100 * sum(b.Quantity) ) * (b.Tax /2 ) /100 as NetAmount"
+ " from tblsales_" + sTableName + " a inner join tblTransSales_" + sTableName + " b on a.BillNo=b.salesid inner join "
+ " tblcategory c on b.CategoryID=c.categoryid inner join tblCategoryUser d on b.SubCategoryID=d.CategoryUserID where convert(date,a.BillDate) >='" + Date + "' and convert(date,a.BillDate) <='" + Date1 + "'and a.cancelstatus='No' and a.salesid=b.Salesuniqueid "
+ " group by c.Category,d.Definition,b.Tax,b.UnitPrice, b.Tax"
+ " order by category asc  ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet GetFullValuesFororderdate1(string sTableName, string Date, string Date1)
        {
            DataSet ds = new DataSet();
            string sQry = "select (D.GST / 2) as CGST,c.Category,d.Definition,d.GST,sum(convert(float, b.qty)) as Qty,d.Rate,(sum(convert(float, b.qty)) * d.Rate) as TotalRate,   ( d.Rate / (100 + d.GST) * 100 * sum(convert(float, b.qty)) ) as  BasicValue, ((sum(convert(float, b.qty)) * d.Rate) -( d.Rate / (100 + d.GST) * 100 * sum(convert(float, b.qty)) )) as  Margin,"
    + " ( d.Rate / (100 + d.GST) * 100 * sum(convert(float, b.qty)) ) * (d.GST /2 ) /100 as  GSTAmt,"
   + "  ( d.Rate / (100 + d.GST) * 100 * sum(convert(float, b.qty)) ) +    ( d.Rate / (100 + d.GST) * 100 * sum(convert(float, b.qty)) ) * (d.GST /2 ) /100 +   ( d.Rate / (100 + d.GST) * 100 * sum(convert(float, b.qty)) ) * (d.GST /2 ) /100 as NetAmount"
  + "  from tblOrder_" + sTableName + " a inner join tblTransOrder_" + sTableName + " b on a.BillNo=b.BillNo inner join  "
  + "  tblcategory c on b.CategoryID=c.categoryid inner join tblCategoryUser d on"
   + "  b.SubCategoryID=d.CategoryUserID where convert(date,a.OrderDate) >='" + Date + "' and convert(date,a.OrderDate) <='" + Date + "'"
     + " and a.iscancel='0' and a.salesid=b.Salesuniqueid group by c.Category,d.Definition,d.GST,d.Rate, D.GST order by category asc  ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet GetPlacename(string User, string Pass)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbllogin where username='" + User + "' and password='" + Pass + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GetadminCode(string User, string Pass, string AdminPass)
        {
            DataSet ds = new DataSet();
            string sqry = "select AdminPass from tbllogin where username='" + User + "' and password='" + Pass + "' and AdminPass='" + AdminPass + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet daygrnVal()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblgrn where convert(date,Date)=convert(date,GETDATE())";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet daygrnValmp()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblgrnmp where convert(date,Date)=convert(date,GETDATE())";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet daygrnValid(int ID)
        {
            DataSet ds = new DataSet();
            string sqry = " select a.ID,a.GRN_Qty,a.Date,GRNNo,Name,DayGRN,a.GRNTime,b.Category,c.Definition from tblgrn a inner join tblcategory b on a.Categoryid=b.categoryid inner join tblcategoryuser c on a.categoryuserid=c.categoryuserid where a.ID=" + ID + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet daygrnValid1(int ID)
        {
            DataSet ds = new DataSet();
            string sqry = " select a.ID,a.GRN_Qty,a.Date,GRNNo,Name,DayGRNmp,a.GRNTimemp,b.Category,c.Definition from tblgrnmp a inner join tblcategory b on a.Categoryid=b.categoryid inner join tblcategoryuser c on a.categoryuserid=c.categoryuserid where a.ID=" + ID + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet getgrndatetime(string Date)
        {
            DataSet ds = new DataSet();
            string sqry = " select a.ID,a.GRN_Qty,a.Date,GRNNo,Name,DayGRN,a.GRNTime,b.Category,c.Definition from tblgrn a inner join tblcategory b on a.Categoryid=b.categoryid inner join tblcategoryuser c on a.categoryuserid=c.categoryuserid where a.Date='" + Convert.ToDateTime(Date).ToString("yyyy-MM-dd") + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet getgrndatetime1(string Date)
        {
            DataSet ds = new DataSet();
            string sqry = " select a.ID,a.GRN_Qty,a.Date,GRNNo,Name,DayGRNmp,a.GRNTimemp,b.Category,c.Definition from tblgrnmp a inner join tblcategory b on a.Categoryid=b.categoryid inner join tblcategoryuser c on a.categoryuserid=c.categoryuserid where a.Date='" + Convert.ToDateTime(Date).ToString("yyyy-MM-dd") + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }



        public DataSet GetfulltaxvalNew(string sTableName, string Date, string Date1)
        {
            DataSet ds = new DataSet();
            //   string sQry = "select a.BillNo,a.OrderNo,a.BookNo,convert(date,a.OrderDate) as OrderDate, a.NetAmount,a.Advance as Amount,a.Paytype,"
            //  + " ((a.Advance / 118 * 100)) as SubTotal,"
            //+ " ( a.Advance - (a.Advance / 118 * 100)) /2  as CGST,( a.Advance - (a.Advance / 118 * 100)) /2 as SGST"
            //+ " from tblOrder_"+sTableName+" a "
            // + " where a.isCancel=0 and convert(date,a.OrderDate) >='" + Date + "' and convert(date,a.OrderDate) <='" + Date1 + "' order by a.OrderID asc";

            string sQry = "select a.BillNo,a.OrderNo,a.BookNo,convert(date,a.OrderDate) as OrderDate, a.NetAmount,a.Advance as Amount,a.Paytype,"
               + "  case a.CGST when '0' then a.Advance else ((a.Advance / 118 * 100)) end as  SubTotal,"
 + "case a.CGST when '0' then '0' else ( a.Advance - (a.Advance / 118 * 100)) /2 end as  CGST,"
  + "case a.SGST when '0' then '0' else ( a.Advance - (a.Advance / 118 * 100)) /2 end as  SGST  from tblOrder_" + sTableName + " a "
         + " where a.isCancel=0 and convert(date,a.OrderDate) >='" + Date + "' and convert(date,a.OrderDate) <='" + Date1 + "' order by a.OrderID asc";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet getAddressDetails(string User, string Pass)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbllogin where username='" + User + "' and password='" + Pass + "'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet getorderdata(string sTable, int OrderNo)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblOrder_" + sTable + " o inner join tblTransOrder_" + sTable + " tto on o.BillNo=tto.BillNo inner join tblCustomer c on c.CustomerID=o.CustomerID where o.OrderNo=" + OrderNo + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }



        public int deleteorder(string STable, int OrderNo)
        {
            int iSuccess = 0;
            int BillNo = 0;

            DataSet ds = new DataSet();
            string sqry = "select * from tblOrder_" + STable + "  where OrderNo=" + OrderNo + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            BillNo = Convert.ToInt32(ds.Tables[0].Rows[0]["BillNo"].ToString());

            string sQry = "delete from tblOrder_" + STable + " where OrderNo=" + OrderNo + "";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "delete from tblTransOrder_" + STable + " where BillNo=" + BillNo + "";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry1);

            return iSuccess;

        }

        #region Query for SEMI Category Master

        public DataSet gridsemicategory()
        {
            DataSet ds = new DataSet();
            //string sqry = "select * from tblIngridentsCategory where IsActive='Yes'  ";
            string sqry = "select * from tblsemiCategory where IsActive='Yes' Order by semiCategory asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet getiCatvaluessemicat(string iCat)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblsemiCategory where SemiCatID ='" + iCat + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int deleteSemicategorymaster(string CategoryId)
        {
            int iSucess = 0;
            string sQry = "update  tblsemiCategory set  IsActive='No'  where SemiCatID='" + CategoryId + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public DataSet DuplicateSemiCatcheck(string category)
        {
            DataSet ds = new DataSet();
            string sqry = "select semiCatID, semiCategory from tblsemiCategory where semiCategory = '" + category + "' and IsActive='Yes' order by SemiCatID desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public int InsertSemiCategory(string semiCategory, string IsActive)
        {
            int iSuccess = 0;
            string categoryid = "";
            {
                string sQry = "insert into tblsemiCategory( semiCategory,IsActive) values ('" + semiCategory + "','" + IsActive + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;

        }

        public DataSet DuplicateSemiCatcheckForUpdate(string category, string ingid)
        {
            DataSet ds = new DataSet();
            string sqry = "select semiCatID, semiCategory from tblsemiCategory where semiCategory = '" + category + "' and semiCatID <>'" + ingid + "'  order by semiCatID desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int updateSemicategory(int categoryid, string category, string isactive)
        {
            int iSucess = 0;
            string sQry = "update tblsemiCategory set semiCategory='" + category + "', IsActive='" + isactive + "'  where semiCatID='" + categoryid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }


        #endregion

        #region Query for Ingredient Category Master
        public DataSet gridIngridentcategory()
        {
            DataSet ds = new DataSet();
            //string sqry = "select * from tblIngridentsCategory where IsActive='Yes'  ";
            string sqry = "select * from tblIngridentsCategory where IsActive='Yes' Order by IngreCategory asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet DuplicateProdCatcheck(string category)
        {
            DataSet ds = new DataSet();
            string sqry = "select IngCatID, IngreCategory from tblIngridentsCategory where IngreCategory = '" + category + "' and IsActive='Yes' order by IngCatID desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet DuplicateProdCatcheckForUpdate(string category, string ingid)
        {
            DataSet ds = new DataSet();
            string sqry = "select IngCatID, IngreCategory from tblIngridentsCategory where IngreCategory = '" + category + "' and IngCatID <>'" + ingid + "'  order by IngCatID desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public int InsertIndgrentCategory(string IngCategory, string IsActive)
        {
            int iSuccess = 0;
            string categoryid = "";
            {
                string sQry = "insert into tblIngridentsCategory( IngreCategory,IsActive) values ('" + IngCategory + "','" + IsActive + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return Convert.ToInt32(iSuccess);

        }

        public int updateIndregentcategory(int categoryid, string category, string isactive)
        {
            int iSucess = 0;
            string sQry = "update tblIngridentsCategory set IngreCategory='" + category + "', IsActive='" + isactive + "'  where IngCatID='" + categoryid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }


        public DataSet getiCatvaluesIngcat(string iCat)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblIngridentsCategory where IngCatID ='" + iCat + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int deleteIngcategorymaster(string CategoryId)
        {
            int iSucess = 0;
            string sQry = "update  tblIngridentsCategory set  IsActive='No'  where IngCatID='" + CategoryId + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        #endregion

        #region New Production Process Started


        #region Query for Category Master
        public DataSet gridcategory()
        {
            DataSet ds = new DataSet();
            string sqry = "select *,case ProductionType when 'P' then 'Production'  when 'S' then 'Store Item'   else 'Icing' end as Type from tblCategory where IsActive='Yes'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet gridcategoryAll()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCategory   ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getmaxcatid()
        {
            DataSet ds = new DataSet();
            string sQry = "select isnull(Max(CategoryID)+1,1) as CategoryID from tblcategory ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getiCatvalues(string iCat)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblcategory where categoryid ='" + iCat + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int deletecategorymaster(string CategoryId)
        {
            int iSucess = 0;
            string sQry = "update  tblcategory set  IsActive='No'  where CategoryId='" + CategoryId + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public DataSet DuplicateCatcheck(string category)
        {
            DataSet ds = new DataSet();
            string sqry = "select categoryid, category from tblCategory where category = '" + category + "' and IsActive='Yes' order by categoryid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet DuplicateCatCodeCheck(string categorycode)
        {
            DataSet ds = new DataSet();
            string sqry = "select categoryid, Categorycode from tblCategory where Categorycode = '" + categorycode + "' and IsActive='Yes' order by categoryid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int InsertCategory(string Category, string Categorycode, int iCatID, string ProductionType, string request, string production, string printcategory, string ManualGrn, string CatType, string ImagePath, string Pagepath)
        {
            int iSuccess = 0;
            string categoryid = "";
            string sQry1 = "select isnull(Max(CategoryID)+1,1) as CategoryID from tblcategory ";
            DataSet ds = dbObj.InlineExecuteDataSet(sQry1);
            if (ds.Tables[0].Rows.Count > 0)
            {
                categoryid = ds.Tables[0].Rows[0]["CategoryID"].ToString();
                string sQry = "insert into tblCategory( Category,Categorycode,CategoryID,IsActive,IsLiveKitchen,ProductionType,Request,poduction,PrintCategory,ManualGrn,CatType,ImagePath,Pagepath) values ('" + Category + "','" + Categorycode + "'," + categoryid + ",'Yes','0','" + ProductionType + "','" + request + "','" + production + "','" + printcategory + "','" + ManualGrn + "','" + CatType + "','~/" + ImagePath + "','" + Pagepath + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return Convert.ToInt32(categoryid);

        }

        public int updatecategory(int categoryid, string category, string categorycode, string ProductionType, string request, string production, string printcategory, string manualGRN, string superadmin, string cattype, string ImagePath, string Pagepath)
        {
            int iSucess = 0;
            string sQry = "update tblcategory set ManualGrn='" + manualGRN + "',Printcategory='" + printcategory + "',Request='" + request + "',poduction='" + production + "',category='" + category + "', Categorycode='" + categorycode + "',ProductionType='" + ProductionType + "' ,ImagePath='~/" + ImagePath + "',Pagepath='" + Pagepath + "'  where categoryid='" + categoryid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);


            if (superadmin == "1" || superadmin == "2")
            {
                // FOR SYNC OPTION

                string sQryint = "insert into tblcategoryhistory(Categoryid,Category,CategoryCode,IsActive,IsLiveKitchen,ProductionType,Request,poduction,PrintCategory,ManualGrn,Cattype) values('" + categoryid + "','" + category + "','" + categorycode + "','Yes','0','" + ProductionType + "','" + request + "','" + production + "','" + printcategory + "','" + manualGRN + "','" + cattype + "')";
                iSucess = dbObj.InlineExecuteNonQuery(sQryint);
            }

            return iSucess;
        }


        public DataSet Get_CategoryCode(int iCatID)
        {
            DataSet ds = new DataSet();
            string sqry = "select Categorycode from tblCategory where  categoryid='" + iCatID + "' and IsActive='Yes'";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        #endregion



        #region Query for Sub Category Master
        public DataSet gridSubcategory()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblsubcategory where IsActive='Yes'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet getmaxsubcatid()
        {
            DataSet ds = new DataSet();
            string sQry = "select isnull(Max(SubId)+1,1) as SubId from tblsubcategory ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet getupdatedsubcategory(string iCat)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblsubcategory where SubId ='" + iCat + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int deletesubcategorymaster(string CategoryId)
        {
            int iSucess = 0;
            string sQry = "update  tblsubcategory set  IsActive='No'  where SubId='" + CategoryId + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public DataSet DuplicatesubCatcheck(string category)
        {
            DataSet ds = new DataSet();
            string sqry = "select SubId, SubCategoryName from tblsubcategory where SubCategoryName = '" + category + "' and IsActive='Yes' order by SubId desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int InsertSubCategory(string subCategory)
        {
            int iSuccess = 0;

            string sQry1 = "select isnull(Max(SubId)+1,1) as SubId from tblsubcategory ";
            DataSet ds = dbObj.InlineExecuteDataSet(sQry1);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string subid = ds.Tables[0].Rows[0]["subid"].ToString();
                string sQry = "insert into tblsubcategory( SubId,SubCategoryName,IsActive) values ('" + subid + "','" + subCategory + "','Yes')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;

        }

        public int updatesubcategory(int subcategoryid, string subcategory)
        {
            int iSucess = 0;
            string sQry = "update tblsubcategory set SubCategoryName='" + subcategory + "'  where SubId='" + subcategoryid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        #endregion

        #region GET TAX
        public DataSet getTAX()
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tbltax where IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        #endregion

        #region GET Branches
        public DataSet getbranch()
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblbranch where IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getbranchTy(string BranchType)
        {
            DataSet ds = new DataSet();

            if (BranchType == "0")
            {
                string sqry = "select * from tblBranchRightsType";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }

            else
            {
                string sqry = "select * from tblBranchRightsType where id ='" + BranchType + "'";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }

            return ds;
        }

        public DataSet getbranchid(string branchid)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblbranch where branchid='" + branchid + "' and IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getbranchcode(string branchcode)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblbranch where BranchCode='" + branchcode + "' and IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        #endregion


        #region PRODUCT DETAILS

        public DataSet DuplicateItemcheck(string def, string iCatID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCategoryUser where Definition='" + def + "' and categoryId='" + iCatID + "' and IsActive='Yes'";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int insertitem(int categoryid, string catcode, string itemname, string serialno, string gsttax, string Rate, string UOM, string ministockalert, string displayonline, string imageupload, string sEmpCode, string gstvalue, string uomname, string printitem, string fOODTYPE, string HSNCode, string MRP, string Barcode, string Details, string Pagepath, string Ratetype, string Qtytype, string defaultcurrencyid, string Rate1, string mrp1, string Rate2, string mrp2, string Rate3, string mrp3, string Rate4, string mrp4, string Rate5, string mrp5)
        {
            int iSuccess = 0;
            DataSet ds = new DataSet();
            string max = "select max(CategoryUserId)+1 as CategoryUserId from tblcategoryuser";
            ds = dbObj.InlineExecuteDataSet(max);
            int subcat = 1;
            if (ds.Tables[0].Rows[0]["categoryUserId"].ToString() != "")
            {
                subcat = Convert.ToInt32(ds.Tables[0].Rows[0]["categoryUserId"].ToString());
            }
            string sQry = "insert into tblCategoryUser( CategoryID,Definition,Serial,isChecked,Tax,Rate,categoryUserId,GST,TaxVal,Unit,EmpCode,UnitName,IsActive,MinimumStock,DisplayOnline,ImageUpload,Printitem,FoodType,HSNCode,Mrp,Barcode,Description,Pagepath,ratetype,QtyType,defaultcurrencyid,Rate1,mrp1,rate2,mrp2,rate3,mrp3,rate4,mrp4,rate5,mrp5) " +
                " values ('" + categoryid + "','" + itemname + "','" + serialno + "','1','" + gstvalue + "','" + Rate + "','" + subcat + "','" + gstvalue + "','" + gsttax + "','" + UOM + "','" + sEmpCode + "','" + uomname + "','Yes','" + ministockalert + "', " +
                " '" + displayonline + "','~/" + imageupload + "',N'" + printitem + "','" + fOODTYPE + "','" + HSNCode + "','" + MRP + "','" + Barcode + "','" + Details + "','" + Pagepath + "','" + Ratetype + "','" + Qtytype + "','" + defaultcurrencyid + "','" + Rate1 + "','" + mrp1 + "','" + Rate2 + "','" + mrp2 + "','" + Rate3 + "','" + mrp3 + "','" + Rate4 + "','" + mrp4 + "','" + Rate5 + "','" + mrp5 + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        public int insertbranchitem(DataSet dss)
        {
            int iSuccess = 0;
            DataSet ds = new DataSet();
            string max = "select max(CategoryUserID) as CategoryUserId from tblcategoryuser";
            ds = dbObj.InlineExecuteDataSet(max);
            int subcat = 1;
            if (ds.Tables[0].Rows[0]["categoryUserId"].ToString() != "")
            {
                subcat = Convert.ToInt32(ds.Tables[0].Rows[0]["categoryUserId"].ToString());
            }

            for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
            {
                string branchcode = dss.Tables[0].Rows[i]["Branchcode"].ToString();
                string branchname = dss.Tables[0].Rows[i]["Branchname"].ToString();

                string sQry = "insert into tblcategoryuserbranch( Itemid,BranchCode,BranchName,IsActive) " +
                    " values ('" + subcat + "','" + branchcode + "','" + branchname + "','Yes')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;

        }
        public int insertbranchitemvalues()
        {
            int iSuccess = 0;
            DataSet ds = new DataSet();
            string max = "select max(CategoryUserID) as CategoryUserId from tblcategoryuser";
            ds = dbObj.InlineExecuteDataSet(max);
            int subcat = 1;
            if (ds.Tables[0].Rows[0]["categoryUserId"].ToString() != "")
            {
                subcat = Convert.ToInt32(ds.Tables[0].Rows[0]["categoryUserId"].ToString());
            }

            DataSet dss = new DataSet();
            string max1 = "select * from tblBranch where BranchType=0";
            dss = dbObj.InlineExecuteDataSet(max1);

            for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
            {
                string branchcode = dss.Tables[0].Rows[i]["Branchcode"].ToString();
                string branchname = dss.Tables[0].Rows[i]["Branchname"].ToString();

                string sQry = "insert into tblcategoryuserbranch( Itemid,BranchCode,BranchName,IsActive) " +
                    " values ('" + subcat + "','" + branchcode + "','" + branchname + "','Yes')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;

        }
        public int updatebranchitem(DataSet dss, string subcat)
        {
            int iSuccess = 0;
            for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
            {
                string branchcode = dss.Tables[0].Rows[i]["Branchcode"].ToString();
                string branchname = dss.Tables[0].Rows[i]["Branchname"].ToString();

                string sQry = "insert into tblcategoryuserbranch( Itemid,BranchCode,BranchName,IsActive) " +
                    " values ('" + subcat + "','" + branchcode + "','" + branchname + "','Yes')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;

        }

        public int insertsubcategoryitem(DataSet dss)
        {
            int iSuccess = 0;
            DataSet ds = new DataSet();
            string max = "select max(CategoryUserID) as CategoryUserId from tblcategoryuser";
            ds = dbObj.InlineExecuteDataSet(max);
            int subcat = 1;
            if (ds.Tables[0].Rows[0]["categoryUserId"].ToString() != "")
            {
                subcat = Convert.ToInt32(ds.Tables[0].Rows[0]["categoryUserId"].ToString());
            }
            if (dss.Tables != null)
            {
                if (dss.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
                    {
                        string subcatid = dss.Tables[0].Rows[i]["subcatid"].ToString();
                        string sQry = "insert into tblcategoryusersponge( Itemid,SubCatid,IsActive) " +
                            " values ('" + subcat + "','" + subcatid + "','Yes')";
                        iSuccess = dbObj.InlineExecuteNonQuery(sQry);
                    }
                }
            }
            return iSuccess;

        }


        public int Updatesubcategoryitem(DataSet dss, string subcat)
        {
            int iSuccess = 0;
            if (dss.Tables != null)
            {
                if (dss.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
                    {
                        string subcatid = dss.Tables[0].Rows[i]["subcatid"].ToString();
                        string sQry = "insert into tblcategoryusersponge( Itemid,SubCatid,IsActive) " +
                            " values ('" + subcat + "','" + subcatid + "','Yes')";
                        iSuccess = dbObj.InlineExecuteNonQuery(sQry);
                    }
                }
            }
            return iSuccess;

        }


        public DataSet getcategoryuserforid(string cust)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCategoryUser where CategoryUserID='" + cust + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getcategorybranchforid(string cust)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblcategoryuserbranch where Itemid='" + cust + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getcategoryspongueforid(string cust)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblcategoryusersponge where Itemid='" + cust + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public int deletecatbranch(string subcategoryid)
        {
            int iSucess = 0;
            string sQry = "delete from tblcategoryuserbranch   where itemId='" + subcategoryid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public int deletecatspongue(string subcategoryid)
        {
            int iSucess = 0;
            string sQry = "delete from tblcategoryusersponge   where itemId='" + subcategoryid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }



        public DataSet updateitementry(string catDefinition, string Definition, string CategoryID, string sSerial, string gsttax, string taxvalue, double rate,
            string uom, string uomname, string mnimumstock, string displayonline, string image, string sEmpCode, string printname, string foodtype, string superadmin,
            string catid, string itemid, string HSNCode, string MRP, string Barcode, string Details, string Pagepath, string ratetype, string Qtytype, string Rate1, string mrp1, string Rate2, string mrp2, string Rate3, string mrp3, string Rate4, string mrp4, string Rate5, string mrp5)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblCategoryUser set Rate1='" + Rate1 + "',mrp1='" + mrp1 + "',rate2='" + Rate2 + "',mrp2='" + mrp2 + "',rate3='" + Rate3 + "',mrp3='" + mrp3 + "',rate4='" + Rate4 + "',mrp4='" + mrp4 + "',rate5='" + Rate5 + "',mrp5='" + mrp5 + "', Qtytype='" + Qtytype + "',ratetype='" + ratetype + "',FoodType='" + foodtype + "',Printitem=N'" + printname + "',Definition='" + Definition + "', " +
                " Serial='" + sSerial + "',Rate='" + rate + "',GST='" + taxvalue + "',Tax=" + taxvalue + ",TaxVal=" + gsttax + ",Unit=" + uom + ",EmpCode='" + sEmpCode + "', " +
                " MinimumStock='" + mnimumstock + "',DisplayOnline='" + displayonline + "',ImageUpload='~/" + image + "',UnitName='" + uomname + "' , " +
                " HSNCode ='" + HSNCode + "',Mrp ='" + MRP + "',Barcode ='" + Barcode + "',Description ='" + Details + "',Pagepath ='" + Pagepath + "'" +
                " where categoryuserid='" + CategoryID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            if (superadmin == "1" || superadmin == "2")
            {

                string sqr = "Insert into tblcategoryuserhistory(Itemid,CategoryID,Definition,Serial,Tax,Rate,CategoryUserID,GST,TaxVal,unit,empcode, " +
                   " MinimumStock,DisplayOnline,ImageUpload,UnitName,Printitem,FoodType,Barcode,Mrp,Pagepath,Description,ratetype,QtyType,Rate1,mrp1,rate2,mrp2,rate3,mrp3,rate4,mrp4,rate5,mrp5) " +
                    " values('" + itemid + "','" + catid + "','" + Definition + "','" + sSerial + "','" + taxvalue + "','" + rate + "','" + CategoryID + "', " +
                    " '" + taxvalue + "','" + gsttax + "','" + uom + "','" + sEmpCode + "','" + mnimumstock + "','" + displayonline + "','" + image + "', " +
                    " '" + uomname + "','" + printname + "','" + foodtype + "','" + Barcode + "','" + MRP + "','" + Pagepath + "','" + Details + "','" + ratetype + "','" + Qtytype + "' " +
                    " ,'" + Rate1 + "','" + mrp1 + "','" + Rate2 + "','" + mrp2 + "','" + Rate3 + "','" + mrp3 + "','" + Rate4 + "','" + mrp4 + "','" + Rate5 + "','" + mrp5 + "')";
                int iss = dbObj.InlineExecuteNonQuery(sqr);

            }

            return ds;

        }

        #endregion


        #region Query for Online Master
        public DataSet gridonlinemaster()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblonlinemaster where IsActive='Yes' and (onlinetype='O' or onlinetype='F') ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet gridonlinemaster_New()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblonlinemaster where IsActive='Yes' and (onlinetype='O') ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getmaxonlineid()
        {
            DataSet ds = new DataSet();
            string sQry = "select isnull(Max(OnlineNo)+1,1) as OnlineNo from tblonlinemaster ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getupdatedonlinemaster(string iCat)
        {
            DataSet ds = new DataSet();
            //string sqry = "select * from tblonlinemaster where OnlineNo ='" + iCat + "'";
            string sqry = "select * from tblonlinemaster where OnlineID ='" + iCat + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int deleteonlinemaster(string onlineid)
        {
            int iSucess = 0;
            string sQry = "update  tblonlinemaster set  IsActive='No'  where OnlineNo='" + onlineid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public DataSet Duplicateonlinecheck(string category)
        {
            DataSet ds = new DataSet();
            string sqry = "select OnlineNo, OnlineMaster from tblonlinemaster where OnlineMaster = '" + category + "' and IsActive='Yes' order by OnlineNo desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int InsertOnline(string onlinename, string onlinetype)
        {
            int iSuccess = 0;

            string sQry1 = "select isnull(Max(OnlineNo)+1,1) as OnlineNo from tblonlinemaster ";
            DataSet ds = dbObj.InlineExecuteDataSet(sQry1);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string OnlineNo = ds.Tables[0].Rows[0]["OnlineNo"].ToString();
                string sQry = "insert into tblonlinemaster(OnlineNo,OnlineMaster,IsActive,Onlinetype) values ('" + OnlineNo + "','" + onlinename + "','Yes','" + onlinetype + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;

        }

        public int updateonline(int onlineno, string onlinename, string onlinetype)
        {
            int iSucess = 0;
            string sQry = "update tblonlinemaster set OnlineMaster='" + onlinename + "',Onlinetype='" + onlinetype + "'  where OnlineNo='" + onlineno + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        #endregion


        #region Query for Branch Setting
        public DataSet gridbranchsetting()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblBranchSetting where IsActive='Yes'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet griddeptsetting()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblDeptSetting as a inner join tbldepartment as b on b.DeptID=a.DeptId where a.IsActive='Yes'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getmaxnobranchsetting()
        {
            DataSet ds = new DataSet();
            string sQry = "select isnull(Max(BranchNo)+1,1) as BranchNo from tblBranchSetting ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet getmaxnodeptsetting()
        {
            DataSet ds = new DataSet();
            string sQry = "select isnull(Max(DeptNo)+1,1) as DeptNo from tblDeptSetting ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet getupdatebranchsettingforid(string iCat)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblBranchSetting where BranchNo ='" + iCat + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getupdatedeptsettingforid(string iCat)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblDeptSetting where DeptNo ='" + iCat + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int deletebranchsetting(string branchsettingno)
        {
            int iSucess = 0;
            string sQry = "update  tblBranchSetting set  IsActive='No'  where BranchNo='" + branchsettingno + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public int deletedeptsetting(string branchsettingno)
        {
            int iSucess = 0;
            string sQry = "update  tblDeptSetting set  IsActive='No'  where DeptNo='" + branchsettingno + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }


        public DataSet duplicatebranchsettingcheck(string BranchId)
        {
            DataSet ds = new DataSet();
            string sqry = "select BranchId from tblBranchSetting where BranchId = '" + BranchId + "' and IsActive='Yes' order by BranchId desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet duplicatedeptsettingcheck(string DeptId)
        {
            DataSet ds = new DataSet();
            string sqry = "select DeptId from tblDeptSetting where DeptId = '" + DeptId + "' and IsActive='Yes' order by DeptId desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public int InsertBranchSetting(string storebranchid, string storebranchcode, string productionbranchid, string productionbranchcode, string IcingId)
        {
            int iSuccess = 0;
            string storecode = string.Empty;
            string prodcode = string.Empty;
            string Icingcode = string.Empty;
            string sQry1 = "select isnull(Max(BranchNo)+1,1) as BranchNo from tblBranchSetting ";
            DataSet ds = dbObj.InlineExecuteDataSet(sQry1);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string Branchno = ds.Tables[0].Rows[0]["BranchNo"].ToString();


                // For Branch code
                string getbranchcode = "Select * from tblbranch where branchid='" + storebranchid + "'";
                DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
                if (getstorecode.Tables[0].Rows.Count > 0)
                {
                    storecode = getstorecode.Tables[0].Rows[0]["Branchcode"].ToString();

                }


                // For Production code
                string getprod = "Select * from tblbranch where branchid='" + productionbranchid + "'";
                DataSet getprodcode = dbObj.InlineExecuteDataSet(getprod);
                if (getprodcode.Tables[0].Rows.Count > 0)
                {
                    prodcode = getprodcode.Tables[0].Rows[0]["Branchcode"].ToString();

                }

                // For ICING code
                string getici = "Select * from tblbranch where branchid='" + IcingId + "'";
                DataSet geticicode = dbObj.InlineExecuteDataSet(getici);
                if (geticicode.Tables[0].Rows.Count > 0)
                {
                    Icingcode = geticicode.Tables[0].Rows[0]["Branchcode"].ToString();

                }



                string sQry = "insert into tblBranchSetting( BranchNo,BranchId,BranchCode,ProductionId,Productioncode,IsActive,IcingId,IcingCode) " +
                    " values ('" + Branchno + "','" + storebranchid + "','" + storecode + "','" + productionbranchid + "','" + prodcode + "','Yes','" + IcingId + "','" + Icingcode + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;

        }



        public int InsertDeptSetting(string Deptid, string productionbranchid, string productionbranchcode)
        {
            int iSuccess = 0;
            //string storecode = string.Empty;
            string prodcode = string.Empty;
            string sQry1 = "select isnull(Max(DeptNo)+1,1) as DeptNo from tblDeptSetting ";
            DataSet ds = dbObj.InlineExecuteDataSet(sQry1);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string Branchno = ds.Tables[0].Rows[0]["DeptNo"].ToString();





                // For Production code
                string getprod = "Select * from tblbranch where branchid='" + productionbranchid + "'";
                DataSet getprodcode = dbObj.InlineExecuteDataSet(getprod);
                if (getprodcode.Tables[0].Rows.Count > 0)
                {
                    prodcode = getprodcode.Tables[0].Rows[0]["Branchcode"].ToString();

                }
                string sQry = "insert into tblDeptSetting( DeptNo,DeptId,Prodid,ProdCode,IsActive) " +
                    " values ('" + Branchno + "','" + Deptid + "','" + productionbranchid + "','" + prodcode + "','Yes')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;

        }

        public int updatebrnchsetting(int onlineno, string productionbranchid, string productionbranchcode, string icingid)
        {
            int iSucess = 0;
            string prodcode = string.Empty;
            string icingcode = string.Empty;

            // For Production code
            string getprod = "Select * from tblbranch where branchid='" + productionbranchid + "'";
            DataSet getprodcode = dbObj.InlineExecuteDataSet(getprod);
            if (getprodcode.Tables[0].Rows.Count > 0)
            {
                prodcode = getprodcode.Tables[0].Rows[0]["Branchcode"].ToString();

            }

            // For Production code
            string geticin = "Select * from tblbranch where branchid='" + icingid + "'";
            DataSet geticincode = dbObj.InlineExecuteDataSet(geticin);
            if (geticincode.Tables[0].Rows.Count > 0)
            {
                icingcode = geticincode.Tables[0].Rows[0]["Branchcode"].ToString();

            }


            string sQry = "update tblBranchSetting set  IcingId='" + icingid + "',IcingCode='" + icingcode + "',ProductionId='" + productionbranchid + "',Productioncode='" + prodcode + "'  where BranchNo='" + onlineno + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }


        public int updateDeptsetting(int onlineno, string productionbranchid, string productionbranchcode)
        {
            int iSucess = 0;
            string prodcode = string.Empty;

            // For Production code
            string getprod = "Select * from tblbranch where branchid='" + productionbranchid + "'";
            DataSet getprodcode = dbObj.InlineExecuteDataSet(getprod);
            if (getprodcode.Tables[0].Rows.Count > 0)
            {
                prodcode = getprodcode.Tables[0].Rows[0]["Branchcode"].ToString();

            }


            string sQry = "update tblDeptSetting set Prodid='" + productionbranchid + "',ProdCode='" + prodcode + "'  where DeptNo='" + onlineno + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public DataSet getbranchFilling(string branchtype)
        {
            DataSet ds = new DataSet();

            string sqry = "select brancharea + ' - ' + GSTIN as brancharea, * from tblbranch where IsActive='Yes' and BranchType='" + branchtype + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getbranchFilling_New(string branchtype, string OnlineSalesActive)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblbranch where IsActive='Yes' and BranchType='" + branchtype + "' and OnlineSalesActive='" + OnlineSalesActive + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet getDepartment(string branch)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tbldepartment where IsActive='Yes' and Pbranch='" + branch + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getDepartment_New(string branch, string requestshow)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tbldepartment where IsActive='Yes' and IsrequestShow='" + requestshow + "' and Pbranch='" + branch + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getbranchsettingFilling(string productioncode)
        {
            DataSet ds = new DataSet();

            string sqry = "select b.brancharea + ' - ' + b.GSTIN as brancharea,b.* from tblbranchsetting as a inner join tblbranch as b on b.branchid=a.branchid where (productioncode='" + productioncode + "' or IcingCode='" + productioncode + "')";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet getbranchsettingFilling_Semi(string productioncode)
        {
            DataSet ds = new DataSet();

            string sqry = "select b.* from tblSemiProdSetting as a inner join tblbranch as b on b.branchid=a.FromProdId where ToProdCode='" + productioncode + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }



        #endregion



        #region CHEck This branch Allow daily Stock Or Not
        public DataSet checkrequestallowornot(string brnchcode)
        {
            DataSet ds = new DataSet();
            int qty = 0;
            // string sqry = "select * from tblCategory where isdelete=0  ";
            string sqry = "select * from tblBranchSetting Where BranchCode='" + brnchcode + "' and  IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        //public DataSet getallcategory(string Ptype,string Type)
        //{
        //    DataSet ds = new DataSet();
        //    string sQry = string.Empty;
        //    if (Ptype == "All")
        //    {
        //        sQry = "select * from tblcategory  where isActive='Yes' and Request='1' order by category asc ";
        //    }
        //    else
        //    {
        //        sQry = "select * from tblcategory  where isActive='Yes' and Request='1' and productiontype='"+Type+"' order by category asc ";
        //    }
        //    ds = dbObj.InlineExecuteDataSet(sQry);
        //    return ds;
        //}

        public DataSet GetProducttype()
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            sqry = "select distinct upper(productiontype) as productiontype from tblcategory";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet checkrequestallowornot_SemiProd(string brnchcode)
        {
            DataSet ds = new DataSet();
            int qty = 0;
            // string sqry = "select * from tblCategory where isdelete=0  ";
            string sqry = "select * from tblsemiprodsetting Where FromProdCode='" + brnchcode + "' ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        #endregion

        public DataSet checkrequestallowornot_depat(string DeptId)
        {
            DataSet ds = new DataSet();
            int qty = 0;
            // string sqry = "select * from tblCategory where isdelete=0  ";
            string sqry = "select * from tbldeptsetting Where DeptId='" + DeptId + "' and  IsActive='Yes'";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        #region Common Region Table check If Exisits Or Not
        public DataSet checktableexisitsornot(string tablename)
        {
            DataSet ds = new DataSet();
            int qty = 0;
            // string sqry = "select * from tblCategory where isdelete=0  ";
            string sqry = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet checktableexisitsornotlive(string tablename)
        {
            DataSet ds = new DataSet();
            int qty = 0;
            // string sqry = "select * from tblCategory where isdelete=0  ";
            string sqry = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";

            ds = dbObj.InlineExecuteDataSetMain(sqry);

            return ds;
        }
        #endregion

        #region BlaackForest_28/08/2018

        #region BFUOM
        public DataSet UNITS()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblUOM Where IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GridPrimaryUNITS()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblPrimaryUom Where IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet Uomsrchgridsearxh(string Name, string id)
        {
            string sqry = string.Empty;
            DataSet ds = new DataSet();
            if (id == "1")
                sqry = "select * from tbluom where units like '%" + Name + "%' where IsActive='Yes' order by uomid desc";
            else
                sqry = "select * from tbluom where isactive ='" + Name + "' where IsActive='Yes' order by uomid desc";
            ds = dbObj.InlineExecuteDataSet(sqry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }

        public DataSet Uomsrchgrid(string Name, int id)
        {
            string sqry = string.Empty;
            DataSet ds = new DataSet();
            sqry = "select * from tbluom where UOM ='" + Name + "' and IsActive='Yes' order by uomid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }

        public DataSet PrimaryUomsrchgrid(string Name, int id)
        {
            string sqry = string.Empty;
            DataSet ds = new DataSet();
            sqry = "select * from tblPrimaryUom where PrimaryName ='" + Name + "' and IsActive='Yes' order by PrimaryUomid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }

        public int InsertUOM(string UOM, string isactive, string tblAuditMaster, string userid)
        {
            int iSuccess = 0;

            //string Date = DateTime.Now.ToString("dd/MM/yyyy hh:mm tt");
            //DateTime date1 = DateTime.ParseExact(Date, "dd/MM/yyyy hh:mm tt", CultureInfo.InvariantCulture);

            string sQry = "insert into tblUOM( UOM,IsActive) values ('" + UOM + "','" + isactive + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            return iSuccess;



        }

        public int Insert_PrimaryUOM(string UOM, string value, string isactive, string tblAuditMaster, string userid)
        {
            int iSuccess = 0;

            //string Date = DateTime.Now.ToString("dd/MM/yyyy hh:mm tt");
            //DateTime date1 = DateTime.ParseExact(Date, "dd/MM/yyyy hh:mm tt", CultureInfo.InvariantCulture);

            string sQry = "insert into tblPrimaryUom( PrimaryName,PrimaryValue,IsActive) values ('" + UOM + "','" + value + "','" + isactive + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            return iSuccess;



        }


        public DataSet UOMsrchgridforupdate(int cat, string category)
        {
            DataSet ds = new DataSet();
            string sqry = "select uomid, UOM from tbluom where UOM = '" + category + "' and uomid <>" + cat + " and IsActive='Yes'  order by uomid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet Primary_UOMsrchgridforupdate(int cat, string category)
        {
            DataSet ds = new DataSet();
            string sqry = "select PrimaryUomid, PrimaryName from tblPrimaryUom where PrimaryName = '" + category + "' and PrimaryUomid <>" + cat + " and IsActive='Yes'  order by PrimaryUomid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int updateUOMMaster(int uomid, string UOM, string IsActive, string tblAuditMaster, string EditUserID, string EditNarration)
        {
            int iSucess = 0;
            string sQry = "update tbluom set UOM='" + UOM + "' where uomid='" + uomid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            return iSucess;
        }

        public int updatePrimary_UOMMaster(int uomid, string value, string UOM, string IsActive, string tblAuditMaster, string EditUserID, string EditNarration)
        {
            int iSucess = 0;
            string sQry = "update tblPrimaryUom set PrimaryName='" + UOM + "',PrimaryValue='" + value + "' where PrimaryUomid='" + uomid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            return iSucess;
        }

        public DataSet editumo(int UMOID)
        {

            DataSet ds = new DataSet();
            string sQry = "select * from tbluom  where uomid='" + UMOID + "' and IsActive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        public DataSet editPrimaryumo(int UMOID)
        {

            DataSet ds = new DataSet();
            string sQry = "select * from tblPrimaryUom  where PrimaryUomid='" + UMOID + "' and IsActive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }


        public int deleteuom(string UOMID)
        {
            int iSucess = 0;
            string sQry = "update  tbluom set  IsActive='No'  where UOMID='" + UOMID + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public int delete_primaryuom(string UOMID)
        {
            int iSucess = 0;
            string sQry = "update  tblPrimaryUom set  IsActive='No'  where PrimaryUomid='" + UOMID + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        #endregion

        #region BFTax
        public DataSet Tax()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblTax Where IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int InsertTax(string TaxName, string IsActive, string tblAuditMaster, string userid)
        {
            int iSuccess = 0;
            string sQry = "insert into tblTax( TaxName,IsActive) values ('" + TaxName + "','" + IsActive + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }
        public DataSet Taxsearch(string Name, int id)
        {
            string sqry = string.Empty;
            DataSet ds = new DataSet();
            sqry = "select * from tblTax where TaxName ='" + Name + "' and IsActive='Yes' order by Taxid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        public DataSet Taxsearchforupdate(int Taxid, string TaxName)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblTax where TaxName = '" + TaxName + "' and Taxid <>" + Taxid + " and IsActive='Yes' order by Taxid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public int updateTaxMaster(int Taxid, string TaxName, string IsActive, string tblAuditMaster, string EditUserID, string EditNarration)
        {
            int iSucess = 0;
            string sQry = "update tblTax set TaxName='" + TaxName + "' where Taxid='" + Taxid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            return iSucess;
        }


        public DataSet edittax(int Taxid)
        {

            DataSet ds = new DataSet();
            string sQry = "select * from tblTax  where Taxid='" + Taxid + "' and IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        public int deletetax(string Taxid)
        {
            int iSucess = 0;
            string sQry = "update  tblTax set  IsActive='No'  where Taxid='" + Taxid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }
        #endregion

        #region BF SEMI ITEM MASTER
        public DataSet Editsemiitem(int id, int userid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblSemiIngridents where  semiIngridID=" + id + " and IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet TransEditsemiitem(int id)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbltransSemiIngridents where  SemiItemId=" + id + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetSemiIngredient()
        {
            DataSet ds = new DataSet();
            string qr = "select i.*,u.*,b.SemiCategory from tblSemiIngridents i inner join tblsemiCategory as b on b.semicatid=i.semicatid " +
                " inner join tblUOM u on u.UOMID=Units where i.IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }


        public DataSet searchsemiIngredient(string IngredientName, string ingcatid)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblSemiIngridents where semiIngredientName='" + IngredientName + "' and Semicatid='" + ingcatid + "' and  IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }


        public int insert_Semi_ingredients(string semiIngredientName, int userid, string units, string Quantity, int IngCatID, string IngredientCode, string isallow, int TaxId, double TaxValue, string hsncode)
        {
            int i = 0;
            string sqry = "insert into tblSemiIngridents(semiIngredientName,userID,Units, Quantity,semiCatID,IsActive,SemiIngredientCode,IsAllow,TaxId,TaxValue,hsncode) " +
                " values('" + semiIngredientName + "'," + userid + ",'" + units + "', '" + Quantity + "', '" + IngCatID + "','Yes','" + IngredientCode + "','" + isallow + "'," + TaxId + "," + TaxValue + ",'" + hsncode + "')";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public int trans_inert_semi(string ingname, string primaryuomid)
        {
            int i = 0;
            DataSet ds = new DataSet();

            string sqry = "Select * from tblSemiIngridents where semiIngredientName='" + ingname + "'and  IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string semiid = ds.Tables[0].Rows[0]["SemiIngridID"].ToString();

                string insert_trans = "insert into tblTransSemiIngridents(SemiItemId,PrimaryId)values('" + semiid + "','" + primaryuomid + "')";
                i = dbObj.InlineExecuteNonQuery(insert_trans);

            }
            return i;

        }

        public int trans_inert_semi(string ingname)
        {
            int i = 0;
            DataSet ds = new DataSet();

            string sqry = "Delete from tblTransSemiIngridents where SemiItemId='" + ingname + "'";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }


        public DataSet searchSemiIngredientforupdate(string SemiIngredientName, int SemiIngridID, string Semicatid)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblSemiIngridents where semiIngredientName='" + SemiIngredientName + "' and semiCatID='" + Semicatid + "' and SemiIngridID<>" + SemiIngridID + " and  IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public int update_Semi_ingredients(string ingridname, int ID, string units, string Quantity, int IngCatID, string IngredientCode, string isallow, int TaxId, double TaxValue, string hsncode)
        {
            int i = 0;
            string sqry = "update tblSemiIngridents set hsncode='" + hsncode + "',IsAllow='" + isallow + "',semiIngredientName='" + ingridname + "',units='" + units + "', Quantity='" + Quantity + "', semiCatID='" + IngCatID + "',SemiIngredientCode='" + IngredientCode + "',TaxId=" + TaxId + ",TaxValue=" + TaxValue + " where semiIngridID=" + ID + "";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public int delete_Semi_Integr(int ID, int userid)
        {
            int i = 0;
            string sqry = "Update tblSemiIngridents set IsActive='No' where semiIngridID=" + ID + " ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public DataSet categoryfor_Semi_ingredient(string IngreCategory)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblsemiCategory where SemiCategory = '" + IngreCategory + "'  and IsActive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int Insert_SemiCatforingredient(string IngreCategory)
        {
            int iSuccess = 0;
            DataSet ds1 = new DataSet();

            string sQry = "insert into tblsemiCategory( SemiCategory,IsActive) values ('" + IngreCategory + "','Yes')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "select isnull(Max(SemiCatID),1) as IngCatID from tblsemiCategory ";
            ds1 = dbObj.InlineExecuteDataSet(sQry1);
            iSuccess = Convert.ToInt32(ds1.Tables[0].Rows[0]["IngCatID"]);

            return iSuccess;

        }


        #endregion

        #region BFIngredients&Contact
        public DataSet getIngCat()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblIngridentsCategory";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetIngredient()
        {
            DataSet ds = new DataSet();
            string qr = "select i.*,u.*,b.IngreCategory from tblIngridents i inner join tblIngridentscategory as b on b.ingcatid=i.ingcatid inner join tblUOM u on u.UOMID=Units where i.IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet GetSupplierIngredient(int LedgerId, string loadallitem)
        {
            DataSet ds = new DataSet();

            DataSet dss = new DataSet();
            string qr = string.Empty;
            int cnt = 0;
            string sqry = string.Empty;

            if (loadallitem == "2")
            {
                sqry = "select count(*) as cnt from  tblLedgerIngredient where ledgerid='" + LedgerId + "'";
                dss = dbObj.InlineExecuteDataSet(sqry);
                if (dss.Tables[0].Rows.Count > 0)
                {
                    cnt = Convert.ToInt32(dss.Tables[0].Rows[0]["cnt"]);
                }

                if (cnt > 0)
                {
                    qr = "select b.ingrecategory+' - '+i.ingredientname as IngredientName,b.ingrecategory+' - '+li.BIngredientName as BIngredientName,* from tblLedgerIngredient li inner join  tblIngridents i on i.IngridID=li.IngredientId inner join tblIngridentscategory as b on b.ingcatid=i.ingcatid inner join tblUOM u on u.UOMID=i.Units where i.IsActive='Yes' and LedgerId=" + LedgerId + " ";
                    ds = dbObj.InlineExecuteDataSet(qr);
                }
                else
                {
                    qr = "select b.ingrecategory+' - '+i.ingredientname as IngredientName,*,'' as BIngredientName from  tblIngridents as i inner join tblIngridentscategory as b on b.ingcatid=i.ingcatid  inner join tblUOM u on u.UOMID=i.Units where i.IsActive='Yes' ";
                    ds = dbObj.InlineExecuteDataSet(qr);
                }
            }
            else
            {
                qr = "select b.ingrecategory+' - '+i.ingredientname as IngredientName,*,'' as BIngredientName from  tblIngridents as i inner join tblIngridentscategory as b on b.ingcatid=i.ingcatid  inner join tblUOM u on u.UOMID=i.Units where i.IsActive='Yes' ";
                ds = dbObj.InlineExecuteDataSet(qr);
            }
            return ds;
        }


        public DataSet GetIngredientVal(int Units)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblIngridents i inner join tblUOM u on u.UOMID=Units where Units=" + Units + " and i.IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }
        public DataSet EditIngredients(int id, int userid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblIngridents where  IngridID=" + id + " and IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int insert_ingredients(string ingridname, int userid, string units, string Quantity, int IngCatID, string IngredientCode, string isallow, int TaxId, double TaxValue, string hsncode)
        {
            int i = 0;
            string sqry = "insert into tblIngridents  (IngredientName,userID,Units, Quantity,IngCatID,IsActive,IngredientCode,IsAllow,TaxId,TaxValue,hsncode) values('" + ingridname + "'," + userid + ",'" + units + "', '" + Quantity + "', '" + IngCatID + "','Yes','" + IngredientCode + "','" + isallow + "'," + TaxId + "," + TaxValue + ",'" + hsncode + "')";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }
        public int update_ingredients(string ingridname, int ID, string units, string Quantity, int IngCatID, string IngredientCode, string isallow, int TaxId, double TaxValue, string hsncode)
        {
            int i = 0;
            string sqry = "update tblIngridents set hsncode='" + hsncode + "',IsAllow='" + isallow + "',IngredientName='" + ingridname + "',units='" + units + "', Quantity='" + Quantity + "', IngCatID='" + IngCatID + "',IngredientCode='" + IngredientCode + "',TaxId=" + TaxId + ",TaxValue=" + TaxValue + " where IngridID=" + ID + "";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public int deleteIntegr(int ID, int userid)
        {
            int i = 0;
            string sqry = "Update tblIngridents set IsActive='No' where IngridID=" + ID + " ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }



        public DataSet searchIngredient(string IngredientName, string ingcatid)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblIngridents where IngredientName='" + IngredientName + "' and Ingcatid='" + ingcatid + "' and  IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet searchIngredientforupdate(string IngredientName, int IngridID, string ingcatid)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblIngridents where IngredientName='" + IngredientName + "' and Ingcatid='" + ingcatid + "' and IngridID<>" + IngridID + " and  IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet getcustomer()
        {
            DataSet ds = new DataSet();
            //string sQry = "select case contacttypeid when  1 then 'Customer' when 2 then 'Dealer'  when 3 then 'Manufaturer' else 'Vendor' end as ContactType,* from tblCustomer where IsActive='Yes'  order by customerid desc";
            string sQry = "select top 50 ct.ContactType,c.* from tblCustomer c inner join tblContactType ct on ct.ContactID=c.ContactTypeID  where c.IsActive='Yes'  order by idcust desc";//  order by CustomerName asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet getcustomer(string ID)
        {
            DataSet ds = new DataSet();
            string cont = "";
            //string sQry = "select case contacttypeid when  1 then 'Customer' when 2 then 'Dealer'  when 3 then 'Manufaturer' else 'Vendor' end as ContactType,* from tblCustomer where IsActive='Yes'  order by customerid desc";
            if (ID == "1")
                cont = "and ct.contacttype='Customer'";
            else if (ID == "2")
                cont = "and ct.contacttype='Dealer'";
            else if (ID=="3")
                cont = "and ct.contacttype='Supplier'";
            else if (ID=="4")
                cont = "and ct.contacttype='icing Employee'";
            else 
                cont= "and ct.contacttype='dispatch Employee'";

                string sQry = "select top 50 ct.ContactType,c.* from tblCustomer c inner join tblContactType ct on ct.ContactID=c.ContactTypeID  where c.IsActive='Yes' " + cont + "  order by idcust desc";//  order by CustomerName asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet chkinsertcontact(string sEmail, string sMobile)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblledger where Email='" + sEmail + "' and  MobileNo='" + sMobile + "' and IsActive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet duplicatecheckcustomercheck(string columnname, string Columnvalue)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblledger where " + columnname + "='" + Columnvalue + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet chkconatctname(string contactname)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblledger where REPLACE(LedgerName,' ','')='" + contactname + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public int insertcontact(int UserID, string CustomerName, string MobileNo, string PhoneNo, string Area, string Address, string City, string Pincode, string Email, int iContactTypeid, int GroupId, string disc, string gstno, string paymentdays, string username, string password, int branchid, double opbalancecridit, double opbalancDebit, string contactType,string Province)
        {
            int iSuccess = 0;

            string sQry1 = "insert into tblledger(LedgerName, MobileNo, PhoneNo,  Area,Address, City, Pincode, Email,ContactTypeID,IsActive,GroupId,Disc,Gstno,paymentdays,username,password,branchid,Open_Credit,Open_Depit,Type,Province)values ('" + CustomerName + "','" + MobileNo + "','" + PhoneNo + "','" + Area + "','" + Address + "','" + City + "','" + Pincode + "','" + Email + "'," + iContactTypeid + ",'Yes'," + GroupId + ",'" + disc + "','" + gstno + "','" + paymentdays + "','" + username + "','" + password + "'," + branchid + "," + opbalancecridit + "," + opbalancDebit + ",'" + contactType + "','" + Province + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry1);

            DataSet ds = new DataSet();
            string sqry = "select isnull(max(Ledgerid),1) as Ledgerid from tblledger ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            string sQry2 = "insert into tblCustomer(CustomerName, MobileNo, PhoneNo,  Area,Address, City, Pincode, Email,ContactTypeID,IsActive,LedgerId,disc,Gstno,username,password,branchid,Province)values ('" + CustomerName + "','" + MobileNo + "','" + PhoneNo + "','" + Area + "','" + Address + "','" + City + "','" + Pincode + "','" + Email + "'," + iContactTypeid + ",'Yes','" + ds.Tables[0].Rows[0]["LedgerId"].ToString() + "','" + disc + "','" + gstno + "','" + username + "','" + password + "'," + branchid + ",'" + Province + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry2);


            //For Employye Login
            DataSet ds1 = new DataSet();
            string sempqry = "select isnull(max(IDCust),1) as CustomerId from tblCustomer ";
            ds1 = dbObj.InlineExecuteDataSet(sempqry);

            sQry1 = "insert into tblEmployeeLogin(username,password,branchid,customerid,ledgerid)values ('" + username + "','" + password + "'," + branchid + "," + Convert.ToInt32(ds1.Tables[0].Rows[0]["CustomerId"].ToString()) + "," + Convert.ToInt32(ds.Tables[0].Rows[0]["LedgerId"].ToString()) + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry1);

            return Convert.ToInt32(ds.Tables[0].Rows[0]["LedgerId"].ToString());
        }

        public int InsertLedgerIngredient(int LedgerId, int IngredientId, string Bitemname)
        {
            int i = 0;
            DataSet ds = new DataSet();
            string sq = "Select * from tblLedgerIngredient where ledgerid='" + LedgerId + "' and IngredientId=" + IngredientId + "";
            ds = dbObj.InlineExecuteDataSet(sq);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string update = "Update tblLedgerIngredient set BIngredientName='" + Bitemname + "' where ledgerid='" + LedgerId + "' and IngredientId=" + IngredientId + "";
                i = dbObj.InlineExecuteNonQuery(update);
            }
            else
            {
                string sqry = "insert into tblLedgerIngredient(LedgerId,IngredientId,BIngredientName) Values(" + LedgerId + "," + IngredientId + ",'" + Bitemname + "') ";
                i = dbObj.InlineExecuteNonQuery(sqry);
            }
            return i;
        }


        public int InsertLedgerIngredient1(int LedgerId, int IngredientId, string Bitemname, string custype, decimal rate)
        {
            int i = 0;
            DataSet ds = new DataSet();
            string sq = "Select * from tblLedgerIngredient where ledgerid='" + LedgerId + "' and IngredientId=" + IngredientId + "";
            ds = dbObj.InlineExecuteDataSet(sq);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string update = "Update tblLedgerIngredient set BIngredientName='" + Bitemname + "',Rate=" + rate + ",CustomerType='" + custype + "' where ledgerid='" + LedgerId + "' and IngredientId=" + IngredientId + "";
                i = dbObj.InlineExecuteNonQuery(update);
            }
            else
            {
                string sqry = "insert into tblLedgerIngredient(LedgerId,IngredientId,BIngredientName,CustomerType,Rate) Values(" + LedgerId + "," + IngredientId + ",'" + Bitemname + "','" + custype + "'," + rate + ")";
                i = dbObj.InlineExecuteNonQuery(sqry);
            }
            return i;
        }

        public int updatehsncode(string ingridentid, string hsncode, string taxvalue, string taxid)
        {
            int i = 0;
            string sqry = "Update tblIngridents set HsnCode='" + hsncode + "',TaxId='" + taxid + "',TaxValue='" + taxvalue + "' where IngridID='" + ingridentid + "'";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }


        public DataSet getcontact(string iCusID)
        {
            DataSet ds = new DataSet();
            //string sQry = "select l.LedgerID,* from tblCustomer c inner join tblLedger l on l.LedgerID=c.LedgerId where c.LedgerID='" + iCusID + "' and l.IsActive='Yes' ";
            string sQry = "select l.LedgerID,* from tblLedger l  left join tblCustomer c on l.LedgerID=c.LedgerId where l.LedgerID='" + iCusID + "' and l.IsActive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetLedgerIngredient(int LedgerId)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from  tblLedgerIngredient where LedgerId='" + LedgerId + "' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public int updatecontact(string Ledgerid, string customername, string MobileNo, string PhoneNo, string Area, string Address, string City, string Pincode, string Email, int iContactType, int GroupId, string disc, string gstno, string paymentdays, string username, string passwor, int branchid, double opbalancecridit, double opbalancDebit, string contactType,string Province)
        {
            int iSucess = 0;
            string customerid = "0";
            ////string[] branchid = sUser.Split('_');
            ////string branchid1 = branchid[0].ToString();

            string sQry1 = "update tblledger set paymentdays='" + paymentdays + "',Gstno='" + gstno + "',disc='" + disc + "',LedgerName='" + customername + "',MobileNo='" + MobileNo + "',PhoneNo='" + PhoneNo + "',Area='" + Area + "',Address='" + Address + "',City='" + City + "',Pincode='" + Pincode + "',Email='" + Email + "',ContactTypeID='" + iContactType + "',GroupId=" + GroupId + ",UserName='" + username + "',Password='" + passwor + "',BranchId=" + branchid + ",Open_Credit=" + opbalancecridit + ",Open_Depit=" + opbalancDebit + ",Type='" + contactType + "',Province='" + Province + "' where Ledgerid='" + Ledgerid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry1);

            string sQry2 = "update tblcustomer set Gstno='" + gstno + "', disc='" + disc + "', customername='" + customername + "',MobileNo='" + MobileNo + "',PhoneNo='" + PhoneNo + "',Area='" + Area + "',Address='" + Address + "',City='" + City + "',Pincode='" + Pincode + "',Email='" + Email + "',ContactTypeID='" + iContactType + "',UserName='" + username + "',Password='" + passwor + "',BranchId=" + branchid + ",Province='" + Province + "' where Ledgerid='" + Ledgerid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry2);

            string sQry3 = "Delete from tblLedgerIngredient where Ledgerid='" + Ledgerid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry3);

            string cust = "Select * from tblcustomer where ledgerid='" + Ledgerid + "'";
            DataSet dss = dbObj.InlineExecuteDataSet(cust);
            if (dss.Tables[0].Rows.Count > 0)
            {
                customerid = dss.Tables[0].Rows[0]["IDCust"].ToString();
            }


            string checkemployeelogin = "Select * from tblemployeelogin where ledgerid='" + Ledgerid + "'";
            DataSet ds = dbObj.InlineExecuteDataSet(checkemployeelogin);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string updateemployeelogin = "Update tblemployeelogin set UserName='" + username + "',Password='" + passwor + "',BranchId='" + branchid + "' where ledgerid='" + Ledgerid + "'";
                iSucess = dbObj.InlineExecuteNonQuery(updateemployeelogin);
            }
            else
            {
                sQry1 = "insert into tblEmployeeLogin(username,password,branchid,customerid,ledgerid)values ('" + username + "','" + passwor + "'," + branchid + "," + customerid + "," + Ledgerid + ")";
                iSucess = dbObj.InlineExecuteNonQuery(sQry1);
            }

            return iSucess;

        }


        public DataSet chkupdatecustomer(string sEmail, string sMobile, string IDCust)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblledger where Email='" + sEmail + "' and MobileNo='" + sMobile + "' and Ledgerid<>'" + IDCust + "' and IsActive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public int deletecontact(string LedgerID)
        {
            int iSucess = 0;
            string sQry1 = "update tblledger set IsActive='No' where LedgerID='" + LedgerID + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry1);

            string sQry2 = "update tblCustomer set IsActive='No' where LedgerID='" + LedgerID + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry2);

            return iSucess;
        }
        #endregion

        #region SalesType

        public DataSet searchSalesType(string PaymentType)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblsalestype where PaymentType='" + PaymentType + "' and  IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet getmaxdiscamnt()
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblmaxdisc where   IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public int insert_SalesType(string PaymentType, string margin, string gst, string paygateway, string total, string isactive, string isnormal, string isdiscount, string isinclusiverate, string OrderCount, string OrderType, int Attenderid, string attenderpwd, int Discid, double discper,string billtype,string billwisedisc)
        {
            int i = 0;
            string sqry = "insert into tblsalestype (PaymentType,Margin,GST, PaymentGatway,Total,IsActive,IsNormal,Isdiscount,IsInclusiveRate,OrderCount,OrderType,Attenderid,attenderpwd,Discid,discper,billtype,Isbillwisedisc) values('" + PaymentType + "'," + margin + ",'" + gst + "', '" + paygateway + "', '" + total + "','YES','" + isnormal + "','" + isdiscount + "','" + isinclusiverate + "','" + OrderCount + "','" + OrderType + "','" + Attenderid + "','" + attenderpwd + "','" + Discid + "','" + discper + "','"+ billtype + "','"+ billwisedisc + "')";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public int insert_TransSalesType(string value)
        {
            int i = 0;

            string maxid = "Select MAX(Salestypeid) as id from tblsalestype ";
            DataSet ds = dbObj.InlineExecuteDataSet(maxid);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string id = ds.Tables[0].Rows[0]["id"].ToString();

                string sqry = "insert into tbltranssalestype (Salestypeid,Value) values('" + id + "','" + value + "')";
                i = dbObj.InlineExecuteNonQuery(sqry);
            }
            return i;
        }

        public int insert_TransdiscType(string discid, string discper)
        {
            int i = 0;

            string maxid = "Select MAX(attenderid) as id from tblattender ";
            DataSet ds = dbObj.InlineExecuteDataSet(maxid);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string id = ds.Tables[0].Rows[0]["id"].ToString();

                string sqry = "insert into tblattenderdisc (AttenderId,Discid,Discper) values('" + id + "','" + discid + "','" + discper + "')";
                i = dbObj.InlineExecuteNonQuery(sqry);
            }
            return i;
        }

        public int insert_TransAdminSetting(string TypeSettingID, string TypeName, string iCompanyID)
        {
            int i = 0;

            string sqry = "insert into tblSoftTypeSetting (TypeSettingID,TypeName,CompanyID) values('" + TypeSettingID + "','" + TypeName + "','" + iCompanyID + "')";
            i = dbObj.InlineExecuteNonQuery(sqry);

            return i;
        }

        public int Delete_TransAdminSetting(string iCompanyID)
        {
            int i = 0;

            string sqry = "delete  from  tblSoftTypeSetting where CompanyID='" + iCompanyID + "'";
            i = dbObj.InlineExecuteNonQuery(sqry);

            return i;
        }

        public int insert_TransSalesTypeUpdate(string value, string id)
        {
            int i = 0;
            string sqry = "insert into tbltranssalestype (Salestypeid,Value) values('" + id + "','" + value + "')";
            i = dbObj.InlineExecuteNonQuery(sqry);

            return i;
        }

        public int insert_TransdiscTypeUpdate(string discid, string discper, string attenderid)
        {
            int i = 0;
            string sqry = "insert into tblattenderdisc (AttenderId,Discid,Discper) values('" + attenderid + "','" + discid + "','" + discper + "')";
            i = dbObj.InlineExecuteNonQuery(sqry);

            return i;
        }

        public int Ideletetranssalestype(string salesid)
        {
            int i = 0;

            string idel = "Delete from tbltranssalestype where salestypeid='" + salesid + "'";
            i = dbObj.InlineExecuteNonQuery(idel);
            return i;
        }

        public int Ideletetransdisctype(string salesid)
        {
            int i = 0;

            string idel = "Delete from tblattenderdisc where AttenderId='" + salesid + "'";
            i = dbObj.InlineExecuteNonQuery(idel);
            return i;
        }

        public DataSet GetSalesType()
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblsalestype as a left join tblbilltype as b on b.billtype=a.billtype where a.IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet GetSalesTypeForSales()
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblsalestype where IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet GetSalesTypeForSales_pos(string onlinepos)
        {
            DataSet ds = new DataSet();
            string qr = string.Empty;
            if (onlinepos == "Y")
            {
                qr = "select * from tblsalestype where IsActive='Yes'  and Isnormal='" + onlinepos + "'";
            }
            else
            {
                qr = "select * from tblsalestype where IsActive='Yes' ";
            }
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }


        public DataSet GetSalesTypeForSales_normal(string isnromal)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblsalestype where IsActive='Yes' and Isnormal='" + isnromal + "'";
            //  string qr = "select * from tblsalestype where IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet EditSalesType(int id, int userid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblsalestype  where  SalesTypeID=" + id + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet EditSalesmodeType(int id)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbltranssalestype  where  SalesTypeID=" + id + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet Editdisctype(int id)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblattenderdisc  where  AttenderId=" + id + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet EditTypeSetting(int id)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblSoftTypeSetting  where  CompanyID=" + id + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet searchSalesTypeforupdate(string paymenttype, int id)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblsalestype where paymenttype='" + paymenttype + "' and SalesTypeid <>" + id + " ";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public int update_salestype(string PaymentType, string margin, string gst, string paygateway, string total, string isactive, int id, string isnormal, string isdicount, string isinclusiverate, string OrderCount, string OrderType, int Attenderid, string attenderpwd, int Discid, double discper,string billtype,string isbillwisediscount)
        {
            int i = 0;
            string sqry = "update tblsalestype set Isbillwisedisc='"+ isbillwisediscount + "', billtype='" + billtype+"',Attenderid='" + Attenderid + "',attenderpwd='" + attenderpwd + "',Discid='" + Discid + "',discper='" + discper + "', OrderCount='" + OrderCount + "',OrderType='" + OrderType + "',IsInclusiveRate='" + isinclusiverate + "',Isdiscount='" + isdicount + "',IsNormal='" + isnormal + "',PaymentType='" + PaymentType + "',Margin='" + margin + "', GST='" + gst + "', PaymentGatway='" + paygateway + "',Total='" + total + "',IsActive='" + isactive + "' where SalesTypeID=" + id + "";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public int deletesalestype(int ID)
        {
            int i = 0;
            string sqry = "Update tblsalestype set IsActive='NO' where salestypeid=" + ID + " ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }


        public DataSet getdiscattender(string billertype)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            sqry = "select * from tblattender where type='" + billertype + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }



        #endregion

        #region Prchase

        public DataSet orderentryno(string TableName)
        {
            DataSet ds = new DataSet();
            string qy = "select isnull(max(orderno+1),1) as billno from tblkitchenPurchaseorder_" + TableName + "";
            ds = dbObj.InlineExecuteDataSet(qy);
            return ds;
        }

        public DataSet entryno(string TableName)
        {
            DataSet ds = new DataSet();
            string qy = "select isnull(max(billno+1),1) as billno from tblkitchenPurchase_" + TableName + "";
            ds = dbObj.InlineExecuteDataSet(qy);
            return ds;
        }

        public DataSet SupplierList11()
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblledger where ContactTypeID=6 and IsActive='Yes' Order by LedgerName asc";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }


        public DataSet getsupplierdetais(string supplierid)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblledger where ledgerid='" + supplierid + "' ";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }




        public DataSet Ledgerbank()
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblLedger where GroupID=4";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet getPOlist(string iSalesID, string Table)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblkitchenPurchaseOrder_" + Table + " where orderno='" + iSalesID + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet getduplist(string iSalesID, string Table)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblkitchenPurchase_" + Table + " where Purchaseid='" + iSalesID + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet getpotranslist(string iSalesID, string Table)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblkitchenPurchaseOrder_" + Table + " a inner join tbltranskitchenPurchaseorder_" + Table + " b on a.PurchaseorderID = b.purchaseorderID where a.orderno='" + iSalesID + "' and b.status='NO'";

            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet getduplisttrans(string iSalesID, string Table)
        {
            DataSet ds = new DataSet();
            //////string qr = "select * from tbltranskitchenPurchase_" + Table + " where Purchaseid='" + iSalesID + "'";
            string qr = "select i.Units,tp.* from tbltranskitchenPurchase_" + Table + " tp inner join tblIngridents i on i.IngridID=tp.IngredientID where Purchaseid='" + iSalesID + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }
        public DataSet getCashledgerId123(string Cashledge)
        {
            DataSet ds = new DataSet();
            string qy = "select LedgerID from tblLedger where LedgerName='" + Cashledge + "'";
            ds = dbObj.InlineExecuteDataSet(qy);
            return ds;
        }

        public int updatePurchaseReturn(string Table, int ledgerid, int CreditorID1, string BillNo, string BillDate, string EntryDate, decimal Subtotal, decimal Tax, decimal Total, int Supplier, int Paymode, int bank, string chequeno, string cgst, string sgst, string igst, string dcno, int EntryUserID, string billingtype, int pono, string Province, string RoundOff, string iSalesID, string subcompanyid)
        {
            int save = 0;
            int TransNo = 0;
            DataSet ds1 = new DataSet();
            string qy1 = "select Daybookid from tblkitchenPurchaseReturn_" + Table + " where  purchasertnid='" + iSalesID + "' ";
            ds1 = dbObj.InlineExecuteDataSet(qy1);

            if (ds1.Tables[0].Rows.Count > 0)
            {

                TransNo = Convert.ToInt32(ds1.Tables[0].Rows[0]["Daybookid"].ToString());
            }

            string sqry = "update  tblDayBook_" + Table + " set TransDate='" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd") + "',DebtorId=" + ledgerid + ",CreditorId='" + CreditorID1 + "',Narration='PurchaseNar',RefNo=" + iSalesID + ",Type='PurchaseReturn',Amount='" + Convert.ToDouble(Total) + "'  where transno=" + TransNo + " ";
            save = dbObj.InlineExecuteNonQuery(sqry);

            string Date = DateTime.Now.ToString("dd/MM/yyyy hh:mm tt");
            DateTime date1 = DateTime.ParseExact(Date, "dd/MM/yyyy hh:mm tt", CultureInfo.InvariantCulture);

            //string sQry = "update tblkitchenPurchase_" + Table + " set RoundOff=" + roundoff + ",DCNo='" + dcno + "',CGST='" + cgst + "',SGST='" + sgst + "',IGST='" + igst + "',Subtotal=" + Subtotal + ",Tax=" + Tax + ",Total=" + Total + ",Supplier=" + Supplier + ",Paymode=" + Paymode + ",Bank=" + Bank + ",ChequeNo='" + Shequeno + "',EditUserID=" + EditUserID + ",EditDate='" + Convert.ToDateTime(date1).ToString("yyyy/MM/dd hh:mm tt") + "',EditNarration=isnull(EditNarration,'')+'@'+'" + EditNarration + "',Province='" + province + "',DiscountAmount=" + DiscountAmount + ",FreightCharge=" + FreightCharge + ",FreightChargeTax=" + FreightChargeTax + ",FreightChargeTaxId=" + FreightChargeTaxId + ",FreightChargeTaxValue=" + FreightChargeTaxValue + " where billno=" + iSalesID + "";
            string sQry = "update tblkitchenPurchaseReturn_" + Table + " set PurchaseRtnDate='" + Convert.ToDateTime(date1).ToString("yyyy/MM/dd") + "',BillNo=" + BillNo + "," +
                "EntryDate='" + Convert.ToDateTime(date1).ToString("yyyy/MM/dd hh:mm tt") + "',Subtotal=" + Subtotal + ",Tax=" + Tax + "," +
                "Total=" + Total + ",Supplier=" + Supplier + ",Paymode=" + Paymode + "," +
                "Bank=" + bank + ",ChequeNo='" + chequeno + "',Daybookid=" + TransNo + "," +
                "CGST='" + cgst + "',SGST='" + sgst + "',IGST='" + igst + "',DCNO='" + dcno + "'," +
                "EntryUserID=" + EntryUserID + ",BillingType='" + billingtype + "',PurInvNo='" + pono + "',Province='" + Province + "',RoundOff='" + RoundOff + "',subcompanyid='" + subcompanyid + "' where PurchaseRtnId='" + iSalesID + "'";


            save = dbObj.InlineExecuteNonQuery(sQry);
            DataSet ds = new DataSet();
            return save;
        }


        public int updatePurchase(string Table, string BillNo, string BillDate, string EntryDate, decimal Subtotal, decimal Tax, decimal Total, int Supplier, int Paymode, string iSalesID, int Bank, string Shequeno, int CreditorID1, string ledgerid, string cgst, string sgst, string igst, string dcno, int EditUserID, string EditNarration, string province, double DiscountAmount, double FreightCharge, double FreightChargeTax, int FreightChargeTaxId, double FreightChargeTaxValue, double roundoff)
        {
            int save = 0;
            int TransNo = 0;
            DataSet ds1 = new DataSet();
            string qy1 = "select Daybookid from tblkitchenPurchase_" + Table + " where  Billno='" + iSalesID + "' ";
            ds1 = dbObj.InlineExecuteDataSet(qy1);

            if (ds1.Tables[0].Rows.Count > 0)
            {

                TransNo = Convert.ToInt32(ds1.Tables[0].Rows[0]["Daybookid"].ToString());
            }

            string sqry = "update  tblDayBook_" + Table + " set TransDate='" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd") + "',DebtorId=" + ledgerid + ",CreditorId='" + CreditorID1 + "',Narration='PurchaseNar',RefNo=" + iSalesID + ",Type='Purchase',Amount='" + Convert.ToDouble(Total) + "'  where transno=" + TransNo + " ";
            save = dbObj.InlineExecuteNonQuery(sqry);

            string Date = DateTime.Now.ToString("dd/MM/yyyy hh:mm tt");
            DateTime date1 = DateTime.ParseExact(Date, "dd/MM/yyyy hh:mm tt", CultureInfo.InvariantCulture);

            string sQry = "update tblkitchenPurchase_" + Table + " set RoundOff=" + roundoff + ",DCNo='" + dcno + "',CGST='" + cgst + "',SGST='" + sgst + "',IGST='" + igst + "',Subtotal=" + Subtotal + ",Tax=" + Tax + ",Total=" + Total + ",Supplier=" + Supplier + ",Paymode=" + Paymode + ",Bank=" + Bank + ",ChequeNo='" + Shequeno + "',EditUserID=" + EditUserID + ",EditDate='" + Convert.ToDateTime(date1).ToString("yyyy/MM/dd hh:mm tt") + "',EditNarration=isnull(EditNarration,'')+'@'+'" + EditNarration + "',Province='" + province + "',DiscountAmount=" + DiscountAmount + ",FreightCharge=" + FreightCharge + ",FreightChargeTax=" + FreightChargeTax + ",FreightChargeTaxId=" + FreightChargeTaxId + ",FreightChargeTaxValue=" + FreightChargeTaxValue + " where billno=" + iSalesID + "";
            save = dbObj.InlineExecuteNonQuery(sQry);
            DataSet ds = new DataSet();
            return save;
        }

        public DataSet getPO_NO(string tblPurchase)
        {
            DataSet ds = new DataSet();
            // string sqry = "select MAX(DC_NO)+1 as DC_NO from  " + tblPurchase + "";
            string sqry = "select isnull(max(OrderNo+1),1) as OrderNo from  " + tblPurchase + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public int UpdatePurchaseOrder(string Table, int ledgerid, int CreditorID1, string BillNo, DateTime BillDate, string EntryDate, decimal Subtotal, decimal Tax, decimal Total, int Supplier, int Paymode, int bank, string chequeno, string cgst, string sgst, string igst, string dcno, int EntryUserID, string province, string companyid)
        {
            int TransNo = 0;
            int Bn0 = 0;
            int save = 0;

            string Date = DateTime.Now.ToString("dd/MM/yyyy");
            DateTime date1 = DateTime.ParseExact(Date, "dd/MM/yyyy", CultureInfo.InvariantCulture);


            string sQry = "Update tblkitchenPurchaseorder_" + Table + " set Companyid='"+companyid+"',OrderNo=" + dcno + ",OrderDate='" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd") + "',EntryDate='" + Convert.ToDateTime(date1).ToString("yyyy/MM/dd") + "',Subtotal=" + Subtotal + ",Tax=" + Tax + ",Total=" + Total + ",Supplier=" + Supplier + ",Paymode=" + Paymode + ",Bank=" + bank + ",ChequeNo='" + chequeno + "',CGST='" + cgst + "',SGST='" + sgst + "',IGST='" + igst + "',DCNO='" + dcno + "',EntryUserID=" + EntryUserID + ",Province='" + province + "' where Orderno=" + dcno + "";
            save = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string qy = "select max(purchaseorderID) as Id from tblkitchenPurchaseorder_" + Table + "";
            ds = dbObj.InlineExecuteDataSet(qy);
            save = Convert.ToInt32(ds.Tables[0].Rows[0]["ID"].ToString());
            return save;
        }

        public int insertPurchaseOrder(string Table, int ledgerid, int CreditorID1, string BillNo, DateTime BillDate, string EntryDate, decimal Subtotal, decimal Tax, decimal Total, int Supplier, int Paymode, int bank, string chequeno, string cgst, string sgst, string igst, string dcno, int EntryUserID, string province,string companyid)
        {
            int TransNo = 0;
            int Bn0 = 0;
            int save = 0;

            string Date = DateTime.Now.ToString("dd/MM/yyyy");
            DateTime date1 = DateTime.ParseExact(Date, "dd/MM/yyyy", CultureInfo.InvariantCulture);

            //DataSet ds1 = new DataSet();
            //string qy1 = "select isnull(max(BillNo+1),1) as BillNo from tblkitchenPurchase_" + Table + "";
            //ds1 = dbObj.InlineExecuteDataSet(qy1);

            //if (ds1.Tables[0].Rows.Count > 0)
            //{

            //    Bn0 = Convert.ToInt32(ds1.Tables[0].Rows[0]["BillNo"].ToString());
            //}

            //string sqry = "insert into tblDayBook_" + Table + " (TransDate,DebtorId,CreditorId,Narration,RefNo,Type,Amount)values('" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd") + "'," + ledgerid + ",'" + CreditorID1 + "','PurchaseNar'," + Bn0 + ",'Purchase','" + Convert.ToDouble(Total) + "')";
            //save = dbObj.InlineExecuteNonQuery(sqry);

            //DataSet ds2 = new DataSet();
            //string qy2 = "select max(TransNo) as TransNo from tblDayBook_" + Table + "";
            //ds2 = dbObj.InlineExecuteDataSet(qy2);
            //TransNo = Convert.ToInt32(ds2.Tables[0].Rows[0]["TransNo"].ToString());

            string sQry = "insert into tblkitchenPurchaseorder_" + Table + "(OrderNo,OrderDate,EntryDate,Subtotal,Tax,Total,Supplier,Paymode,Bank,ChequeNo,CGST,SGST,IGST,DCNO,EntryUserID,Province,Companyid) values(" + dcno + ",'" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd") + "','" + Convert.ToDateTime(date1).ToString("yyyy/MM/dd") + "'," + Subtotal + "," + Tax + "," + Total + "," + Supplier + "," + Paymode + "," + bank + ",'" + chequeno + "','" + cgst + "','" + sgst + "','" + igst + "','" + dcno + "'," + EntryUserID + ",'" + province + "','"+companyid+"')";
            save = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string qy = "select max(purchaseorderID) as Id from tblkitchenPurchaseorder_" + Table + "";
            ds = dbObj.InlineExecuteDataSet(qy);
            save = Convert.ToInt32(ds.Tables[0].Rows[0]["ID"].ToString());
            return save;
        }

        public int insertTransPurchaseorder(string Table, int PurchaseID, int IngredientID, decimal Qty, decimal Rate, decimal Amount, decimal Tax, int userid, string Units, decimal billno, int supplier, string pay, string ExpiryDate, string Punitsid, double Pvalue, double PUqty)
        {
            int save = 0;


            DateTime ExpiryDate1;
            if (ExpiryDate == "")
            {
                ExpiryDate1 = DateTime.ParseExact("01/01/1900", "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }
            else
            {
                ExpiryDate1 = DateTime.ParseExact(ExpiryDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }
            string sQry = "insert into tbltranskitchenPurchaseorder_" + Table + "(PurchaseorderID,IngredientID,Qty,Rate,Amount,Tax,Units,BillNo,SupplierID,Paymode,ExpiryDate,RQty,Punitsid,Pvalue,PUqty) values(" + PurchaseID + "," + IngredientID + "," + Qty + "," + Rate + "," + Amount + "," + Tax + ",'" + Units + "'," + billno + "," + supplier + ",'" + pay + "','" + ExpiryDate1.ToString("yyyy-MM-dd") + "',0,'" + Punitsid + "','" + Pvalue + "','" + PUqty + "')";
            save = dbObj.InlineExecuteNonQuery(sQry);

            return save;
        }

        public int insertPurchase(string Table, int ledgerid, int CreditorID1, string BillNo, DateTime BillDate, string EntryDate, decimal Subtotal, decimal Tax, decimal Total, int Supplier, int Paymode, int bank, string chequeno, string cgst, string sgst, string igst, string dcno, int EntryUserID, string billingtype, int pono, string Province, double DiscountAmount, double FreightCharge, double FreightChargeTax, int FreightChargeTaxId, double FreightChargeTaxValue, double Roundoff, string itemloadtype, string itemload,string subcompanyid)
        {
            int TransNo = 0;
            int Bn0 = 0;
            int save = 0;

            string Date = DateTime.Now.ToString("dd/MM/yyyy hh:mm tt");
            DateTime date1 = DateTime.ParseExact(Date, "dd/MM/yyyy hh:mm tt", CultureInfo.InvariantCulture);

            DataSet ds1 = new DataSet();
            string qy1 = "select isnull(max(BillNo+1),1) as BillNo from tblkitchenPurchase_" + Table + "";
            ds1 = dbObj.InlineExecuteDataSet(qy1);

            if (ds1.Tables[0].Rows.Count > 0)
            {

                Bn0 = Convert.ToInt32(ds1.Tables[0].Rows[0]["BillNo"].ToString());
            }

            string sqry = "insert into tblDayBook_" + Table + " (TransDate,DebtorId,CreditorId,Narration,RefNo,Type,Amount)values('" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd") + "'," + ledgerid + ",'" + CreditorID1 + "','PurchaseNar'," + Bn0 + ",'Purchase','" + Convert.ToDouble(Total) + "')";
            save = dbObj.InlineExecuteNonQuery(sqry);

            DataSet ds2 = new DataSet();
            string qy2 = "select max(TransNo) as TransNo from tblDayBook_" + Table + "";
            ds2 = dbObj.InlineExecuteDataSet(qy2);
            TransNo = Convert.ToInt32(ds2.Tables[0].Rows[0]["TransNo"].ToString());

            string sQry = "insert into tblkitchenPurchase_" + Table + "(BillNo,BillDate,EntryDate,Subtotal,Tax,Total,Supplier,Paymode,Bank,ChequeNo,Daybookid,CGST,SGST,IGST,DCNO,EntryUserID,BillingType,POOrderNo,Province,Status,DiscountAmount,FreightCharge,FreightChargeTax,FreightChargeTaxId,FreightChargeTaxValue,RoundOff,itemloadtype,itemload,subcompanyid) values(" + Bn0 + ",'" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd") + "','" + Convert.ToDateTime(date1).ToString("yyyy/MM/dd hh:mm ") + "'," + Subtotal + "," + Tax + "," + Total + "," + Supplier + "," + Paymode + "," + bank + ",'" + chequeno + "'," + TransNo + ",'" + cgst + "','" + sgst + "','" + igst + "','" + dcno + "'," + EntryUserID + ",'" + billingtype + "','" + pono + "','" + Province + "','NO'," + DiscountAmount + "," + FreightCharge + "," + FreightChargeTax + "," + FreightChargeTaxId + "," + FreightChargeTaxValue + "," + Roundoff + ",'" + itemloadtype + "','" + itemload + "','"+ subcompanyid + "')";
            save = dbObj.InlineExecuteNonQuery(sQry);

            //if (billingtype == "Purchase Order")
            //{
            //    string sQry11 = "update tblkitchenPurchaseorder_" + Table + " set Status='YES' where OrderNo = '" + pono + "'";
            //    save = dbObj.InlineExecuteNonQuery(sQry11);
            //}

            DataSet ds = new DataSet();
            string qy = "select max(purchaseID) as Id from tblkitchenPurchase_" + Table + "";
            ds = dbObj.InlineExecuteDataSet(qy);
            save = Convert.ToInt32(ds.Tables[0].Rows[0]["ID"].ToString());
            return save;
        }

        public int insertTransPurchase(string Table, int PurchaseID, int IngredientID, decimal Qty, decimal Rate, decimal Amount, decimal Tax, int userid, string Units, decimal billno, int supplier, string pay, string ExpiryDate, string Narrations, double Disc, double discamount, string Punitsid, double Pvalue, double PUqty)
        {
            int save = 0;

            string Date = DateTime.Now.ToString("dd/MM/yyyy hh:mm tt");
            DateTime date1 = DateTime.ParseExact(Date, "dd/MM/yyyy hh:mm tt", CultureInfo.InvariantCulture);


            DateTime ExpiryDate1;
            if (ExpiryDate == "" || ExpiryDate == "0" || ExpiryDate == "01/01/1900 00:00:00")
            {
                ExpiryDate1 = DateTime.ParseExact("01/01/1900", "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }
            else
            {
                ExpiryDate1 = DateTime.ParseExact(ExpiryDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }
            //ExpiryDate = "";
            string sQry = "insert into tbltranskitchenPurchase_" + Table + "(PurchaseID,IngredientID,Qty,Rate,Amount,Tax,Units,BillNo,SupplierID,Paymode,ExpiryDate,Narrations,Status,RQty,Disc,DiscountAmnt,Punitsid,Pvalue,PUqty) values(" + PurchaseID + "," + IngredientID + "," + Qty + "," + Rate + "," + Amount + "," + Tax + ",'" + Units + "'," + billno + "," + supplier + ",'" + pay + "','" + ExpiryDate1.ToString("yyyy-MM-dd") + "','" + Narrations + "','NO',0," + Disc + "," + discamount + ",'" + Punitsid + "','" + Pvalue + "','" + PUqty + "')";
            save = dbObj.InlineExecuteNonQuery(sQry);



            int stock = 0;
            DataSet dcheck = new DataSet();
            string chk = "select * from tblRawMatlStock_" + Table + " where IngredientID=" + IngredientID + " ";
            dcheck = dbObj.InlineExecuteDataSet(chk);

            double Qtyrate1 = Convert.ToDouble(Qty) * Convert.ToDouble(Rate);

            string Query = "";
            if (dcheck.Tables[0].Rows.Count > 0)
            {
                decimal AvlQty = Convert.ToDecimal(dcheck.Tables[0].Rows[0]["Qty"].ToString());

                double ItemRate = Convert.ToDouble(dcheck.Tables[0].Rows[0]["Rate"].ToString());

                double Qtyrate2 = Convert.ToDouble(AvlQty) * Convert.ToDouble(ItemRate);

                double ttlQtyrate = ((Qtyrate1 + Qtyrate2) / (Convert.ToDouble(Qty) + Convert.ToDouble(AvlQty)));

                decimal dQty = AvlQty + Convert.ToDecimal(PUqty);

                //  decimal dQty = AvlQty + Qty;

                // Query = " update tblRawMatlStock_" + Table + " set Qty=" + dQty + ",Rate=" + ttlQtyrate + " where IngredientID=" + IngredientID + " and userID=" + userid + "  ";
                Query = " update tblRawMatlStock_" + Table + " set Qty=" + dQty + ",Rate=" + ttlQtyrate + " where IngredientID=" + IngredientID + "";
            }
            else
            {
                Query = "insert into tblRawMatlStock_" + Table + " (IngredientID,Qty,UserID,idDelete,units,Rate)values(" + IngredientID + "," + PUqty + "," + userid + ",0,'" + Units + "'," + Rate + " )";
            }

            stock = dbObj.InlineExecuteNonQuery(Query);

            // insert stock - expiry date  
            string sQry11 = "insert into tblRawMatlStockExp_" + Table + " (IngredientID,Qty,ExpiredDate,PurchaseID)values(" + IngredientID + "," + PUqty + ",'" + ExpiryDate1.ToString("yyyy-MM-dd") + "'," + PurchaseID + ") ";
            save = dbObj.InlineExecuteNonQuery(sQry11);

            return save;
        }
        public int getduplisttrans123(string iSalesID, string Table)
        {
            int stock = 0;

            DataSet trans = new DataSet();
            string qr = "select * from tbltranskitchenPurchase_" + Table + " where Purchaseid='" + iSalesID + "'";
            trans = dbObj.InlineExecuteDataSet(qr);


            if (trans != null)
            {
                if (trans.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < trans.Tables[0].Rows.Count; i++)
                    {


                        DataSet dcheck = new DataSet();
                        string chk = "select * from tblRawMatlStock_" + Table + " where IngredientID=" + trans.Tables[0].Rows[i]["IngredientID"] + " ";
                        dcheck = dbObj.InlineExecuteDataSet(chk);


                        string Query = "";
                        if (dcheck.Tables[0].Rows.Count > 0)
                        {
                            decimal AvlQty = Convert.ToDecimal(dcheck.Tables[0].Rows[0]["Qty"].ToString());

                            decimal dQty = AvlQty - Convert.ToDecimal(trans.Tables[0].Rows[i]["PUqty"]);

                            Query = " update tblRawMatlStock_" + Table + " set Qty=" + dQty + " where IngredientID=" + trans.Tables[0].Rows[i]["IngredientID"] + "   ";


                            stock = dbObj.InlineExecuteNonQuery(Query);


                        }



                    }
                }
            }
            return stock;
        }

        public int getduplisttrans123Rtn(string iSalesID, string Table)
        {
            int stock = 0;

            DataSet trans = new DataSet();
            string qr = "select * from tbltranskitchenPurchaseReturn_" + Table + " where purchasertnid='" + iSalesID + "'";
            trans = dbObj.InlineExecuteDataSet(qr);


            if (trans != null)
            {
                if (trans.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < trans.Tables[0].Rows.Count; i++)
                    {


                        DataSet dcheck = new DataSet();
                        string chk = "select * from tblRawMatlStock_" + Table + " where IngredientID=" + trans.Tables[0].Rows[i]["IngredientID"] + " ";
                        dcheck = dbObj.InlineExecuteDataSet(chk);


                        string Query = "";
                        if (dcheck.Tables[0].Rows.Count > 0)
                        {
                            decimal AvlQty = Convert.ToDecimal(dcheck.Tables[0].Rows[0]["Qty"].ToString());

                            decimal dQty = AvlQty - Convert.ToDecimal(trans.Tables[0].Rows[i]["PUqty"]);

                            Query = " update tblRawMatlStock_" + Table + " set Qty=" + dQty + " where IngredientID=" + trans.Tables[0].Rows[i]["IngredientID"] + "   ";


                            stock = dbObj.InlineExecuteNonQuery(Query);


                        }



                    }
                }
            }
            return stock;
        }

        public int getduplisttransdeleteRtn(string iSalesID, string Table)
        {
            int isucess = 0;
            string qr = "Delete  from tbltranskitchenPurchaseReturn_" + Table + " where purchasertnid='" + iSalesID + "'";
            isucess = dbObj.InlineExecuteNonQuery(qr);
            return isucess;
        }

        public int getduplisttransdelete(string iSalesID, string Table)
        {
            int isucess = 0;
            string qr = "Delete  from tbltranskitchenPurchaseorder_" + Table + " where Purchaseorderid='" + iSalesID + "'";
            isucess = dbObj.InlineExecuteNonQuery(qr);
            return isucess;
        }

        public DataSet getingreUnits(string id, string LedgerId, string loaditemtype)
        {
            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            string qr = string.Empty;
            int cnt = 0;
            string sqr = string.Empty;
            string sqry = string.Empty;
            if (loaditemtype == "2")
            {
                sqry = "select count(*) as cnt from  tblLedgerIngredient where ledgerid='" + LedgerId + "'";
                dss = dbObj.InlineExecuteDataSet(sqry);
                if (dss.Tables[0].Rows.Count > 0)
                {
                    cnt = Convert.ToInt32(dss.Tables[0].Rows[0]["cnt"]);
                }

                if (cnt > 0)
                {
                    sqr = "select i.*,b.BIngredientName,u.uomid,u.UOM from tblIngridents as i inner join tblLedgerIngredient as b on  i.IngridID=b.IngredientId inner join tbluom as u on u.UOMID=i.UNITS where i.IngridID='" + id + "' and b.ledgerid='" + LedgerId + "'";
                    ds = dbObj.InlineExecuteDataSet(sqr);
                }
                else
                {
                    sqr = "select i.*,'' as BIngredientName,u.uomid,u.UOM from tblIngridents as i  inner join tbluom as u on u.UOMID=i.UNITS where i.IngridID='" + id + "'";
                    ds = dbObj.InlineExecuteDataSet(sqr);
                }
            }
            else
            {
                sqry = "select * from  tblLedgerIngredient where ledgerid='" + LedgerId + "' and IngredientId='" + id + "' ";
                dss = dbObj.InlineExecuteDataSet(sqry);
                if (dss.Tables[0].Rows.Count > 0)
                {
                    sqr = "select i.*,b.BIngredientName,u.uomid,u.UOM from tblIngridents as i inner join tblLedgerIngredient as b on  i.IngridID=b.IngredientId inner join tbluom as u on u.UOMID=i.UNITS where i.IngridID='" + id + "' and b.ledgerid='" + LedgerId + "'";
                    ds = dbObj.InlineExecuteDataSet(sqr);
                }
                else
                {
                    sqr = "select i.*,'' as BIngredientName,u.uomid,u.UOM from tblIngridents as i  inner join tbluom as u on u.UOMID=i.UNITS where i.IngridID='" + id + "'";
                    ds = dbObj.InlineExecuteDataSet(sqr);
                }
            }
            return ds;

        }

        public DataSet getpurchaseMaster(string Table)
        {
            DataSet ds = new DataSet();
            //string sQry = " select Top 10 c.ledgername as CustomerName,kp.*,case kp.Paymode when 1 then 'Cash' when 2 then 'Credit' else 'Cheque' end as PaymentMode from  tblkitchenPurchase_" + Table + " kp inner join tblledger c on c.ledgerID=kp.Supplier order by kp.BillNo desc";
            string sQry = " select Top 10 c.ledgername as CustomerName,kp.*,sp.paymode as PaymentMode from  tblkitchenPurchase_" + Table + " kp inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsalespaymode sp on kp.Paymode=sp.value order by kp.BillNo desc";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet getpurchaseMasterSearch(string Table, string columnname, string columnvalue)
        {
            DataSet ds = new DataSet();
            string sQry = " select c.ledgername as CustomerName,kp.*,case kp.Paymode when 1 then 'Cash' when 2 then 'Credit' else 'Cheque' end as PaymentMode from  tblkitchenPurchase_" + Table + " kp inner join tblledger c on c.ledgerID=kp.Supplier where (" + columnname + ") like '%" + columnvalue + "%' order by kp.BillNo desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getpurchaseOrderMaster(string Table)
        {
            DataSet ds = new DataSet();
            //  string sQry = " select c.ledgername as CustomerName,kp.*,case kp.Paymode when 1 then 'Cash' when 2 then 'Credit' else 'Cheque' end as PaymentMode from  tblkitchenPurchaseOrder_" + Table + " kp inner join tblledger c on c.ledgerID=kp.Supplier order by kp.OrderNo desc";
            // paymode mismatch still not merge so kindly check that
            string sQry = " select isnull(d.CustomerName,'Not Assign')+'-'+d.GSTNo as companyname,c.ledgername as CustomerName,kp.*,sp.paymode as PaymentMode from  tblkitchenPurchaseOrder_" + Table + " kp inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsalespaymode sp on kp.Paymode=sp.value  left join tblsubCompanyDetails as d on d.subComapanyID=kp.Companyid order by kp.OrderNo desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getbranchordersummaryitem(string bookno, string branchcode, string FromDate, string columnvalue)
        {
            DataSet dgetorder = new DataSet();
            //string ordersummary = "Select * from tblordersummary_" + branchcode + " as o inner join tbltransordersummary_" + branchcode + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where o.billno='" + bookno + "' and convert(date," + columnvalue + ") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'";
            // string ordersummary = "Select distinct * from tblordersummary_" + branchcode + " as o inner join tbltransordersummary_" + branchcode + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where o.billno='" + bookno + "'";

            string ordersummary = "Select distinct OrderNo,OrderDate,DeliveryDate,DeliveryTime,Bookno,o.IsTransfer,o.BranchCode,o.billno,o.Pbranch,o.OnlineSync,o.onlinecomment,o.Onlinesyncdate,Deliverstatus,Deliveryid,EmployeeId,o.Billno,o.BranchCode,cu.Categoryid,SubCategoryid,Qty,o.Istransfer,modelno,Modelimgpath,o.Pbranch,o.OnlineSync,o.onlinecomment,o.Onlinesyncdate,ItemID,too.CategoryID,Definition,IsDelete,Serial_No,Serial,Size,isChecked,CustomerID,Tax,IsExpiry,Rate,CategoryUserID,Rate2,GST,TaxVal,unit,empcode,MinimumStock,DisplayOnline,ImageUpload,IsActive,UnitName,HSNCode,Common,Printitem,FoodType from tblordersummary_" + branchcode + " as o inner join tbltransordersummary_" + branchcode + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where o.billno='" + bookno + "' and o.Deliveryid=1";
            dgetorder = dbObj.InlineExecuteDataSet(ordersummary);

            return dgetorder;
        }

        public DataSet getbranchordersummaryitemmail(string bookno, string branchcode)
        {
            DataSet dgetorder = new DataSet();
            string ordersummary = "Select * from tblorder_" + branchcode + " as o inner join tbltransorder_" + branchcode + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where o.billno='" + bookno + "' ";
            dgetorder = dbObj.InlineExecuteDataSet(ordersummary);

            return dgetorder;
        }


        public DataSet getbranchordersummary(string sbranchcode, string FromDate, string stablename)
        {
            DataSet dgetorder = new DataSet();
            DataSet dmerge = new DataSet();

            DataSet ds = new DataSet();
            string branch = string.Empty;
            if (sbranchcode == "All")
            {
                string sqry = "Select * from tblbranch where branchtype='0'";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        branch = ds.Tables[0].Rows[i]["branchname"].ToString();
                        string tablename = "tblordersummary_" + ds.Tables[0].Rows[i]["branchname"].ToString();

                        string gettablename = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";
                        DataSet dc = dbObj.InlineExecuteDataSet(gettablename);

                        if (dc.Tables[0].Rows.Count > 0)
                        {
                            //  string ordersummary = "Select *,isnull(Employeeid,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where convert(date,Deliverydate) = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'";
                            string ordersummary = "Select o.*,too.*,cu.*,isnull(customername,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too " +
                                " on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid left join tblCustomer as c on c.IDCust=o.employeeid " +
                                " where Pbranch='" + stablename + "' and convert(date,Orderdate) = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "' and Deliverstatus='Pending'";
                            dgetorder = dbObj.InlineExecuteDataSet(ordersummary);
                            dmerge.Merge(dgetorder);
                        }
                    }

                }


            }
            else
            {
                string sqry = "Select * from tblbranch where branchtype='0' and branchname='" + sbranchcode + "'";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        branch = ds.Tables[0].Rows[i]["branchname"].ToString();
                        string tablename = "tblordersummary_" + ds.Tables[0].Rows[i]["branchname"].ToString();

                        string gettablename = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";
                        DataSet dc = dbObj.InlineExecuteDataSet(gettablename);

                        if (dc.Tables[0].Rows.Count > 0)
                        {
                            // string ordersummary = "Select *,isnull(Employeeid,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where convert(date,Deliverydate) = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'";
                            string ordersummary = "Select o.*,too.*,cu.*,isnull(customername,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too " +
                                " on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid left join tblCustomer as c on c.IDCust=o.employeeid " +
                                " where Pbranch='" + stablename + "' and convert(date,Orderdate) = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "' and Deliverstatus='Pending'";
                            dgetorder = dbObj.InlineExecuteDataSet(ordersummary);
                            dmerge.Merge(dgetorder);
                        }
                    }

                }
            }
            return dmerge;
        }

        public DataSet getbranchordersummary_Assign(string sbranchcode, string FromDate, string columnvalue, string status)
        {
            DataSet dgetorder = new DataSet();
            DataSet dmerge = new DataSet();

            DataSet ds = new DataSet();
            string branch = string.Empty;
            string Delstatus = string.Empty;


            if (sbranchcode == "All")
            {
                string sqry = "Select * from tblbranch where branchtype='0'";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        branch = ds.Tables[0].Rows[i]["branchname"].ToString();
                        string tablename = "tblordersummary_" + ds.Tables[0].Rows[i]["branchname"].ToString();

                        string gettablename = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";
                        DataSet dc = dbObj.InlineExecuteDataSet(gettablename);

                        if (dc.Tables[0].Rows.Count > 0)
                        {
                            //  string ordersummary = "Select *,isnull(Employeeid,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where convert(date,Deliverydate) = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'";
                            if (status == "All")
                            {

                                string ordersummary = "Select o.*,too.*,cu.*,isnull(customername,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too " +
                                    " on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid  left join tblCustomer as c on c.IDCust=o.employeeid  " +
                                    " where Pbranch='" + sbranchcode + "' and convert(date," + columnvalue + ") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'";
                                dgetorder = dbObj.InlineExecuteDataSet(ordersummary);
                            }
                            else
                            {
                                string ordersummary = "Select o.*,too.*,cu.*,isnull(customername,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too " +
                                    " on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid left join tblCustomer as c on c.IDCust=o.employeeid " +
                                    " where Pbranch='" + sbranchcode + "' and convert(date," + columnvalue + ") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "' and Deliveryid='" + status + "' ";
                                dgetorder = dbObj.InlineExecuteDataSet(ordersummary);
                            }
                            dmerge.Merge(dgetorder);
                        }
                    }

                }


            }
            else
            {
                string sqry = "Select * from tblbranch where branchtype='0' and branchname='" + sbranchcode + "'";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        branch = ds.Tables[0].Rows[i]["branchname"].ToString();
                        string tablename = "tblordersummary_" + ds.Tables[0].Rows[i]["branchname"].ToString();

                        string gettablename = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";
                        DataSet dc = dbObj.InlineExecuteDataSet(gettablename);

                        if (dc.Tables[0].Rows.Count > 0)
                        {
                            // string ordersummary = "Select *,isnull(Employeeid,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where convert(date,Deliverydate) = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'";
                            if (status == "All")
                            {
                                string ordersummary = "Select o.*,too.*,cu.*,isnull(customername,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too " +
                                    " on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid left join tblCustomer as c on c.IDCust=o.employeeid " +
                                    " where Pbranch='" + sbranchcode + "' and convert(date," + columnvalue + ") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "' ";
                                dgetorder = dbObj.InlineExecuteDataSet(ordersummary);
                            }
                            else
                            {
                                string ordersummary = "Select o.*,too.*,cu.*,isnull(customername,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too " +
                                    " on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid left join tblCustomer as c on c.IDCust=o.employeeid " +
                                    " where Pbranch='" + sbranchcode + "' and convert(date," + columnvalue + ") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "' and Deliveryid ='" + status + "'";
                                dgetorder = dbObj.InlineExecuteDataSet(ordersummary);
                            }
                            dmerge.Merge(dgetorder);
                        }
                    }

                }
            }
            return dmerge;
        }

        public DataSet getbranchordersummaryMail(string sbranchcode, int days)
        {
            DataSet ds = new DataSet();

            string sqry = "select '" + sbranchcode + "' as Branchcode, DATEADD(year, 1, Deliverydate) as futruedeliverydate,o.*,c.customername,c.mobileno from tblorder_" + sbranchcode + " as o inner join tblcustomer as c on o.CustomerID=c.CustomerID   " +
            " where DATEADD(year, 1, CAST(Deliverydate as date)) =DATEADD(DAY," + days + ", cast(GETDATE() as date))";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getpurchaseOrderMasterDel(string Table, string pono)
        {
            DataSet ds = new DataSet();
            string sQry = " select * from  tblkitchenPurchaseOrder_" + Table + " where orderno = '" + pono + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public int deletePURordermaster(string ID, string Table)
        {
            int TransNo = 0;
            int iSucess = 0;

            DataSet ds1 = new DataSet();
            string qy1 = "select purchaseorderid from tblkitchenPurchaseOrder_" + Table + " where  Orderno='" + ID + "' ";
            ds1 = dbObj.InlineExecuteDataSet(qy1);

            if (ds1.Tables[0].Rows.Count > 0)
            {

                TransNo = Convert.ToInt32(ds1.Tables[0].Rows[0]["purchaseorderid"].ToString());
            }

            string sQry2 = "delete from tblkitchenPurchaseorder_" + Table + " where Orderno='" + ID + "' ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry2);

            string sQry3 = "delete from tbltranskitchenPurchaseOrder_" + Table + " where PurchaseorderID='" + TransNo + "' ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry3);
            return iSucess;
        }

        public int UpdatePOSTkStatus(int ID, string Table)
        {
            int TransNo = 0;
            int iSucess = 0;

            DataSet ds1 = new DataSet();
            string qy1 = "select * from tblkitchenPurchaseorder_" + Table + " where  orderno='" + ID + "' ";
            ds1 = dbObj.InlineExecuteDataSet(qy1);

            if (ds1.Tables[0].Rows.Count > 0)
            {
                TransNo = Convert.ToInt32(ds1.Tables[0].Rows[0]["PurchaseOrderID"].ToString());
            }

            DataSet ds12 = new DataSet();
            string qy12 = "select Status from tbltranskitchenPurchaseorder_" + Table + " where purchaseorderid='" + TransNo + "' group by Status";
            ds12 = dbObj.InlineExecuteDataSet(qy12);

            if (ds12.Tables[0].Rows.Count == 1)
            {
                if (ds12.Tables[0].Rows[0]["Status"].ToString() == "YES       ")
                {
                    string sQry11 = " update tblkitchenPurchaseorder_" + Table + " set Status = 'YES'  where  orderno='" + ID + "' ";
                    iSucess = dbObj.InlineExecuteNonQuery(sQry11);
                }
            }

            return iSucess;
        }

        public int UpdatePOSTk(int ID, string Table, decimal pQty, int IngredientID)
        {
            int TransNo = 0;
            int iSucess = 0;

            DataSet ds1 = new DataSet();
            string qy1 = "select * from tblkitchenPurchaseorder_" + Table + " where  orderno='" + ID + "' ";
            ds1 = dbObj.InlineExecuteDataSet(qy1);

            if (ds1.Tables[0].Rows.Count > 0)
            {

                TransNo = Convert.ToInt32(ds1.Tables[0].Rows[0]["PurchaseOrderID"].ToString());
            }

            string sQry11 = " update tbltranskitchenPurchaseorder_" + Table + " set PQty=PQty + " + pQty + " where IngredientID=" + IngredientID + " and purchaseorderid=" + TransNo + "  ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry11);

            string sQry121 = " update tbltranskitchenPurchaseorder_" + Table + " set Status='YES' where IngredientID=" + IngredientID + " and purchaseorderid=" + TransNo + " and Qty=PQty";
            iSucess = dbObj.InlineExecuteNonQuery(sQry121);

            return iSucess;
        }

        public int deletePURmaster(string ID, string Table)
        {
            int TransNo = 0;
            int iSucess = 0;

            DataSet ds1 = new DataSet();
            string qy1 = "select Daybookid from tblkitchenPurchase_" + Table + " where  PurchaseID='" + ID + "' ";
            ds1 = dbObj.InlineExecuteDataSet(qy1);

            if (ds1.Tables[0].Rows.Count > 0)
            {

                TransNo = Convert.ToInt32(ds1.Tables[0].Rows[0]["Daybookid"].ToString());
            }

            string sQry1 = "delete from tblDayBook_" + Table + " where TransNo='" + TransNo + "' ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry1);

            string sQry2 = "delete from tblkitchenPurchase_" + Table + " where PurchaseID='" + ID + "' ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry2);

            DataSet trans = getduplisttrans1(ID, Table);

            if (trans != null)
            {
                if (trans.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < trans.Tables[0].Rows.Count; i++)
                    {

                        int stock = 0;
                        DataSet dcheck = new DataSet();
                        string chk = "select * from tblRawMatlStock_" + Table + " where IngredientID=" + trans.Tables[0].Rows[i]["IngredientID"] + " ";
                        dcheck = dbObj.InlineExecuteDataSet(chk);


                        string Query = "";
                        if (dcheck.Tables[0].Rows.Count > 0)
                        {
                            decimal AvlQty = Convert.ToDecimal(dcheck.Tables[0].Rows[0]["Qty"].ToString());

                            decimal dQty = AvlQty - Convert.ToDecimal(trans.Tables[0].Rows[i]["PUQty"]);

                            Query = " update tblRawMatlStock_" + Table + " set Qty=" + dQty + " where IngredientID=" + trans.Tables[0].Rows[i]["IngredientID"] + "   ";
                        }


                        stock = dbObj.InlineExecuteNonQuery(Query);
                    }
                }
            }



            string sQry3 = "delete from tbltranskitchenPurchase_" + Table + " where PurchaseID='" + ID + "' ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry3);
            return iSucess;
        }

        public int deletePURRtnmaster(string ID, string Table)
        {
            int TransNo = 0;
            int iSucess = 0;

            DataSet ds1 = new DataSet();
            string qy1 = "select Daybookid from tblkitchenPurchaseReturn_" + Table + " where  purchasertnid='" + ID + "' ";
            ds1 = dbObj.InlineExecuteDataSet(qy1);

            if (ds1.Tables[0].Rows.Count > 0)
            {

                TransNo = Convert.ToInt32(ds1.Tables[0].Rows[0]["Daybookid"].ToString());
            }

            string sQry1 = "delete from tblDayBook_" + Table + " where TransNo='" + TransNo + "' ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry1);

            string sQry2 = "delete from tblkitchenPurchaseReturn_" + Table + " where purchasertnid='" + ID + "' ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry2);

            DataSet trans = getduplisttrans1Rtn(ID, Table);

            if (trans != null)
            {
                if (trans.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < trans.Tables[0].Rows.Count; i++)
                    {

                        int stock = 0;
                        DataSet dcheck = new DataSet();
                        string chk = "select * from tblRawMatlStock_" + Table + " where IngredientID=" + trans.Tables[0].Rows[i]["IngredientID"] + " ";
                        dcheck = dbObj.InlineExecuteDataSet(chk);


                        string Query = "";
                        if (dcheck.Tables[0].Rows.Count > 0)
                        {
                            decimal AvlQty = Convert.ToDecimal(dcheck.Tables[0].Rows[0]["Qty"].ToString());

                            decimal dQty = AvlQty + Convert.ToDecimal(trans.Tables[0].Rows[i]["PUQty"]);

                            Query = " update tblRawMatlStock_" + Table + " set Qty=" + dQty + " where IngredientID=" + trans.Tables[0].Rows[i]["IngredientID"] + "   ";
                        }


                        stock = dbObj.InlineExecuteNonQuery(Query);
                    }
                }
            }



            string sQry3 = "delete from tbltranskitchenPurchasereturn_" + Table + " where purchasertnid='" + ID + "' ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry3);
            return iSucess;
        }


        public DataSet getduplisttrans1(string iSalesID, string Table)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tbltranskitchenPurchase_" + Table + " where Purchaseid='" + iSalesID + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet getduplisttrans1Rtn(string iSalesID, string Table)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tbltranskitchenPurchaseReturn_" + Table + " where purchasertnid='" + iSalesID + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }
        

        public DataSet getpurchaseMasterdate(string Table, string Supplier, DateTime from, DateTime to)
        {
            DataSet ds = new DataSet();
            if (Supplier == "All")
            {
                string sQry = " select c.ledgername as CustomerName,kp.*,sp.paymode as PaymentMode  from  tblkitchenPurchase_" + Table + " kp inner join tblledger c on c.ledgerID=kp.Supplier inner join tblsalespaymode sp on kp.Paymode=sp.value where  CAST(kp.BillDate AS DATE) >= '" + Convert.ToDateTime(from).ToString("yyyy/MM/dd") + "'  AND CAST(kp.BillDate AS DATE) <= '" + Convert.ToDateTime(to).ToString("yyyy/MM/dd") + "' order by kp.BillNo desc";
              
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else
            {
                string sQry = " select c.ledgername as CustomerName,kp.*,sp.paymode as PaymentMode from  tblkitchenPurchase_" + Table + " kp inner join tblledger c on c.ledgerID=kp.Supplier inner join tblsalespaymode sp on kp.Paymode=sp.value where Supplier=" + Supplier + "  and CAST(kp.BillDate AS DATE) >= '" + Convert.ToDateTime(from).ToString("yyyy/MM/dd") + "'  AND CAST(kp.BillDate AS DATE) <= '" + Convert.ToDateTime(to).ToString("yyyy/MM/dd") + "' order by kp.BillNo desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            return ds;
        }

        public DataSet getpurchaseOrderMasterdate(string Table, string Supplier, DateTime from, DateTime to)
        {
            DataSet ds = new DataSet();
            if (Supplier == "All")
            {
                string sQry = " select isnull(d.CustomerName,'Not Assign')+'-'+d.GSTNo as companyname,c.ledgername as CustomerName,kp.*,sp.paymode as PaymentMode  from  tblkitchenPurchaseOrder_" + Table + " kp inner join tblledger c on c.ledgerID=kp.Supplier left join tblsubCompanyDetails as d on d.subComapanyID=kp.Companyid inner join tblsalespaymode sp on kp.Paymode=sp.value where  CAST(kp.OrderDate AS DATE) >= '" + Convert.ToDateTime(from).ToString("yyyy/MM/dd") + "'  AND CAST(kp.OrderDate AS DATE) <= '" + Convert.ToDateTime(to).ToString("yyyy/MM/dd") + "' order by kp.OrderNo desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else
            {
                string sQry = " select isnull(d.CustomerName,'Not Assign')+'-'+d.GSTNo as companyname,c.ledgername as CustomerName,kp.*,sp.paymode as PaymentMode  from  tblkitchenPurchaseOrder_" + Table + " kp inner join tblledger c on c.ledgerID=kp.Supplier left join tblsubCompanyDetails as d on d.subComapanyID=kp.Companyid inner join tblsalespaymode sp on kp.Paymode=sp.value where Supplier=" + Supplier + "  and CAST(kp.OrderDate AS DATE) >= '" + Convert.ToDateTime(from).ToString("yyyy/MM/dd") + "'  AND CAST(kp.OrderDate AS DATE) <= '" + Convert.ToDateTime(to).ToString("yyyy/MM/dd") + "' order by kp.OrderNo desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            return ds;
        }


        public DataSet GetIngredientall()
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblIngridents where IsActive='Yes' Order by IngredientName asc";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet getpurchasedetailsall(string Table)
        {
            DataSet ds = new DataSet();
            string qr = "select c.ledgername as CustomerName,case kp.Paymode when 1 then 'Cash' when 2 then 'Credit' else 'Cheque' end as PaymentMode,* from  tblkitchenPurchase_" + Table + " kp inner join tblTranskitchenPurchase_" + Table + " tkp on kp.purchaseID=tkp.PurchaseID  inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier order by kp.BillNo desc";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet getpurchasedetails(string Table, string Supplier, string sFmdate, string sToDate, string Raw, string subcompany)
        {
            DataSet ds = new DataSet();
            if (Supplier == "All")
            {
                if (Raw == "All")
                {
                    if (subcompany == "All")
                    {
                        string sQry = " select cm.customername as compname,cm.CustomerName+'-'+cm.GSTNO as CustomerName1, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchase_" + Table + " kp inner join tblTranskitchenPurchase_" + Table + " tkp on kp.purchaseID=tkp.PurchaseID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where  convert(date,kp.BillDate) between '" + sFmdate + "' and '" + sToDate + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = " select cm.customername as compname,cm.CustomerName+'-'+cm.GSTNO as CustomerName1, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchase_" + Table + " kp inner join tblTranskitchenPurchase_" + Table + " tkp on kp.purchaseID=tkp.PurchaseID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where  convert(date,kp.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and kp.subcompanyid='" + subcompany + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }

                }
                else
                {
                    if (subcompany == "All")
                    {
                        string sQry = " select cm.customername as compname,cm.CustomerName+'-'+cm.GSTNO as CustomerName1, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchase_" + Table + " kp inner join tblTranskitchenPurchase_" + Table + " tkp on kp.purchaseID=tkp.PurchaseID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where  convert(date,kp.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and tkp.IngredientID=" + Raw + " order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = " select cm.customername as compname,cm.CustomerName+'-'+cm.GSTNO as CustomerName1, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchase_" + Table + " kp inner join tblTranskitchenPurchase_" + Table + " tkp on kp.purchaseID=tkp.PurchaseID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where  convert(date,kp.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and tkp.IngredientID=" + Raw + " and kp.subcompanyid='" + subcompany + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
            }
            else
            {
                if (Raw == "All")
                {
                    if (subcompany == "All")
                    {
                        string sQry = " select cm.customername as compname,cm.CustomerName+'-'+cm.GSTNO as CustomerName1, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchase_" + Table + " kp inner join tblTranskitchenPurchase_" + Table + " tkp on kp.purchaseID=tkp.PurchaseID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where Supplier=" + Supplier + "  and convert(date,kp.BillDate) between '" + sFmdate + "' and '" + sToDate + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = " select cm.customername as compname,cm.CustomerName+'-'+cm.GSTNO as CustomerName1, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchase_" + Table + " kp inner join tblTranskitchenPurchase_" + Table + " tkp on kp.purchaseID=tkp.PurchaseID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where Supplier=" + Supplier + "  and convert(date,kp.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and kp.subcompanyid='" + subcompany + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }

                else
                {
                    if (subcompany == "All")
                    {
                        string sQry = " select cm.customername as compname,cm.CustomerName+'-'+cm.GSTNO as CustomerName1, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchase_" + Table + " kp inner join tblTranskitchenPurchase_" + Table + " tkp on kp.purchaseID=tkp.PurchaseID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where Supplier=" + Supplier + "  and tkp.IngredientID=" + Raw + " and  convert(date,kp.BillDate) between '" + sFmdate + "' and '" + sToDate + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = " select cm.customername as compname,cm.CustomerName+'-'+cm.GSTNO as CustomerName1, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchase_" + Table + " kp inner join tblTranskitchenPurchase_" + Table + " tkp on kp.purchaseID=tkp.PurchaseID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where Supplier=" + Supplier + "  and tkp.IngredientID=" + Raw + " and  convert(date,kp.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and kp.subcompanyid='" + subcompany + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
            }
            return ds;
        }


        #endregion

        #region KitchenPurchaseReturn

        public DataSet getpurchaseReturndetails(string Table, string Supplier, string sFmdate, string sToDate, string Raw, string subcompany)
        {
            DataSet ds = new DataSet();
            if (Supplier == "All")
            {
                if (Raw == "All")
                {
                    if (subcompany == "All")
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseReturn_" + Table + " kp inner join tblTranskitchenPurchaseReturn_" + Table + " tkp on kp.purchaseRtnID=tkp.PurchaseRtnID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where  convert(date,kp.PurchaseRtnDate) between '" + sFmdate + "' and '" + sToDate + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseReturn_" + Table + " kp inner join tblTranskitchenPurchaseReturn_" + Table + " tkp on kp.purchaseRtnID=tkp.PurchaseRtnID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where  convert(date,kp.PurchaseRtnDate) between '" + sFmdate + "' and '" + sToDate + "' and kp.subcompanyid='" + subcompany + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }

                }
                else
                {
                    if (subcompany == "All")
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseReturn_" + Table + " kp inner join tblTranskitchenPurchaseReturn_" + Table + " tkp on kp.purchaseRtnID=tkp.PurchaseRtnID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where  convert(date,kp.PurchaseRtnDate) between '" + sFmdate + "' and '" + sToDate + "' and tkp.IngredientID=" + Raw + " order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseReturn_" + Table + " kp inner join tblTranskitchenPurchaseReturn_" + Table + " tkp on kp.purchaseRtnID=tkp.PurchaseRtnID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where  convert(date,kp.PurchaseRtnDate) between '" + sFmdate + "' and '" + sToDate + "' and tkp.IngredientID=" + Raw + " and kp.subcompanyid='" + subcompany + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
            }
            else
            {
                if (Raw == "All")
                {
                    if (subcompany == "All")
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseReturn_" + Table + " kp inner join tblTranskitchenPurchaseReturn_" + Table + " tkp on kp.purchaseRtnID=tkp.PurchaseRtnID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where Supplier=" + Supplier + "  and convert(date,kp.PurchaseRtnDate) between '" + sFmdate + "' and '" + sToDate + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseReturn_" + Table + " kp inner join tblTranskitchenPurchaseReturn_" + Table + " tkp on kp.purchaseRtnID=tkp.PurchaseRtnID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where Supplier=" + Supplier + "  and convert(date,kp.PurchaseRtnDate) between '" + sFmdate + "' and '" + sToDate + "' and kp.subcompanyid='" + subcompany + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }

                else
                {
                    if (subcompany == "All")
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseReturn_" + Table + " kp inner join tblTranskitchenPurchaseReturn_" + Table + " tkp on kp.purchaseRtnID=tkp.PurchaseRtnID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where Supplier=" + Supplier + "  and tkp.IngredientID=" + Raw + " and  convert(date,kp.PurchaseRtnDate) between '" + sFmdate + "' and '" + sToDate + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseReturn_" + Table + " kp inner join tblTranskitchenPurchaseReturn_" + Table + " tkp on kp.purchaseRtnID=tkp.PurchaseRtnID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where Supplier=" + Supplier + "  and tkp.IngredientID=" + Raw + " and  convert(date,kp.PurchaseRtnDate) between '" + sFmdate + "' and '" + sToDate + "' and kp.subcompanyid='" + subcompany + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
            }
            return ds;
        }
        #endregion

        #region KitchenPurchaseorder

        public DataSet getpurchaseorderdetails(string Table, string Supplier, string sFmdate, string sToDate, string Raw, string subcompany)
        {
            DataSet ds = new DataSet();
            if (Supplier == "All")
            {
                if (Raw == "All")
                {
                    if (subcompany == "All")
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseOrder_" + Table + " kp inner join tblTranskitchenPurchasen_" + Table + " tkp on kp.purchaseorderID=tkp.purchaseorderID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where  convert(date,kp.orderDate) between '" + sFmdate + "' and '" + sToDate + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseOrder_" + Table + " kp inner join tblTranskitchenPurchaseReturn_" + Table + " tkp on kp.purchaseorderID=tkp.PurchaseorderID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where  convert(date,kp.orderDate) between '" + sFmdate + "' and '" + sToDate + "' and kp.subcompanyid='" + subcompany + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }

                }
                else
                {
                    if (subcompany == "All")
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseOrder_" + Table + " kp inner join tblTranskitchenPurchaseOrder_" + Table + " tkp on kp.purchaseorderID=tkp.PurchaseorderID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where  convert(date,kp.OrderDate) between '" + sFmdate + "' and '" + sToDate + "' and tkp.IngredientID=" + Raw + " order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseOrder_" + Table + " kp inner join tblTranskitchenPurchaseOrder_" + Table + " tkp on kp.purchaseorderID=tkp.PurchaseorderID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where  convert(date,kp.OrderDate) between '" + sFmdate + "' and '" + sToDate + "' and tkp.IngredientID=" + Raw + " and kp.subcompanyid='" + subcompany + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
            }
            else
            {
                if (Raw == "All")
                {
                    if (subcompany == "All")
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseOrder_" + Table + " kp inner join tblTranskitchenPurchaseReturn_" + Table + " tkp on kp.purchaseOrderID=tkp.PurchaseRtnID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where Supplier=" + Supplier + "  and convert(date,kp.PurchaseRtnDate) between '" + sFmdate + "' and '" + sToDate + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseOrder_" + Table + " kp inner join tblTranskitchenPurchaseReturn_" + Table + " tkp on kp.purchaseRtnID=tkp.PurchaseRtnID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where Supplier=" + Supplier + "  and convert(date,kp.PurchaseRtnDate) between '" + sFmdate + "' and '" + sToDate + "' and kp.subcompanyid='" + subcompany + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }

                else
                {
                    if (subcompany == "All")
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseReturn_" + Table + " kp inner join tblTranskitchenPurchaseReturn_" + Table + " tkp on kp.purchaseRtnID=tkp.PurchaseRtnID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where Supplier=" + Supplier + "  and tkp.IngredientID=" + Raw + " and  convert(date,kp.PurchaseRtnDate) between '" + sFmdate + "' and '" + sToDate + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = " select cm.customername as compname, c.ledgername as CustomerName,sp.paymode as PaymentMode,* from  tblkitchenPurchaseReturn_" + Table + " kp inner join tblTranskitchenPurchaseReturn_" + Table + " tkp on kp.purchaseRtnID=tkp.PurchaseRtnID  inner join tblsalespaymode sp on kp.Paymode=sp.value inner join tblIngridents i on i.IngridID=tkp.IngredientID inner join tblledger c on c.ledgerID=kp.Supplier  inner join tblsubCompanyDetails cm on cm.subComapanyID = kp.subcompanyid where Supplier=" + Supplier + "  and tkp.IngredientID=" + Raw + " and  convert(date,kp.PurchaseRtnDate) between '" + sFmdate + "' and '" + sToDate + "' and kp.subcompanyid='" + subcompany + "' order by kp.BillNo desc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
            }
            return ds;
        }
        #endregion


        #region Get Production Process by Branchwise

        public DataSet getbranchbyproduction(string branchcode, DateTime datee)
        {
            DataSet ds = new DataSet();
            DataSet dsMerge = new DataSet();
            //string sqry = "select bs.productioncode as Production_To,pr.requestdate,'' as totalQty,pr.status,pr.BranchReqNo as requestNo,pr.StoreBranch as Branch,w.Name as RequestBy " +
            //             " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
            //             " inner join tblworkers as w  on w.empid=pr.vendorid where bs.Productioncode='" + branchcode + "'  and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'";

            //string sqry = "select distinct bs.productioncode as Production_To,pr.requestdate,'' as totalQty,pr.status,pr.BranchReqNo as requestNo,pr.StoreBranch as Branch,w.Name as RequestBy " +
            //            " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
            //            " inner join tblworkers as w  on w.empid=pr.vendorid  inner join tblTransPurchaseRequestProd_Prod tpr on tpr.RequestID=pr.requestno  where bs.Productioncode='" + branchcode + "'  and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0";

            string sqry = "select distinct bs.productioncode as Production_To,pr.RequestEntryTime,pr.requestdate,'' as totalQty,pr.status,pr.requestno as requestNo,pr.BranchReqNo as branchno,pr.StoreBranch as Branch,pr.RequestBy as RequestBy " +
                       " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
                       "  inner join tblTransPurchaseRequestProd_" + branchcode + " tpr on tpr.RequestID=pr.requestno  where bs.Productioncode='" + branchcode + "'  and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0";

            ds = dbObj.InlineExecuteDataSet(sqry);
            dsMerge.Merge(ds);

            string sqry1 = "select distinct bs.icingcode as Production_To,pr.RequestEntryTime,pr.requestdate,'' as totalQty,pr.status,pr.requestno as requestNo,pr.BranchReqNo as branchno,pr.StoreBranch as Branch,pr.RequestBy as RequestBy " +
                       " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
                       "  inner join tblTransPurchaseRequestProd_" + branchcode + " tpr on tpr.RequestID=pr.requestno  where (bs.icingcode='" + branchcode + "')  and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0";


            // Want To discuss
            DataSet ds1 = dbObj.InlineExecuteDataSet(sqry1);
            dsMerge.Merge(ds1);

            return dsMerge;


            //  var duplicatedRowsExist = dsMerge.Tables[0].AsEnumerable().GroupBy(r => r, DataRowComparer.Default).Any(g => g.Count() > 1).distinct();
        }

        public DataSet getbranchbyproduction_Semi(string branchcode, DateTime datee)
        {
            DataSet ds = new DataSet();


            string sqry = " select distinct bs.ToProdCode as Production_To,pr.RequestEntryTime,pr.requestdate,'' as totalQty,pr.status,pr.requestno as requestNo, " +
                          " pr.BranchReqNo as branchno,pr.StoreBranch as Branch,pr.RequestBy as RequestBy " +
                          " from tblSemiProdSetting as bs inner join tblSemipurchaserequestLive_" + branchcode + " as pr on pr.StoreBranch=bs.FromProdCode " +
                          " inner join tblTransSemiPurchaseRequestLive_" + branchcode + " tpr on tpr.RequestID=pr.requestno " +
                          " where bs.ToProdCode='" + branchcode + "'  and pr.isaccepted='0' and " +
                          " convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  and  " +
                          " (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0";

            // Want To discuss
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getbranchbyproductionbyheader(string branchcode, DateTime datee)
        {
            DataSet ds = new DataSet();
            DataSet dsmerge = new DataSet();

            //string sqry = "select bs.productioncode as Production_To,pr.requestdate,'' as totalQty,pr.status,pr.BranchReqNo as requestNo,pr.StoreBranch as Branch,w.Name as RequestBy " +
            //             " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
            //             " inner join tblworkers as w  on w.empid=pr.vendorid where bs.Productioncode='" + branchcode + "'  and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'";

            //string sqry = "select distinct bs.productioncode as Production_To,pr.requestdate,'' as totalQty,pr.status,pr.BranchReqNo as requestNo,pr.StoreBranch as Branch,w.Name as RequestBy " +
            //            " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
            //            " inner join tblworkers as w  on w.empid=pr.vendorid  inner join tblTransPurchaseRequestProd_Prod tpr on tpr.RequestID=pr.requestno  where bs.Productioncode='" + branchcode + "'  and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0";

            string sqry = "select distinct bs.productioncode as Production_To,pr.RequestEntryTime,pr.requestdate,'' as totalQty,pr.status,pr.requestno as requestNo,pr.BranchReqNo as branchno,pr.StoreBranch as Branch,pr.RequestBy as RequestBy " +
                       " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
                       "  inner join tblTransPurchaseRequestProd_" + branchcode + " tpr on tpr.RequestID=pr.requestno  where bs.Productioncode='" + branchcode + "' " +
                       " and pr.isaccepted='0' and convert(date, pr.requestdate) <='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0";

            // Want To discuss
            ds = dbObj.InlineExecuteDataSet(sqry);
            dsmerge.Merge(ds);

            string sqry1 = "select distinct bs.icingcode as Production_To,pr.RequestEntryTime,pr.requestdate,'' as totalQty,pr.status,pr.requestno as requestNo,pr.BranchReqNo as branchno,pr.StoreBranch as Branch,pr.RequestBy as RequestBy " +
                       " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
                       "  inner join tblTransPurchaseRequestProd_" + branchcode + " tpr on tpr.RequestID=pr.requestno  where bs.icingcode='" + branchcode + "' " +
                       " and pr.isaccepted='0' and convert(date, pr.requestdate) <='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0";


            DataSet ds1 = dbObj.InlineExecuteDataSet(sqry1);
            dsmerge.Merge(ds1);


            return dsmerge;
        }

        public DataSet getbranchbyproductionStore(string branchcode, DateTime datee)
        {
            DataSet ds = new DataSet();
            //string sqry = "select bs.productioncode as Production_To,pr.requestdate,'' as totalQty,pr.status,pr.BranchReqNo as requestNo,pr.StoreBranch as Branch,w.Name as RequestBy " +
            //             " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
            //             " inner join tblworkers as w  on w.empid=pr.vendorid where bs.Productioncode='" + branchcode + "'  and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'";

            //string sqry = "select distinct bs.productioncode as Production_To,pr.requestdate,'' as totalQty,pr.status,pr.BranchReqNo as requestNo,pr.StoreBranch as Branch,w.Name as RequestBy " +
            //            " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
            //            " inner join tblworkers as w  on w.empid=pr.vendorid  inner join tblTransPurchaseRequestProd_Prod tpr on tpr.RequestID=pr.requestno  where bs.Productioncode='" + branchcode + "'  and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0";

            string sqry = "select distinct bs.productioncode as Production_To,pr.requestdate,pr.requestentrytime,'' as totalQty,pr.status,pr.requestno as requestNo,pr.BranchReqNo as branchno,pr.StoreBranch as Branch,pr.RequestBy as RequestBy " +
                       " from tblbranchsetting as bs inner join tblpurchaserequestprodStore_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
                       "  inner join tblTransPurchaseRequestProdStore_" + branchcode + " tpr on tpr.RequestID=pr.requestno  where bs.Productioncode='" + branchcode + "' " +
                       " and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  " +
                       " and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0";

            // Want To discuss
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet getStockRequestFromBranchsQtyStore(string branchcode, DateTime datee, string filerwise)
        {
            DataSet ds = new DataSet();
            string filterttype = "";

            if (filerwise == "0")
            {
                filterttype = " order by e.branchid asc";
            }
            else
            {
                filterttype = " order by c.IngreCategory,cu.IngredientName asc";
            }

            //string sQty = "select (isnull(Order_Qty,0)-isnull(Received_Qty,0)) as Order_Qty,* from  " +
            //   " tblPurchaseRequestProdStore_" + branchcode + " p inner join tbltransPurchaseRequestProdStore_" + branchcode + " tp on tp.RequestID=p.RequestNO " +
            //   " inner join tblingridentscategory c on c.IngCatID=tp.CategoryId inner join tblingridents cu on cu.IngridID=tp.DescriptionId  " +
            //   " inner join tblUOM u on u.UOMID=cu.units where bs.Productioncode='" + branchcode + "' " +
            //          " and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  " +
            //          " and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0";


            string sqry = "	select e.branchid,brancharea,c.IngreCategory as Category,cu.IngredientName as Definition,sum(isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) as Qty, " +
                        " u.UOM,c.IngCatID as Categoryid,cu.IngridID as CategoryUserID from tblbranchsetting as bs inner join tblPurchaseRequestProdStore_" + branchcode + " as pr on  " +
                        " pr.StoreBranch=bs.BranchCode inner join tbltransPurchaseRequestProdStore_" + branchcode + " tpr on tpr.RequestID=pr.requestno  " +
                        " inner join tblingridents cu on cu.IngridID=tpr.DescriptionId inner join tblingridentscategory c on c.IngCatID=cu.IngCatID  " +
                        " inner join tblbranch as e on e.branchcode=pr.storebranch  " +
                        " inner join tblUOM u on u.UOMID=cu.Units where bs.Productioncode='" + branchcode + "' " +
                       " and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  " +
                       " and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0   " +
                       " group by e.branchid,c.IngCatID,branch,brancharea,cu.IngridID,u.UOM,c.IngreCategory,cu.IngredientName " + filterttype + "";






            //string sqry = "select c.Category,cu.Definition,sum(isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) as Qty,u.UOM,c.Categoryid,cu.CategoryUserID " +
            //    " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
            //    " inner join tblTransPurchaseRequestProd_" + branchcode + " tpr on tpr.RequestID=pr.requestno  " +
            //    " inner join tblCategoryUser cu on cu.CategoryUserID=tpr.DescriptionId inner join tblcategory c on c.Categoryid=cu.CategoryID " +
            //    " inner join tblUOM u on u.UOMID=cu.unit  where bs.Productioncode='" + branchcode + "'  and pr.isaccepted='0' " +
            //    " and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  " +
            //    " and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0   group by c.Category,cu.Definition,u.UOM,c.Categoryid,cu.CategoryUserID order by c.Category,cu.Definition asc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getStockRequestFromBranchsQtyStore_kitchen(string branchcode, DateTime datee, string filerwise)
        {
            DataSet ds = new DataSet();
            string filterttype = "";

            if (filerwise == "0")
            {
                filterttype = " order by e.deptid asc";
            }
            else
            {
                filterttype = " order by c.IngreCategory,cu.IngredientName asc";
            }




            string sqry = " select e.deptid as branchid,deptname as brancharea,c.IngreCategory as Category,cu.IngredientName as Definition,sum(isnull(tpr.Qty,0)- ISNULL(tpr.pendingqty,0)) as Qty, " +
            "u.UOM,c.IngCatID as Categoryid,cu.IngridID as CategoryUserID from  tblRequestRawMaterials_" + branchcode + " as pr  inner join tbltransRequestRawMaterials_" + branchcode + " " +
  " tpr on tpr.RequestID=pr.requestno   inner join tblingridents cu on cu.IngridID=tpr.itemid  " +
 " inner join tblingridentscategory c on c.IngCatID=cu.IngCatID   inner join tblDepartment as e on e.DeptID=pr.deptid " +
    " inner join tblUOM u on u.UOMID=cu.Units where  " +
                       "  convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  " +
                       " and  (isnull(tpr.Qty,0)- ISNULL(tpr.pendingqty,0)) >0   " +
      " group by e.DeptID,c.IngCatID,deptname,cu.IngridID,u.UOM,c.IngreCategory,cu.IngredientName " + filterttype + "";


            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet getbranchbyproductionStorebyheader(string branchcode, DateTime datee)
        {
            DataSet ds = new DataSet();

            DataSet dsmerge = new DataSet();
            //string sqry = "select bs.productioncode as Production_To,pr.requestdate,'' as totalQty,pr.status,pr.BranchReqNo as requestNo,pr.StoreBranch as Branch,w.Name as RequestBy " +
            //             " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
            //             " inner join tblworkers as w  on w.empid=pr.vendorid where bs.Productioncode='" + branchcode + "'  and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'";

            //string sqry = "select distinct bs.productioncode as Production_To,pr.requestdate,'' as totalQty,pr.status,pr.BranchReqNo as requestNo,pr.StoreBranch as Branch,w.Name as RequestBy " +
            //            " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
            //            " inner join tblworkers as w  on w.empid=pr.vendorid  inner join tblTransPurchaseRequestProd_Prod tpr on tpr.RequestID=pr.requestno  where bs.Productioncode='" + branchcode + "'  and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0";

            string sqry = "select distinct bs.productioncode as Production_To,pr.requestdate,'' as totalQty,pr.status,pr.requestno as requestNo,pr.BranchReqNo as branchno,pr.StoreBranch as Branch,pr.RequestBy as RequestBy " +
                       " from tblbranchsetting as bs inner join tblpurchaserequestprodStore_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
                       "  inner join tblTransPurchaseRequestProdStore_" + branchcode + " tpr on tpr.RequestID=pr.requestno  where bs.Productioncode='" + branchcode + "' " +
                       " and pr.isaccepted='0' and convert(date, pr.requestdate) <='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0";

            // Want To discuss
            ds = dbObj.InlineExecuteDataSet(sqry);
            // dsmerge.Merge(ds);


            // string sqry1 = "select distinct bs.icingcode as Production_To,pr.requestdate,'' as totalQty,pr.status,pr.requestno as requestNo,pr.BranchReqNo as branchno,pr.StoreBranch as Branch,pr.RequestBy as RequestBy " +
            //            " from tblbranchsetting as bs inner join tblpurchaserequestprodStore_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
            //            "  inner join tblTransPurchaseRequestProdStore_" + branchcode + " tpr on tpr.RequestID=pr.requestno  where bs.Icingcode='" + branchcode + "' " +
            //            " and pr.isaccepted='0' and convert(date, pr.requestdate) <='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0";

            // // Want To discuss
            //DataSet  ds1 = dbObj.InlineExecuteDataSet(sqry1);
            // dsmerge.Merge(ds1);



            return ds;
        }

        public DataSet getMAXNOformProduction(string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select max(convert(int,DC_NO))+1 as DC_No from tblGoodTransfer_" + scode + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion

        #region SalesChanges
        public int Tempnormalsalescancel(string table, int salesid, string cancelstatus, string Ref, string reason, string newreason, string screename)
        {
            int iSuccess = 0;
            int iupdate = 0;

            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet dqty = new DataSet();

            string sqry1 = "select * from tblTempsales_" + table + " where orderno=0 and cancelstatus='No' and Tempsalesid='" + salesid + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry1);

            if (ds.Tables[0].Rows.Count > 0)
            {

                int billno = Convert.ToInt32(ds.Tables[0].Rows[0]["billNo"]);

                string strans = "select * from tblTemptranssales_" + table + " where Salesid='" + billno + "'";
                dss = dbObj.InlineExecuteDataSet(strans);
                if (dss.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
                    {
                        int stockid = Convert.ToInt32(dss.Tables[0].Rows[i]["stockid"]);
                        int subcategoryid = Convert.ToInt32(dss.Tables[0].Rows[i]["SubCategoryID"]);
                        int qty = Convert.ToInt32(dss.Tables[0].Rows[i]["Quantity"]);
                        // int Shwqty = Convert.ToInt32(dss.Tables[0].Rows[i]["Shwqty"]);
                        int Cqty = Convert.ToInt32(dss.Tables[0].Rows[i]["Cqty"]);
                        string GoodsTransid = dss.Tables[0].Rows[i]["GoodsTransid"].ToString();
                        string GoodsQty = dss.Tables[0].Rows[i]["GoodsQty"].ToString();

                        int iqty = qty * Cqty;

                        string getstoc = "select * from tblStock_" + table + " where SubCategoryID='" + subcategoryid + "' and stockid='" + stockid + "'";
                        dqty = dbObj.InlineExecuteDataSet(getstoc);

                        if (dqty.Tables[0].Rows.Count > 0)
                        {
                            int avali = Convert.ToInt32(dqty.Tables[0].Rows[0]["Available_QTY"]);
                            string itemid = dqty.Tables[0].Rows[0]["SubCategoryID"].ToString();
                            int finalqty = iqty + avali;

                            string update = "Update tblStock_" + table + " set Available_QTY = '" + finalqty + "' where SubCategoryID='" + subcategoryid + "' and stockid='" + stockid + "' ";
                            iupdate = dbObj.InlineExecuteNonQuery(update);

                            //string AuditQty = "Insert into TblAuditQty_" + table + "(Screen,Qty,RefId)VAlues('Kot/Cancel','" + qty + "','" + salesid + "')";
                            //iupdate = dbObj.InlineExecuteNonQuery(AuditQty);
                            string AuditQty = "Insert into TblAuditQty_" + table + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('" + screename + "','" + iqty + "','" + salesid + "','+','" + itemid + "','" + stockid + "')";
                            iupdate = dbObj.InlineExecuteNonQuery(AuditQty);


                        }

                        //string[] gdsid = GoodsTransid.Split(',');
                        //string[] gdsqty = GoodsQty.Split(',');
                        //foreach (string gdid in gdsid)
                        //{

                        //}


                    }
                }

                string goodstrans = "Select * from tblTemptransSalesGoods_" + table + " where Salesid='" + billno + "'";
                DataSet dd = dbObj.InlineExecuteDataSet(goodstrans);
                if (dd.Tables[0].Rows.Count > 0)
                {
                    for (int j = 0; j < dd.Tables[0].Rows.Count; j++)
                    {
                        string Salesid = dd.Tables[0].Rows[j]["Salesid"].ToString();
                        string Goodstransid = dd.Tables[0].Rows[j]["Goodstransid"].ToString();
                        string Goodsqty = dd.Tables[0].Rows[j]["Goodsqty"].ToString();

                        string updd = "Update tbltransgoodstransfer2 set Received_Qty=Received_Qty + '" + Goodsqty + "' where TransP_Id='" + Goodstransid + "'";
                        iSuccess = dbObj.InlineExecuteNonQuery(updd);
                    }
                }

            }

            if (cancelstatus == "Y")
            {
                string sQry = "update tblTempsales_" + table + " set Notes='" + newreason + "',cancelstatus='Yes',Reference=" + Ref + ",Reason='" + reason + "',Canceltine= getdate() where tempsalesid='" + salesid + "' and orderno=0 ";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }


            return iSuccess;

        }

        public DataSet TempGetStockDetails(int iSubCatID, int UserID, string stable, string billno, string stockoption)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;
            if (stockoption == "1")
            {
                sQry = " select c.unitprice as Rate,d.attender,a.*,b.*,c.Quantity as oriqty,d.Salestype,d.iPayMode,c.Shwqty,c.Cattype,c.iscombo,c.Cqty, " +
                    " (c.Quantity * round(a.RATE+(a.RATE*((a.GST)/100)),0)) AS mrpamount,a.mrp from tblcategoryuser a,tblStock_" + stable + " b, " +
                    " tbltemptranssales_" + stable + " c,tbltempsales_" + stable + " d where  d.billno=c.salesid and  " +
                    " a.CategoryUserID=b.SubCategoryID and   b.StockID=c.stockid and c.salesid='" + billno + "'  and a.isdelete=0 and d.IsTempCompleted='0' ";
            }
            else if (stockoption == "2")
            {
                sQry = " select a.CategoryUserID as stockid,CAST('0' AS MONEY)  as Available_QTY,cast('2019-04-01' as date) as Expirydate ,c.unitprice as Rate,d.attender,a.*,c.Quantity as oriqty,d.Salestype,d.iPayMode,c.Shwqty,c.Cattype,c.iscombo,c.Cqty, " +
                    " (c.Quantity * round(a.RATE+(a.RATE*((a.GST)/100)),0)) AS mrpamount,a.mrp from tblcategoryuser a, " +
                    " tbltemptranssales_" + stable + " c,tbltempsales_" + stable + " d where  d.billno=c.salesid  and  " +
                    " c.salesid='" + billno + "' and a.CategoryUserID=c.SubCategoryID  and a.isdelete=0 and d.IsTempCompleted='0' ";
            }
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int Tempnormalsalesdelete(string table, int salesid)
        {
            int iSuccess = 0;
            int iupdate = 0;

            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet dqty = new DataSet();

            string sqry1 = "select * from tblTempsales_" + table + " where orderno=0 and cancelstatus='No' and Tempsalesid='" + salesid + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry1);
            if (ds.Tables[0].Rows.Count > 0)
            {

                int billno = Convert.ToInt32(ds.Tables[0].Rows[0]["billNo"]);

                string strans = "delete from tblTemptranssales_" + table + " where Salesid='" + billno + "'";
                iupdate = dbObj.InlineExecuteNonQuery(strans);

                string stranss = "delete from tblTemptransSalesGoods_" + table + " where Salesid='" + billno + "'";
                iupdate = dbObj.InlineExecuteNonQuery(stranss);

                //  string sqry11 = "Delete from tblTempsales_" + table + " where orderno=0 and cancelstatus='No' and Tempsalesid='" + salesid + "' ";
                //  iupdate = dbObj.InlineExecuteNonQuery(sqry11);
            }
            return iSuccess;
        }

        public int tempinsertOrdersalesnew(string sSalesTable, int UserID, string BillNo, string BillDate, int CustomerID, double NetAmount, double Total, double Tax, double Discount, int iEdit, int Icnt, double dAdvance, int Ordeeno, string msg, string takenBy, string DeliveryDate, string DeliveryTime, string Notes, int iPayMode, decimal cash, decimal bal, string Provider, string Approved, string attender, string Biller, string cashier, double cgst, double sgst, double stotal, int iIsAccountsBill, string roundoff, string salestypeno, string salestype, string currencyname, string excurrencyname, string excurrencyid, string excurrencyvalue, string extotalrate)
        {
            int iSuccess = 0;
            DataSet billnonew = new DataSet();
            string sqryy = "select MAX(billno+1) as billno from " + sSalesTable + "";
            billnonew = dbObj.InlineExecuteDataSet(sqryy);
            string billnonw = billnonew.Tables[0].Rows[0]["billno"].ToString();
            if (billnonw == "")
                billnonw = "1";
            int billno1 = Convert.ToInt32(billnonw);


            // string sQry = "insert into " + sSalesTable + "(UserID, BillNo, BillDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,ContactTypeID,Advance,OrderNo,Messege,OrderTakenBy,DeliveryDate,DeilveryTime,Notes,iPayMode,CancelStatus) values ('" + UserID + "','" + billnonw + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "','" + Discount + "'," + iEdit + ",'" + Icnt + "','" + dAdvance + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "','" + Notes + "'," + iPayMode + ",'No')";
            string sQry = "insert into " + sSalesTable + "(UserID, BillNo, BillDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,ContactTypeID,Advance,OrderNo,Messege,OrderTakenBy,DeliveryDate,DeilveryTime,Notes,iPayMode,CancelStatus,CashPaid,Balance,Provider,Approved,Attender,Biller,cashier,CGST,SGST,STotal,islivetransfer,IsAccountsBill,Roundoff,IsTempCompleted,SalesTypeOrderNo,Salestype,Currencytype,excurrencytype,excurrencyid,exvalue,extotalrate) values ('" + UserID + "','" + billnonw + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "','" + Discount + "'," + iEdit + ",'" + Icnt + "','" + dAdvance + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "','" + Notes + "'," + iPayMode + ",'No'," + cash + "," + bal + ",'" + Provider + "','" + Approved + "','" + attender + "','" + Biller + "','" + cashier + "'," + cgst + "," + sgst + "," + stotal + ",'" + 0 + "','" + iIsAccountsBill + "','" + roundoff + "','0','" + salestypeno + "','" + salestype + "','" + currencyname + "','" + excurrencyname + "','" + excurrencyid + "','" + excurrencyvalue + "','" + extotalrate + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return billno1;

        }

        public int tempUpdateOrdersalesnew(string sSalesTable, int UserID, string BillNo, string BillDate, int CustomerID, double NetAmount, double Total, double Tax, double Discount, int iEdit, int Icnt, double dAdvance, int Ordeeno, string msg, string takenBy, string DeliveryDate, string DeliveryTime, string Notes, int iPayMode, decimal cash, decimal bal, string Provider, string Approved, string attender, string Biller, string cashier, double cgst, double sgst, double stotal, int iIsAccountsBill, string roundoff, string tempsalesid, string salesorderno, string salestype, string currencyname, string excurrencyname, string excurrencyid, string excurrencyvalue, string extotalrate)
        {
            int iSuccess = 0;
            DataSet billnonew = new DataSet();
            //string sqryy = "select MAX(billno+1) as billno from " + sSalesTable + "";
            //billnonew = dbObj.InlineExecuteDataSet(sqryy);
            //string billnonw = billnonew.Tables[0].Rows[0]["billno"].ToString();
            //if (billnonw == "")
            //    billnonw = "1";
            int billno1 = Convert.ToInt32(tempsalesid);
            int billno = 0;


            // string sQry = "insert into " + sSalesTable + "(UserID, BillNo, BillDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,ContactTypeID,Advance,OrderNo,Messege,OrderTakenBy,DeliveryDate,DeilveryTime,Notes,iPayMode,CancelStatus) values ('" + UserID + "','" + billnonw + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "','" + Discount + "'," + iEdit + ",'" + Icnt + "','" + dAdvance + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "','" + Notes + "'," + iPayMode + ",'No')";
            //string sQry = "insert into " + sSalesTable + "(UserID, BillNo, BillDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,ContactTypeID,Advance,OrderNo,Messege,OrderTakenBy,DeliveryDate,DeilveryTime,Notes,iPayMode,CancelStatus,CashPaid,Balance,Provider,Approved,Attender,Biller,cashier,CGST,SGST,STotal,islivetransfer,IsAccountsBill,Roundoff,IsTempCompleted) values ('" + UserID + "','" + billnonw + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "','" + Discount + "'," + iEdit + ",'" + Icnt + "','" + dAdvance + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "','" + Notes + "'," + iPayMode + ",'No'," + cash + "," + bal + ",'" + Provider + "','" + Approved + "','" + attender + "','" + Biller + "','" + cashier + "'," + cgst + "," + sgst + "," + stotal + ",'" + 0 + "','" + iIsAccountsBill + "','" + roundoff + "','0')";

            string sQry = "Update " + sSalesTable + " set Currencytype='" + currencyname + "',excurrencytype='" + excurrencyname + "',excurrencyid='" + excurrencyid + "',exvalue='" + excurrencyvalue + "',extotalrate='" + extotalrate + "' ,Salestype='" + salestype + "',ipaymode='" + iPayMode + "',SalesTypeOrderNo='" + salesorderno + "',NetAmount='" + NetAmount + "',Total='" + Total + "',Tax='" + Tax + "',Discount='" + Discount + "',CGST='" + cgst + "',SGST='" + sgst + "',STotal='" + stotal + "' where Tempsalesid='" + tempsalesid + "'";

            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sqry1 = "select * from " + sSalesTable + " where orderno=0 and cancelstatus='No' and Tempsalesid='" + tempsalesid + "' ";
            billnonew = dbObj.InlineExecuteDataSet(sqry1);

            if (billnonew.Tables[0].Rows.Count > 0)
            {

                billno = Convert.ToInt32(billnonew.Tables[0].Rows[0]["billNo"]);
            }



            return billno;

        }


        public int TempinsertTransSales(string sTransSalesTable, int SalesID, int CategoryID, double Quantity, double UnitPrice, double dDiscItem, double Amount, int iSubCategoryID, int StockID, double Shwqty, string Cattype, string IScombo, double Cqty, double exunitprice, double examount)
        {
            int iSuccess = 0;
            string sQry = "insert into " + sTransSalesTable + "( SalesID, CategoryID,  Quantity,UnitPrice,Disc,Amount,SubCategoryID,StockID,islivetransfer,Shwqty,Cattype,iscombo,Cqty,exunitprice,examount) values " +
                " ('" + SalesID + "','" + CategoryID + "','" + Quantity + "','" + UnitPrice + "','" + dDiscItem + "','" + Amount + "'," + iSubCategoryID + "," + StockID + ",'" + 0 + "','" + Shwqty + "','" + Cattype + "','" + IScombo + "','" + Cqty + "','" + exunitprice + "','" + examount + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        public int TempExpirydateprocess(int isalesid, int catid, string itemid, decimal qty, string stablename)
        {
            int isucess = 0;
            int ii = 0;
            decimal remainqty = 0;
            decimal minusqty = 0;
            string transis = string.Empty;
            string qtyy = string.Empty;
            string qq = string.Empty;
            string sQry = " select * from tblcategoryuser a,tblStock_" + stablename + " b where  a.CategoryUserID=b.SubCategoryID and   b.StockID=" + itemid + "  and isdelete=0 ";
            DataSet dss = dbObj.InlineExecuteDataSet(sQry);
            if (dss.Tables[0].Rows.Count > 0)
            {

                //  minusqty = qty;
                remainqty = qty;
                string categryid = dss.Tables[0].Rows[0]["Categoryuserid"].ToString();

                string sqrr = "select * from tbltransgoodstransfer2 where descriptionid='" + categryid + "' and received_qty >0 order by ExpiryDate asc";
                DataSet ds = dbObj.InlineExecuteDataSet(sqrr);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        decimal goodsqyt = Convert.ToDecimal(ds.Tables[0].Rows[i]["received_qty"]);
                        string transid = ds.Tables[0].Rows[i]["TransP_Id"].ToString();
                        if (goodsqyt <= remainqty)
                        {
                            remainqty = qty;
                            qq = "Update tbltransgoodstransfer2 set received_qty=received_qty -'" + goodsqyt + "' where TransP_Id='" + transid + "'";
                            ii = dbObj.InlineExecuteNonQuery(qq);
                            remainqty = qty - goodsqyt;


                            string updd = "insert into tbltemptransSalesGoods_" + stablename + "(Salesid,Goodstransid,Goodsqty) values('" + isalesid + "','" + transid + "','" + goodsqyt + "')";
                            ii = dbObj.InlineExecuteNonQuery(updd);
                            // minusqty = remainqty;
                            if (transis == "")
                            {
                                transis = transid;
                                qtyy = goodsqyt.ToString();
                            }
                            else
                            {
                                transis = transis + "," + transid;
                                qtyy = qtyy + "," + goodsqyt.ToString();
                            }
                        }
                        else
                        {
                            //remainqty = qty;
                            qq = "Update tbltransgoodstransfer2 set received_qty=received_qty -'" + remainqty + "' where TransP_Id='" + transid + "'";
                            ii = dbObj.InlineExecuteNonQuery(qq);


                            string updd = "insert into tbltemptransSalesGoods_" + stablename + "(Salesid,Goodstransid,Goodsqty) values('" + isalesid + "','" + transid + "','" + remainqty + "')";
                            ii = dbObj.InlineExecuteNonQuery(updd);

                            if (transis == "")
                            {
                                transis = transid;
                                qtyy = remainqty.ToString();
                            }
                            else
                            {
                                transis = transis + "," + transid;
                                qtyy = qtyy + "," + remainqty.ToString();
                            }

                            break;

                        }

                    }
                    string upd = "Update tbltemptranssales_" + stablename + " set ISStockMinus='1',GoodsTransid='" + transis + "',GoodsQty='" + qtyy + "' where subcategoryid='" + categryid + "' and SalesID='" + isalesid + "' ";
                    ii = dbObj.InlineExecuteNonQuery(upd);
                }
            }
            return isucess;

        }

        public DataSet TempCustomerSalesGird(int UserID, string sSalesTable)
        {
            DataSet ds = new DataSet();
            string sQry = "select   e.attendername,a.CustomerName,c.ContactType,b.BillNo,a.Area,b.Tax,b.Total,b.NetAmount,b.TempsalesID,a.Email,b.Biller,b.Attender,b.SalesTypeOrderNo   from tblCustomer a," + sSalesTable + " b ,tblContactType c,tblattender e where b.attender=e.attenderid and a.CustomerID=b.CustomerID and  a.ContactTypeID=c.ContactID and b.cancelstatus<>'Yes' and IsTempCompleted='0'   order by BillNo desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int Expirydateprocess(int isalesid, int catid, string itemid, decimal qty, string stablename)
        {
            int isucess = 0;
            int ii = 0;
            decimal remainqty = 0;
            decimal minusqty = 0;
            string transis = string.Empty;
            string qtyy = string.Empty;
            string qq = string.Empty;
            string sQry = " select * from tblcategoryuser a,tblStock_" + stablename + " b where  a.CategoryUserID=b.SubCategoryID and   b.StockID=" + itemid + "  and isdelete=0 ";
            DataSet dss = dbObj.InlineExecuteDataSet(sQry);
            if (dss.Tables[0].Rows.Count > 0)
            {

                //  minusqty = qty;
                remainqty = qty;
                string categryid = dss.Tables[0].Rows[0]["Categoryuserid"].ToString();

                string sqrr = "select * from tbltransgoodstransfer2 where descriptionid='" + categryid + "' and received_qty >0 order by ExpiryDate asc";
                DataSet ds = dbObj.InlineExecuteDataSet(sqrr);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        decimal goodsqyt = Convert.ToDecimal(ds.Tables[0].Rows[i]["received_qty"]);
                        string transid = ds.Tables[0].Rows[i]["TransP_Id"].ToString();
                        if (goodsqyt <= remainqty)
                        {
                            remainqty = qty;
                            qq = "Update tbltransgoodstransfer2 set received_qty=received_qty -'" + goodsqyt + "' where TransP_Id='" + transid + "'";
                            ii = dbObj.InlineExecuteNonQuery(qq);
                            remainqty = qty - goodsqyt;


                            string updd = "insert into tbltransSalesGoods_" + stablename + "(Salesid,Goodstransid,Goodsqty) values('" + isalesid + "','" + transid + "','" + goodsqyt + "')";
                            ii = dbObj.InlineExecuteNonQuery(updd);
                            // minusqty = remainqty;
                            if (transis == "")
                            {
                                transis = transid;
                                qtyy = goodsqyt.ToString();
                            }
                            else
                            {
                                transis = transis + "," + transid;
                                qtyy = qtyy + "," + goodsqyt.ToString();
                            }
                        }
                        else
                        {
                            //remainqty = qty;
                            qq = "Update tbltransgoodstransfer2 set received_qty=received_qty -'" + remainqty + "' where TransP_Id='" + transid + "'";
                            ii = dbObj.InlineExecuteNonQuery(qq);


                            string updd = "insert into tbltransSalesGoods_" + stablename + "(Salesid,Goodstransid,Goodsqty) values('" + isalesid + "','" + transid + "','" + remainqty + "')";
                            ii = dbObj.InlineExecuteNonQuery(updd);

                            if (transis == "")
                            {
                                transis = transid;
                                qtyy = remainqty.ToString();
                            }
                            else
                            {
                                transis = transis + "," + transid;
                                qtyy = qtyy + "," + remainqty.ToString();
                            }

                            break;

                        }

                    }
                    string upd = "Update tbltranssales_" + stablename + " set GoodsTransid='" + transis + "',GoodsQty='" + qtyy + "' where subcategoryid='" + categryid + "' and SalesID='" + isalesid + "' ";
                    ii = dbObj.InlineExecuteNonQuery(upd);
                }
            }
            return isucess;

        }


        public int Tempnormalsalescompletestatus(string table, int salesid, string billno)
        {
            int iSuccess = 0;


            string sqry1 = "Update tblTempsales_" + table + " set IsTempCompleted='1',SalesBillno='" + billno + "' where orderno=0 and cancelstatus='No' and Tempsalesid='" + salesid + "' ";
            iSuccess = dbObj.InlineExecuteNonQuery(sqry1);
            return iSuccess;
        }

        public DataSet CakeAmt(string tbl)
        {
            string sQry = "";
            DataSet dCust = new DataSet();
            if (tbl == "admin")
            {
                sQry = "";
            }
            else
            {
                sQry = "select sum(Advance) as Total from tblorder_" + tbl + " where convert(date,OrderDate)=convert(date,getdate()) ";

            }
            dCust = dbObj.InlineExecuteDataSet(sQry);
            return dCust;
        }

        public int insertOrdersalesnew123(string sSalesTable, int UserID, string BillNo, string BillDate, int CustomerID, double NetAmount, double Total, double Tax,
              double Discount, int iEdit, int Icnt, double dAdvance, int Ordeeno, string msg, string takenBy, string DeliveryDate, string DeliveryTime, string Notes,
              int iPayMode, decimal cash, decimal bal, string Provider, string Approved, string attender, string Biller, string cashier, double cgst, double sgst, double stotal,
              int iIsAccountsBill, string roundoff, string Saletypemargin, string GstMargin, string Gateway, string salestype, string salesorderno, string isnormal,
              string kottableno, string isprint, string discper, string attednertypeid, string onlineamount, string Billcode, string BillGeneratesetting,
              string Billtaxsetting, string currencytype, string transamounttable, string BillerId, string excurrencyname, string excurrencyid, string excurrencyvalue, string extotalrate)
        {
            int iSuccess = 0;
            DataSet billnonew = new DataSet();
            string sqryy = "select isnull(MAX(billno+1),1) as billno from " + sSalesTable + " where isnormal ='" + isnormal + "'";
            billnonew = dbObj.InlineExecuteDataSet(sqryy);
            string billnonw = billnonew.Tables[0].Rows[0]["billno"].ToString();
            if (billnonw == "")
                billnonw = "1";
            int billno1 = Convert.ToInt32(billnonw);

            DataSet ds = new DataSet();
            string sQrydailybill = "select (MAX(DailyBill)+1) as BillNo from " + sSalesTable + " where convert(date,BillDate)=convert(date,GETDATE())";
            ds = dbObj.InlineExecuteDataSet(sQrydailybill);

            string dailybillnonw = ds.Tables[0].Rows[0]["billno"].ToString();
            if (dailybillnonw == "")
                dailybillnonw = "1";
            int dailybillno1 = Convert.ToInt32(dailybillnonw);


            string fullbillcode = Billcode + '-' + dailybillnonw;


            // string sQry = "insert into " + sSalesTable + "(UserID, BillNo, BillDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,ContactTypeID,Advance,OrderNo,Messege,OrderTakenBy,DeliveryDate,DeilveryTime,Notes,iPayMode,CancelStatus) values ('" + UserID + "','" + billnonw + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "','" + Discount + "'," + iEdit + ",'" + Icnt + "','" + dAdvance + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "','" + Notes + "'," + iPayMode + ",'No')";
            string sQry = "insert into " + sSalesTable + "(UserID, BillNo, BillDate, CustomerID, NetAmount, Total,Tax,Discount,iEdit,ContactTypeID,Advance,OrderNo,Messege, " +
                " OrderTakenBy,DeliveryDate,DeilveryTime,Notes,iPayMode,CancelStatus,CashPaid,Balance,Provider,Approved,Attender,Biller,cashier,CGST,SGST,STotal,islivetransfer " +
            " ,IsAccountsBill,Roundoff,Saletypemargin,GstMargin,Gateway,salestype,SalesOrder,IsNormal,KOTTbleNo,Isprint,discper,ApprovedId,BillCode " +
            " ,DailyBill,FullBill,GstBill,BillGeneratesetting,Billtaxsetting, " +
                " currencytype,Onetamount,OCGST,OSGST,Ototal,Otax,Odiscount,BillerId,excurrencytype,excurrencyid,exvalue,extotalrate) values ('" + UserID + "','" + billnonw + "','" + BillDate + "','" + CustomerID + "','" + NetAmount + "','" + Total + "','" + Tax + "', " +
            " '" + Discount + "'," + iEdit + ",'" + Icnt + "','" + dAdvance + "','" + Ordeeno + "','" + msg + "','" + takenBy + "','" + DeliveryDate + "','" + DeliveryTime + "', " +
            " '" + Notes + "'," + iPayMode + ",'No'," + cash + "," + bal + ",'" + Provider + "','" + Approved + "','" + attender + "','" + Biller + "','" + cashier + "' " +
            " ," + cgst + "," + sgst + "," + stotal + ",'" + 0 + "','" + iIsAccountsBill + "','" + roundoff + "','" + Saletypemargin + "','" + GstMargin + "', " +
            " '" + Gateway + "','" + salestype + "','" + salesorderno + "','" + isnormal + "','" + kottableno + "','" + isprint + "','" + discper + "','" + attednertypeid + "' " +
            " ,'" + Billcode + "','" + dailybillno1 + "','" + fullbillcode + "','Y','" + BillGeneratesetting + "','" + Billtaxsetting + "','" + currencytype + "' " +
            " ,'" + NetAmount + "','" + cgst + "','" + sgst + "','" + Total + "','" + Tax + "','" + Discount + "','" + BillerId + "','" + excurrencyname + "','" + excurrencyid + "','" + excurrencyvalue + "','" + extotalrate + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);


            // Insert into TransAmount
            // Get MAx Salesid
            string salesuniqueid = "0";
            DataSet ds1 = new DataSet();
            string sQry11 = "select * from " + sSalesTable + " where billno='" + billno1 + "' and Salestype='" + salestype + "'";
            ds1 = dbObj.InlineExecuteDataSet(sQry11);
            if (ds1.Tables[0].Rows.Count > 0)
            {
                salesuniqueid = (ds1.Tables[0].Rows[0]["SalesID"].ToString());
            }

            //string strans = "Insert into " + transamounttable + "(Salesid,Billno,Billdate,SalesTypeid,paymode,Amount,BillerId,Attenderid, " +
            //    " SalesPaymodeid,Currency)values('" + salesuniqueid + "','" + billno1 + "','" + BillDate + "' " +
            //    " ,'" + salestype + "','" + iPayMode + "','" + Total + "','" + BillerId + "','" + kottableno + "','" + iPayMode + "','" + currencytype + "')";
            string strans = "Insert into " + transamounttable + "(Salesid,Billno,Billdate,SalesTypeid,paymode,Amount,BillerId,Attenderid, " +
                " SalesPaymodeid,Currency,excurrencytype,excurrencyid,examount)values('" + salesuniqueid + "','" + billno1 + "','" + BillDate + "' " +
                " ,'" + salestype + "','" + iPayMode + "','" + Total + "','" + BillerId + "','" + kottableno + "','" + iPayMode + "','" + currencytype + "','" + excurrencyname + "','" + excurrencyid + "','" + extotalrate + "')";

            iSuccess = dbObj.InlineExecuteNonQuery(strans);











            return billno1;

        }





        public DataSet CanceledBillTodayAmount(string tbl)
        {

            string Today = "";
            DataSet dCust = new DataSet();

            if (tbl == "admin")
            {

                Today = "";
            }
            else
            {

                Today = " select isnull(sum(Total),0) as Cancelamount from tblsales_" + tbl + " where cancelstatus='yes' and convert(date,Billdate)=convert(date,getdate())";
            }
            dCust = dbObj.InlineExecuteDataSet(Today);



            return dCust;
        }

        public DataSet getsalesandordercashamount(string tbl)
        {
            string sQry = "";
            string sQry1 = "";
            DataSet dCust = new DataSet();
            DataSet dCust1 = new DataSet();
            DataSet dnerge = new DataSet();

            {
                //  sQry = "select sum(total) as Total from tblsales_"+tbl+" where convert(date,billdate)=convert(date,getdate()) ";
                sQry = "select isnull(sum(Advance),0) as amnt from tblorder_" + tbl + " where ipaymode='1' and convert(date,OrderDate)=convert(date,getdate()) ";

                sQry1 = "select isnull(sum(total),0) as amnt from tblsales_" + tbl + " where ipaymode='1' and convert(date,billdate)=convert(date,getdate()) and cancelstatus='No'";

            }
            dCust = dbObj.InlineExecuteDataSet(sQry);
            dCust1 = dbObj.InlineExecuteDataSet(sQry1);
            dnerge.Merge(dCust);
            dnerge.Merge(dCust1);


            return dnerge;
        }


        public DataSet getsalesandordercardamount(string tbl)
        {
            string sQry = "";
            string sQry1 = "";
            DataSet dCust = new DataSet();
            DataSet dCust1 = new DataSet();
            DataSet dnerge = new DataSet();

            {
                //  sQry = "select sum(total) as Total from tblsales_"+tbl+" where convert(date,billdate)=convert(date,getdate()) ";
                sQry = "select isnull(sum(Advance),0) as amnt from tblorder_" + tbl + " where ipaymode='4' and convert(date,OrderDate)=convert(date,getdate()) ";

                sQry1 = "select isnull(sum(total),0) as amnt from tblsales_" + tbl + " where ipaymode='4' and convert(date,billdate)=convert(date,getdate()) and cancelstatus='No'";

            }
            dCust = dbObj.InlineExecuteDataSet(sQry);
            dCust1 = dbObj.InlineExecuteDataSet(sQry1);
            dnerge.Merge(dCust);
            dnerge.Merge(dCust1);


            return dnerge;
        }


        public DataSet TotalBillToday(string tbl)
        {

            string Today = "";
            DataSet dCust = new DataSet();

            if (tbl == "admin")
            {

                Today = "";
            }
            else
            {

                Today = " select count(*) as Cancel from tblsales_" + tbl + " where cancelstatus='No' and convert(date,Billdate)=convert(date,getdate())";
            }
            dCust = dbObj.InlineExecuteDataSet(Today);



            return dCust;
        }


        public DataSet SalesAmt(string tbl)
        {
            string sQry = "";
            DataSet dCust = new DataSet();
            if (tbl == "admin")
            {
                sQry = "";
            }
            else
            {
                //  sQry = "select sum(total) as Total from tblsales_"+tbl+" where convert(date,billdate)=convert(date,getdate()) ";
                sQry = "select sum(total) as Total from tblsales_" + tbl + " where convert(date,billdate)=convert(date,getdate()) and cancelstatus='No'";
            }
            dCust = dbObj.InlineExecuteDataSet(sQry);
            return dCust;
        }
        public DataSet TotalCakeBillToday(string tbl)
        {

            string Today = "";
            DataSet dCust = new DataSet();

            if (tbl == "admin")
            {

                Today = "";
            }
            else
            {

                Today = " select count(*) as cakeorder from tblorder_" + tbl + " where  convert(date,orderdate)=convert(date,getdate())";
            }
            dCust = dbObj.InlineExecuteDataSet(Today);



            return dCust;
        }

        public DataSet GetDeliveryordersDetails(string stabel)
        {
            DataSet save = new DataSet();
            string sQry = "select distinct Fullbookno +' / '+ CustomerName +' / Rs.'+ cast(balancepaid as nvarchar(100)) +' / '+ MobileNo +' / '+ cast(cast(deliverydate as date)as nvarchar(100)) +' / '+  cast(deliverytime as nvarchar(50))  as OrderDetails from tblorder_" + stabel + " a,tblcustomer b,tblTransorder_" + stabel + " c where c.BillNo=a.BillNo and a.customerid=b.customerid and convert(date,deliverydate)>=convert(date,getdate()) and status='N' and iscancel='0'";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;
        }
        #endregion


        #region SEMI RAW SETTING SCREEN PROCESS
        public DataSet semirawsetting()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblsemisetting as ss inner join tblcategoryuser as cu on cu.CategoryUserID=ss.itemid where  ss.IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet ingredients()
        {
            DataSet ds = new DataSet();
            string sqry = "select i.*,uom.uom from tblIngridents as i inner join tbluom as uom on uom.uomid=i.units where i.IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getCatIDprod()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategoryuser where IsActive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet getrawsettingid(string settingid)
        {
            DataSet ds = new DataSet();

            string sqry = "select semi.totalqty,tss.*,cu.Definition,cu.CategoryUserID,cuu.IngredientName as item,uom.uom,semi.Prodhours from tbltranssemisetting  as tss " +
                          "  inner join tblsemisetting as semi " +
                          "  on semi.SettingId=tss.Settingid  inner join tblCategoryUser as cu on cu.CategoryUserID=semi.Itemid  " +
                          "  inner join tblIngridents as cuu on cuu.IngridID=tss.Semiitemid inner join tbluom as uom on uom.uomid=cuu.units " +
                          " where cu.IsActive='Yes' and tss.Settingid='" + settingid + "' ";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int deletesemirawlist(string rawid)
        {
            int iSucess = 0;
            string sQry = "Update tblSemiSetting set IsActive='No'  where settingid='" + rawid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            //string sQry1 = "Delete from  tbltranssemisetting   where settingid='" + rawid + "'";
            //iSucess = dbObj.InlineExecuteNonQuery(sQry1);
            return iSucess;
        }


        public DataSet alreadysemisettingexistsornot(string itemid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblsemisetting where Itemid = '" + itemid + "' and  IsActive='Yes' order by Itemid desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int Insertsemisetting(string itemid, string prepareqty, string prodhours)
        {
            int iSuccess = 0;
            string sQry = "insert into tblsemisetting( Itemid,TotalQty,IsActive,Prodhours) values ('" + itemid + "','" + prepareqty + "','Yes','" + prodhours + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        public int Inserttranssemisetting(string semiitemid, string recqty)
        {
            int iSuccess = 0;
            string sqry = "select max(SettingId) as rawid from tblsemisetting ";

            DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string rawid = ds.Tables[0].Rows[0]["rawid"].ToString();
                string sQry = "insert into tbltranssemisetting( Settingid,Semiitemid,RecQty) values ('" + rawid + "','" + semiitemid + "','" + recqty + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;

        }


        public int deleterawsetting(string settingid)
        {
            int iSuccess = 0;
            string sQry = "Delete from tbltranssemisetting where settingid='" + settingid + "'";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        public int updatesemisetting(string itemid, string prepareqty, string prodhours)
        {
            int iSuccess = 0;
            string sQry = "Update tblsemisetting set TotalQty='" + prepareqty + "',ProdHours='" + prodhours + "' where SettingId='" + itemid + "' ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        public int Inserttranssemisettingforupdate(string semiitemid, string recqty, string rawid)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltranssemisetting( Settingid,Semiitemid,RecQty) values ('" + rawid + "','" + semiitemid + "','" + recqty + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }


        #endregion


        #region Raw Materials Entry Request
        public DataSet getmaxrawmaterialrequest(string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(RequestNo)+1,1) as RequestNo from tblRequestRawMaterials_" + scode + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet getproductionbranch(string branchcode)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblbranchsetting  where (Productioncode='" + branchcode + "' or icingcode='" + branchcode + "') and Isactive='Yes'  ";

            // Want To discuss
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet getstockfromproduction(string Table, string descriptionid, DateTime datee, string storecode)
        {
            DataSet ds = new DataSet();

            ////string sqry = "select tpr.descriptionid,(order_qty - Received_qty) as qty,pr.StoreBranch from tblpurchaserequestprod_NP as pr  " +
            ////              " inner join tbltranspurchaserequestprod_NP as tpr on tpr.RequestID=pr.RequestNO " +
            ////              " where tpr.DescriptionId='" + descriptionid + "' and tpr.istransfer='0' and (order_qty - received_qty) >0  " +
            ////              " and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "' and storebranch='" + storecode + "'";

            string sqry = "select tpr.descriptionid,(order_qty - Received_qty) as qty,pr.StoreBranch from tblpurchaserequestprod_" + Table + " as pr  " +
                         " inner join tbltranspurchaserequestprod_" + Table + " as tpr on tpr.RequestID=pr.RequestNO " +
                         " where tpr.DescriptionId='" + descriptionid + "' and tpr.istransfer='0' and (order_qty - received_qty) >0  " +
                         " and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "' and storebranch='" + storecode + "' and pr.RawRequestStatus=0";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getreceiptsettingforitem(string item)
        {
            DataSet ds = new DataSet();
            //string sqry = "select c.categoryid,c.Category,i.IngridID,i.ingredientname,tss.recqty,ss.TotalQty,u.uom,u.uomid from tblsemisetting as ss inner join tbltranssemisetting as tss on tss.Settingid=ss.SettingId " +
            //              " inner join tblIngridents as i on i.IngridID=tss.Semiitemid " +
            //              " inner join tbluom as u on u.uomid=i.units " +
            //              " inner join tblCategoryUser as cu on cu.categoryuserid=ss.itemid " +
            //              " inner join tblcategory as c on c.categoryid=cu.categoryid where ss.itemid='" + item + "'";

            string sqry = "select ISNULL(r.Qty,0) as RawStock,c.categoryid,c.Category,i.IngridID,i.ingredientname,tss.recqty,ss.TotalQty,u.uom,u.uomid from tblsemisetting as ss inner join tbltranssemisetting as tss on tss.Settingid=ss.SettingId " +
                         " inner join tblIngridents as i on i.IngridID=tss.Semiitemid " +
                         " inner join tbluom as u on u.uomid=i.units " +
                         " inner join tblCategoryUser as cu on cu.categoryuserid=ss.itemid " +
                         " inner join tblcategory as c on c.categoryid=cu.categoryid " +
                         " left join tblRawMatlStockProduction_Prod r on r.IngredientID=i.IngridID where ss.itemid='" + item + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet GetProductionQty(int ItemId, string Table)
        {
            DataSet ds = new DataSet();
            //string sqry = " select u.UOM,ts.Semiitemid,cu.Definition,i.IngredientName,s.TotalQty,ts.RecQty,((ts.RecQty/s.TotalQty) * " + Qty + ") as WantedRaw from tblSemiSetting s inner join tbltranssemisetting ts on ts.Settingid=s.SettingId inner join tblCategoryUser cu on    cu.CategoryUserID=s.Itemid inner join tblIngridents i on i.IngridID=ts.Semiitemid inner join tblUOM u on u.UOMID=i.Units where s.Itemid=" + ItemId + " ";
            string sqry = " select * from tblRawMatlStockProduction_" + Table + " s where s.IngredientID=" + ItemId + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        #endregion


        #region
        public int ProductionStock(string RequestNO, string RequestDate, string Status, string sBranch, int UserId, string Sname)
        {
            int iSucess = 0;
            string sQry = "insert into tblProductionStock_" + sBranch + "(ProdNo,ProdDate,Status,isCancel,Branch,IsAccepted,UserId,MaintainBy) values('" + RequestNO + "','" + RequestDate + "','" + Status + "',0,'Branch -'+'" + sBranch + "',0,'" + UserId + "','" + Sname + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public int TransProductionStock(string Table, string RequestID, int CategoryId, int DescriptionId, decimal Qty)
        {

            int iSucess = 0;
            string sQry = "insert into tblTransProductionStock_" + Table + "(ProdNo,CategoryId,DescriptionId,Prod_Qty) values ('" + RequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string sqry = "select * from tblProductionQty_" + Table + " where DescriptionId=" + DescriptionId + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string sQry1 = "update  tblProductionQty_" + Table + " set Prod_Qty=Prod_Qty+" + Qty + " where DescriptionId=" + DescriptionId + "";
                iSucess = dbObj.InlineExecuteNonQuery(sQry1);
            }
            else
            {
                string sQry1 = "insert into tblProductionQty_" + Table + "(DescriptionId,Prod_Qty) values('" + DescriptionId + "','" + Qty + "')";
                iSucess = dbObj.InlineExecuteNonQuery(sQry1);
            }
            return iSucess;
        }



        public DataSet getProductionStock(string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(MAX(convert(int,ProdNo))+1,1) as ProdNO from tblProductionStock_" + Table + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }



        public DataSet getProductionStockDetails(string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select l.username,SUM(tp.Prod_Qty) as Qty,p.Status,p.ProdNo,p.ProdDate from tblProductionStock_" + Table + " p inner join tblTransProductionStock_" + Table + " tp on p.ProdNo=tp.ProdNo inner join tbllogin l on l.UserID=p.Userid group by l.username,p.Status,p.ProdNo,p.ProdDate";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getProductionStockDetailsselect(string Table, int ProdNo)
        {
            DataSet ds = new DataSet();
            string sqry = "select c.Category,cu.Definition,l.username,tp.Prod_Qty as Qty,p.Status,p.ProdNo,p.ProdDate from tblProductionStock_Prod p inner join tblTransProductionStock_Prod tp on p.ProdNo=tp.ProdNo inner join tbllogin l on l.UserID=p.Userid  inner join tblcategory c on c.Categoryid=tp.CategoryId inner join tblCategoryUser cu on cu.CategoryUserID=tp.DescriptionId where p.ProdNo=" + ProdNo + " order by c.Category asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet getProductionStockDetailsselectAll(string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "    select c.Category,cu.Definition,q.Prod_Qty as Qty,u.UOM from tblProductionQty_" + Table + " q   inner join tblCategoryUser cu on cu.CategoryUserID=q.DescriptionId  inner join  tblcategory c    on c.Categoryid=cu.CategoryID  inner join tblUOM u on u.UOMID=cu.unit    order by c.Category asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet getingredientsStocks(string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select IngredientName,Qty,u.UOM from tblRawMatlStock_prod s inner join tblIngridents i on i.IngridID=s.IngredientID inner join tblUOM u on u.UOMID=i.Units order by IngredientName asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet Checkreceipe(int Itemid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblSemiSetting where Itemid=" + Itemid + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        #endregion

        #endregion


        #region Ceremonies

        public DataSet getcustomers(string stablename)
        {
            DataSet ds = new DataSet();
            //string sqry = "select * from tblCustomer  where ContactTypeID='1' and IsActive='Yes' ";
            string sqry = "select distinct(CustomerName),c.CustomerId from tblCustomer c inner  join tblContactType on c.ContactTypeID = tblContactType.ContactID inner join  tblOrder_"+ stablename +" s on s.customerid=c.customerid where  IsActive = 'Yes' order by CustomerName asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet getgridforcustsale()
        {
            DataSet ds = new DataSet();
            //string sqry = "select * from tblCustomer  where ContactTypeID='1' and IsActive='Yes' ";
            string sqry = "select * from tblCustomer inner  join tblContactType on tblcustomer.ContactTypeID = tblContactType.ContactID where ContactType like  '%dealer' and IsActive = 'Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public int Insertcust(string CustomerName, string MobileNo, string Address, string IsActive, string UserID)
        {
            int iSuccess = 0;

            string sQry = "insert into tblLedger( LedgerName,GroupID,ContactTypeID) values ('" + CustomerName + "',1,1)";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string sqry = "select isnull(max(LedgerID),1) as LedgerID from tblLedger ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            DataSet ds1 = new DataSet();
            string sqry1 = "select isnull(max(CustomerID+1),1) as CustomerID from tblCustomer ";
            ds1 = dbObj.InlineExecuteDataSet(sqry1);

            string sQry1 = "insert into tblCustomer( CustomerName,MobileNo,Address,IsActive,LedgerID,CustomerID,ContactTypeID,UserID) values ('" + CustomerName + "','" + MobileNo + "','" + Address + "','" + IsActive + "'," + ds.Tables[0].Rows[0]["LedgerID"].ToString() + "," + ds1.Tables[0].Rows[0]["CustomerID"].ToString() + ",1,'" + UserID + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry1);
            return iSuccess;

        }


        public DataSet getCeremonies()
        {
            DataSet ds = new DataSet();
            // string sqry = "select * from tblceremonies where IsActive='Yes' order by Ceremonies asc";
            string sqry = "select * from tblONLINEMASTER where IsActive='Yes' and onlinetype='F' order by OnlineMaster asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet Getceremoniesordersall(string Stable)
        {
            DataSet ds = new DataSet();



            //string sqry = "select  distinct c.CustomerName,c.MobileNo,ce.ceremonies,cast(s.DeliveryDate as date) as Date   from  tblOrder_" + Stable + " s inner join   tblCustomer c on c.CustomerID=s.CustomerID  inner join tblceremonies ce on ce.ID=s.ceremonies  order by Date asc";
            string sqry = "select  distinct c.CustomerName,c.MobileNo,ce.OnlineMaster as ceremonies,cast(s.DeliveryDate as date) as Date,'" + Stable + "' as Branch   " +
                " from  tblOrder_" + Stable + " s inner join   tblCustomer c on c.CustomerID=s.CustomerID  inner join tblonlinemaster ce on ce.OnlineId=s.ceremonies " +
                " order by Date asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet Getceremoniesorders(string Stable, string CustomerID, DateTime From, DateTime To)
        {
            DataSet ds = new DataSet();
            if (CustomerID == "All")
            {
                //string sqry = "select  distinct c.CustomerName,c.MobileNo,ce.ceremonies,cast(s.DeliveryDate as date) as Date   from  tblOrder_" + Stable + " s inner join   tblCustomer c on c.CustomerID=s.CustomerID  inner join tblceremonies ce on ce.ID=s.ceremonies where cast(DeliveryDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(DeliveryDate as Date)<='" + To.ToString("yyyy/MM/dd") + "'   order by Date asc";
                string sqry = "select  distinct c.CustomerName,c.MobileNo,ce.OnlineMaster as ceremonies,cast(s.DeliveryDate as date) as Date,'" + Stable + "' as Branch    from  tblOrder_" + Stable + " s inner join   tblCustomer c on c.CustomerID=s.CustomerID  inner join tblonlinemaster ce on ce.OnlineId=s.ceremonies where cast(DeliveryDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(DeliveryDate as Date)<='" + To.ToString("yyyy/MM/dd") + "'   order by Date asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                //string sqry = "select  distinct c.CustomerName,c.MobileNo,ce.ceremonies,cast(s.DeliveryDate as date) as Date   from  tblOrder_" + Stable + " s inner join   tblCustomer c on c.CustomerID=s.CustomerID   inner join tblceremonies ce on ce.ID=s.ceremonies where cast(DeliveryDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(DeliveryDate as Date)<='" + To.ToString("yyyy/MM/dd") + "'  and s.CustomerID=" + CustomerID + "  order by Date asc";
                string sqry = "select  distinct c.CustomerName,c.MobileNo,ce.OnlineMaster as ceremonies,cast(s.DeliveryDate as date) as Date,'" + Stable + "' as Branch    from  tblOrder_" + Stable + " s inner join   tblCustomer c on c.CustomerID=s.CustomerID   inner join tblonlinemaster ce on ce.OnlineId=s.ceremonies where cast(DeliveryDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(DeliveryDate as Date)<='" + To.ToString("yyyy/MM/dd") + "'  and s.CustomerID=" + CustomerID + "  order by Date asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            return ds;

        }
        #endregion


        #region
        public DataSet Getwantraw(int ItemId, double Qty, string Table)
        {
            DataSet ds = new DataSet();
            //string sqry = " select u.UOM,ts.Semiitemid,cu.Definition,i.IngredientName,s.TotalQty,ts.RecQty,((ts.RecQty/s.TotalQty) * " + Qty + ") as WantedRaw from tblSemiSetting s inner join tbltranssemisetting ts on ts.Settingid=s.SettingId inner join tblCategoryUser cu on    cu.CategoryUserID=s.Itemid inner join tblIngridents i on i.IngridID=ts.Semiitemid inner join tblUOM u on u.UOMID=i.Units where s.Itemid=" + ItemId + " ";
            string sqry = " select ISNULL(r.Qty,0) as RawStock,u.UOM,ts.Semiitemid,cu.Definition,i.IngredientName,s.TotalQty,ts.RecQty,((ts.RecQty/s.TotalQty) * " + Qty + ") as WantedRaw from tblSemiSetting s inner join tbltranssemisetting ts on ts.Settingid=s.SettingId inner join tblCategoryUser cu on    cu.CategoryUserID=s.Itemid inner join tblIngridents i on i.IngridID=ts.Semiitemid inner join tblUOM u on u.UOMID=i.Units  left join tblRawMatlStock_" + Table + " r on r.IngredientID=i.IngridID  where s.Itemid=" + ItemId + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet Getwantraw1(int ItemId, double Qty, string Table)
        {
            DataSet ds = new DataSet();
            //string sqry = " select u.UOM,ts.Semiitemid,cu.Definition,i.IngredientName,s.TotalQty,ts.RecQty,((ts.RecQty/s.TotalQty) * " + Qty + ") as WantedRaw from tblSemiSetting s inner join tbltranssemisetting ts on ts.Settingid=s.SettingId inner join tblCategoryUser cu on    cu.CategoryUserID=s.Itemid inner join tblIngridents i on i.IngridID=ts.Semiitemid inner join tblUOM u on u.UOMID=i.Units where s.Itemid=" + ItemId + " ";
            string sqry = " select ISNULL(r.Qty,0) as RawStock,u.UOM,ts.Semiitemid,cu.Definition,i.IngredientName,s.TotalQty,ts.RecQty,((ts.RecQty/s.TotalQty) * " + Qty + ") as WantedRaw from tblSemiSetting s inner join tbltranssemisetting ts on ts.Settingid=s.SettingId inner join tblCategoryUser cu on    cu.CategoryUserID=s.Itemid inner join tblIngridents i on i.IngridID=ts.Semiitemid inner join tblUOM u on u.UOMID=i.Units  left join tblRawMatlStockProduction_" + Table + " r on r.IngredientID=i.IngridID  where s.Itemid=" + ItemId + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet Getwantrawnewbyjothi(int ItemId, double Qty, string Table)
        {
            DataSet ds = new DataSet();
            //string sqry = " select u.UOM,ts.Semiitemid,cu.Definition,i.IngredientName,s.TotalQty,ts.RecQty,((ts.RecQty/s.TotalQty) * " + Qty + ") as WantedRaw from tblSemiSetting s inner join tbltranssemisetting ts on ts.Settingid=s.SettingId inner join tblCategoryUser cu on    cu.CategoryUserID=s.Itemid inner join tblIngridents i on i.IngridID=ts.Semiitemid inner join tblUOM u on u.UOMID=i.Units where s.Itemid=" + ItemId + " ";
            string sqry = " select ISNULL(r.Qty,0) as RawStock,u.UOM,ts.Semiitemid,cu.Definition,i.IngredientName,s.TotalQty,ts.RecQty,((ts.RecQty/s.TotalQty) * " + Qty + ") as WantedRaw from tblSemiSetting s inner join tbltranssemisetting ts on ts.Settingid=s.SettingId inner join tblCategoryUser cu on    cu.CategoryUserID=s.Itemid inner join tblIngridents i on i.IngridID=ts.Semiitemid inner join tblUOM u on u.UOMID=i.Units  left join tblRawMatlStockProduction_" + Table + " r on r.IngredientID=i.IngridID  where s.Itemid=" + ItemId + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int Insertrawrequest(string Table, string RequestNo, DateTime RequestDate, string Prepared, string UserID, string Prodtype, string DeptId)
        {
            int iSuccess = 0;
            string sQry = "insert into tblRequestRawMaterials_" + Table + "( RequestNo,RequestDate,Prepared,UserID,PRodType,DeptId) values ('" + RequestNo + "','" + RequestDate.ToString("yyyy/MM/dd hh:mm tt") + "','" + Prepared + "','" + UserID + "','" + Prodtype + "','" + DeptId + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string sqry = " select max(RequestNo) as RequestNo from tblRequestRawMaterials_" + Table + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            iSuccess = Convert.ToInt32(ds.Tables[0].Rows[0]["RequestNo"].ToString());
            return iSuccess;

        }
        public int Inserttransrawrequest(string Table, int RequestID, int ItemId, double Qty, double ExcessQty, string Requesttype)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltransRequestRawMaterials_" + Table + "( RequestID,ItemId,Qty,ExcessQty,Requesttype) values (" + RequestID + "," + ItemId + "," + Qty + "," + ExcessQty + ",'" + Requesttype + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        public int updateRawRequest(string Table, DateTime Date, int RawRequestNo)
        {
            int iSuccess = 0;
            string sQry = "update tblPurchaseRequestProd_" + Table + " set RawRequestStatus=1,RawRequestNo=" + RawRequestNo + " where convert(date,requestdate) ='" + Convert.ToDateTime(Date).ToString("yyyy/MM/dd") + "' ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }


        public DataSet getAcceptRawMaterialsno(string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(RequestNo)+1,1) as RequestNo from tblAcceptRawMaterials_" + scode + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet Get_Deptbyrequest(string scode, string requestno)
        {
            DataSet ds = new DataSet();

            string sqry = string.Empty;

            sqry = "select * from tblRequestRawMaterials_" + scode + " where requestno='" + requestno + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getAcceptRawMaterialdetails(string scode, string RequestNo, string requesttype)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (requesttype == "IW")
            {
                sqry = "select cu.Definition,s.RequestNo,ts.Qty,ts.excessqty,ts.ItemId,(ts.Qty-ts.excessqty) as orgQty from tblRequestRawMaterials_" + scode + " s " +
                    " inner join tbltransRequestRawMaterials_" + scode + " ts on ts.RequestID=s.RequestNo " +
                    " inner join tblCategoryUser cu on cu.CategoryUserID=ts.ItemId  where s.RequestNo=" + RequestNo + "";
            }
            else if (requesttype == "RW")
            {
                //sqry = "select u.uom,cu.IngredientName as Definition,s.RequestNo,(ts.Qty- ts.pendingqty) as Qty,ts.excessqty,ts.ItemId,(ts.Qty-ts.excessqty) as orgQty  from tblRequestRawMaterials_" + scode + " s " +
                //    " inner join  tbltransRequestRawMaterials_" + scode + " ts on  ts.RequestID=s.RequestNo  " +
                //    " inner join tblIngridents cu on cu.IngridID=ts.ItemId inner join tblUOM u on u.UOMID=cu.Units where (ts.Qty-ts.excessqty)<>ts.pendingqty and s.RequestNo=" + RequestNo + "";

                sqry = "select u.uom,cu.IngredientName as Definition,s.RequestNo,(ts.Qty- ts.pendingqty) as Qty,ts.excessqty,ts.ItemId,(ts.Qty-ts.excessqty) as orgQty  from tblRequestRawMaterials_" + scode + " s " +
                    " inner join  tbltransRequestRawMaterials_" + scode + " ts on  ts.RequestID=s.RequestNo  " +
                    " inner join tblIngridents cu on cu.IngridID=ts.ItemId inner join tblUOM u on u.UOMID=cu.Units where  s.RequestNo=" + RequestNo + "";
            }
            //else
            //{
            //    sqry = "select cu.Definition,s.RequestNo,ts.Qty,ts.excessqty,ts.ItemId,(ts.Qty-ts.excessqty) as orgQty from tblRequestRawMaterials_" + scode + " s " +
            //        " inner join tbltransRequestRawMaterials_" + scode + " ts on ts.RequestID=s.RequestNo inner join tblCategoryUser cu on cu.CategoryUserID=ts.ItemId " +
            //        " where s.RequestNo=" + RequestNo + "";
            //}
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet getmaxrawmaterialrequestall(string scode, string prodtype, DateTime RequestDate)
        {
            ///raja
            DataSet ds = new DataSet();
            //string sqry = "select distinct  a.* from tblRequestRawMaterials_" + scode + " as a inner join tbltransRequestRawMaterials_" + scode + " as b on a.RequestNo=b.RequestID  where a.PRodType in (" + prodtype + ") and IsComplet=0 and b.isstocked='0'  ";
            string sqry = "select distinct  a.*, cast(a.RequestNo as nvarchar) +'-'+ isnull(c.deptname,'No Department') as reqno from tblRequestRawMaterials_" + scode + " as a left join tbldepartment as c on c.deptid=a.deptid inner join tbltransRequestRawMaterials_" + scode + " as b on a.RequestNo=b.RequestID " +
                "  where a.PRodType in (" + prodtype + ") and  (isnull(b.qty,0) - ISNULL(b.pendingqty,0)) >0 and  cast(a.RequestDate as date) ='" + Convert.ToDateTime(RequestDate).ToString("yyyy-MM-dd") + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }




        public int Insertrawaccept(string Table, string RequestNo, DateTime RequestDate, string Prepared, string UserID, int RequestID, string reqtype, string deptid)
        {
            int iSuccess = 0;
            string sQry = "insert into tblAcceptRawMaterials_" + Table + "( RequestNo,RequestDate,Prepared,UserID,RequestID,ReqType,DeptId) values ('" + RequestNo + "','" + RequestDate.ToString("yyyy-MM-dd hh:mm tt") + "','" + Prepared + "','" + UserID + "'," + RequestID + ",'" + reqtype + "','" + deptid + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string sqry = " select max(RequestNo) as RequestNo from tblAcceptRawMaterials_" + Table + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            iSuccess = Convert.ToInt32(ds.Tables[0].Rows[0]["RequestNo"].ToString());
            return iSuccess;

        }
        public int Inserttransrawaccept(string Table, int RequestID, int ItemId, double Qty, double ExcessQty, int updateRequestID, double BranchQty, string AdjustQty)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltransAcceptRawMaterials_" + Table + "( RequestID,ItemId,Qty,ExcessQty,BranchQty,AdjustQty) values (" + RequestID + "," + ItemId + "," + Qty + "," + ExcessQty + "," + BranchQty + ",'" + AdjustQty + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "update tbltransRequestRawMaterials_" + Table + " set PendingQty=PendingQty+" + Qty + " where RequestID=" + updateRequestID + " and ItemId=" + ItemId + "";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry1);

            //string updaanohefunction = "select * from tbltransRequestRawMaterials_" + Table + " where qty=pendingqty and  RequestID=" + updateRequestID + " and ItemId=" + ItemId + "";
            //DataSet getlist = dbObj.InlineExecuteDataSet(updaanohefunction);
            //if (getlist.Tables[0].Rows.Count > 0)
            //{
            //    string ID = getlist.Tables[0].Rows[0]["ID"].ToString();

            //    string sQry2 = "update tbltransRequestRawMaterials_" + Table + " set isstocked='1' where id='"+ID+"'";
            //    iSuccess = dbObj.InlineExecuteNonQuery(sQry2);
            //}
            return iSuccess;

        }


        public int updateRawaccept(string Table, int RequestNo)
        {
            int iSuccess = 0;
            string sQry = "update tblRequestRawMaterials_" + Table + " set IsComplet=1  where RequestNo=" + RequestNo + " ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }


        public DataSet InserttransrawitemacceptCheck(string scode, string IngredientID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblRawMatlStock_" + scode + " where IngredientID=" + IngredientID + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet InserttransrawitemacceptCheckproduction(string scode, string IngredientID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblRawMatlStockProduction_" + scode + " where IngredientID=" + IngredientID + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public int Inserttransrawitemaccept3(string Table, int RequestID, int RawItemId, double Qty, double actqty, double AcceptQty, string narration)
        {
            int iSuccess = 0;
            double AvStk;
            string sQry = "insert into tbltransAcceptRawItem_" + Table + "( RequestID,RawItemId,Qty,ActualQty,AcceptQty,Narration,IsAccept,MissingQty,DamageQty) values (" + RequestID + "," + RawItemId + "," + Qty + "," + actqty + "," + AcceptQty + ",'" + narration + "','0','0','0')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            //string sQry1 = "update tblRawMatlStock_" + Table + " set Qty=Qty-" + Qty + " where IngredientID=" + RawItemId + " ";  
            string sQry1 = "update tblRawMatlStock_" + Table + " set Qty=Qty-" + AcceptQty + " where IngredientID=" + RawItemId + " ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry1);

            //string sQry11 = "update tblTransRawMatlStock_" + Table + " set Qty=Qty-" + AcceptQty + " where IngredientID=" + RawItemId + " ";
            //iSuccess = dbObj.InlineExecuteNonQuery(sQry11);  


            //DataSet ds = new DataSet();
            //string sqry = "select * from tblRawMatlStockExp_" + Table + " where IngredientID=" + RawItemId + " and Qty > 0 order by ExpiredDate";
            //ds = dbObj.InlineExecuteDataSet(sqry);
            //if (ds.Tables[0].Rows.Count > 0)
            //{
            //    string sQry11 = "update tblRawMatlStockExp_" + Table + " set Qty=Qty-" + AcceptQty + " where IngredientID=" + RawItemId + " and  StockExpID = '" + ds.Tables[0].Rows[0]["StockExpID"].ToString() + "'";
            //    iSuccess = dbObj.InlineExecuteNonQuery(sQry11);   
            //}
            AvStk = AcceptQty;
            DataSet ds = new DataSet();
            string sqry = "select * from tblRawMatlStockExp_" + Table + " where IngredientID=" + RawItemId + " and Qty > 0 order by ExpiredDate";
            ds = dbObj.InlineExecuteDataSet(sqry);
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                if (AvStk > Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]))
                {
                    string sQry11 = "update tblRawMatlStockExp_" + Table + " set Qty=Qty-" + ds.Tables[0].Rows[i]["Qty"] + " where IngredientID=" + RawItemId + " and  StockExpID = '" + ds.Tables[0].Rows[i]["StockExpID"].ToString() + "'";
                    AvStk = AvStk - Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]);
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry11);
                }
                else if (AvStk < Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]))
                {
                    string sQry11 = "update tblRawMatlStockExp_" + Table + " set Qty=Qty-" + AvStk + " where IngredientID=" + RawItemId + " and  StockExpID = '" + ds.Tables[0].Rows[i]["StockExpID"].ToString() + "'";
                    AvStk = 0;
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry11);
                }
                else if (AvStk == Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]))
                {
                    string sQry11 = "update tblRawMatlStockExp_" + Table + " set Qty=Qty-" + AvStk + " where IngredientID=" + RawItemId + " and  StockExpID = '" + ds.Tables[0].Rows[i]["StockExpID"].ToString() + "'";
                    AvStk = 0;
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry11);
                }
            }

            //string sqryP = " select * from tblRawMatlStockProduction_" + Table + " where IngredientID=" + RawItemId + "";
            //ds = dbObj.InlineExecuteDataSet(sqryP);
            //if (ds.Tables[0].Rows.Count > 0)
            //{
            //    string sQry1P = "update tblRawMatlStockProduction_" + Table + " set Qty=Qty+" + AcceptQty + " where IngredientID=" + RawItemId + " ";
            //    iSuccess = dbObj.InlineExecuteNonQuery(sQry1P);
            //}
            //else
            //{
            //    string sQry1P = "insert into tblRawMatlStockProduction_" + Table + "(IngredientID,Qty) values (" + RawItemId + "," + AcceptQty + ") ";
            //    iSuccess = dbObj.InlineExecuteNonQuery(sQry1P);
            //}

            return iSuccess;

        }


        public int Inserttransrawitemaccept(string Table, int RequestID, int RawItemId, double Qty, double actqty, double AcceptQty, string narration)
        {
            int iSuccess = 0;
            double AvStk;
            string sQry = "insert into tbltransAcceptRawItem_" + Table + "( RequestID,RawItemId,Qty,ActualQty,AcceptQty,Narration) values (" + RequestID + "," + RawItemId + "," + Qty + "," + actqty + "," + AcceptQty + ",'" + narration + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            //string sQry1 = "update tblRawMatlStock_" + Table + " set Qty=Qty-" + Qty + " where IngredientID=" + RawItemId + " ";  
            string sQry1 = "update tblRawMatlStock_" + Table + " set Qty=Qty-" + AcceptQty + " where IngredientID=" + RawItemId + " ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry1);

            //string sQry11 = "update tblTransRawMatlStock_" + Table + " set Qty=Qty-" + AcceptQty + " where IngredientID=" + RawItemId + " ";
            //iSuccess = dbObj.InlineExecuteNonQuery(sQry11);  


            //DataSet ds = new DataSet();
            //string sqry = "select * from tblRawMatlStockExp_" + Table + " where IngredientID=" + RawItemId + " and Qty > 0 order by ExpiredDate";
            //ds = dbObj.InlineExecuteDataSet(sqry);
            //if (ds.Tables[0].Rows.Count > 0)
            //{
            //    string sQry11 = "update tblRawMatlStockExp_" + Table + " set Qty=Qty-" + AcceptQty + " where IngredientID=" + RawItemId + " and  StockExpID = '" + ds.Tables[0].Rows[0]["StockExpID"].ToString() + "'";
            //    iSuccess = dbObj.InlineExecuteNonQuery(sQry11);   
            //}
            AvStk = AcceptQty;
            DataSet ds = new DataSet();
            string sqry = "select * from tblRawMatlStockExp_" + Table + " where IngredientID=" + RawItemId + " and Qty > 0 order by ExpiredDate";
            ds = dbObj.InlineExecuteDataSet(sqry);
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                if (AvStk > Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]))
                {
                    string sQry11 = "update tblRawMatlStockExp_" + Table + " set Qty=Qty-" + ds.Tables[0].Rows[i]["Qty"] + " where IngredientID=" + RawItemId + " and  StockExpID = '" + ds.Tables[0].Rows[i]["StockExpID"].ToString() + "'";
                    AvStk = AvStk - Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]);
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry11);
                }
                else if (AvStk < Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]))
                {
                    string sQry11 = "update tblRawMatlStockExp_" + Table + " set Qty=Qty-" + AvStk + " where IngredientID=" + RawItemId + " and  StockExpID = '" + ds.Tables[0].Rows[i]["StockExpID"].ToString() + "'";
                    AvStk = 0;
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry11);
                }
                else if (AvStk == Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]))
                {
                    string sQry11 = "update tblRawMatlStockExp_" + Table + " set Qty=Qty-" + AvStk + " where IngredientID=" + RawItemId + " and  StockExpID = '" + ds.Tables[0].Rows[i]["StockExpID"].ToString() + "'";
                    AvStk = 0;
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry11);
                }
            }

            string sqryP = " select * from tblRawMatlStockProduction_" + Table + " where IngredientID=" + RawItemId + "";
            ds = dbObj.InlineExecuteDataSet(sqryP);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string sQry1P = "update tblRawMatlStockProduction_" + Table + " set Qty=Qty+" + Qty + " where IngredientID=" + RawItemId + " ";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry1P);
            }
            else
            {
                string sQry1P = "insert into tblRawMatlStockProduction_" + Table + "(IngredientID,Qty) values (" + RawItemId + "," + Qty + ") ";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry1P);
            }

            return iSuccess;

        }

        public DataSet getreceiveRawMaterialsno(string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(RequestNo)+1,1) as RequestNo from tblReceiveRawMaterials_" + scode + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet getreceiveraw(string scode, string type)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct a.*,cast(a.requestno as nvarchar) +' - '+a.reqtype as name from tblAcceptRawMaterials_" + scode + " as a inner join tbltransAcceptRawItem_" + scode + " as b on a.RequestNo=b.Requestid where b.isaccept='0' and a.ReqType in (" + type + ") and a.IsComplet='0'  or a.IsComplet is null ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet getreceiveRawMaterialdetails(string scode, string RequestNo)
        {
            DataSet ds = new DataSet();
            string sqry = "select ts.qty,ts.Itemid,cu.Definition from tblAcceptRawMaterials_" + scode + " s inner join tbltransAcceptRawMaterials_" + scode + " ts on ts.RequestID=s.RequestNo inner join tblCategoryUser cu on cu.CategoryUserID=ts.ItemId  where s.RequestNo=" + RequestNo + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet Getreceiverawitems(string scode, int RequestNo)
        {
            DataSet ds = new DataSet();
            // string sqry = " select u.UOM,ts.Semiitemid,cu.Definition,i.IngredientName,s.TotalQty,ts.RecQty,((ts.RecQty/s.TotalQty) * " + Qty + ") as WantedRaw from tblSemiSetting s inner join tbltranssemisetting ts on ts.Settingid=s.SettingId inner join tblCategoryUser cu on    cu.CategoryUserID=s.Itemid inner join tblIngridents i on i.IngridID=ts.Semiitemid inner join tblUOM u on u.UOMID=i.Units where s.Itemid=" + ItemId + " ";
            //string sqry = " select i.IngredientName,i.IngridID as Semiitemid,ts.Qty as WantedRaw,u.UOM  from tblAcceptRawMaterials_" + scode + " s inner join tbltransAcceptRawItem_" + scode + " ts on ts.RequestID=s.RequestNo inner join tblIngridents i on i.IngridID=ts.RawItemId inner join tblUOM u on u.UOMID=i.Units where s.RequestNo=" + RequestNo + " ";
            string sqry = " select i.IngredientName,i.IngridID as Semiitemid,ts.AcceptQty as WantedRaw,u.UOM  from tblAcceptRawMaterials_" + scode + " s inner join tbltransAcceptRawItem_" + scode + " ts on ts.RequestID=s.RequestNo inner join tblIngridents i on i.IngridID=ts.RawItemId inner join tblUOM u on u.UOMID=i.Units where s.RequestNo=" + RequestNo + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public int Insertrawreceive(string Table, string RequestNo, DateTime RequestDate, string Prepared, string UserID, int RequestID)
        {
            int iSuccess = 0;
            string sQry = "insert into tblReceiveRawMaterials_" + Table + "( RequestNo,RequestDate,Prepared,UserID,RequestID) values ('" + RequestNo + "','" + RequestDate.ToString("yyyy-MM-dd hh:mm tt") + "','" + Prepared + "','" + UserID + "'," + RequestID + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string sqry = " select max(RequestNo) as RequestNo from tblReceiveRawMaterials_" + Table + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            iSuccess = Convert.ToInt32(ds.Tables[0].Rows[0]["RequestNo"].ToString());
            return iSuccess;

        }
        public int Inserttransrawreceive(string Table, int RequestID, int ItemId, double Qty, double ExcessQty, int updateRequestID)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltransReceiveRawMaterials_" + Table + "( RequestID,ItemId,Qty) values (" + RequestID + "," + ItemId + "," + Qty + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            //string sQry1 = "update tblRawMatlStockProduction" + Table + " set PendingQty=PendingQty+" + Qty + " where RequestID=" + updateRequestID + " and ItemId=" + ItemId + "";
            //iSuccess = dbObj.InlineExecuteNonQuery(sQry1);


            return iSuccess;

        }



        public int updateRawreceive(string Table, int RequestNo)
        {
            int iSuccess = 0;
            string sQry = "update tblAcceptRawMaterials_" + Table + " set IsComplet=1  where RequestNo=" + RequestNo + " ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }



        public int Inserttransrawitemreceive(string Table, int RequestID, int RawItemId, double Qty, string storerequestid, string damageqty, string missingqty)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltransReceiveRawItem_" + Table + "( RequestID,RawItemId,Qty,MissingQty,DamageQty) values (" + RequestID + "," + RawItemId + "," + Qty + ",'" + missingqty + "','" + damageqty + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sqr = "Update tbltransAcceptRawItem_" + Table + " set isaccept='1',MissingQty='" + missingqty + "',DamageQty='" + damageqty + "' where requestid='" + storerequestid + "' and RawItemId='" + RawItemId + "' ";
            iSuccess = dbObj.InlineExecuteNonQuery(sqr);

            DataSet ds = new DataSet();
            string sqry = " select * from tblRawMatlStockProduction_" + Table + " where IngredientID=" + RawItemId + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string sQry1 = "update tblRawMatlStockProduction_" + Table + " set Qty=Qty+" + Qty + " where IngredientID=" + RawItemId + " ";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry1);
            }
            else
            {
                string sQry1 = "insert into tblRawMatlStockProduction_" + Table + "(IngredientID,Qty) values (" + RawItemId + "," + Qty + ") ";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry1);
            }
            return iSuccess;

        }


        public DataSet StockDetailsforRawitems(string Table)
        {
            DataSet ds = new DataSet();
            string qr = "select i.IngredientName,s.Qty,u.UOM from tblIngridents i inner join " + Table + " s on s.IngredientID=i.IngridID inner join tblUOM u on u.UOMID=i.Units order by IngredientName asc";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet StockDetailsforRawitemsExp(string stkTable, string stkTableexp)
        {
            DataSet ds = new DataSet();
            string qr = "select i.IngredientName,u.UOM,ss.Qty,ExpiredDate = CASE WHEN ss.ExpiredDate = '1900-01-01 00:00:00.000' THEN ''  ELSE CONVERT(VARCHAR(10), ss.ExpiredDate, 103)  END  from tblIngridents i inner join " + stkTable + " s on s.IngredientID=i.IngridID inner join " + stkTableexp + " ss on ss.IngredientID=i.IngridID inner join tblUOM u on u.UOMID=i.Units where ss.qty >0 order by IngredientName asc";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet StockDetailsforRawitems(string stkTable, string IngCatid)
        {
            DataSet ds = new DataSet();
            string qr = string.Empty;
            if (IngCatid == "All")
            {
                qr = "select b.IngreCategory,i.IngredientName,u.UOM,s.Qty,s.Rate from tblIngridents i inner join " + stkTable + " s on s.IngredientID=i.IngridID inner join tblIngridentscategory as b on b.ingcatid=i.ingcatid  inner join tblUOM u on u.UOMID=i.Units where s.qty >0 order by b.IngreCategory asc";
                ds = dbObj.InlineExecuteDataSet(qr);
            }
            else
            {
                qr = "select b.IngreCategory,i.IngredientName,u.UOM,s.Qty,s.Rate from tblIngridents i inner join " + stkTable + " s on s.IngredientID=i.IngridID inner join tblIngridentscategory as b on b.ingcatid=i.ingcatid  inner join tblUOM u on u.UOMID=i.Units where s.qty >0 and i.ingcatid='" + IngCatid + "' order by b.IngreCategory asc";
                ds = dbObj.InlineExecuteDataSet(qr);
            }
            return ds;
        }

        public DataSet getFinishRawMaterialsno(string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(RequestNo)+1,1) as RequestNo from tblFinishRawMaterials_" + scode + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getFinishRawMaterialsno_Semi(string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(RequestNo)+1,1) as RequestNo from tblSemiFinishRawMaterials_" + scode + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getFinishRawMaterialdetails(string scode, string RequestNo, string Categoryid)
        {
            DataSet ds = new DataSet();
            ////// string sqry = "select (ts.qty- ts.Pending) as qty,ts.Itemid,cu.Definition from tblReceiveRawMaterials_" + scode + " s inner join tbltransReceiveRawMaterials_" + scode + " ts on ts.RequestID=s.RequestNo inner join tblCategoryUser cu on cu.CategoryUserID=ts.ItemId  where s.RequestNo=" + RequestNo + "";
            //////   string sqry = "select (ts.qty- ts.Pending) as qty,ts.Itemid,cu.Definition,ISNULL(f.Qty,0) as FrozenQty  from tblReceiveRawMaterials_" + scode + " s inner join tbltransReceiveRawMaterials_" + scode + " ts on ts.RequestID=s.RequestNo inner join tblCategoryUser cu on cu.CategoryUserID=ts.ItemId left join tblFrozenStock_Prod f on f.ItemID=ts.ItemId where s.RequestNo=" + RequestNo + "";
            if (Categoryid == "All" || Categoryid == "Select")
            {
                string sqry = " select isnull(ps.Prod_Qty,0) as Prod_Qty,c.Category,(ts.qty- ts.Pending) as qty,ts.Itemid,cu.Definition,ISNULL(f.Qty,0) as FrozenQty,cu.serial  from tblReceiveRawMaterials_" + scode + " s inner join tbltransReceiveRawMaterials_" + scode + " ts on ts.RequestID=s.RequestNo inner join tblCategoryUser cu on cu.CategoryUserID=ts.ItemId left join tblFrozenStock_" + scode + " f on f.ItemID=ts.ItemId  inner join tblcategory c on c.Categoryid=cu.CategoryID left join tblProductionQty_" + scode + " ps on ps.DescriptionId=cu.CategoryUserID where s.RequestNo=" + RequestNo + " and (ts.Qty-ts.Pending)>0 order by c.Category asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                string sqry = " select isnull(ps.Prod_Qty,0) as Prod_Qty,c.Category,(ts.qty- ts.Pending) as qty,ts.Itemid,cu.Definition,ISNULL(f.Qty,0) as FrozenQty,cu.serial  from tblReceiveRawMaterials_" + scode + " s inner join tbltransReceiveRawMaterials_" + scode + " ts on ts.RequestID=s.RequestNo inner join tblCategoryUser cu on cu.CategoryUserID=ts.ItemId left join tblFrozenStock_" + scode + " f on f.ItemID=ts.ItemId  inner join tblcategory c on c.Categoryid=cu.CategoryID left join tblProductionQty_" + scode + " ps on ps.DescriptionId=cu.CategoryUserID where s.RequestNo=" + RequestNo + "  and c.Categoryid='" + Categoryid + "' and (ts.Qty-ts.Pending)>0 order by c.Category asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            return ds;
        }

        public DataSet GetFinishrawitems(string scode, int RequestNo)
        {
            DataSet ds = new DataSet();
            //string sqry = " select i.IngredientName,i.IngridID as Semiitemid,ts.Qty as WantedRaw,u.UOM  from tblReceiveRawMaterials_" + scode + " s inner join tbltransReceiveRawItem_" + scode + " ts on ts.RequestID=s.RequestNo inner join tblIngridents i on i.IngridID=ts.RawItemId inner join tblUOM u on u.UOMID=i.Units where s.RequestNo=" + RequestNo + " ";
            string sqry = " select ISNULL(r.Qty,0) as RawStock,i.IngredientName,i.IngridID as Semiitemid,ts.Qty as WantedRaw,u.UOM  from tblReceiveRawMaterials_" + scode + " s inner join tbltransReceiveRawItem_" + scode + " ts on ts.RequestID=s.RequestNo inner join tblIngridents i on i.IngridID=ts.RawItemId inner join tblUOM u on u.UOMID=i.Units  left join tblRawMatlStockProduction_" + scode + " r on r.IngredientID=i.IngridID where s.RequestNo=" + RequestNo + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public int Insertrawfinish(string Table, string RequestNo, DateTime RequestDate, string Prepared, string UserID, int RequestID, string entrytype)
        {
            int iSuccess = 0;
            string sQry = "insert into tblFinishRawMaterials_" + Table + "( RequestNo,RequestDate,Prepared,UserID,RequestID,EntryType) values ('" + RequestNo + "','" + RequestDate.ToString("yyyy-MM-dd hh:mm tt") + "','" + Prepared + "','" + UserID + "'," + RequestID + ",'" + entrytype + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string sqry = " select max(RequestNo) as RequestNo from tblFinishRawMaterials_" + Table + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            iSuccess = Convert.ToInt32(ds.Tables[0].Rows[0]["RequestNo"].ToString());
            return iSuccess;

        }

        public int Insertrawfinish_Semi(string Table, string RequestNo, DateTime RequestDate, string Prepared, string UserID, int RequestID, string entrytype)
        {
            int iSuccess = 0;
            string sQry = "insert into tblSemiFinishRawMaterials_" + Table + "( RequestNo,RequestDate,Prepared,UserID,RequestID,EntryType) values ('" + RequestNo + "','" + RequestDate.ToString("yyyy-MM-dd hh:mm tt") + "','" + Prepared + "','" + UserID + "'," + RequestID + ",'" + entrytype + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string sqry = " select max(RequestNo) as RequestNo from tblSemiFinishRawMaterials_" + Table + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            iSuccess = Convert.ToInt32(ds.Tables[0].Rows[0]["RequestNo"].ToString());
            return iSuccess;

        }


        public int Inserttransrawfinish(string Table, int RequestID, int ItemId, double Qty, double frozenqty, int updateRequestID, double ReadyQty, double DamageQty, double IssueFrozen, double TakeFrozen, double UnComplete, double PendingFrozen, string entrytype)
        {
            int iSuccess = 0;


            string sQry = "insert into tbltransFinishRawMaterials_" + Table + "( RequestID,ItemId,Qty,ReadyQty,DamageQty,IssueFrozen,TakeFrozen,UnComplete,PendingFrozen) values (" + RequestID + "," + ItemId + "," + Qty + "," + ReadyQty + "," + DamageQty + "," + IssueFrozen + "," + TakeFrozen + "," + UnComplete + "," + PendingFrozen + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            if (entrytype == "2")
            {

                string sQry1 = "Update  tbltransReceiveRawMaterials_" + Table + " set Pending=Pending+" + Qty + " where  RequestID=" + updateRequestID + " and ItemId=" + ItemId + "";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry1);


                DataSet ds = new DataSet();
                string sqry = " select * from tblFrozenStock_" + Table + " where ItemID=" + ItemId + "";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string sQry2 = "Update  tblFrozenStock_" + Table + " set Qty=Qty+" + frozenqty + " where  ItemID=" + ItemId + " ";
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry2);
                }
                else
                {
                    string sQry3 = "insert into tblFrozenStock_" + Table + "( ItemID,Qty) values (" + ItemId + "," + frozenqty + ")";
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry3);
                }
                string sQry4 = "Update  tblFrozenStock_" + Table + " set Qty=Qty-" + TakeFrozen + " where  ItemID=" + ItemId + " ";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry4);

            }
            double Prod_Qty = ReadyQty + TakeFrozen;

            DataSet ds1 = new DataSet();
            string sqry6 = " select * from tblProductionQty_" + Table + " where DescriptionId=" + ItemId + "";
            ds1 = dbObj.InlineExecuteDataSet(sqry6);
            if (ds1.Tables[0].Rows.Count > 0)
            {
                string sQry2 = "Update  tblProductionQty_" + Table + " set Prod_Qty=Prod_Qty+" + Prod_Qty + " where  DescriptionId=" + ItemId + " ";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry2);
            }
            else
            {
                string sQry3 = "insert into tblProductionQty_" + Table + "( DescriptionId,Prod_Qty) values (" + ItemId + "," + Prod_Qty + ")";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry3);
            }

            return iSuccess;

        }

        public int Inserttransrawfinish_Semi(string Table, int RequestID, int ItemId, double Qty, double frozenqty, int updateRequestID, double ReadyQty, double DamageQty, double IssueFrozen, double TakeFrozen, double UnComplete, double PendingFrozen, string entrytype)
        {
            int iSuccess = 0;


            string sQry = "insert into tbltransSemiFinishRawMaterials_" + Table + "( RequestID,ItemId,Qty,ReadyQty,DamageQty,IssueFrozen,TakeFrozen,UnComplete,PendingFrozen) values (" + RequestID + "," + ItemId + "," + Qty + "," + ReadyQty + "," + DamageQty + "," + IssueFrozen + "," + TakeFrozen + "," + UnComplete + "," + PendingFrozen + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            if (entrytype == "2")
            {

                string sQry1 = "Update  tbltransReceiveRawMaterials_" + Table + " set Pending=Pending+" + Qty + " where  RequestID=" + updateRequestID + " and ItemId=" + ItemId + "";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry1);


                DataSet ds = new DataSet();
                string sqry = " select * from tblFrozenStock_" + Table + " where ItemID=" + ItemId + "";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string sQry2 = "Update  tblFrozenStock_" + Table + " set Qty=Qty+" + frozenqty + " where  ItemID=" + ItemId + " ";
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry2);
                }
                else
                {
                    string sQry3 = "insert into tblFrozenStock_" + Table + "( ItemID,Qty) values (" + ItemId + "," + frozenqty + ")";
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry3);
                }
                string sQry4 = "Update  tblFrozenStock_" + Table + " set Qty=Qty-" + TakeFrozen + " where  ItemID=" + ItemId + " ";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry4);

            }
            double Prod_Qty = ReadyQty + TakeFrozen;

            DataSet ds1 = new DataSet();
            string sqry6 = " select * from tblSemiProductionQty_" + Table + " where DescriptionId=" + ItemId + "";
            ds1 = dbObj.InlineExecuteDataSet(sqry6);
            if (ds1.Tables[0].Rows.Count > 0)
            {
                string sQry2 = "Update  tblSemiProductionQty_" + Table + " set Prod_Qty=Prod_Qty+" + Prod_Qty + " where  DescriptionId=" + ItemId + " ";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry2);
            }
            else
            {
                string sQry3 = "insert into tblSemiProductionQty_" + Table + "( DescriptionId,Prod_Qty) values (" + ItemId + "," + Prod_Qty + ")";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry3);
            }

            return iSuccess;

        }


        public int Inserttransrawitemfinish(string Table, int RequestID, int RawItemId, double Qty)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltransFinishRawItem_" + Table + "( RequestID,RawItemId,Qty) values (" + RequestID + "," + RawItemId + "," + Qty + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);


            string chk = "select * from tblRawMatlStockProduction_" + Table + " where IngredientID=" + RawItemId + " ";
            DataSet ds = dbObj.InlineExecuteDataSet(chk);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string sQry1 = "update tblRawMatlStockProduction_" + Table + " set Qty=Qty-" + Qty + " where IngredientID=" + RawItemId + " ";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry1);
            }
            else
            {
                string sQry1P = "insert into tblRawMatlStockProduction_" + Table + "(IngredientID,Qty) values (" + RawItemId + ",0) ";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry1P);

                string sQry1 = "update tblRawMatlStockProduction_" + Table + " set Qty=Qty-" + Qty + " where IngredientID=" + RawItemId + " ";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry1);
            }

            return iSuccess;

        }



        public DataSet getfinishraw(string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct s.RequestNo from tblReceiveRawMaterials_" + Table + " s inner join tbltransReceiveRawMaterials_" + Table + " ts on s.RequestNo=ts.RequestID where (ts.Qty - ts.Pending)>0 ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        
        public DataSet getfinishraw_new(string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct s.RequestNo from tblRequestRawMaterials_"+Table+" s " +
                        " inner join tbltransRequestRawMaterials_"+Table+" ts on s.RequestNo=ts.RequestID where (ts.PendingQty)>0 ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }



        //select distinct s.RequestNo from tblRequestRawMaterials_prod s 
//inner join tbltransRequestRawMaterials_prod ts on s.RequestNo=ts.RequestID where (ts.PendingQty)>0 

        public DataSet getbranchCode()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblBranchSetting";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet getlogintype()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbllogintype";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        #endregion


        #region User Creates
        public DataSet grtroll(string Types, string Edit, int EmpID, string BType)
        {

            DataSet ds = new DataSet();
            if (Edit == "Yes")
            {
                //string dbQry = "Select *,Visible as [Read],Visible as Edit,Visible as [Delete],Visible as [Save]  from tblRoleMaster where Area = '" + Types + "' ";
                //ds = dbObj.InlineExecuteDataSet(dbQry);

                string dbQry = "select r.roleid,r.screen,r.area,us.active as visible,r.screenid,r.screen,[Read] as [Read],Edit as Edit,[Delete] as [Delete],[Save] as [Save]  from tbluserrole as us inner join tblrolemaster as r on r.roleid=us.screenid where us.userid='" + EmpID + "' and area='" + Types + "'";
                ds = dbObj.InlineExecuteDataSet(dbQry);
            }
            else
            {
                if (BType == "1")
                {
                    string dbQry = "Select *,Visible as [Read],Visible as Edit,Visible as [Delete],Visible as [Save]  from tblRoleMaster where Area = '" + Types + "' and IsBilling='True' ";
                    ds = dbObj.InlineExecuteDataSet(dbQry);
                }

                if (BType == "2")
                {
                    string dbQry = "Select *,Visible as [Read],Visible as Edit,Visible as [Delete],Visible as [Save]  from tblRoleMaster where Area = '" + Types + "' and IsProduction = 'True' ";
                    ds = dbObj.InlineExecuteDataSet(dbQry);
                }
            }

            return ds;
        }

        public DataSet GetAdminRights(string Types, string Edit)
        {
            DataSet ds = new DataSet();
            if (Edit == "Yes")
            {

                string dbQry = "select r.roleid,r.screen,r.area,us.active as visible,r.screenid,r.screen,[Read] as [Read],Edit as Edit,[Delete] as [Delete],[Save] as [Save]  from tbluserrole as us inner join tblrolemaster as r on r.roleid=us.screenid where area='" + Types + "'";
                ds = dbObj.InlineExecuteDataSet(dbQry);
            }
            else
            {
                string dbQry = "Select *,Visible as [Read],Visible as Edit,Visible as [Delete],Visible as [Save]  from tblRoleMaster where Area = '" + Types + "' and roleid in (162,100,7)";
                ds = dbObj.InlineExecuteDataSet(dbQry);
            }

            return ds;
        }





        public DataSet getselectuser(int EmpID)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblworkers w inner join tbllogin l on l.UserID=w.UserID where EmpID=" + EmpID + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet usersrchgrid(string Branch, int id, string types, string empid)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            if (types == "Save")
            {
                sqry = "select login_id, userName from tbllogin where Username = '" + Branch + "'  order by login_id desc";
            }
            else
            {
                sqry = "select login_id, userName from tbllogin where Username = '" + Branch + "'   and login_id <> " + id + "   order by login_id desc";
            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet insertusers(string Name, string Mobile)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblworkers where Name = '" + Name + "' and Mobile='" + Mobile + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet insertuserspassword(string Code)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblworkers where Code = '" + Code + "'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet updateusers(string Name, string Mobile, string EmpID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblworkers where Name = '" + Name + "' and Mobile='" + Mobile + "' and EmpID<>'" + EmpID + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet updateuserspassword(string Code, string EmpID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblworkers where Code = '" + Code + "'  and EmpID<>'" + EmpID + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public int inseruserwithaccess(string username, string Mobile, string password, DataSet role, int Is_Admin, int emppid, string Branch, string UserID, string BranchID, string logintype, string reportdays, string BillType, string AllBranchAccess, string StoreName, string StoreNo, string TIN, string Place, string Address)
        {
            int iSuccess = 0;
            int iSuccess1 = 0;
            int optipns = 0;
            DataSet dss = new DataSet();
            DataSet dss1 = new DataSet();
            DateTime dt = DateTime.Now;

            string date = dt.AddDays(30).ToString("yyyy-MM-dd");

            ////////////////////////Rajaram Login Table Insert User Details////////////////////////////////////
            //string sQry1 = "insert into tbllogin(username,password,Sales,IsSuperAdmin,BranchCode,StoreName,Address,TIN,Place,StoreNo,TableCode,Status,Rate)values ('" + username + "','" + password + "','tblSales_" + Branch + "','0','" + Branch + "','" + StoreName + "','" + Address + "','" + TIN + "','" + Place + "','" + StoreNo + "','" + Branch + "','Web','Rate')";
            //iSuccess1 = dbObj.InlineExecuteNonQuery(sQry1);

            string dbqry1 = "select max(UserID) as UserID from tbllogin ";
            dss1 = dbObj.InlineExecuteDataSet(dbqry1);

            int UserID1 = Convert.ToInt32(dss1.Tables[0].Rows[0]["UserID"]);

            //////////////////////////////////////////////////////////////////////

            string sQry = "insert into tblworkers(Name,Role,Location,Code,Mobile,UserID,BranchID,Logintype,ReportDays,BillType,AllBranchAccess)values ('" + username + "','Billing','" + Branch + "','" + password + "','" + Mobile + "','" + UserID1 + "','" + BranchID + "','" + logintype + "','" + reportdays + "','" + BillType + "','" + AllBranchAccess + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string dbqry = "select max(EmpID) as EmpID from tblworkers ";
            dss = dbObj.InlineExecuteDataSet(dbqry);

            int user = Convert.ToInt32(dss.Tables[0].Rows[0]["EmpID"]);

            if (role.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < role.Tables[0].Rows.Count; i++)
                {
                    string usernamee = role.Tables[0].Rows[i]["username"].ToString();
                    string screen = role.Tables[0].Rows[i]["screen"].ToString();
                    bool active = Convert.ToBoolean(role.Tables[0].Rows[i]["active"]);
                    int screenid = Convert.ToInt32(role.Tables[0].Rows[i]["screenid"]);
                    string screencode = Convert.ToString(role.Tables[0].Rows[i]["screencode"]);

                    bool Read = Convert.ToBoolean(role.Tables[0].Rows[i]["Read"]);
                    bool Edit = Convert.ToBoolean(role.Tables[0].Rows[i]["Edit"]);
                    bool Delete = Convert.ToBoolean(role.Tables[0].Rows[i]["Delete"]);
                    bool Save = Convert.ToBoolean(role.Tables[0].Rows[i]["Save"]);

                    string sQryopt = "insert into tbluserrole(userid,userName,screen,active,screenid,screencode,Empid,LastUEmpid,[Read],Edit,[Delete],[Save])values ('" + user + "','" + usernamee + "','" + screen + "','" + active + "','" + screenid + "','" + screencode + "','" + emppid + "','" + emppid + "','" + Read + "','" + Edit + "','" + Delete + "','" + Save + "')";
                    optipns = dbObj.InlineExecuteNonQuery(sQryopt);

                }
            }

            return iSuccess;
        }


        public int updateusernew(int userid, string username, string password, string email, DataSet role, string branch, int super, string empid, string Mobile, string ReportDays, string BillType, string AllBranchAccess, string StoreName, string StoreNo, string TIN, string Place, string Address)
        {
            int iSucess = 0;
            int iSucess1 = 0;
            int optipns = 0;
            DataSet dss = new DataSet();

            //string sQry1 = "Update tbllogin set username = '" + username + "',password = '" + password + "',BranchCode = '" + branch + "',StoreName = '" + StoreName + "',Address = '" + Address + "',TIN = '" + TIN + "',Place = '" + Place + "',StoreNo = '" + StoreNo + "',TableCode = '" + branch + "' where UserID=" + userid + "";
            //iSucess1 = dbObj.InlineExecuteNonQuery(sQry1);

            string sQry = "update tblworkers set BillType='" + BillType + "',ReportDays='" + ReportDays + "',Name='" + username + "',Code='" + password + "',Mobile=" + Mobile + ",UserID=" + empid + ",AllBranchAccess='" + AllBranchAccess + "' where EmpID=" + userid + "";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            int user = userid;

            string delqry = "delete from tbluserrole where userid='" + user + "'";
            iSucess = dbObj.InlineExecuteNonQuery(delqry);

            if (role.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < role.Tables[0].Rows.Count; i++)
                {
                    string usernamee = role.Tables[0].Rows[i]["username"].ToString();
                    string screen = role.Tables[0].Rows[i]["screen"].ToString();
                    bool active = Convert.ToBoolean(role.Tables[0].Rows[i]["active"]);
                    int screenid = Convert.ToInt32(role.Tables[0].Rows[i]["screenid"]);
                    string screencode = Convert.ToString(role.Tables[0].Rows[i]["screencode"]);

                    bool Read = Convert.ToBoolean(role.Tables[0].Rows[i]["Read"]);
                    bool Edit = Convert.ToBoolean(role.Tables[0].Rows[i]["Edit"]);
                    bool Delete = Convert.ToBoolean(role.Tables[0].Rows[i]["Delete"]);
                    bool Save = Convert.ToBoolean(role.Tables[0].Rows[i]["Save"]);

                    string sQryopt = "insert into tbluserrole(userid,userName,screen,active,screenid,screencode,Empid,LastUEmpid,[Read],Edit,[Delete],[Save])values ('" + user + "','" + usernamee + "','" + screen + "','" + active + "','" + screenid + "','" + screencode + "','" + empid + "','" + empid + "','" + Read + "','" + Edit + "','" + Delete + "','" + Save + "')";
                    optipns = dbObj.InlineExecuteNonQuery(sQryopt);

                }
            }
            return iSucess;

        }

        public DataSet getuseraccess(string userid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbluserrole where userid='" + userid + "' and active='true'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;


        }


        public DataSet getuseraccessforeditaccess(string userid, string screencode)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbluserrole where userid='" + userid + "' and screencode='" + screencode + "' and active='true'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet cakeorderbillalreadypaid(string stablename, string orderno)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from " + stablename + " where orderno='" + orderno + "' and Status='N'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }



        public DataSet selectusers()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblworkers where Location <>'admin' order by Name asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion


        #region Branch is Production Or not
        public DataSet checkproductionbranch(string sbranch)
        {
            DataSet ds = new DataSet();
            string sQry = "Select * from tblbranch where BranchCode='" + sbranch + "' and BranchType='2'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        public DataSet getfarnchiseename(string sbranch)
        {
            DataSet ds = new DataSet();
            string sQry = "Select * from tblbranch where BranchCode='" + sbranch + "' and (BranchOwnType='F' or BranchOwnType='F/O')";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }


        public DataSet getfarnchiseename_new(string sbranch)
        {
            DataSet ds = new DataSet();
            string sQry = "Select * from tblbranch where BranchCode='" + sbranch + "' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        public int insertallbranchitem()
        {
            int isicuess = 0;
            DataSet dss = new DataSet();
            string liveprod = "Select * from tblcategoryuser";
            dss = dbObj.InlineExecuteDataSet(liveprod);

            string truncatebrach = "truncate table tblcategoryuserbranch";
            int ii = dbObj.InlineExecuteNonQuery(truncatebrach);


            ////if (dss.Tables[0].Rows.Count > 0)
            ////{
            ////    for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
            ////    {
            ////        string categoryid = dss.Tables[0].Rows[i]["CategoryID"].ToString();

            ////        string getbranch = "select CategoryId,c.BranchCode,BranchName,BranchArea from tblcategorysettingsMAster a inner join tbltranscategorysettings b on a.catsettingsId=b.CatsettingsId inner join tblbranch c on c.Branchcode=b.Branchcode and b.IsActive='Y' and a.Categoryid='" + categoryid + "'";
            ////        DataSet getb = dbObj.InlineExecuteDataSet(getbranch);


            ////        string ItemID = dss.Tables[0].Rows[i]["Categoryuserid"].ToString();
            ////        if (getb.Tables[0].Rows.Count > 0)
            ////        {
            ////            for (int j = 0; j < getb.Tables[0].Rows.Count; j++)
            ////            {
            ////                string branchcode = getb.Tables[0].Rows[j]["Branchcode"].ToString();
            ////                string branchname = getb.Tables[0].Rows[j]["BranchArea"].ToString();

            ////                string sQry = "insert into tblcategoryuserbranch( Itemid,BranchCode,BranchName,IsActive) " +
            ////                    " values ('" + ItemID + "','" + branchcode + "','" + branchname + "','Yes')";
            ////                int iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            ////            }
            ////        }

            ////    }
            ////}


            if (dss.Tables[0].Rows.Count > 0)
            {

                string getbranch = "Select * from tblbranch where Branchtype='0'";
                DataSet getb = dbObj.InlineExecuteDataSet(getbranch);

                if (getb.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
                    {




                        string ItemID = dss.Tables[0].Rows[i]["Categoryuserid"].ToString();


                        for (int j = 0; j < getb.Tables[0].Rows.Count; j++)
                        {
                            string branchcode = getb.Tables[0].Rows[j]["Branchcode"].ToString();
                            string branchname = getb.Tables[0].Rows[j]["BranchArea"].ToString();

                            string sQry = "insert into tblcategoryuserbranch( Itemid,BranchCode,BranchName,IsActive) " +
                                " values ('" + ItemID + "','" + branchcode + "','" + branchname + "','Yes')";
                            int iSuccess = dbObj.InlineExecuteNonQuery(sQry);
                        }

                    }
                }
            }
            return isicuess;

        }

        #endregion


        #region Item transfer Process

        public DataSet checkbranchitemtransfer(string sbranch)
        {
            DataSet ds = new DataSet();
            string sQry = "Select * from tblbranch where BranchCode='" + sbranch + "' and BranchType='0'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        #endregion


        #region Sales Transfer Process

        public DataSet gettransfersales(string sbranch, DateTime Date)
        {
            DataSet ds = new DataSet();
            string sQry = "Select * from tblsales_" + sbranch + " where isnull(IsTransfer,0)=0";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        #endregion

        #region WholeSalesQuotation
        public DataSet getcrsalesquotationno(string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(BillNo + 1),1) as BillNo from tblWholesalesQuotation_" + Table + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getsalesdcquotationno(string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(cast(DCNo AS int) + 1),1) as DCNo from tblWholesalesQuotation_" + Table + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetSalesQuotation(string Stable, int SalesId)
        {
            DataSet ds = new DataSet();
            string sqry = "select *  from  tblWholesalesQuotation_" + Stable + " s inner join  tblTransWholeSalesQuotation_" + Stable + " ts on s.Salesid=ts.Salesid inner join  tblCategoryUser c on c.CategoryUserID=ts.Item inner join tblCustomer cc on cc.Ledgerid=s.CustomerName inner join tblPaymode p on p.PayModeId=s.PayMode  Where s.SalesID=" + SalesId + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GetSalesQuotationEdit(string Stable, string SalesId)
        {
            DataSet ds = new DataSet();
            string sqry = "select *  from  " + Stable + " s Where s.SalesID='" + SalesId + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getwholeSaleQuotationprint(string sTableName, string salesid)
        {
            DataSet ds = new DataSet();
            string sQry = "select s.*,c.*  from  tblWholesalesQuotation_" + sTableName + " s inner join tblcustomer c on s.customerName=c.ledgerid Where s.SalesID='" + salesid + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getTranswholeSaleQuotationprint(string sTableName, string salesid)
        {
            DataSet ds = new DataSet();
            string sQry = "select u.uom,uu.UOM as per,t.*,i.* from tblTransWholesalesQuotation_Prod t inner join tblcategoryuser i on t.Item=i.CategoryUserID inner join tbluom u on u.UOMID=t.UOMID inner join tblUOM uu on uu.UOMID=i.unit where salesid='" + salesid + "'";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

    
        public DataSet GetTransSalesQuotationEditNew(string Stable, string SalesId, string table)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            sqry = "select s.UOMID as PackType,s.*  from  " + Stable + " s " +
                "  Where s.SalesID='" + SalesId + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet CheckduplicateDCquotation(string sTableName, string DCno)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblwholesalesQuotation_" + sTableName + " where billno='" + DCno + "'";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet CheckduplicateDCquotation_edit(string sTableName, string BillNo, string iSalesID)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblwholesalesQuotation_" + sTableName + " where BillNo='" + BillNo + "' and SalesId<>'" + iSalesID + "'";


            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int insertwholesalesquotation(string sTableName, string billno, DateTime BillDate, int PayMode, string Narration, int CustomerName, string Mobile, string Address, double Amount, double Tax, double GrandTotal, int TaxVal, double DiscPer, double DiscAmount, double TotalItems, string DCNo, double Disc, int DiscType, double DeliveryVal, int OrderNo, int userId, string Logintype, double CGST, double SGST, double IGST, string SalesType, string Prefix, string Years, string VehicleNo)
        {
            int i = 0;
            int BillNo = 0;
            string billseries;

            DataSet ds = new DataSet();
            string sQry = "select isnull(max(BillNo+1),1) as BillNo from tblWholesalesquotation_" + sTableName + "";
            ds = dbObj.InlineExecuteDataSet(sQry);

            //  BillNo = Convert.ToInt32(ds.Tables[0].Rows[0]["BillNo"].ToString());
            BillNo = Convert.ToInt32(billno);
            billseries = Prefix + BillNo + Years;

            string sQry1 = "insert into tblWholesalesquotation_" + sTableName + " (BillNo,BillDate,PayMode,Narration,CustomerName,Mobile,Address,Amount,Tax,GrandTotal,TaxVal,DiscPer,DiscAmount,TotalItems,DCNo,Disc,DiscType,DeliveryVal,StaticPayMode,OrderNo,userId,Logintype,CGST,SGST,IGST,SalesType,FullBillNo,VehicleNo) Values(" + BillNo + ",'" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd hh:mm tt") + "'," + PayMode + ",'" + Narration + "','" + CustomerName + "','" + Mobile + "','" + Address + "'," + Amount + "," + Tax + "," + GrandTotal + "," + TaxVal + ",'" + DiscPer + "','" + DiscAmount + "'," + TotalItems + ",'" + DCNo + "'," + Disc + "," + DiscType + "," + DeliveryVal + "," + PayMode + "," + OrderNo + "," + userId + ",'" + Logintype + "','" + CGST + "','" + SGST + "','" + IGST + "','" + SalesType + "','" + billseries + "','" + VehicleNo + "')";
            i = dbObj.InlineExecuteNonQuery(sQry1);

            DataSet ds1 = new DataSet();
            string sQry3 = "select max(SalesId) as SalesId from tblWholesalesquotation_" + sTableName + "";
            ds1 = dbObj.InlineExecuteDataSet(sQry3);

            i = Convert.ToInt32(ds1.Tables[0].Rows[0]["SalesId"].ToString());
            return i;
        }

        public int inserttranswholesalesquotation(string sTableName, int SalesId, int Item, double Qty, double Rate, double Tax, double TaxAmount, double Amount, double Disc, double DiscAmount, double DeliveryCharge, string narration, string orderno, string Type, string logintype, int packtype, double MRP, string Logintypeid)
        {
            int i = 0;
            int iSucess = 0;
            string sQry = "insert into tblTransWholeSalesquotation_" + sTableName + " (SalesId,Item,Qty,Rate,Tax,TaxAmount,Amount,Disc,DiscAmount,DeliveryCharge,Narration,Type,UOMID,MRP) Values(" + SalesId + "," + Item + "," + Qty + "," + Rate + "," + Tax + "," + TaxAmount + ",'" + Amount + "'," + Disc + ",'" + DiscAmount + "'," + DeliveryCharge + ",'" + narration + "','" + Type + "'," + packtype + "," + MRP + ")";

            i = dbObj.InlineExecuteNonQuery(sQry);

            if (Logintypeid == "3")
            {

                //string sQry1 = "Update tblstock_" + sTableName + " set Available_QTY=Available_QTY-" + Qty + " where SubCategoryID=" + Item + " ";
                //i = dbObj.InlineExecuteNonQuery(sQry1);

                //string AuditQty = "Insert into TblAuditQty_" + sTableName + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('Whole Sales','" + Qty + "','0','-','" + Item + "','0')";
                //i = dbObj.InlineExecuteNonQuery(AuditQty);

            }
            else
            {
                //string sQry1 = "Update tblProductionQty_" + sTableName + " set Prod_Qty=Prod_Qty-" + Qty + " where DescriptionId=" + Item + " ";
                //i = dbObj.InlineExecuteNonQuery(sQry1);
            }




            //  i = dbObj.InlineExecuteNonQuery(sQry1);
            //if (logintype == "5")
            //{
            //    string sQry1 = "Update tblProductionQty_" + sTableName + " set Prod_Qty=Prod_Qty-" + Qty + " where DescriptionId=" + Item + " ";
            //   i = dbObj.InlineExecuteNonQuery(sQry1);
            //
            //}
            //else if (logintype == "3" || logintype == "6")
            //{
            //    string sQry1 = "Update tblStock_" + sTableName + " set Available_QTY=Available_QTY-" + Qty + " where SubCategoryID=" + Item + " ";
            //
            ////    string AuditQty = "Insert into TblAuditQty_" + sTableName + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('Whole Sales','" + Qty + "','0','-','" + Item + "','0')";
            ////    i = dbObj.InlineExecuteNonQuery(AuditQty);
            //
            //}
            //
            //if (orderno != "0")
            //{
            //    if (Type == "O")
            //    {
            //        string sQry11 = "Update transorder set salesqty=salesqty+" + Qty + " where OrderID=" + orderno + " and ProductID=" + Item + "";
            //        i = dbObj.InlineExecuteNonQuery(sQry11);

            //        DataSet ds12 = new DataSet();
            //        string qy12 = "select qty-salesqty as qty from transorder where orderid=" + orderno + " group by qty-salesqty";
            //        ds12 = dbObj.InlineExecuteDataSet(qy12);

            //        if (ds12.Tables[0].Rows.Count == 1)
            //        {
            //            if (ds12.Tables[0].Rows[0]["qty"].ToString() == "0")
            //            {
            //                string sQry111 = " update orders set InvoiceStatus = 'true'  where  orderid='" + orderno + "' ";
            //                iSucess = dbObj.InlineExecuteNonQuery(sQry111);
            //            }
            //        }
            //    }
            //}

            return i;
        }

        public int updatewholesalesquotationnew(string salesid, string Prefix, string Years, string sTableName, DateTime BillDate, int PayMode, string Narration, int CustomerName, string Mobile, string Address, double Amount, double Tax, double GrandTotal, int TaxVal, double DiscPer, double DiscAmount, double TotalItems, string DCNo, double Disc, int DiscType, double DeliveryVal, string billno, string Logintype, double CGST, double SGST, double IGST, string SalesType, string VehicleNo)
        {
            int i = 0;
            billno = Convert.ToInt32(billno).ToString();
            string billseries = Prefix + billno + Years;


            string sQry1 = "Update tblWholesalesquotation_" + sTableName + " set BillDate='" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd hh:mm tt") + "',PayMode=" + PayMode + ",Narration='" + Narration + "',CustomerName='" + CustomerName + "',Mobile='" + Mobile + "',Address='" + Address + "',Amount=" + Amount + ",Tax=" + Tax + ",GrandTotal=" + GrandTotal + ",TaxVal=" + TaxVal + ",DiscPer='" + DiscPer + "',DiscAmount='" + DiscAmount + "',TotalItems=" + TotalItems + ",DCNo='" + DCNo + "',Disc=" + Disc + ",DiscType=" + DiscType + ",DeliveryVal=" + DeliveryVal + ",Logintype='" + Logintype + "',CGST='" + CGST + "', SGST='" + SGST + "', IGST='" + IGST + "', SalesType='" + SalesType + "',VehicleNo='" + VehicleNo + "',BillNO='" + billno + "',FullBillNo='" + billseries + "' where salesid='" + salesid + "'";

            i = dbObj.InlineExecuteNonQuery(sQry1);

            DataSet ds1 = new DataSet();
            string sQry3 = "select SalesId from tblWholesalesquotation_" + sTableName + " where Billno='" + billno + "'";
            ds1 = dbObj.InlineExecuteDataSet(sQry3);

            i = Convert.ToInt32(ds1.Tables[0].Rows[0]["SalesId"].ToString());

            return i;

        }

        public DataSet GetTransSalesQuotationEdit(string Stable, int SalesId)
        {
            DataSet ds = new DataSet();
            string sqry = "select *  from  " + Stable + "  Where SalesID='" + SalesId + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int DeleteTransSalesQuotationNew(string Stable, int SalesId)
        {
            int iSucess = 0;
            string sqry = "delete  from  " + Stable + "  Where SalesID='" + SalesId + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sqry);
            return iSucess;

        }

        public DataSet GetSalesallQuotation(string Stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select *  from  tblWholesalesQuotation_" + Stable + " s inner join tblCustomer c on c.Ledgerid=s.CustomerName inner join tblPaymode p on p.PayModeId=s.PayMode  order by Billdate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GetSalesallQuotation_Filter(string Stable, DateTime From, DateTime to, string ledgerid)
        {
            DataSet ds = new DataSet();
            string sqry;
            if (ledgerid == "All")
            {
                sqry = "select *  from  tblWholesalesQuotation_" + Stable + " s inner join tblCustomer c on c.Ledgerid=s.CustomerName inner join tblPaymode p on p.PayModeId=s.PayMode where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' order by Billdate desc ";
            }
            else
            {
                sqry = "select *  from  tblWholesalesQuotation_" + Stable + " s inner join tblCustomer c on c.Ledgerid=s.CustomerName inner join tblPaymode p on p.PayModeId=s.PayMode where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and s.Customername = '" + ledgerid + "' order by Billdate desc ";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        #endregion

        #region WholeSales
        //public int insertwholesales(string sTableName, DateTime BillDate, string PayMode, string Narration, string CustomerName, string Mobile, string Address, double Amount, double Tax, double GrandTotal, int TaxVal, string DiscPer, string DiscAmount, double TotalItems, string logintype)
        //{
        //    int i = 0;

        //    int BillNo = 0;
        //    int SalesId = 0;

        //    DataSet ds = new DataSet();
        //    string sQry = "select isnull(max(BillNo+1),1) as BillNo from tblWholesales_" + sTableName + "";
        //    ds = dbObj.InlineExecuteDataSet(sQry);

        //    BillNo = Convert.ToInt32(ds.Tables[0].Rows[0]["BillNo"].ToString());

        //    string sQry1 = "insert into tblWholesales_" + sTableName + " (BillNo,BillDate,PayMode,Narration,CustomerName,Mobile,Address,Amount,Tax,GrandTotal,TaxVal,DiscPer,DiscAmount,TotalItems,Logintype) Values(" + BillNo + ",'" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd hh:mm tt") + "'," + PayMode + ",'" + Narration + "','" + CustomerName + "','" + Mobile + "','" + Address + "'," + Amount + "," + Tax + "," + GrandTotal + "," + TaxVal + ",'" + DiscPer + "','" + DiscAmount + "'," + TotalItems + ",'" + logintype + "')";
        //    i = dbObj.InlineExecuteNonQuery(sQry1);

        //    DataSet ds1 = new DataSet();
        //    string sQry3 = "select max(SalesId) as SalesId from tblWholesales_" + sTableName + "";
        //    ds1 = dbObj.InlineExecuteDataSet(sQry3);

        //    i = Convert.ToInt32(ds1.Tables[0].Rows[0]["SalesId"].ToString());

        //    return i;

        //}

        public int inserttranswholesales(string sTableName, int SalesId, int Item, double Qty, double Rate, double Tax, double TaxAmount, double Amount, double Disc, double DiscAmount, double DeliveryCharge, string narration, string orderno, string Type, string logintype, int packtype, double MRP,string Logintypeid)
        {
            int i = 0;
            int iSucess = 0;
            string sQry = "insert into tblTransWholeSales_" + sTableName + " (SalesId,Item,Qty,Rate,Tax,TaxAmount,Amount,Disc,DiscAmount,DeliveryCharge,Narration,Type,UOMID,MRP) Values(" + SalesId + "," + Item + "," + Qty + "," + Rate + "," + Tax + "," + TaxAmount + ",'" + Amount + "'," + Disc + ",'" + DiscAmount + "'," + DeliveryCharge + ",'" + narration + "','" + Type + "'," + packtype + "," + MRP + ")";

            i = dbObj.InlineExecuteNonQuery(sQry);

            if(Logintypeid == "3")
            {

                string sQry1 = "Update tblstock_" + sTableName + " set Available_QTY=Available_QTY-" + Qty + " where SubCategoryID=" + Item + " ";
                i = dbObj.InlineExecuteNonQuery(sQry1);

                string AuditQty = "Insert into TblAuditQty_" + sTableName + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('Whole Sales','" + Qty + "','0','-','" + Item + "','0')";
                i = dbObj.InlineExecuteNonQuery(AuditQty);

            }
            else
            {
                string sQry1 = "Update tblProductionQty_" + sTableName + " set Prod_Qty=Prod_Qty-" + Qty + " where DescriptionId=" + Item + " ";
                i = dbObj.InlineExecuteNonQuery(sQry1);
            }


            

              //  i = dbObj.InlineExecuteNonQuery(sQry1);
            //if (logintype == "5")
            //{
            //    string sQry1 = "Update tblProductionQty_" + sTableName + " set Prod_Qty=Prod_Qty-" + Qty + " where DescriptionId=" + Item + " ";
            //   i = dbObj.InlineExecuteNonQuery(sQry1);
            //
            //}
            //else if (logintype == "3" || logintype == "6")
            //{
            //    string sQry1 = "Update tblStock_" + sTableName + " set Available_QTY=Available_QTY-" + Qty + " where SubCategoryID=" + Item + " ";
            //
            ////    string AuditQty = "Insert into TblAuditQty_" + sTableName + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('Whole Sales','" + Qty + "','0','-','" + Item + "','0')";
            ////    i = dbObj.InlineExecuteNonQuery(AuditQty);
            //
            //}
            //
            //if (orderno != "0")
            //{
            //    if (Type == "O")
            //    {
            //        string sQry11 = "Update transorder set salesqty=salesqty+" + Qty + " where OrderID=" + orderno + " and ProductID=" + Item + "";
            //        i = dbObj.InlineExecuteNonQuery(sQry11);

            //        DataSet ds12 = new DataSet();
            //        string qy12 = "select qty-salesqty as qty from transorder where orderid=" + orderno + " group by qty-salesqty";
            //        ds12 = dbObj.InlineExecuteDataSet(qy12);

            //        if (ds12.Tables[0].Rows.Count == 1)
            //        {
            //            if (ds12.Tables[0].Rows[0]["qty"].ToString() == "0")
            //            {
            //                string sQry111 = " update orders set InvoiceStatus = 'true'  where  orderid='" + orderno + "' ";
            //                iSucess = dbObj.InlineExecuteNonQuery(sQry111);
            //            }
            //        }
            //    }
            //}

            return i;
        }

        public int insertwholesales(string sTableName, string billno, DateTime BillDate, int PayMode, string Narration, int CustomerName, string Mobile, string Address, double Amount, double Tax, double GrandTotal, int TaxVal, double DiscPer, double DiscAmount, double TotalItems, string DCNo, double Disc, int DiscType, double DeliveryVal, int OrderNo, int userId, string Logintype, double CGST, double SGST, double IGST, string SalesType, string Prefix, string Years, string VehicleNo)
        {
            int i = 0;
            int BillNo = 0;
            string billseries;

            DataSet ds = new DataSet();
            string sQry = "select isnull(max(BillNo+1),1) as BillNo from tblWholesales_" + sTableName + "";
            ds = dbObj.InlineExecuteDataSet(sQry);

            //  BillNo = Convert.ToInt32(ds.Tables[0].Rows[0]["BillNo"].ToString());
            BillNo = Convert.ToInt32(billno);
            billseries = Prefix + BillNo + Years;

            string sQry1 = "insert into tblWholesales_" + sTableName + " (BillNo,BillDate,PayMode,Narration,CustomerName,Mobile,Address,Amount,Tax,GrandTotal,TaxVal,DiscPer,DiscAmount,TotalItems,DCNo,Disc,DiscType,DeliveryVal,StaticPayMode,OrderNo,userId,Logintype,CGST,SGST,IGST,SalesType,FullBillNo,VehicleNo) Values(" + BillNo + ",'" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd hh:mm tt") + "'," + PayMode + ",'" + Narration + "','" + CustomerName + "','" + Mobile + "','" + Address + "'," + Amount + "," + Tax + "," + GrandTotal + "," + TaxVal + ",'" + DiscPer + "','" + DiscAmount + "'," + TotalItems + ",'" + DCNo + "'," + Disc + "," + DiscType + "," + DeliveryVal + "," + PayMode + "," + OrderNo + "," + userId + ",'" + Logintype + "','" + CGST + "','" + SGST + "','" + IGST + "','" + SalesType + "','" + billseries + "','" + VehicleNo + "')";
            i = dbObj.InlineExecuteNonQuery(sQry1);

            DataSet ds1 = new DataSet();
            string sQry3 = "select max(SalesId) as SalesId from tblWholesales_" + sTableName + "";
            ds1 = dbObj.InlineExecuteDataSet(sQry3);

            i = Convert.ToInt32(ds1.Tables[0].Rows[0]["SalesId"].ToString());
            return i;
        }

        public DataSet GetSales(string Stable, int SalesId)
        {
            DataSet ds = new DataSet();
            string sqry = "select *  from  tblWholesales_" + Stable + " s inner join  tblTransWholeSales_" + Stable + " ts on s.Salesid=ts.Salesid inner join  tblCategoryUser c on c.CategoryUserID=ts.Item inner join tblCustomer cc on cc.Ledgerid=s.CustomerName inner join tblPaymode p on p.PayModeId=s.PayMode  Where s.SalesID=" + SalesId + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GetSalesret(string Stable, int SalesId)
        {
            DataSet ds = new DataSet();
            string sqry = "select *  from  tblWholesalesReturn_" + Stable + " s inner join  tblTransWholeSalesReturn_" + Stable + " ts on s.Salesid=ts.Salesid inner join  tblCategoryUser c on c.CategoryUserID=ts.Item inner join tblCustomer cc on cc.Ledgerid=s.CustomerName   Where s.SalesID=" + SalesId + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet selectretsale(string Table, int CustomerName)
        {
            DataSet ds = new DataSet();
            //string sqry = "select * from tblWholesales_" + Table + " where CustomerName =" + CustomerName + "";
            string sqry = "select distinct s.BillNo,s.SalesId,s.Mobile from tblWholesales_" + Table + " s inner join tblTransWholeSales_" + Table + "  ts on s.salesid=ts.salesid where CustomerName =" + CustomerName + " and (ts.Qty - ts.ReturnQty)>0 ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetSalesall(string Stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select *  from  tblWholesales_" + Stable + " s inner join tblCustomer c on c.Ledgerid=s.CustomerName inner join tblPaymode p on p.PayModeId=s.PayMode  order by Billdate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet GetSalesallret(string Stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select *  from  tblWholesalesReturn_" + Stable + " s inner join tblCustomer c on c.Ledgerid=s.CustomerName  order by Billdate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GetSalesallrep(string Stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesales_" + Stable + " s inner join tblTransWholeSales_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName inner join  tblPaymode p on p.PayModeId=s.PayMode inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID order by Billdate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet GetSalesallretrep(string Stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesalesReturn_" + Stable + " s inner join tblTransWholeSalesReturn_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID order by Billdate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getcrsalesnoret(string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(BillNo + 1),1) as BillNo from tblWholesalesReturn_" + Table + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet selectretsaleret(string Table, int salesid)
        {
            DataSet ds = new DataSet();
            // string sqry = "select ts.ID,c.Definition,s.BillNo,s.BillDate,(ts.Qty - ts.ReturnQty) as Qty,ts.Rate,u.units as UOM,ts.item,ts.tax from tblWholesales_" + Table + " s inner join tblTransWholeSales_" + Table + " ts on s.salesid=ts.salesid inner join tblCategoryUser c  on c.CategoryUserID=ts.Item inner join tblUOM u on u.UOMID =c.unit where s.salesid =" + salesid + " and (ts.Qty - ts.ReturnQty)>0 order by s.billdate desc";
            string sqry = "select ts.ID,c.Definition,s.BillNo,s.BillDate,(ts.Qty - ts.ReturnQty) as Qty,ts.Rate,ts.item,ts.tax from " +
                " tblWholesales_" + Table + " s inner join tblTransWholeSales_" + Table + " ts on s.salesid=ts.salesid inner join tblCategoryUser c  " +
                " on c.CategoryUserID=ts.Item  where s.salesid =" + salesid + " and (ts.Qty - ts.ReturnQty)>0 order by s.billdate desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public int insertwholesalesret(string sTableName, DateTime BillDate, string PayMode, string Narration, string CustomerName, string Mobile, string Address, double Amount, double Tax, double GrandTotal, int TaxVal, string DiscPer, string DiscAmount, double TotalItems, string Narrations)
        {
            int i = 0;

            int BillNo = 0;
            int SalesId = 0;

            DataSet ds = new DataSet();
            string sQry = "select isnull(max(BillNo+1),1) as BillNo from tblWholesalesReturn_" + sTableName + "";
            ds = dbObj.InlineExecuteDataSet(sQry);

            BillNo = Convert.ToInt32(ds.Tables[0].Rows[0]["BillNo"].ToString());

            string sQry1 = "insert into tblWholesalesReturn_" + sTableName + " (BillNo,BillDate,PayMode,Narration,CustomerName,Mobile,Address,Amount,Tax,GrandTotal,TaxVal,DiscPer,DiscAmount,TotalItems,Narrations) Values(" + BillNo + ",'" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd hh:mm tt") + "'," + PayMode + ",'" + Narration + "','" + CustomerName + "','" + Mobile + "','" + Address + "'," + Amount + "," + Tax + "," + GrandTotal + "," + TaxVal + ",'" + DiscPer + "','" + DiscAmount + "'," + TotalItems + ",'" + Narrations + "')";
            i = dbObj.InlineExecuteNonQuery(sQry1);

            DataSet ds1 = new DataSet();
            string sQry3 = "select max(SalesId) as SalesId from tblWholesalesReturn_" + sTableName + "";
            ds1 = dbObj.InlineExecuteDataSet(sQry3);

            i = Convert.ToInt32(ds1.Tables[0].Rows[0]["SalesId"].ToString());

            return i;

        }
        public int inserttranswholesalesret(string sTableName, int SalesId, int Item, double Qty, double Rate, double Tax, double TaxAmount, double Amount, int ID,string logintypeid)
        {
            int i = 0;
            string sQry = "insert into tblTransWholeSalesReturn_" + sTableName + " (SalesId,Item,Qty,Rate,Tax,TaxAmount,Amount) Values(" + SalesId + "," + Item + "," + Qty + "," + Rate + "," + Tax + "," + TaxAmount + ",'" + Amount + "')";
            i = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "Update tblTransWholeSales_" + sTableName + " set ReturnQty=ReturnQty+" + Qty + " where ID=" + ID + "";
            i = dbObj.InlineExecuteNonQuery(sQry1);

            string sQry2 = "Update tblWholesales_" + sTableName + " set ReturnAmount=isnull(ReturnAmount,0)+" + Amount + " where SalesId=" + SalesId + "";
            i = dbObj.InlineExecuteNonQuery(sQry2);

            if (logintypeid == "3")
            {
                string sQry4 = "Update tblstock_" + sTableName + " set Available_QTY=Available_QTY+" + Qty + " where SubCategoryID=" + Item + "";
                i = dbObj.InlineExecuteNonQuery(sQry4);
            }
            else
            {

                string sQry3 = "Update tblProductionQty_" + sTableName + " set Prod_Qty=Prod_Qty+" + Qty + " where DescriptionId=" + Item + "";
                i = dbObj.InlineExecuteNonQuery(sQry3);
            }

            return i;
        }

        public DataSet getcrsalesno(string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(BillNo + 1),1) as BillNo from tblWholesales_" + Table + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet selectitems(string Table)
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblCategoryUser order by Definition asc";
            // string sQry = "select * from tblCategoryUser c inner join tblStock_" + Table + " s on s.SubCategoryID=c.CategoryUserID where Available_QTY>0 AND  WholeSalesRate>0  order by Definition asc";
            string sQry = "select * from tblCategoryUser c inner join tblStock_" + Table + " s on s.SubCategoryID=c.CategoryUserID where Available_QTY>0 order by Definition asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectitems_wholesales(string Table, int ledgerid)
        {
           
            DataSet ds = new DataSet();
            //string sQry = "select * from tblCategoryUser order by Definition asc";
            // string sQry = "select * from tblCategoryUser c inner join tblStock_" + Table + " s on s.SubCategoryID=c.CategoryUserID where Available_QTY>0 AND  WholeSalesRate>0  order by Definition asc";
            //string sQry = "select * from tblCategoryUser c inner join tblproductionqty_" + Table + " s " +
              //  " on s.descriptionid=c.CategoryUserID inner join tblLedgerIngredient l on l.IngredientId=c.CategoryUserId where  l.ledgerId=" + ledgerid + " order by Definition asc";
             
              string sQry = "select * from tblCustomer inner  join tblLedgerIngredient on tblcustomer.ledgerid = tblLedgerIngredient.LedgerId where tblcustomer.ledgerid=" + ledgerid + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectpacktype_wholesales()
        {
            DataSet ds = new DataSet();

            string sQry = "select distinct b.UOMID,UOM from tblCategoryUser as a inner join tblUOM as b on b.UOMID=a.unit";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getpaymode()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblPaymode where value in(1,2)";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getiCatvalues1(string LedgerID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCustomer where LedgerID ='" + LedgerID + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet selectitemsgrid(string Table)
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblCategoryUser order by Definition asc";
            string sQry = "select * from tblCategoryUser c inner join tblStock_" + Table + " s on s.SubCategoryID=c.CategoryUserID   order by Definition asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectitemsgrid_wholesales(string Table,string logintypeid)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;
            //string sQry = "select * from tblCategoryUser order by Definition asc";

            if(logintypeid == "3")
            {
                sQry = "select * from tblCategoryUser c inner join tblstock_" + Table + " s on s.SubCategoryID=c.CategoryUserID   order by Definition asc";
            }
            else
            {
                sQry = "select * from tblCategoryUser c inner join tblProductionQty_" + Table + " s on s.DescriptionId=c.CategoryUserID   order by Definition asc";
            }
            
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet selectitemsval(string Table, int CategoryUserID, string logintype)
        {
            DataSet ds = new DataSet();
            if (logintype == "3")
            {
                string sQry = "select * from tblCategoryUser c inner join tblStock_" + Table + " s on s.SubCategoryID=c.CategoryUserID where c.CategoryUserID=" + CategoryUserID + " and Available_QTY>0 order by Definition asc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else
            {
                string sQry = "select c.Rate,c.gst,s.Prod_Qty as Available_QTY from tblCategoryUser c inner join tblProductionQty_" + Table + " s on s.DescriptionId=c.CategoryUserID where c.CategoryUserID=" + CategoryUserID + " and Prod_Qty>0 order by Definition asc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            return ds;
        }


        public DataSet selectitemsval_wholesales(string Table, int CategoryUserID, string logintype, int ledgerid)
        {
            DataSet ds = new DataSet();
            if (logintype == "3")
            {
                string sQry = "select * from tblCategoryUser c inner join tblStock_" + Table + " s on s.SubCategoryID=c.CategoryUserID where c.CategoryUserID=" + CategoryUserID + " and Available_QTY>0 order by Definition asc";
                //string sQry = "select  * from tblLedgerIngredient where LedgerId= '" + ledgerid + "'";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else
            {
                //string sQry = "select c.Rate as MRP,c.gst as Tax,s.Prod_Qty as Available_QTY from tblCategoryUser c inner join tblProductionQty_" + Table + " s on s.DescriptionId=c.CategoryUserID where c.CategoryUserID=" + CategoryUserID + " and Prod_Qty>0 order by Definition asc";
                string sQry = "select l.Rate as MRP,c.gst as Tax,s.Prod_Qty as Available_QTY from tblCategoryUser c inner join tblProductionQty_" + Table + " s on s.DescriptionId=c.CategoryUserID inner join tblLedgerIngredient l on l.IngredientId=c.CategoryUserId  inner join tblLedger ld on ld.LedgerID=l.LedgerId where  Prod_Qty>0  and c.CategoryUserID=" + CategoryUserID + "  and ld.LedgerID=" + ledgerid + "  order by Definition asc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            return ds;
        }


        public DataSet selectitemsRate_wholesales(string IngredientId, string ledgerid)
        {
            DataSet ds = new DataSet();
            //string sQry = "select c.Rate as MRP,c.gst as Tax,s.Prod_Qty as Available_QTY from tblCstring sQry = "select  * from tblLedgerIngredient where LedgerId= '" + ledgerid + "'";egoryUser c inner join tblProductionQty_" + Table + " s on s.DescriptionId=c.CategoryUserID inner join tblLedgerIngredient l on l.IngredientId=c.CategoryUserId  inner join tblLedger ld on ld.LedgerID=l.LedgerId where  Prod_Qty>0  and c.CategoryUserID=" + CategoryUserID + "  and ld.LedgerID=" + ledgerid + "  order by Definition asc";
            string sQry = "select  Rate as MRP from tblLedgerIngredient where IngredientId= '" + IngredientId + "' and LedgerID='" + ledgerid + "'"; 
            ds = dbObj.InlineExecuteDataSet(sQry);
            
            return ds;
        }




        public DataSet AllCategory()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategory order by category asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet AllItems()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCategoryUser where isdelete='0' order by Definition asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetSalesallrep(string Stable, string customer, string CategoryID, string CategoryUserID, DateTime From, DateTime to)
        {
            DataSet ds = new DataSet();
            if (customer == "All")
            {
                if (CategoryID == "All")
                {
                    if (CategoryUserID == "All")
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesales_" + Stable + " s inner join tblTransWholeSales_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName inner join  tblPaymode p on p.PayModeId=s.PayMode inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                    else
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesales_" + Stable + " s inner join tblTransWholeSales_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName inner join  tblPaymode p on p.PayModeId=s.PayMode inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and cu.CategoryUserID=" + CategoryUserID + " order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                }
                else
                {
                    if (CategoryUserID == "All")
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesales_" + Stable + " s inner join tblTransWholeSales_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName inner join  tblPaymode p on p.PayModeId=s.PayMode inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and cu.CategoryID=" + CategoryID + " order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                    else
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesales_" + Stable + " s inner join tblTransWholeSales_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName inner join  tblPaymode p on p.PayModeId=s.PayMode inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and cu.CategoryUserID=" + CategoryUserID + "  and cu.CategoryID=" + CategoryID + " order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                }
            }
            else
            {
                if (CategoryID == "All")
                {
                    if (CategoryUserID == "All")
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesales_" + Stable + " s inner join tblTransWholeSales_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName inner join  tblPaymode p on p.PayModeId=s.PayMode inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and s.CustomerName=" + customer + " order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                    else
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesales_" + Stable + " s inner join tblTransWholeSales_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName inner join  tblPaymode p on p.PayModeId=s.PayMode inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and cu.CategoryUserID=" + CategoryUserID + " and s.CustomerName=" + customer + " order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                }
                else
                {
                    if (CategoryUserID == "All")
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesales_" + Stable + " s inner join tblTransWholeSales_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName inner join  tblPaymode p on p.PayModeId=s.PayMode inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and cu.CategoryID=" + CategoryID + " and s.CustomerName=" + customer + " order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                    else
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesales_" + Stable + " s inner join tblTransWholeSales_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName inner join  tblPaymode p on p.PayModeId=s.PayMode inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and cu.CategoryUserID=" + CategoryUserID + "  and cu.CategoryID=" + CategoryID + " and s.CustomerName=" + customer + " order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                }
            }


            return ds;

        }

        public DataSet GetSalesallretrep(string Stable, string customer, string CategoryID, string CategoryUserID, DateTime From, DateTime to)
        {
            DataSet ds = new DataSet();
            if (customer == "All")
            {
                if (CategoryID == "All")
                {
                    if (CategoryUserID == "All")
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesalesReturn_" + Stable + " s inner join tblTransWholeSalesReturn_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName  inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                    else
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesalesReturn_" + Stable + " s inner join tblTransWholeSalesReturn_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName  inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and cu.CategoryUserID=" + CategoryUserID + " order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                }
                else
                {
                    if (CategoryUserID == "All")
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesalesReturn_" + Stable + " s inner join tblTransWholeSalesReturn_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and cu.CategoryID=" + CategoryID + " order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                    else
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesalesReturn_" + Stable + " s inner join tblTransWholeSalesReturn_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName  inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and cu.CategoryUserID=" + CategoryUserID + "  and cu.CategoryID=" + CategoryID + " order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                }
            }
            else
            {
                if (CategoryID == "All")
                {
                    if (CategoryUserID == "All")
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesalesReturn_" + Stable + " s inner join tblTransWholeSalesReturn_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName  inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and s.CustomerName=" + customer + " order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                    else
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesalesReturn_" + Stable + " s inner join tblTransWholeSalesReturn_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName  inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and cu.CategoryUserID=" + CategoryUserID + " and s.CustomerName=" + customer + " order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                }
                else
                {
                    if (CategoryUserID == "All")
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesalesReturn_" + Stable + " s inner join tblTransWholeSalesReturn_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and cu.CategoryID=" + CategoryID + " and s.CustomerName=" + customer + " order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                    else
                    {
                        string sqry = "select c.CustomerName,s.BillNo,s.billdate,ts.Rate,ts.qty,ts.tax,ts.taxamount,ts.Amount,cu.Definition,cat.category  from  tblWholesalesReturn_" + Stable + " s inner join tblTransWholeSalesReturn_" + Stable + " ts on ts.SalesID=s.Salesid inner join   tblCustomer c on c.Ledgerid=s.CustomerName  inner join tblCategoryUser cu on cu.CategoryUserID=ts.Item inner join tblCategory cat on cat.categoryid=cu.CategoryID where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and cu.CategoryUserID=" + CategoryUserID + "  and cu.CategoryID=" + CategoryID + " and s.CustomerName=" + customer + " order by Billdate desc";
                        ds = dbObj.InlineExecuteDataSet(sqry);
                    }
                }
            }


            return ds;

        }
        #endregion

        #region Company Details
        public DataSet GetCompanyDetails()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCompanyDetails  order by CustomerName asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet GetsubCompanyDetails()
        {
            DataSet ds = new DataSet();
            string sQry = "select *,CustomerName+'-'+GSTNO as CustomerName1 from tblsubCompanyDetails  order by CustomerName asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
      

        #endregion

        #region Branch Details
        public DataSet getBranchDetails(string logintype, string branchcode)
        {
            DataSet ds = new DataSet();
            if (logintype == "1" || logintype == "2")
            {

                string sQry = "select * from tblbranch  order by branchName asc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else
            {
                string sQry = "select * from tblbranch where Branchcode='" + branchcode + "'  order by branchName asc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            return ds;
        }

        public DataSet getbranchdetails(string ibranchid)
        {
            DataSet ds = new DataSet();
            // string sQry = "Select b.*,l.userid from tblbranch as b inner join tbllogin as l on l.Branchcode=b.branchcode where l.issuperadmin=b.branchtype and b.branchid='" + ibranchid + "' ";
            string sQry = "Select b.* from tblbranch as b  where  b.branchid='" + ibranchid + "' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetAttender_name(int ID, string sTable, string Mode, string salestypeid)
        {
            DataSet ds = new DataSet();

            string sqr = "select isnull(b.AttenderName,'Nil') as Aname from tblsales_" + sTable + " as a left  join tblAttender as b on a.Attender=b.AttenderId where a.billno='" + ID + "' and a.salestype='" + salestypeid + "'";
            ds = dbObj.InlineExecuteDataSet(sqr);
            return ds;

        }

        public DataSet PrintingSales_Subgrid(int ID, string sTable, string Mode, string salestypeid, string subcategoryid)
        {
            DataSet ds = new DataSet();
            string sqry = "";
            if (Mode == "Order")
            {
                sqry = "select d.hsncode,d.gst, d.hsncode+' '+d.definition as Itemn,'' as paymode,'' as paymenttype,d.gst/2 as cg, d.gst/2 as sg,a.SGST,a.CGST,a.NetAmount, * from tblsales_" + sTable + " a,tblTransSales_" + sTable + " b,tblcategory c,tblCategoryUser d,tblCustomer e where a.BillNo=b.SalesID and c.categoryid=d.CategoryID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and a.OrderNo=" + ID + "";

            }

            else
            {
                sqry = "select d.mrp as mrp,k.uom as Muom,b.SubCategoryID,D.RATE+(D.RATE*((D.GST)/100)) AS RATE1,d.hsncode,d.gst,d.hsncode+' '+d.definition as Itemn, g.paymode,d.printitem,a.isnormal,a.SalesOrder,f.paymenttype,d.gst/2 as cg, d.gst/2 as sg,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate, " +
                    " a.NetAmount,a.Advance,a.Total,a.Discount,b.UnitPrice,c.category,d.Definition, b.Amount , b.Quantity ,a.CashPaid, " +
                    " a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,a.NetAmount from tblsales_" + sTable + "  a,tblTransSales_" + sTable + " b, " +
                    " tblcategory c,tblCategoryUser d,tblCustomer e,tblsalestype f,tblsalespaymode g,tbluom k where k.uomid=d.unit   and a.salesid=b.salesuniqueid and  f.salestypeid=a.salestype and  a.BillNo=b.SalesID " +
                    " and c.categoryid=d.CategoryID and a.isnormal=b.isnormal and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and g.value=a.ipaymode " +
                    " and a.BillNo=" + ID + " and (a.salestype='" + salestypeid + "') and b.subcategoryid='" + subcategoryid + "' group by b.Amount , b.Quantity,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance, " +
                    " a.Total,b.UnitPrice,c.category,d.Definition,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,d.gst,a.NetAmount,a.Discount, " +
                    " f.paymenttype,a.isnormal,a.SalesOrder,d.printitem,g.paymode,d.hsncode,d.rate ,b.SubCategoryID,k.uom,d.mrp";
            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int Updatebranch(string BranchId, string BranchName, string ContactName, string Country, string State, string City, string Address, string MobileNo,
            string LandLine, string Email, string Currency, string BranchCode, string BranchArea, string GSTIN, string loginid, string Pincode, string Pemail, string Iemail, string Oemail, string BranchOwnType, string FranchiseeName, string OnlineSalesActive, string Mtype, string Printtype, string OnlineCakeSync, string Fssaino, string onlinepos, string PrintOption, string StockOption, string Imagepath, string Username, string Password, string BillCode, string BillGenerateSetting, string Billtaxsplitupshown, string BillPrintLogo, string BigVersion, string TaxSetting, string ratesetting, string qtysetting, string possalessetting, string RoundoffSetting, string dipatchDirectly, string QtyFillSetting, string Posattendercheck, string posPrintsetting, string OrderBookcheck)
        {
            int iSucess = 0;
            int iSucess1 = 0;
            int iSucess2 = 0;

            ////string[] branchid = sUser.Split('_');
            ////string branchid1 = branchid[0].ToString();

            //string sQry1 = "update tblbranch set BranchName='" + BranchName + "',ContactName='" + ContactName + "',Country='" + Country + "',State='" + State + "',City='" + City + "',Address='" + Address + "',MobileNo='" + MobileNo + "',LandLine='" + LandLine + "',Email='" + Email + "',BranchCode='" + BranchCode + "',BranchArea='" + BranchArea + "',GSTIN='" + GSTIN + "' where Branchid='" + BranchId + "'";
            string sQry1 = "update tblbranch set QtyFillSetting='"+QtyFillSetting+"',Posattendercheck='"+Posattendercheck+"',posPrintsetting='"+posPrintsetting+"',OrderBookcheck='"+OrderBookcheck+"',dipatchDirectly='" + dipatchDirectly + "',RoundoffSetting='" + RoundoffSetting + "',possalessetting='" + possalessetting + "',Currency='" + Currency + "',TaxSetting='" + TaxSetting + "',Ratesetting='" + ratesetting + "',Qtysetting='" + qtysetting + "',BigVersion='" + BigVersion + "',BillCode = '" + BillCode + "' ,BillGenerateSetting='" + BillGenerateSetting + "',Billtaxsplitupshown='" + Billtaxsplitupshown + "',BillPrintLogo='" + BillPrintLogo + "',onlinepos='" + onlinepos + "', Fssaino='" + Fssaino + "',OnlineCakeSync='" + OnlineCakeSync + "',Printtype='" + Printtype + "',Mtype='" + Mtype + "', BranchOwnType='" + BranchOwnType + "',FranchiseeName='" + FranchiseeName + "',OnlineSalesActive='" + OnlineSalesActive + "', Pemail='" + Pemail + "', Iemail='" + Iemail + "', Oemail='" + Oemail + "',BranchName='" + BranchName + "',ContactName='" + ContactName + "',Country='" + Country + "',State='" + State + "',City='" + City + "',Address='" + Address + "',MobileNo='" + MobileNo + "',LandLine='" + LandLine + "',Email='" + Email + "',BranchArea='" + BranchArea + "',GSTIN='" + GSTIN + "',Pincode='" + Pincode + "',PrintOption='" + PrintOption + "',StockOption='" + StockOption + "',Imagepath='" + Imagepath + "' ,Username='" + Username + "' ,Password='" + Password + "'   where Branchid='" + BranchId + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry1);

            string sQry2 = "update tbllogin set  Imagepath='" + Imagepath + "' ,username = '" + Username + "',password = '" + Password + "',BranchCode = '" + BranchCode + "',StoreName = '" + BranchName + "',Address = '" + Address + "',TIN = '" + GSTIN + "',Place = '" + BranchArea + "',StoreNo = '" + MobileNo + "',TableCode = '" + BranchCode + "'  where BranchCode='" + BranchCode + "'";
            iSucess1 = dbObj.InlineExecuteNonQuery(sQry2);

            string sQry3 = "update tblbookcode set Bookcode = '" + BranchCode + "-' where BranchCode='" + BranchCode + "' ";
            iSucess2 = dbObj.InlineExecuteNonQuery(sQry3);



            return iSucess;

        }

        public int Insertbranch(string BranchName, string ContactName, string Country, string State, string City, string Address, string MobileNo, string LandLine,
            string Email, string Currency, string BranchCode, string BranchArea, string GSTIN, string loginid, string Pincode, string Pemail, string Iemail, string Oemail,
            string BranchOwnType, string FranchiseeName, string OnlineSalesActive, string Mtype, string Printtype, string OnlineCakeSync, string Fssaino,
            string onlinepos, string PrintOption, string StockOption, string Imagepath, string BranchType, string Username, string Password, string BillCode, string BillGenerateSetting, string Billtaxsplitupshown, string BillPrintLogo, string Bversion,
            string TaxSetting, string ratesetting, string qtysetting, string possalessetting, string RoundoffSetting,
            string QtyFillSetting,string Posattendercheck,string posPrintsetting,string OrderBookcheck)
        {
            int iSucess = 0;
            int iSucess1 = 0;
            int iSucess2 = 0;



            string sQry1 = "insert into tblbranch ( onlinepos,Fssaino,OnlineCakeSync,Printtype,Mtype,BranchOwnType,FranchiseeName,OnlineSalesActive,Pemail,Iemail, " +
                " Oemail,BranchName,ContactName,Country,State,City,Address,MobileNo,LandLine,Email,BranchArea,GSTIN,Pincode,PrintOption,StockOption,Imagepath, " +
                " BranchCode,BranchType,Username,Password,BillCode,BillGenerateSetting,Billtaxsplitupshown,BillPrintLogo,BigVersion,TaxSetting,Ratesetting, " +
                " Qtysetting,Currency,possalessetting,RoundoffSetting,QtyFillSetting,Posattendercheck,posPrintsetting,OrderBookcheck) values('" + onlinepos + "','" + Fssaino + "','" + OnlineCakeSync + "','" + Printtype + "','" + Mtype + "', '" + BranchOwnType + "','" + FranchiseeName + "','" + OnlineSalesActive + "', " +
                " '" + Pemail + "', '" + Iemail + "', '" + Oemail + "','" + BranchName + "','" + ContactName + "','" + Country + "','" + State + "', " +
                " '" + City + "','" + Address + "','" + MobileNo + "','" + LandLine + "','" + Email + "','" + BranchArea + "','" + GSTIN + "','" + Pincode + "', " +
                " '" + PrintOption + "','" + StockOption + "','" + Imagepath + "','" + BranchCode + "','" + BranchType + "','" + Username + "','" + Password + "', " +
                " '" + BillCode + "','" + BillGenerateSetting + "','" + Billtaxsplitupshown + "','" + BillPrintLogo + "','" + Bversion + "','" + TaxSetting + "' " +
                " ,'" + ratesetting + "','" + qtysetting + "','" + Currency + "','" + possalessetting + "','" + RoundoffSetting + "' " +
                " ,'" + QtyFillSetting + "','" + Posattendercheck + "','" + posPrintsetting + "','" + OrderBookcheck + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry1);

            string sQry2 = "insert into tblbookcode (BranchCode,Bookcode) values('" + BranchCode + "','" + BranchCode + "-')";
            iSucess1 = dbObj.InlineExecuteNonQuery(sQry2);

            string sQry3 = "insert into tbllogin(username,password,Sales,IsSuperAdmin,BranchCode,StoreName,Address,TIN,Place,StoreNo,TableCode,Status,Rate,UserVal,IsmasterLock, " +
                " LOnlSale,MOnlSale,state,Statecode,Imagepath,BillCode)values " +
                " ('" + Username + "','" + Password + "','tblSales_" + BranchCode + "','0','" + BranchCode + "','" + BranchName + "','" + Address + "','" + GSTIN + "','" + BranchArea + "','" + MobileNo + "', " +
                " '" + BranchCode + "','Web','Rate',1,'N','N','N','TN','33','" + Imagepath + "','" + BillCode + "')";
            iSucess2 = dbObj.InlineExecuteNonQuery(sQry3);

            return iSucess;
        }

        #endregion


        #region DEmand TO PRODUCTION
        public DataSet ShowRequest_SemiRaw(string Stable, string requesttype)
        {
            DataSet ds = new DataSet();
            string sqry = "select s.RequestNo,RequestDate,Prepared,SUM(Qty) as Qty   from  tblRequestSemiRawMaterials_" + Stable + " s  " +
                " inner join tbltransRequestSemiRawMaterials_" + Stable + " ts  on ts.RequestID=s.RequestNo where ts.requesttype='" + requesttype + "' group by s.RequestNo,RequestDate,Prepared  order by RequestDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        #endregion


        #region
        public DataSet ShowRequestRaw(string Stable, string requesttype)
        {
            DataSet ds = new DataSet();
            string sqry = "select s.RequestNo,RequestDate,Prepared,SUM(Qty) as Qty,isnull(c.Deptname ,'No Department') as deptname  from  tblRequestRawMaterials_" + Stable + " s  left join tbldepartment as c on c.DeptID=s.DeptID " +
                " inner join tbltransRequestRawMaterials_" + Stable + " ts  on ts.RequestID=s.RequestNo  " +
            " where ts.requesttype='" + requesttype + "' group by s.RequestNo,RequestDate,Prepared,c.Deptname  order by RequestDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet ShowAcceptRaw(string Stable)
        {
            DataSet ds = new DataSet();
            // string sqry = "select s.requestid,s.RequestNo,RequestDate,Prepared,SUM(Qty) as Qty   from  tblAcceptRawMaterials_" + Stable + " s inner join tbltransAcceptRawMaterials_" + Stable + " ts  on ts.RequestID=s.RequestNo group by s.RequestNo,RequestDate,Prepared,s.requestid  order by RequestDate desc ";
            string sqry = "select s.reqtype,s.requestid,s.RequestNo,RequestDate,Prepared,SUM(Qty) as Qty   from  tblAcceptRawMaterials_" + Stable + " s " +
                " inner join tbltransAcceptRawitem_" + Stable + " ts  on ts.RequestID=s.RequestNo group by s.reqtype,s.RequestNo,RequestDate,Prepared,s.requestid  " +
                " order by RequestDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet ShowReceiveRaw(string Stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select s.RequestNo,RequestDate,Prepared,isnull(SUM(ts.Qty),0) as ProdQty,isnull(sum(c.qty),0) as rawQty   from  tblReceiveRawMaterials_" + Stable + " s  " +
                " left join tbltransReceiveRawMaterials_" + Stable + " ts  on ts.RequestID=s.RequestNo " +
                " inner join tbltransReceiveRawItem_" + Stable + " as c on c.requestid=s.requestno group by s.RequestNo,RequestDate,Prepared  order by RequestDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet ShowFinishRaw(string Stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select top 50 s.RequestNo,RequestDate,Prepared,SUM(Qty) as Qty   from  tblFinishRawMaterials_" + Stable + " s inner join tbltransFinishRawMaterials_" + Stable + " ts  on ts.RequestID=s.RequestNo group by s.RequestNo,RequestDate,Prepared  order by RequestDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet ShowFinishRaw_Semi(string Stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select top 50 s.RequestNo,RequestDate,Prepared,SUM(Qty) as Qty   from  tblSemiFinishRawMaterials_" + Stable + " s " +
                " inner join tbltransSemiFinishRawMaterials_" + Stable + " ts  on ts.RequestID=s.RequestNo group by s.RequestNo,RequestDate,Prepared  order by RequestDate desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet ShowRequestRawDetails(string Stable, string TansStable, int RequestNo, string requesttype)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (requesttype == "IW")
            {
                sqry = "select s.RequestNo,RequestDate,Prepared,c.Category,cu.Definition,Qty,u.UOM as Unit  from " + Stable + " s  inner join  " + TansStable + " ts on  ts.RequestID=s.RequestNo  inner join tblCategoryUser cu on cu.CategoryUserID=ts.ItemId inner join tblcategory c on c.Categoryid=cu.CategoryID inner join tblUOM u on u.UOMID=cu.unit  where s.RequestNo=" + RequestNo + "";
            }
            else if (requesttype == "RW")
            {
                sqry = "select s.RequestNo,RequestDate,Prepared,c.IngreCategory as Category,cu.IngredientName as Definition,Qty,u.UOM as Unit  from " + Stable + " s  inner join  " + TansStable + " ts on  ts.RequestID=s.RequestNo  " +
                    " inner join tblIngridents cu on cu.IngridID=ts.ItemId inner join tblIngridentsCategory c on c.IngCatID=cu.IngCatID " +
                    " inner join tblUOM u on u.UOMID=cu.Units  where s.RequestNo=" + RequestNo + "";
            }
            else if (requesttype == "")
            {
                sqry = "select s.RequestNo,RequestDate,Prepared,c.IngreCategory as Category,cu.IngredientName as Definition,Qty,u.UOM as Unit  from " + Stable + " s  inner join  " + TansStable + " ts on  ts.RequestID=s.RequestNo  " +
                    " inner join tblIngridents cu on cu.IngridID=ts.ItemId inner join tblIngridentsCategory c on c.IngCatID=cu.IngCatID " +
                    " inner join tblUOM u on u.UOMID=cu.Units  where s.RequestNo=" + RequestNo + "";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet ShowRequestRawDetails_Semi(string Stable, string TansStable, int RequestNo, string requesttype)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (requesttype == "IW")
            {
                sqry = "select s.RequestNo,RequestDate,Prepared,c.Category,cu.Definition,Qty,u.UOM as Unit  from " + Stable + " s  inner join  " + TansStable + " ts " +
                    " on  ts.RequestID=s.RequestNo  inner join tblCategoryUser cu on cu.CategoryUserID=ts.ItemId inner join tblcategory c on c.Categoryid=cu.CategoryID " +
                    " inner join tblUOM u on u.UOMID=cu.unit  where s.RequestNo=" + RequestNo + "";
            }
            else if (requesttype == "RW")
            {
                sqry = "select s.RequestNo,RequestDate,Prepared,c.IngreCategory as Category,cu.IngredientName as Definition,Qty,u.UOM as Unit  from " + Stable + " s  inner join  " + TansStable + " ts on  ts.RequestID=s.RequestNo  " +
                    " inner join tblIngridents cu on cu.IngridID=ts.ItemId inner join tblIngridentsCategory c on c.IngCatID=cu.IngCatID " +
                    " inner join tblUOM u on u.UOMID=cu.Units  where s.RequestNo=" + RequestNo + "";
            }
            else if (requesttype == "")
            {
                //sqry = "select s.RequestNo,RequestDate,Prepared,c.IngreCategory as Category,cu.IngredientName as Definition,Qty,u.UOM as Unit  from " + Stable + " s  inner join  " + TansStable + " ts on  ts.RequestID=s.RequestNo  " +
                //    " inner join tblSemiIngridents cu on cu.IngridID=ts.rawItemId inner join tblSemiCategory c on c.IngCatID=cu.IngCatID " +
                //    " inner join tblUOM u on u.UOMID=cu.Units  where s.RequestNo=" + RequestNo + "";
                sqry = "select s.RequestNo,RequestDate,Prepared,c.SemiCategory as Category,cu.SemiIngredientName as Definition,Qty,u.UOM as Unit  from " + Stable + " s  inner join  " + TansStable + " ts " +
                    " on  ts.RequestID=s.RequestNo  inner join tblSemiIngridents cu on cu.SemiIngridID=ts.ItemId inner join tblSemiCategory c on c.SemiCatID=cu.SemiCatID " +
                    " inner join tblUOM u on u.UOMID=cu.units  where s.RequestNo=" + RequestNo + "";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet ShowRequestRawDetailsNew(string Stable, string TansStable, int RequestNo)
        {
            DataSet ds = new DataSet();
            // string sqry = "select s.RequestNo,RequestDate,Prepared,c.Category,cu.Definition,Qty,u.UOM as Unit  from " + Stable + " s  inner join  " + TansStable + " ts on  ts.RequestID=s.RequestNo  inner join tblCategoryUser cu on cu.CategoryUserID=ts.ItemId inner join tblcategory c on c.Categoryid=cu.CategoryID inner join tblUOM u on u.UOMID=cu.unit  where s.RequestNo=" + RequestNo + "";
            string sqry = "select s.RequestNo,RequestDate,Prepared,c.ingreCategory as Category,cu.IngredientName as Definition,ts.acceptqty as Qty,u.UOM as Unit  from " + Stable + " s  inner join  " + TansStable + " ts on  ts.RequestID=s.RequestNo  inner join tblIngridents cu on cu.IngridID=ts.rawItemId inner join tblIngridentsCategory c on c.IngCatID=cu.IngCatID inner join tblUOM u on u.UOMID=cu.units  where s.RequestNo=" + RequestNo + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        #endregion


        #region Margin

        public DataSet getallbranch()
        {
            DataSet ds = new DataSet();

            string sqry = "select BranchCode as  BranchName,isnull(Branchname,'')+'-'+isnull(BranchCode,'')+'-'+isnull(GSTIN,'') as Name,BranchId,'0' as Margin from tblbranch where IsActive='Yes' and BranchType=0";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public DataSet getbranchlMargin(int CategoryId, string branchid)
        {
            DataSet ds = new DataSet();

            //  string sqry = "select b.BranchCode as BranchName,b.BranchId, isnull(m.Margin,0) as Margin from tblBranch b left join tblMargin m on m.BranchID=b.BranchId where  b.IsActive='Yes' and b.BranchType=0 and  (CategoryId=" + CategoryId + " or categoryid is null) ";
            string sqry = "select m.BranchCode as BranchName,m.BranchId, isnull(m.Margin,0) as Margin from tblMargin m  where  (CategoryId=" + CategoryId + ") and m.BranchId='" + branchid + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        public int deletemargin(int CategoryId)
        {
            int iSuccess = 0;
            string sQry = "delete from tblMargin where CategoryId=" + CategoryId + " ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        public int Insertmargin(int CategoryId, int BranchID, double Margin, string BranchCode, string superadmin)
        {
            int iSuccess = 0;
            string sQry = "insert into tblMargin( CategoryId,BranchID,Margin,BranchCode) values ('" + CategoryId + "','" + BranchID + "'," + Margin + ",'" + BranchCode + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            if (superadmin == "1" || superadmin == "2")
            {
                string sQryadd = "insert into tblmarginhistory(CategoryId,BranchID,Margin,BranchCode) values ('" + CategoryId + "','" + BranchID + "'," + Margin + ",'" + BranchCode + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQryadd);
            }

            return iSuccess;

        }
        #endregion


        #region Excel_Upload for Items

        public DataSet getTAXupload(string TaxName)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbltax where TaxName='" + TaxName + "' and IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet gettaxVale(string Tax)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbltax where Tax='" + Tax + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getUOMValue(string UOM)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbluom where UOM='" + UOM + "' and IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet categorysrchgridnew(string category)
        {
            DataSet ds = new DataSet();
            string sqry = "select categoryid, category from tblCategory where category = '" + category + "'    order by categoryid desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet categoryforingredient(string IngreCategory)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblIngridentsCategory where IngreCategory = '" + IngreCategory + "'  and IsActive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public int InsertCatforAll(string Category, string CategoryCode, string ProductionType)
        {
            int iSuccess = 0;
            int isorderid = 0;
            int CategoryID = 0;


            DataSet ds1 = new DataSet();
            string sQry1 = "select isnull(Max(CategoryID)+1,1) as CategoryID from tblcategory ";
            ds1 = dbObj.InlineExecuteDataSet(sQry1);
            CategoryID = Convert.ToInt32(ds1.Tables[0].Rows[0]["CategoryID"]);

            string sQry = "insert into tblCategory( Category,Categorycode,CategoryID,IsActive,IsLiveKitchen,ProductionType,PrintCategory,Request,poduction,ManualGrn,CatType) values " +
                " ('" + Category + "','" + CategoryCode + "'," + CategoryID + ",'Yes',0,'" + ProductionType + "','" + Category + "','1','1','1','N')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            return iSuccess;

        }


        public int InsertCatforingredient(string IngreCategory)
        {
            int iSuccess = 0;
            DataSet ds1 = new DataSet();

            string sQry = "insert into tblIngridentsCategory( IngreCategory,IsActive) values ('" + IngreCategory + "','Yes')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "select isnull(Max(IngCatID),1) as IngCatID from tblIngridentsCategory ";
            ds1 = dbObj.InlineExecuteDataSet(sQry1);
            iSuccess = Convert.ToInt32(ds1.Tables[0].Rows[0]["IngCatID"]);

            return iSuccess;

        }

        public DataSet defsrchgrid(string def, string iCatID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCategoryUser where Definition = '" + def + "' and categoryId='" + iCatID + "'   and IsActive='Yes'   ";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }



        public int InsertitemforAll(int categoryid, string Item, Double Rate, Double Tax, int TaxId, int UOMid, string Empcode, double Minimumstock, string HSNCode, string foodtype, string BarCode, string mrp, string serial_no, string Description, string ratetype,string qtytype)
        {
            int iSuccess = 0;
            DataSet ds = new DataSet();
            string max = "select max(CategoryUserId)+1 as CategoryUserId from tblcategoryuser";
            ds = dbObj.InlineExecuteDataSet(max);
            int subcat = 1;
            if (ds.Tables[0].Rows[0]["categoryUserId"].ToString() != "")
            {
                subcat = Convert.ToInt32(ds.Tables[0].Rows[0]["categoryUserId"].ToString());
            }
            string sQry = "insert into tblCategoryUser( CategoryID,Definition,IsDelete,Serial_No,Serial,Size,isChecked,Tax,GST,TaxVal,unit,Rate,categoryUserId,Minimumstock,DisplayOnline,IsActive,Empcode,HSNCode,Printitem,FoodType,BarCode,mrp,Description,ratetype,QtyType) values "
                + "('" + categoryid + "',N'" + Item + "',0,'" + serial_no + "','" + serial_no + "','0',1,'" + Tax + "','" + Tax + "','" + TaxId + "','" + UOMid + "','" + Rate + "'," + subcat + "," + Minimumstock + ",'Y','Yes','" + Empcode + "','" + HSNCode + "',N'" + Item + "','" + foodtype + "','" + BarCode + "','" + mrp + "','" + Description + "','" + ratetype + "','"+qtytype+"')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            //  DateTime Date = DateTime.ParseExact(DateTime.Now.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);

            //string sQry1 = "insert into tblStock_CO4(UserID, CategoryID,SubCategoryID,Quantity,UnitPrice,Available_QTY,MinQty,ToolID,DealerUnitPrice,PressUnitPrice,PurchaseRate) values ('" + Empcode + "','" + categoryid + "','" + subcat + "',0,0,0,0,0,0,0,0)";
            //iSuccess = dbObj.InlineExecuteNonQuery(sQry1);

            return iSuccess;

        }

        public int InsertitemforHSNCODE(string itemid, string HSNCODE, string GST, string taxid, string btntype)
        {
            int i = 0;
            string Sqry = string.Empty;
            if (btntype == "1")
            {
                Sqry = "Update tblcategoryuser set HSNCODE='" + HSNCODE + "' where itemid='" + itemid + "' ";
            }
            else
            {
                Sqry = "Update tblcategoryuser set GST='" + GST + "',TaxVal='" + taxid + "' where itemid='" + itemid + "' ";
            }
            i = dbObj.InlineExecuteNonQuery(Sqry);
            return i;

        }


        public int InsertitemforONLINE(string itemid, string DisplayOnline)
        {
            int i = 0;
            string Sqry = string.Empty;
            // if (btntype == "1")
            {
                Sqry = "Update tblcategoryuser set DisplayOnline='" + DisplayOnline + "' where itemid='" + itemid + "' ";
            }
            //else
            //{
            //    Sqry = "Update tblcategoryuser set GST='" + GST + "',TaxVal='" + taxid + "' where itemid='" + itemid + "' ";
            //}
            i = dbObj.InlineExecuteNonQuery(Sqry);
            return i;

        }

        public int UpdateitemforRate(string itemid, string Rate)
        {
            int i = 0;
            string Sqry = string.Empty;

            {
                Sqry = "Update tblcategoryuser set Rate='" + Rate + "' where CategoryUserID='" + itemid + "' ";
            }

            i = dbObj.InlineExecuteNonQuery(Sqry);


            string sq = "Select * from tblcategoryuser where CategoryUserID='" + itemid + "'";
            DataSet ds = dbObj.InlineExecuteDataSet(sq);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string Itemid = ds.Tables[0].Rows[0]["Itemid"].ToString();
                string catid = ds.Tables[0].Rows[0]["CategoryID"].ToString();
                string Definition = ds.Tables[0].Rows[0]["Definition"].ToString();
                string sSerial = ds.Tables[0].Rows[0]["Serial"].ToString();
                string taxvalue = ds.Tables[0].Rows[0]["Tax"].ToString();
                string rate = ds.Tables[0].Rows[0]["Rate"].ToString();
                string CategoryID = ds.Tables[0].Rows[0]["CategoryUserID"].ToString();

                // string itemid = ds.Tables[0].Rows[0]["GST"].ToString();
                string gsttax = ds.Tables[0].Rows[0]["TaxVal"].ToString();
                string uom = ds.Tables[0].Rows[0]["unit"].ToString();
                string sEmpCode = ds.Tables[0].Rows[0]["empcode"].ToString();
                string mnimumstock = ds.Tables[0].Rows[0]["MinimumStock"].ToString();
                string displayonline = ds.Tables[0].Rows[0]["DisplayOnline"].ToString();
                string image = ds.Tables[0].Rows[0]["ImageUpload"].ToString();
                string uomname = ds.Tables[0].Rows[0]["UnitName"].ToString();
                string printname = ds.Tables[0].Rows[0]["Printitem"].ToString();
                string foodtype = ds.Tables[0].Rows[0]["FoodType"].ToString();
                //string itemid = ds.Tables[0].Rows[0][""].ToString();




                string sqr = "Insert into tblcategoryuserhistory(Itemid,CategoryID,Definition,Serial,Tax,Rate,CategoryUserID,GST,TaxVal,unit,empcode,MinimumStock, " +
                    " DisplayOnline,ImageUpload,UnitName,Printitem,FoodType) " +
                  " values('" + Itemid + "','" + catid + "','" + Definition + "','" + sSerial + "','" + taxvalue + "','" + rate + "','" + CategoryID + "', " +
                  " '" + taxvalue + "','" + gsttax + "','" + uom + "','" + sEmpCode + "','" + mnimumstock + "','" + displayonline + "','" + image + "','" + uomname + "', " +
                  " '" + printname + "','" + foodtype + "')";
                int iss = dbObj.InlineExecuteNonQuery(sqr);

            }


            return i;

        }

        public DataSet itemforreqest(int categoryid, string stable, string type)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            if (categoryid == 0)
            {
                if (type == "BLK")
                {

                    sqry = "select distinct b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID,b.serial,b.barcode  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "'  and ManualGrn='1'  order by category,Definition asc";
                }
                else
                {
                    sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID,b.serial,b.barcode  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "'   order by c.Available_qty  asc";
                }
            }
            else
            {

                if (type == "BLK")
                {

                    sqry = "select distinct b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID,b.serial,b.barcode  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and a.categoryid=" + categoryid + " order by category,Definition asc";
                }
                else
                {
                    sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID,b.serial,b.barcode  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and a.categoryid=" + categoryid + " order by c.Available_qty  asc";
                }
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet itemforreqest_New(int categoryid, string stable, string type, string Ptype)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            if (categoryid == 0)
            {
                if (Ptype == "All")
                {

                    //sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "'  and Request='1'  order by category,Definition,c.Available_qty asc";
                    sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID,m.delaydays from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tbltransRequestStockSettings t on t.categoryid=a.Categoryid inner join tblRequestStockSettingsMaster m on m.requeststockid=t.requeststocksettingsid inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and Request='1'  and  (convert(varchar(8), m.FromTime, 108)) <  (convert(varchar(8), getdate(), 108)) and (convert(varchar(8), m.totime, 108)) >  (convert(varchar(8), getdate(), 108)) order by category,Definition,c.Available_qty  asc";

                }
                else
                {
                    //sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and productiontype='" + Ptype + "' and Request='1'   order by category,Definition,c.Available_qty  asc";
                    sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID,m.delaydays from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tbltransRequestStockSettings t on t.categoryid=a.Categoryid inner join tblRequestStockSettingsMaster m on m.requeststockid=t.requeststocksettingsid inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and productiontype='" + Ptype + "' and Request='1'  and  (convert(varchar(8), m.FromTime, 108)) <  (convert(varchar(8), getdate(), 108)) and (convert(varchar(8), m.totime, 108)) >  (convert(varchar(8), getdate(), 108)) order by category,Definition,c.Available_qty  asc";

                }
            }
            else
            {

                if (Ptype == "All")
                {

                    //sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and a.categoryid=" + categoryid + " and Request='1' order by category,Definition,c.Available_qty asc";
                    sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID,m.delaydays from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tbltransRequestStockSettings t on t.categoryid=a.Categoryid inner join tblRequestStockSettingsMaster m on m.requeststockid=t.requeststocksettingsid inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and Request='1' and a.categoryid=" + categoryid + " and  (convert(varchar(8), m.FromTime, 108)) <  (convert(varchar(8), getdate(), 108)) and (convert(varchar(8), m.totime, 108)) >  (convert(varchar(8), getdate(), 108)) order by category,Definition,c.Available_qty  asc";
                }
                else
                {
                    //       sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and a.categoryid=" + categoryid + " and productiontype='" + Ptype + "' and Request='1' order by category,Definition,c.Available_qty  asc";
                    sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID,m.delaydays from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tbltransRequestStockSettings t on t.categoryid=a.Categoryid inner join tblRequestStockSettingsMaster m on m.requeststockid=t.requeststocksettingsid inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and productiontype='" + Ptype + "' and Request='1' and a.categoryid=" + categoryid + " and  (convert(varchar(8), m.FromTime, 108)) <  (convert(varchar(8), getdate(), 108)) and (convert(varchar(8), m.totime, 108)) >  (convert(varchar(8), getdate(), 108)) order by category,Definition,c.Available_qty  asc";
                }
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        //{
        //    DataSet ds = new DataSet();
        //    string sqry = string.Empty;

        //    if (categoryid == 0)
        //    {
        //        if (Ptype == "All")
        //        {

        //            //sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "'  and Request='1'  order by category,Definition,c.Available_qty asc";
        //            sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID,m.delaydays from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tbltransRequestStockSettings t on t.categoryid=a.Categoryid inner join tblRequestStockSettingsMaster m on m.requeststockid=t.requeststocksettingsid inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and Request='1'  and m.fromtime < getdate() and m.totime>getdate() order by category,Definition,c.Available_qty  asc";

        //        }
        //        else
        //        {
        //            //sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and productiontype='" + Ptype + "' and Request='1'   order by category,Definition,c.Available_qty  asc";
        //            sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID,m.delaydays from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tbltransRequestStockSettings t on t.categoryid=a.Categoryid inner join tblRequestStockSettingsMaster m on m.requeststockid=t.requeststocksettingsid inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and productiontype='" + Ptype + "' and Request='1'  and m.fromtime < getdate() and m.totime>getdate() order by category,Definition,c.Available_qty  asc";

        //        }
        //    }
        //    else
        //    {

        //        if (Ptype == "All")
        //        {

        //            //sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and a.categoryid=" + categoryid + " and Request='1' order by category,Definition,c.Available_qty asc";
        //            sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID,m.delaydays from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tbltransRequestStockSettings t on t.categoryid=a.Categoryid inner join tblRequestStockSettingsMaster m on m.requeststockid=t.requeststocksettingsid inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and Request='1' and a.categoryid=" + categoryid + " and m.fromtime < getdate() and m.totime>getdate() order by category,Definition,c.Available_qty  asc";
        //        }
        //        else
        //        {
        //            //       sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and a.categoryid=" + categoryid + " and productiontype='" + Ptype + "' and Request='1' order by category,Definition,c.Available_qty  asc";
        //            sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID,m.delaydays from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tbltransRequestStockSettings t on t.categoryid=a.Categoryid inner join tblRequestStockSettingsMaster m on m.requeststockid=t.requeststocksettingsid inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and productiontype='" + Ptype + "' and Request='1' and a.categoryid=" + categoryid + " and m.fromtime < getdate() and m.totime>getdate() order by category,Definition,c.Available_qty  asc";
        //        }
        //    }
        //    ds = dbObj.InlineExecuteDataSet(sqry);
        //    return ds;
        //}


        public DataSet itemforreqest_Semi(int categoryid, string stable, string type)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            {
                sqry = "select  b.SemiIngredientName as printitem,a.SemiCatID as categoryid,a.SemiCategory as category,b.SemiIngridID as categoryuserid,b.SemiIngredientName as definition,isnull(c.Available_qty,0) as Available_qty, UOM,u.UOMID  " +
                    " from tblSemiCategory a inner join tblSemiIngridents b on a.SemiCatID=b.SemiCatID left join tblSemistock_" + stable + " c on c.subcategoryid=b.SemiIngridID " +
                    " inner join tblUOM u on u.UOMID=b.Units " +
                    " where  a.IsActive='Yes' and  b.IsActive='Yes'   " +
                    " and a.SemiCatID=" + categoryid + " order by c.Available_qty  asc";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet itemforreqest_prod(int categoryid, string stable, string type)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            if (categoryid == 0)
            {
                if (type == "BLK")
                {

                    sqry = "select distinct b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.prod_qty,0) as Available_qty, UOM,u.UOMID  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblProductionQty_" + stable + " c on c.DescriptionId=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "'  and ManualGrn='1'  order by category,Definition asc";
                }
                else
                {
                    sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.prod_qty,0) as Available_qty, UOM,u.UOMID  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblProductionQty_" + stable + " c on c.DescriptionId=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "'   order by c.prod_qty  asc";
                }
            }
            else
            {

                if (type == "BLK")
                {

                    sqry = "select distinct b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.prod_qty,0) as Available_qty, UOM,u.UOMID  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblProductionQty_" + stable + " c on c.DescriptionId=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "' and a.categoryid=" + categoryid + " order by category,Definition asc";
                }
                else
                {
                    sqry = "select  b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.prod_qty,0) as Available_qty, UOM,u.UOMID  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblProductionQty_" + stable + " c on c.DescriptionId=b.categoryuserid inner join tblUOM u on u.UOMID=b.unit where  a.IsActive='Yes' and  b.IsActive='Yes'   and a.categoryid=" + categoryid + " order by c.prod_qty  asc";
                }
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet getprimaryuom(string semiitemid, string values)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (values == "1")
            {
                sqry = "select b.* from tblTransSemiIngridents  as a inner join tblprimaryuom as b on b.PrimaryUomid=a.PrimaryId where SemiItemId='" + semiitemid + "'";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                sqry = "select b.* from tblprimaryuom as b ";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            return ds;
        }

        public DataSet itemforreqestStore(int categoryid, string stable, string type)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (categoryid == 0)
            {
                sqry = "select  a.IngCatID as categoryid,a.IngreCategory as category,b.IngridID as categoryuserid,b.IngredientName as definition,'0' as Available_qty, UOM,u.UOMID  " +
                    " from tblingridentscategory a inner join tblingridents b on a.IngCatID=b.IngCatID  " +
                    "  inner join tblUOM u on u.UOMID=b.units where    b.IsActive='Yes' " +
                    "  and b.Isallow='Y' order by b.IngredientName  asc";
            }
            else
            {
                sqry = "select  a.IngCatID as categoryid,a.IngreCategory as category,b.IngridID as categoryuserid,b.IngredientName as definition,'0' as Available_qty, UOM,u.UOMID  " +
                    " from tblingridentscategory a inner join tblingridents b on a.IngCatID=b.IngCatID  " +
                    "  inner join tblUOM u on u.UOMID=b.units where    b.IsActive='Yes' " +
                    " and a.IngCatID=" + categoryid + " and b.Isallow='Y' order by b.IngredientName  asc";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet itemforreqestNew(string categoryid, string stable)
        {
            DataSet ds = new DataSet();
            if (categoryid == "All")
            {
                string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.serial,isnull(ps.Prod_Qty,0) as Prod_Qty,b.qtytype  " +
                    " from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblProductionQty_" + stable + " ps on ps.DescriptionId=b.CategoryUserID " +
                    " inner join tblUOM u on u.UOMID=b.unit  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.poduction='1'  order by category asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.serial,isnull(ps.Prod_Qty,0) as Prod_Qty,b.qtytype from tblcategory a " +
                    " inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblProductionQty_" + stable + " ps on ps.DescriptionId=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit  " +
                    " where  a.IsActive='Yes' and  b.IsActive='Yes' and a.categoryid=" + categoryid + " order by category asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            return ds;
        }

        public DataSet itemforreqestNew_OLD(string categoryid, string stable)
        {
            DataSet ds = new DataSet();
            if (categoryid == "All")
            {
                string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.serial  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.poduction='1'  order by category asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.serial from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.categoryid=" + categoryid + " order by category asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            return ds;
        }

        public DataSet itemforreqestNew_Semi(string categoryid, string stable)
        {
            DataSet ds = new DataSet();
            if (categoryid == "All")
            {
                string sqry = "select distinct a.SemiCatID as categoryid,a.SemiCategory as category,b.SemiIngridID as categoryuserid,b.SemiIngredientName as definition,UOM,u.UOMID  from tblSemiCategory a " +
                    " inner join tblSemiIngridents b on a.SemiCatID=b.SemiCatID inner join tblUOM u on u.UOMID=b.units  where  a.IsActive='Yes' " +
                    " and  b.IsActive='Yes'   order by category asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                string sqry = "select distinct a.SemiCatID as categoryid,a.SemiCategory as category,b.SemiIngridID as categoryuserid,b.SemiIngredientName as definition,UOM,u.UOMID from tblSemiCategory a " +
                    " inner join tblSemiIngridents b on a.SemiCatID=b.SemiCatID inner join tblUOM u on u.UOMID=b.units  where  a.IsActive='Yes' " +
                    " and  b.IsActive='Yes' and a.SemiCatID=" + categoryid + " order by category asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            return ds;
        }



        #endregion


        #region Home Page
        public DataSet OrderGridhome(string sBranch)
        {
            DataSet ds = new DataSet();
            //string sqry = " select b.CustomerName,b.MobileNo,OrderNo,a.BillDate,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0  group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.BillDate having NetAmount-SUM(Advance) >0 order by a.BillDate desc ";
            //  string sqry = " select b.CustomerName,b.MobileNo,OrderNo,a.BillDate,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.cancelstatus='No'  group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.BillDate having NetAmount-SUM(Advance) >0 and a.deliverydate =convert(date,getdate()) order by a.BillDate desc ";
            //string sqry = "select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.cancelstatus='No' group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo having (NetAmount)-SUM(Advance) >0 order by a.OrderNo desc";
            string sqry = "  select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,Total,NetAmount,SUM(Advance)  as PaidAmount, NetAmount-SUM(Advance) as Balance from tblOrder_" + sBranch + " a,tblCustomer b   where a.CustomerID=b.CustomerID and a.OrderNo>0 and a.iscancel=0 and convert(date,orderdate)=convert(date,getdate() )  group by OrderNo,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo   order by a.OrderNo desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet OrderGridTomm(string sBranch)
        {
            DataSet ds = new DataSet();
            //string sqry = "  select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance,a.userID from tblsales_"+sBranch+" a,tblCustomer b where a.CustomerID=b.CustomerID and a.OrderNo>0 and convert(date,DeliveryDate)=CONVERT(date,getdate()+1)  group by OrderNo,DeliveryDate,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.userID having NetAmount-SUM(Advance) >0  ";
            //string sqry = "  select b.CustomerName,b.MobileNo,OrderNo,DeliveryDate,DeliveryDate,Total,NetAmount,SUM(Advance) as PaidAmount,NetAmount-SUM(Advance) as Balance,a.userID from tblsales_" + sBranch + " a,tblCustomer b where a.CustomerID=b.CustomerID and a.cancelstatus='No' and a.OrderNo>0 and convert(date,DeliveryDate)=CONVERT(date,getdate()+1)  group by OrderNo,DeliveryDate,DeliveryDate,Total,NetAmount,b.CustomerName,b.MobileNo,a.userID having NetAmount-SUM(Advance) >0  ";
            string sqry = " select  COUNT(*) as TotalCount,isnull(SUM(Total),0) as Total from tblsales_" + sBranch + " where convert(date,BillDate)=CONVERT(date,getdate()) and cancelstatus='No'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet getbranchforhomepage()
        {
            DataSet ds = new DataSet();
            // string sqry = "select * from tbllogin l inner join tblBranch b on b.BranchCode=l.BranchCode";
            string sqry = "select brancharea + ' - ' + GSTIN as brancharea, * from  tblBranch where BranchType=0";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion


        #region SALES TYPE REPORTS
        public DataSet salestypereports(string sBranch, DateTime sFmdate, DateTime sToDate, string paymode, string salestype)
        {
            string store = "";

            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            if (paymode == "All" && salestype == "All")
            {

                string sqry = "select ts.disc,cus.customername+'-'+cus.mobileno as name,s.salesorder as No,sp.paymode,st.paymenttype,s.billno,s.billdate,c.Category,cu.definition,ts.unitprice,ts.quantity,(ts.UnitPrice * ts.Quantity) as amount,ts.tax, " +
                    " isnull(((((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100),0)  as GST,  " +
  " isnull((((((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100)  " +
   " +  ((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100))),0) as TotalValue, s.Saletypemargin,  " +
      //" (((ts.UnitPrice * ts.Quantity) * cu.gst) / 100)  as GST, " +
      //" ((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) as TotalValue, s.Saletypemargin,
      " isnull(((((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) * s.Saletypemargin) /100),0) as commission,s.gstmargin, " +
      " isnull(((((((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) * s.Saletypemargin) /100) * s.GstMargin) /100),0)  as commisionfortax,s.Gateway " +
       " from tblsales_" + sBranch + " as s inner join tbltranssales_" + sBranch + " as ts on ts.salesid=s.billno inner join tblsalestype as st on st.salestypeid=s.salestype " +
     " inner join tblcategoryuser as cu on cu.categoryuserid=ts.subcategoryid inner join tblcategory as c on c.categoryid=ts.CategoryID  " +
     " inner  join tblSalesPaymode as sp on sp.value=s.ipaymode inner join tblcustomer as cus on cus.customerid=s.customerid where  " +
     " OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
     " and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' and s.salesid=ts.salesuniqueid order by s.billno,s.billdate asc";

                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else if (paymode != "All" && salestype != "All")
            {
                string sqry = "select ts.disc,cus.customername+'-'+cus.mobileno as name,s.salesorder as No,sp.paymode,st.paymenttype,s.billno,s.billdate,c.Category,cu.definition,ts.unitprice,ts.quantity,(ts.UnitPrice * ts.Quantity) as amount,ts.tax, " +
                                     " isnull(((((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100),0)  as GST,  " +
  " isnull((((((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100)  " +
   " +  ((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100))),0) as TotalValue, s.Saletypemargin,  " +
 //" (((ts.UnitPrice * ts.Quantity) * cu.gst) / 100)  as GST, " +
 //" ((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) as TotalValue, s.Saletypemargin, " +
 " isnull(((((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) * s.Saletypemargin) /100),0) as commission,s.gstmargin, " +
 " isnull(((((((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) * s.Saletypemargin) /100) * s.GstMargin) /100),0)  as commisionfortax,s.Gateway " +
  " from tblsales_" + sBranch + " as s inner join tbltranssales_" + sBranch + " as ts on ts.salesid=s.billno inner join tblsalestype as st on st.salestypeid=s.salestype " +
" inner join tblcategoryuser as cu on cu.categoryuserid=ts.subcategoryid inner join tblcategory as c on c.categoryid=ts.CategoryID  " +
" inner  join tblSalesPaymode as sp on sp.value=s.ipaymode inner join tblcustomer as cus on cus.customerid=s.customerid where  " +
" OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
" and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' and s.salesid=ts.salesuniqueid and s.salestype='" + salestype + "' and s.ipaymode='" + paymode + "' order by s.billno,s.billdate asc";

                ds = dbObj.InlineExecuteDataSet(sqry);
            }

            else if (paymode != "All" && salestype == "All")
            {
                string sqry = "select ts.disc,cus.customername+'-'+cus.mobileno as name,s.salesorder as No,sp.paymode,st.paymenttype,s.billno,s.billdate,c.Category,cu.definition,ts.unitprice,ts.quantity,(ts.UnitPrice * ts.Quantity) as amount,ts.tax, " +
                                     " isnull(((((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100),0)  as GST,  " +
  " isnull((((((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100)  " +
   " +  ((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100))),0) as TotalValue, s.Saletypemargin,  " +
 //" (((ts.UnitPrice * ts.Quantity) * cu.gst) / 100)  as GST, " +
 //" ((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) as TotalValue, s.Saletypemargin, " +
 " isnull(((((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) * s.Saletypemargin) /100),0) as commission,s.gstmargin, " +
 " isnull(((((((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) * s.Saletypemargin) /100) * s.GstMargin) /100),0)  as commisionfortax,s.Gateway " +
  " from tblsales_" + sBranch + " as s inner join tbltranssales_" + sBranch + " as ts on ts.salesid=s.billno inner join tblsalestype as st on st.salestypeid=s.salestype " +
" inner join tblcategoryuser as cu on cu.categoryuserid=ts.subcategoryid inner join tblcategory as c on c.categoryid=ts.CategoryID  " +
" inner  join tblSalesPaymode as sp on sp.value=s.ipaymode inner join tblcustomer as cus on cus.customerid=s.customerid where  " +
" OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
" and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' and s.salesid=ts.salesuniqueid and  s.ipaymode='" + paymode + "' order by s.billno,s.billdate asc";

                ds = dbObj.InlineExecuteDataSet(sqry);
            }

            else if (paymode == "All" && salestype != "All")
            {
                string sqry = "select ts.disc,cus.customername+'-'+cus.mobileno as name,s.salesorder as No,sp.paymode,st.paymenttype,s.billno,s.billdate,c.Category,cu.definition,ts.unitprice,ts.quantity,(ts.UnitPrice * ts.Quantity) as amount,ts.tax, " +
                 //" (((ts.UnitPrice * ts.Quantity) * cu.gst) / 100)  as GST, " +
                 //" ((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) as TotalValue, s.Saletypemargin, " +
                 " isnull(((((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100),0)  as GST,  " +
  " isnull((((((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100)  " +
   " +  ((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100))),0) as TotalValue, s.Saletypemargin,  " +
 " isnull(((((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) * s.Saletypemargin) /100),0) as commission,s.gstmargin, " +
 " isnull(((((((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) * s.Saletypemargin) /100) * s.GstMargin) /100),0)  as commisionfortax,s.Gateway " +
  " from tblsales_" + sBranch + " as s inner join tbltranssales_" + sBranch + " as ts on ts.salesid=s.billno inner join tblsalestype as st on st.salestypeid=s.salestype " +
" inner join tblcategoryuser as cu on cu.categoryuserid=ts.subcategoryid inner join tblcategory as c on c.categoryid=ts.CategoryID  " +
" inner  join tblSalesPaymode as sp on sp.value=s.ipaymode inner join tblcustomer as cus on cus.customerid=s.customerid where  " +
" OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
" and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' and s.salesid=ts.salesuniqueid and s.salestype='" + salestype + "'  order by s.billno,s.billdate asc";

                ds = dbObj.InlineExecuteDataSet(sqry);

            }

            //string sqtyy = " select 'Narayana Puram' as Branch,'Advance' as type, cu.CustomerName,s.BillNo,s.BillDate,s.Tax,s.advance as Netamount,s.Total,s.orderno,s.advance,case s.iPayMode when 1 then 'cash' when 2 then 'Customer Credit' when 3 then 'Compliment' when 4 then 'Card' end as SalesType from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where OrderNo<>0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' order by s.BillDate desc ";
            //ds1 = dbObj.InlineExecuteDataSet(sqtyy);
            //dss.Merge(ds1);
            return ds;
        }
        #endregion

        #region COSTING DETAILS REPORT
        public DataSet getitemdeails()
        {
            DataSet ds = new DataSet();
            string sqry = " select cu.Rate,cu.GST,cu.Rate +((cu.Rate * GST) / 100) as PriceAmt,cu.CategoryUserID,c.category,cu.Definition,u.UOM,s.TotalQty,cu.Definition +'-'+ cast(s.TotalQty as nvarchar)  +'-'+ u.UOM  as Cost  from tblCategory c inner join tblCategoryUser cu on c.categoryid=cu.CategoryUserID    inner join tblSemiSetting s on s.Itemid=cu.CategoryUserID inner join tblUOM u on u.UOMID=cu.unit    order by category,Definition asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getitemdeailsValues(string Category, string Item)
        {
            DataSet ds = new DataSet();

            if (Category == "All" && Item == "All")
            {
                string sqry = " select cu.Rate,cu.GST,cu.Rate +((cu.Rate * GST) / 100) as PriceAmt,cu.CategoryUserID,c.category,cu.Definition,u.UOM,s.TotalQty,cu.Definition +'-'+ cast(s.TotalQty as nvarchar)  +'-'+ u.UOM  as Cost  from tblCategory c inner join tblCategoryUser cu on c.categoryid=cu.CategoryUserID    inner join tblSemiSetting s on s.Itemid=cu.CategoryUserID inner join tblUOM u on u.UOMID=cu.unit    order by category,Definition asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else if (Category != "All" && Item == "All")
            {
                string sqry = " select cu.Rate,cu.GST,cu.Rate +((cu.Rate * GST) / 100) as PriceAmt,cu.CategoryUserID,c.category,cu.Definition,u.UOM,s.TotalQty,cu.Definition +'-'+ cast(s.TotalQty as nvarchar)  +'-'+ u.UOM  as Cost  from tblCategory c inner join tblCategoryUser cu on c.categoryid=cu.CategoryUserID    inner join tblSemiSetting s on s.Itemid=cu.CategoryUserID inner join tblUOM u on u.UOMID=cu.unit where c.categoryid=" + Category + "    order by category,Definition asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else if (Category != "All" && Item != "All")
            {
                string sqry = " select cu.Rate,cu.GST,cu.Rate +((cu.Rate * GST) / 100) as PriceAmt,cu.CategoryUserID,c.category,cu.Definition,u.UOM,s.TotalQty,cu.Definition +'-'+ cast(s.TotalQty as nvarchar)  +'-'+ u.UOM  as Cost  from tblCategory c inner join tblCategoryUser cu on c.categoryid=cu.CategoryUserID    inner join tblSemiSetting s on s.Itemid=cu.CategoryUserID inner join tblUOM u on u.UOMID=cu.unit where c.categoryid=" + Category + " and cu.CategoryUserID=" + Item + "   order by category,Definition asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else if (Category == "All" && Item != "All")
            {
                string sqry = " select cu.Rate,cu.GST,cu.Rate +((cu.Rate * GST) / 100) as PriceAmt,cu.CategoryUserID,c.category,cu.Definition,u.UOM,s.TotalQty,cu.Definition +'-'+ cast(s.TotalQty as nvarchar)  +'-'+ u.UOM  as Cost  from tblCategory c inner join tblCategoryUser cu on c.categoryid=cu.CategoryUserID    inner join tblSemiSetting s on s.Itemid=cu.CategoryUserID inner join tblUOM u on u.UOMID=cu.unit where cu.CategoryUserID=" + Item + "   order by category,Definition asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }




            return ds;
        }
        public DataSet getsemiitemdeails(int SettingId, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select s.TotalQty,i.IngredientName,ts.RecQty,u.UOM,isnull(r.Rate,0) as Rate  from tblSemiSetting s inner join tbltranssemisetting ts on s.SettingId=ts.Settingid inner join tblIngridents i on i.IngridID=ts.Semiitemid inner join tblUOM u on u.UOMID=i.Units  left join tblRawMatlStock_" + stable + " r on r.IngredientID=i.IngridID where s.SettingId=" + SettingId + " order  by IngredientName asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet categorymasterN()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategory   order by category desc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region Store Rights
        public DataSet getpo(string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblkitchenPurchaseorder_" + scode + " where Status<>'Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public int insertPurchaseRights(string Table, int ledgerid, int CreditorID1, string EntryDate, decimal Subtotal, decimal Tax, decimal Total, int Supplier, int Paymode, int bank, string chequeno, string cgst, string sgst, string igst, int EntryUserID, int pono, string Province, DateTime RightsDate)
        {
            int save = 0;

            string sQry = "update tblkitchenPurchaseorder_" + Table + " set Subtotal=" + Subtotal + ",Tax=" + Tax + ",Total=" + Total + ",Supplier=" + Supplier + ",Paymode=" + Paymode + ",Bank=" + bank + ",ChequeNo='" + chequeno + "',CGST='" + cgst + "',SGST='" + sgst + "',IGST='" + igst + "',EntryUserID=" + EntryUserID + ",Province='" + Province + "',RightsDate='" + Convert.ToDateTime(RightsDate).ToString("yyyy/MM/dd") + "' where OrderNo=" + pono + "";
            save = dbObj.InlineExecuteNonQuery(sQry);

            return save;
        }
        public int insertTransPurchaserights(string Table, int PurchaseID, int IngredientID, decimal Qty, decimal Rate, decimal Amount, decimal Tax, int userid, string Units, decimal billno, int supplier, string pay, string ExpiryDate, decimal Aqty, int TransID, string Punitsid, double Pvalue, double PUqty)
        {
            int save = 0;

            DateTime ExpiryDate1;
            if (ExpiryDate == "" || ExpiryDate == "0")
            {
                ExpiryDate1 = DateTime.ParseExact("01/01/1900", "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }
            else
            {
                ExpiryDate1 = DateTime.ParseExact(ExpiryDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }

            DataSet ds = new DataSet();
            string sqry = "select * from tbltranskitchenPurchaseorder_" + Table + " where TransID=" + TransID + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                string sQry1 = "Update tbltranskitchenPurchaseorder_" + Table + " set Punitsid='" + Punitsid + "',Pvalue='" + Pvalue + "',PUqty='" + PUqty + "',IngredientID=" + IngredientID + ",Qty=" + Qty + ",RQty=" + Aqty + ",Rate=" + Rate + ",Amount=" + Amount + ",Tax=" + Tax + ",Units='" + Units + "',BillNo=" + billno + ",SupplierID=" + supplier + ",Paymode='" + pay + "',ExpiryDate='" + ExpiryDate1.ToString("yyyy-MM-dd") + "' where TransID=" + TransID + " ";
                save = dbObj.InlineExecuteNonQuery(sQry1);
            }
            else
            {
                string sQry = "insert into tbltranskitchenPurchaseorder_" + Table + "(PurchaseorderID,IngredientID,Qty,Rate,Amount,Tax,Units,BillNo,SupplierID,Paymode,ExpiryDate,RQty,Punitsid,Pvalue,PUqty) values(" + PurchaseID + "," + IngredientID + "," + Qty + "," + Rate + "," + Amount + "," + Tax + ",'" + Units + "'," + billno + "," + supplier + ",'" + pay + "','" + ExpiryDate1.ToString("yyyy-MM-dd") + "','0','" + Punitsid + "','" + Pvalue + "','" + PUqty + "')";
                save = dbObj.InlineExecuteNonQuery(sQry);
            }

            return save;
        }
        public int upRights(string Table, int pono)
        {
            int save = 0;

            string sQry = "update tblkitchenPurchaseorder_" + Table + " set Status='YES' where OrderNo=" + pono + "";
            save = dbObj.InlineExecuteNonQuery(sQry);

            return save;
        }

        public DataSet GetPoprint(string Table, int OrderNo)
        {
            DataSet ds = new DataSet();
            string sQuery = "select * from tblkitchenPurchaseorder_" + Table + "  p inner join tblLedger l on l.LedgerID=p.supplier inner join tblsalespaymode  m on m.value=p.Paymode where p.OrderNo=" + OrderNo + "";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }



        public DataSet GettransPoprint(string Table, int OrderNo)
        {
            DataSet ds = new DataSet();
            string sQuery = "select * from tbltranskitchenPurchaseorder_" + Table + " tp inner join tblIngridents i on i.IngridID=tp.IngredientID  inner join tblUOM u on u.UOMID=tp.Units  where tp.PurchaseorderID=" + OrderNo + "";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }



        public DataSet GetPurchaseprint(string Table, int purchaseID)
        {
            DataSet ds = new DataSet();
            string sQuery = "select * from tblkitchenPurchase_" + Table + "  p inner join tblLedger l on l.LedgerID=p.supplier inner join tblsalespaymode sp on p.Paymode=sp.value where p.purchaseID=" + purchaseID + "";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }

        public DataSet GettransPpurchaseprint(string Table, int purchaseID)
        {
            DataSet ds = new DataSet();
            string sQuery = "select * from tbltranskitchenPurchase_" + Table + " tp inner join tblIngridents i on i.IngridID=tp.IngredientID  inner join tblUOM u on u.UOMID=tp.Units  where tp.purchaseID=" + purchaseID + "";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }

        public DataSet GettransPpurchaseid(string Table, int OrderNo)
        {
            DataSet ds = new DataSet();
            string qy = "select * from tblkitchenPurchaseorder_" + Table + " where OrderNo=" + OrderNo + "";
            ds = dbObj.InlineExecuteDataSet(qy);
            return ds;

        }


        public DataSet PurchaseOrderList(string potable)
        {
            DataSet ds = new DataSet();
            string qr = "select * from " + potable + " where Status = 'NO'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet PurchaseOrderList1(string potable)
        {
            DataSet ds = new DataSet();
            string qr = "select * from " + potable + " where Status = 'Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet PurchaseOrderList2(string potable)
        {
            DataSet ds = new DataSet();
            string qr = "select distinct p.* from tblkitchenPurchaseorder_" + potable + " p inner join tbltranskitchenPurchaseorder_" + potable + " tp on p.purchaseorderID=tp.PurchaseorderID where ((tp.Qty-tp.PQty)) > 0";

            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        #endregion

        #region upload Recipe

        public DataSet getitemforrecipe(string Definition)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCategoryUser where Definition='" + Definition + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public int uploadrecipelist(DataSet DS)
        {
            int iSuccess = 0;

            int Itemid = 0;
            DataSet ds1 = new DataSet();
            string sqry1 = "select CategoryUserID from tblCategoryUser where Definition='" + DS.Tables[0].Rows[0]["Item"].ToString() + "' ";
            ds1 = dbObj.InlineExecuteDataSet(sqry1);
            Itemid = Convert.ToInt32(ds1.Tables[0].Rows[0]["CategoryUserID"].ToString());

            int SettingId = 0;
            for (int i = 0; i < DS.Tables[0].Rows.Count; i++)
            {


                if (i == 0)
                {
                    string sQry = "insert into tblsemisetting( Itemid,TotalQty,IsActive,Prodhours) values ('" + Itemid + "','" + DS.Tables[0].Rows[i]["RecipeQty"].ToString() + "','Yes','" + DS.Tables[0].Rows[i]["ProductionHours"].ToString() + "')";
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry);

                    DataSet ds2 = new DataSet();
                    string sqry2 = "select isnull(max(SettingId),1) as SettingId from tblsemisetting ";
                    ds2 = dbObj.InlineExecuteDataSet(sqry2);
                    SettingId = Convert.ToInt32(ds2.Tables[0].Rows[i]["SettingId"].ToString());

                }


                int IngridID = 0;
                DataSet ds3 = new DataSet();
                string sqry3 = "select IngridID from tblIngridents where IngredientName='" + DS.Tables[0].Rows[i]["RawItems"].ToString() + "' ";
                ds3 = dbObj.InlineExecuteDataSet(sqry3);
                IngridID = Convert.ToInt32(ds3.Tables[0].Rows[0]["IngridID"].ToString());

                string sQry4 = "insert into tbltranssemisetting( Settingid,Semiitemid,RecQty) values ('" + SettingId + "','" + IngridID + "','" + DS.Tables[0].Rows[i]["Qty"].ToString() + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry4);

            }
            return iSuccess;

        }


        public DataSet uploadrecipecheckitems(string Definition)
        {

            DataSet ds1 = new DataSet();
            string sqry1 = "select * from tblCategoryUser where Definition='" + Definition + "' ";
            ds1 = dbObj.InlineExecuteDataSet(sqry1);
            return ds1;

        }
        public DataSet uploadrecipecheckingre(string IngredientName)
        {

            DataSet ds3 = new DataSet();
            string sqry3 = "select * from tblIngridents where IngredientName='" + IngredientName + "' ";
            ds3 = dbObj.InlineExecuteDataSet(sqry3);
            return ds3;

        }
        public int uploadrecipelist1(DataSet DS)
        {
            int iSuccess = 0;

            int insertsemi = 0;
            int SettingId = 0;

            int totalcont = DS.Tables[0].Rows.Count;
            for (int i = 0; i < DS.Tables[0].Rows.Count; i++)
            {
                if (i + 1 == totalcont)
                {
                    #region
                    int IngridID = 0;
                    DataSet ds3 = new DataSet();
                    string sqry3 = "select IngridID from tblIngridents where IngredientName='" + DS.Tables[0].Rows[i]["RawItems"].ToString() + "' ";
                    ds3 = dbObj.InlineExecuteDataSet(sqry3);
                    IngridID = Convert.ToInt32(ds3.Tables[0].Rows[0]["IngridID"].ToString());

                    string sQry4 = "insert into tbltranssemisetting( Settingid,Semiitemid,RecQty) values ('" + SettingId + "','" + IngridID + "','" + DS.Tables[0].Rows[i]["Qty"].ToString() + "')";
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry4);

                    insertsemi = 0;
                    #endregion
                }
                else
                {
                    if (DS.Tables[0].Rows[i]["Item"].ToString() == DS.Tables[0].Rows[i + 1]["Item"].ToString())
                    {
                        #region

                        if (insertsemi == 0)
                        {

                            DataSet ds1 = new DataSet();
                            string sqry1 = "select CategoryUserID from tblCategoryUser where Definition='" + DS.Tables[0].Rows[i]["Item"].ToString() + "' ";
                            ds1 = dbObj.InlineExecuteDataSet(sqry1);
                            int Itemid = Convert.ToInt32(ds1.Tables[0].Rows[0]["CategoryUserID"].ToString());

                            DataSet ds4 = new DataSet();
                            string sqry4 = "select * from tblsemisetting where ItemId='" + Itemid + "' ";
                            ds4 = dbObj.InlineExecuteDataSet(sqry4);
                            if (ds4.Tables[0].Rows.Count > 0)
                            {
                                SettingId = 0;
                            }
                            else
                            {

                                string sQry = "insert into tblsemisetting( Itemid,TotalQty,IsActive,Prodhours) values ('" + Itemid + "','" + DS.Tables[0].Rows[i]["RecipeQty"].ToString() + "','Yes','" + DS.Tables[0].Rows[i]["ProductionHours"].ToString() + "')";
                                iSuccess = dbObj.InlineExecuteNonQuery(sQry);

                                DataSet ds2 = new DataSet();
                                string sqry2 = "select isnull(max(SettingId),1) as SettingId from tblsemisetting ";
                                ds2 = dbObj.InlineExecuteDataSet(sqry2);
                                SettingId = Convert.ToInt32(ds2.Tables[0].Rows[0]["SettingId"].ToString());

                                insertsemi = 1;
                            }
                        }

                        int IngridID = 0;
                        DataSet ds3 = new DataSet();
                        string sqry3 = "select IngridID from tblIngridents where IngredientName='" + DS.Tables[0].Rows[i]["RawItems"].ToString() + "' ";
                        ds3 = dbObj.InlineExecuteDataSet(sqry3);
                        IngridID = Convert.ToInt32(ds3.Tables[0].Rows[0]["IngridID"].ToString());

                        string sQry4 = "insert into tbltranssemisetting( Settingid,Semiitemid,RecQty) values ('" + SettingId + "','" + IngridID + "','" + DS.Tables[0].Rows[i]["Qty"].ToString() + "')";
                        iSuccess = dbObj.InlineExecuteNonQuery(sQry4);

                        #endregion
                    }
                    else
                    {
                        #region

                        int IngridID = 0;
                        DataSet ds3 = new DataSet();
                        string sqry3 = "select IngridID from tblIngridents where IngredientName='" + DS.Tables[0].Rows[i]["RawItems"].ToString() + "' ";
                        ds3 = dbObj.InlineExecuteDataSet(sqry3);
                        IngridID = Convert.ToInt32(ds3.Tables[0].Rows[0]["IngridID"].ToString());

                        string sQry4 = "insert into tbltranssemisetting( Settingid,Semiitemid,RecQty) values ('" + SettingId + "','" + IngridID + "','" + DS.Tables[0].Rows[i]["Qty"].ToString() + "')";
                        iSuccess = dbObj.InlineExecuteNonQuery(sQry4);

                        insertsemi = 0;
                        #endregion
                    }
                }
            }
            return iSuccess;

        }

        public DataSet item1()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbltestitem1 order by Item1 asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public int uploadrecipelist1(string Item1, string Item2)
        {
            int iSuccess = 0;
            string sQry = "update testitem set Items='" + Item2 + "' where Items='" + Item1 + "'";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }


        public int uploadrecipelist2(DataSet DS)
        {
            int iSuccess = 0;
            int SettingId = 0;
            int Itemid = 0;

            int totalcont = DS.Tables[0].Rows.Count;
            for (int i = 0; i < DS.Tables[0].Rows.Count; i++)
            {

                string Item1 = DS.Tables[0].Rows[i]["Item"].ToString();
                string ProductionHours1 = DS.Tables[0].Rows[i]["ProductionHours"].ToString();
                string RecipeQty1 = DS.Tables[0].Rows[i]["RecipeQty"].ToString();
                string RawItems1 = DS.Tables[0].Rows[i]["RawItems"].ToString();
                string Qty1 = DS.Tables[0].Rows[i]["Qty"].ToString();

                if (Item1 != "" || ProductionHours1 != "" || RecipeQty1 != "" || RawItems1 != "" || Qty1 != "")
                {
                    if (Item1 != "")
                    {
                        DataSet ds1 = new DataSet();
                        string sqry1 = "select CategoryUserID from tblCategoryUser where Definition='" + Item1 + "' ";
                        ds1 = dbObj.InlineExecuteDataSet(sqry1);
                        Itemid = Convert.ToInt32(ds1.Tables[0].Rows[0]["CategoryUserID"].ToString());
                        if (ds1.Tables[0].Rows.Count > 0)
                        {
                            DataSet ds4 = new DataSet();
                            string sqry4 = "select * from tblsemisetting where ItemId='" + Itemid + "' ";
                            ds4 = dbObj.InlineExecuteDataSet(sqry4);
                            if (ds4.Tables[0].Rows.Count > 0)
                            {
                                SettingId = 0;
                            }
                            else
                            {
                                int IngridID = 0;
                                DataSet ds3 = new DataSet();
                                string sqry3 = "select IngridID from tblIngridents where IngredientName='" + DS.Tables[0].Rows[i]["RawItems"].ToString() + "' ";
                                ds3 = dbObj.InlineExecuteDataSet(sqry3);
                                IngridID = Convert.ToInt32(ds3.Tables[0].Rows[0]["IngridID"].ToString());
                                if (ds3.Tables[0].Rows.Count > 0)
                                {
                                    string sQry = "insert into tblsemisetting( Itemid,TotalQty,IsActive,Prodhours) values ('" + Itemid + "','" + DS.Tables[0].Rows[i]["RecipeQty"].ToString() + "','Yes','" + DS.Tables[0].Rows[i]["ProductionHours"].ToString() + "')";
                                    iSuccess = dbObj.InlineExecuteNonQuery(sQry);

                                    DataSet ds2 = new DataSet();
                                    string sqry2 = "select isnull(max(SettingId),1) as SettingId from tblsemisetting ";
                                    ds2 = dbObj.InlineExecuteDataSet(sqry2);
                                    SettingId = Convert.ToInt32(ds2.Tables[0].Rows[0]["SettingId"].ToString());



                                    string sQry4 = "insert into tbltranssemisetting( Settingid,Semiitemid,RecQty) values ('" + SettingId + "','" + IngridID + "','" + DS.Tables[0].Rows[i]["Qty"].ToString() + "')";
                                    iSuccess = dbObj.InlineExecuteNonQuery(sQry4);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (SettingId != 0)
                        {
                            int IngridID = 0;
                            DataSet ds3 = new DataSet();
                            string sqry3 = "select IngridID from tblIngridents where IngredientName='" + DS.Tables[0].Rows[i]["RawItems"].ToString() + "' ";
                            ds3 = dbObj.InlineExecuteDataSet(sqry3);
                            IngridID = Convert.ToInt32(ds3.Tables[0].Rows[0]["IngridID"].ToString());
                            if (ds3.Tables[0].Rows.Count > 0)
                            {
                                string sQry4 = "insert into tbltranssemisetting( Settingid,Semiitemid,RecQty) values ('" + SettingId + "','" + IngridID + "','" + DS.Tables[0].Rows[i]["Qty"].ToString() + "')";
                                iSuccess = dbObj.InlineExecuteNonQuery(sQry4);
                            }
                        }
                    }
                }
                #region

                //////    if (i + 1 == totalcont)
                //////    {
                //////        #region
                //////        int IngridID = 0;
                //////        DataSet ds3 = new DataSet();
                //////        string sqry3 = "select IngridID from tblIngridents where IngredientName='" + DS.Tables[0].Rows[i]["RawItems"].ToString() + "' ";
                //////        ds3 = dbObj.InlineExecuteDataSet(sqry3);
                //////        IngridID = Convert.ToInt32(ds3.Tables[0].Rows[0]["IngridID"].ToString());



                //////        insertsemi = 0;
                //////        #endregion
                //////    }
                //////    else
                //////    {
                //////        if (DS.Tables[0].Rows[i]["Item"].ToString() == DS.Tables[0].Rows[i + 1]["Item"].ToString())
                //////        {
                //////            #region

                //////            if (insertsemi == 0)
                //////            {

                //////                DataSet ds1 = new DataSet();
                //////                string sqry1 = "select CategoryUserID from tblCategoryUser where Definition='" + DS.Tables[0].Rows[i]["Item"].ToString() + "' ";
                //////                ds1 = dbObj.InlineExecuteDataSet(sqry1);
                //////                int Itemid = Convert.ToInt32(ds1.Tables[0].Rows[0]["CategoryUserID"].ToString());

                //////                DataSet ds4 = new DataSet();
                //////                string sqry4 = "select * from tblsemisetting where ItemId='" + Itemid + "' ";
                //////                ds4 = dbObj.InlineExecuteDataSet(sqry4);
                //////                if (ds4.Tables[0].Rows.Count > 0)
                //////                {
                //////                    SettingId = 0;
                //////                }
                //////                else
                //////                {


                //////                }
                //////            }

                //////            int IngridID = 0;
                //////            DataSet ds3 = new DataSet();
                //////            string sqry3 = "select IngridID from tblIngridents where IngredientName='" + DS.Tables[0].Rows[i]["RawItems"].ToString() + "' ";
                //////            ds3 = dbObj.InlineExecuteDataSet(sqry3);
                //////            IngridID = Convert.ToInt32(ds3.Tables[0].Rows[0]["IngridID"].ToString());

                //////            string sQry4 = "insert into tbltranssemisetting( Settingid,Semiitemid,RecQty) values ('" + SettingId + "','" + IngridID + "','" + DS.Tables[0].Rows[i]["Qty"].ToString() + "')";
                //////            iSuccess = dbObj.InlineExecuteNonQuery(sQry4);

                //////            #endregion
                //////        }
                //////        else
                //////        {
                //////            #region

                //////            int IngridID = 0;
                //////            DataSet ds3 = new DataSet();
                //////            string sqry3 = "select IngridID from tblIngridents where IngredientName='" + DS.Tables[0].Rows[i]["RawItems"].ToString() + "' ";
                //////            ds3 = dbObj.InlineExecuteDataSet(sqry3);
                //////            IngridID = Convert.ToInt32(ds3.Tables[0].Rows[0]["IngridID"].ToString());

                //////            string sQry4 = "insert into tbltranssemisetting( Settingid,Semiitemid,RecQty) values ('" + SettingId + "','" + IngridID + "','" + DS.Tables[0].Rows[i]["Qty"].ToString() + "')";
                //////            iSuccess = dbObj.InlineExecuteNonQuery(sQry4);

                //////            insertsemi = 0;
                //////            #endregion
                //////        }
                //////    }
                //////}
                #endregion
            }
            return iSuccess;

        }

        #endregion

        #region PurchaseReturn
        public DataSet PurchaseInvoiceNoList(string potable)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblkitchenPurchase_" + potable + " p  where p. Status = 'NO' ";

            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet getPurchaseInvoicelist(string iSalesID, string Table)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblkitchenPurchase_" + Table + " where Billno='" + iSalesID + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet getPurchaseInvoicetranslist(string iSalesID, string Table)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblkitchenPurchase_" + Table + " a inner join tbltranskitchenPurchase_" + Table + " b on a.PurchaseID = b.purchaseID where a.billno='" + iSalesID + "' and b.status='NO'";

            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public int insertPurchaseReturn(string Table, int ledgerid, int CreditorID1, string BillNo, string BillDate, string EntryDate, decimal Subtotal, decimal Tax, decimal Total, int Supplier, int Paymode, int bank, string chequeno, string cgst, string sgst, string igst, string dcno, int EntryUserID, string billingtype, int pono, string Province, string RoundOff, string subcompanyid)
        {
            int TransNo = 0;
            int Bn0 = 0;
            int save = 0;

            string Date = DateTime.Now.ToString("dd/MM/yyyy hh:mm tt");
            DateTime date1 = DateTime.ParseExact(Date, "dd/MM/yyyy hh:mm tt", CultureInfo.InvariantCulture);

            //DataSet ds1 = new DataSet();
            //string qy1 = "select isnull(max(BillNo+1),1) as BillNo from tblkitchenPurchase_" + Table + "";
            //ds1 = dbObj.InlineExecuteDataSet(qy1);

            //if (ds1.Tables[0].Rows.Count > 0)
            //{

            //    Bn0 = Convert.ToInt32(ds1.Tables[0].Rows[0]["BillNo"].ToString());
            //}

            string sqry = "insert into tblDayBook_" + Table + " (TransDate,DebtorId,CreditorId,Narration,RefNo,Type,Amount)values('" + Convert.ToDateTime(date1).ToString("yyyy/MM/dd") + "','" + CreditorID1 + "'," + ledgerid + ",'PurchaseRtnNar'," + BillNo + ",'Purchase Return','" + Convert.ToDouble(Total) + "')";
            save = dbObj.InlineExecuteNonQuery(sqry);

            DataSet ds2 = new DataSet();
            string qy2 = "select max(TransNo) as TransNo from tblDayBook_" + Table + "";
            ds2 = dbObj.InlineExecuteDataSet(qy2);
            TransNo = Convert.ToInt32(ds2.Tables[0].Rows[0]["TransNo"].ToString());

            string sQry = "insert into tblkitchenPurchaseReturn_" + Table + "(PurchaseRtnDate,BillNo,EntryDate,Subtotal,Tax,Total,Supplier,Paymode,Bank,ChequeNo,Daybookid,CGST,SGST,IGST,DCNO,EntryUserID,BillingType,PurInvNo,Province,RoundOff,subcompanyid) values('" + Convert.ToDateTime(date1).ToString("yyyy/MM/dd") + "'," + BillNo + ",'" + Convert.ToDateTime(date1).ToString("yyyy/MM/dd hh:mm tt") + "'," + Subtotal + "," + Tax + "," + Total + "," + Supplier + "," + Paymode + "," + bank + ",'" + chequeno + "'," + TransNo + ",'" + cgst + "','" + sgst + "','" + igst + "','" + dcno + "'," + EntryUserID + ",'" + billingtype + "','" + pono + "','" + Province + "','" + RoundOff + "','" + subcompanyid + "')";
            save = dbObj.InlineExecuteNonQuery(sQry);

            //if (billingtype == "Purchase Order")
            //{
            //    string sQry11 = "update tblkitchenPurchaseorder_" + Table + " set Status='YES' where OrderNo = '" + pono + "'";
            //    save = dbObj.InlineExecuteNonQuery(sQry11);
            //}

            DataSet ds = new DataSet();
            string qy = "select max(PurchaseRtnID) as Id from tblkitchenPurchaseReturn_" + Table + "";
            ds = dbObj.InlineExecuteDataSet(qy);
            save = Convert.ToInt32(ds.Tables[0].Rows[0]["ID"].ToString());
            return save;
        }


        public int insertTransPurchaseReturn(string Table, int PurchaseID, int IngredientID, decimal Qty, decimal Rate, decimal Amount, decimal Tax, int userid, string Units, decimal billno, int supplier, string pay, string ExpiryDate, string Narrations, double Disc, double discamount, string Punitsid, double Pvalue, double PUqty, int Purchasebillno)
        {
            int save = 0;
            int save1 = 0;

            string Date = DateTime.Now.ToString("dd/MM/yyyy hh:mm tt");
            DateTime date1 = DateTime.ParseExact(Date, "dd/MM/yyyy hh:mm tt", CultureInfo.InvariantCulture);


            DateTime ExpiryDate1;

            if (ExpiryDate == "" || ExpiryDate == "0" || ExpiryDate == "01/01/1900 12:00:00 AM")
            {
                ExpiryDate1 = DateTime.ParseExact("01/01/1900", "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }
            else
            {
                ExpiryDate1 = DateTime.ParseExact(ExpiryDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }

            string sQry = "insert into tbltranskitchenPurchaseReturn_" + Table + "(PurchaseRtnID,IngredientID,Qty,Rate,Amount,Tax,Units,BillNo,SupplierID,Paymode,ExpiryDate,Narrations,Disc,DiscountAmnt,Punitsid,Pvalue,PUqty) values(" + PurchaseID + "," + IngredientID + "," + Qty + "," + Rate + "," + Amount + "," + Tax + ",'" + Units + "'," + billno + "," + supplier + ",'" + pay + "','" + ExpiryDate1.ToString("yyyy-MM-dd") + "','" + Narrations + "','" + Disc + "'," + discamount + ",'" + Punitsid + "','" + Pvalue + "','" + PUqty + "')";
            save = dbObj.InlineExecuteNonQuery(sQry);



            int stock = 0;
            DataSet dcheck = new DataSet();
            string chk = "select * from tblRawMatlStock_" + Table + " where IngredientID=" + IngredientID + "";
            dcheck = dbObj.InlineExecuteDataSet(chk);

            double Qtyrate1 = Convert.ToDouble(Qty) * Convert.ToDouble(Rate);

            string Query = "";
            if (dcheck.Tables[0].Rows.Count > 0)
            {
                decimal AvlQty = Convert.ToDecimal(dcheck.Tables[0].Rows[0]["Qty"].ToString());

                double ItemRate = Convert.ToDouble(dcheck.Tables[0].Rows[0]["Rate"].ToString());

                double Qtyrate2 = Convert.ToDouble(AvlQty) * Convert.ToDouble(ItemRate);

                double ttlQtyrate = ((Qtyrate1 + Qtyrate2) / (Convert.ToDouble(Qty) + Convert.ToDouble(AvlQty)));

                decimal dQty = AvlQty - Qty;

                //  decimal dQty = AvlQty + Qty;

                // Query = " update tblRawMatlStock_" + Table + " set Qty=" + dQty + ",Rate=" + ttlQtyrate + " where IngredientID=" + IngredientID + " and userID=" + userid + "  ";
                Query = " update tblRawMatlStock_" + Table + " set Qty=" + dQty + ",Rate=" + ttlQtyrate + " where IngredientID=" + IngredientID + "";

                DataSet ds2 = new DataSet();
                int purbillno = Convert.ToInt32(billno);
                string qr = "select distinct PurchaseID from tblkitchenPurchase_" + Table + " a where a.PurchaseID='" + Purchasebillno + "'";
                ds2 = dbObj.InlineExecuteDataSet(qr);
                if (ds2.Tables[0].Rows.Count > 0)
                {
                    // insert stock - expiry date  
                    //string sQry11 = "insert into tblRawMatlStockExp_" + Table + " (IngredientID,Qty,ExpiredDate)values(" + IngredientID + "," + Qty + ",'" + ExpiryDate1.ToString("yyyy-MM-dd") + "') ";
                    string sQry11 = " update tblRawMatlStockExp_" + Table + " set Qty=Qty - " + Qty + " where IngredientID=" + IngredientID + " and PurchaseID=" + ds2.Tables[0].Rows[0]["PurchaseID"].ToString() + "";
                    save1 = dbObj.InlineExecuteNonQuery(sQry11);
                }
            }
            //else
            //{
            //    Query = "insert into tblRawMatlStock_" + Table + " (IngredientID,Qty,UserID,idDelete,units,Rate)values(" + IngredientID + "," + Qty + "," + userid + ",0,'" + Units + "'," + Rate + ") ";
            //}

            stock = dbObj.InlineExecuteNonQuery(Query);




            return save;
        }


        public int UpdatePurchaseInvoiceSTk(int ID, string Table, decimal pQty, int IngredientID)
        {
            int TransNo = 0;
            int iSucess = 0;

            DataSet ds1 = new DataSet();
            string qy1 = "select * from tblkitchenPurchase_" + Table + " where  billno='" + ID + "' ";
            ds1 = dbObj.InlineExecuteDataSet(qy1);

            if (ds1.Tables[0].Rows.Count > 0)
            {

                TransNo = Convert.ToInt32(ds1.Tables[0].Rows[0]["PurchaseID"].ToString());
            }

            string sQry11 = " update tbltranskitchenPurchase_" + Table + " set RQty=RQty + " + pQty + " where IngredientID=" + IngredientID + " and purchaseid=" + TransNo + "  ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry11);

            string sQry121 = " update tbltranskitchenPurchase_" + Table + " set Status='YES' where IngredientID=" + IngredientID + " and purchaseid=" + TransNo + " and Qty=RQty";
            iSucess = dbObj.InlineExecuteNonQuery(sQry121);

            return iSucess;
        }

        public int UpdatePurchaseInvoiceSTkStatus(int ID, string Table)
        {
            int TransNo = 0;
            int iSucess = 0;

            DataSet ds1 = new DataSet();
            string qy1 = "select * from tblkitchenPurchase_" + Table + " where  billno='" + ID + "' ";
            ds1 = dbObj.InlineExecuteDataSet(qy1);

            if (ds1.Tables[0].Rows.Count > 0)
            {
                TransNo = Convert.ToInt32(ds1.Tables[0].Rows[0]["PurchaseID"].ToString());
            }

            DataSet ds12 = new DataSet();
            string qy12 = "select Status from tbltranskitchenPurchase_" + Table + " where purchaseid='" + TransNo + "' group by Status";
            ds12 = dbObj.InlineExecuteDataSet(qy12);

            if (ds12.Tables[0].Rows.Count == 1)
            {
                if (ds12.Tables[0].Rows[0]["Status"].ToString() == "YES")
                {
                    string sQry11 = " update tblkitchenPurchase_" + Table + " set Status = 'YES'  where  billno='" + ID + "' ";
                    iSucess = dbObj.InlineExecuteNonQuery(sQry11);
                }
            }

            return iSucess;
        }

        public DataSet getduplisttransrtn(string iSalesID, string Table)
        {
            DataSet ds = new DataSet();
            //////string qr = "select * from tbltranskitchenPurchase_" + Table + " where Purchaseid='" + iSalesID + "'";
            string qr = "select i.Units,tp.* from tbltranskitchenPurchaseReturn_" + Table + " tp inner join tblIngridents i on i.IngridID=tp.IngredientID where purchasertnid='" + iSalesID + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet getduplistrtn(string iSalesID, string Table)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblkitchenPurchasereturn_" + Table + " where purchasertnid='" + iSalesID + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet getpurchaseReturnMaster(string Table)
        {
            DataSet ds = new DataSet();
            string sQry = " select c.ledgername as CustomerName,kp.*,case kp.Paymode when 1 then 'Cash' when 2 then 'Credit' else 'Cheque' end as PaymentMode from  tblkitchenPurchaseReturn_" + Table + " kp inner join tblledger c on c.ledgerID=kp.Supplier order by kp.PurchaseRtnID desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getpurchaseReturnMasterdate(string Table, string Supplier, DateTime from, DateTime to)
        {
            DataSet ds = new DataSet();
            if (Supplier == "All")
            {
                string sQry = " select c.ledgername as CustomerName,kp.*,case kp.Paymode when 1 then 'Cash' when 2 then 'Credit' else 'Cheque' end as PaymentMode from  tblkitchenPurchaseReturn_" + Table + " kp inner join tblledger c on c.ledgerID=kp.Supplier where  CAST(kp.PurchaseRtnDate AS DATE) >= '" + Convert.ToDateTime(from).ToString("yyyy/MM/dd") + "'  AND CAST(kp.PurchaseRtnDate AS DATE) <= '" + Convert.ToDateTime(to).ToString("yyyy/MM/dd") + "' order by kp.PurchaseRtnID desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else
            {
                string sQry = " select c.ledgername as CustomerName,kp.*,case kp.Paymode when 1 then 'Cash' when 2 then 'Credit' else 'Cheque' end as PaymentMode from  tblkitchenPurchaseReturn_" + Table + " kp inner join tblledger c on c.ledgerID=kp.Supplier where Supplier=" + Supplier + "  and CAST(kp.PurchaseRtnDate AS DATE) >= '" + Convert.ToDateTime(from).ToString("yyyy/MM/dd") + "'  AND CAST(kp.PurchaseRtnDate AS DATE) <= '" + Convert.ToDateTime(to).ToString("yyyy/MM/dd") + "' order by kp.PurchaseRtnID desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            return ds;
        }

        public DataSet GetPurchaseReturnprint(string Table, int purchaseID)
        {
            DataSet ds = new DataSet();
            string sQuery = "select * from tblkitchenPurchaseReturn_" + Table + "  p inner join tblLedger l on l.LedgerID=p.supplier inner join tblPaymode  m on m.paymodeid=p.Paymode where p.purchaseRtnID=" + purchaseID + "";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }

        public DataSet GettransPpurchaseReturnprint(string Table, int purchaseID)
        {
            DataSet ds = new DataSet();
            string sQuery = "select * from tbltranskitchenPurchaseReturn_" + Table + " tp inner join tblIngridents i on i.IngridID=tp.IngredientID  inner join tblUOM u on u.UOMID=tp.Units  where tp.purchaseRtnID=" + purchaseID + "";
            ds = dbObj.InlineExecuteDataSet(sQuery);
            return ds;
        }
        #endregion

        #region Bill Setting
        public DataSet CustomerSalesGirdNewbillsetting(int UserID, string sSalesTable, string notpaid)
        {
            DataSet ds = new DataSet();
            if (notpaid == "No")
            {
                string sQry = "select Top 100 b.ipaymode, a.CustomerName,'' as ContactType,b.BillDate,b.BillNo,a.Area,a.City,b.Total as NetAmount,b.salesID,a.Email ,F.paymode as Payment_Mode,b.salestype from tblCustomer a," + sSalesTable + " b ,tblsalespaymode F where a.CustomerID=b.CustomerID  " + " and f.value=b.ipaymode and b.OrderNo=0 and b.cancelstatus='No' and convert(date,b.billdate)=convert(date,getdate()) and b.isnormal='Y' and b.ipaymode<>'5'  order by b.billno desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else
            {
                string sQry = "select Top 100 b.ipaymode, a.CustomerName,'' as ContactType,b.BillDate,b.BillNo,a.Area,a.City,b.Total as NetAmount,b.salesID,a.Email ,F.paymode as Payment_Mode,b.salestype from tblCustomer a," + sSalesTable + " b ,tblsalespaymode F where a.CustomerID=b.CustomerID  " + " and f.value=b.ipaymode and b.OrderNo=0 and b.cancelstatus='No' and convert(date,b.billdate)=convert(date,getdate()) and b.isnormal='Y' and b.ipaymode<>'5'  order by f.OrderWise desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            return ds;
        }

        public DataSet CustomerSalesGirdNewbillsetting_search(int UserID, string sSalesTable, string notpaid, string billnosearch)
        {
            DataSet ds = new DataSet();
            if (notpaid == "No")
            {
                string sQry = "select  b.ipaymode, a.CustomerName,'' as ContactType,b.BillDate,b.BillNo,a.Area,a.City,b.Total as NetAmount,b.salesID,a.Email ,F.paymode as Payment_Mode from tblCustomer a," + sSalesTable + " b ,tblsalespaymode F where a.CustomerID=b.CustomerID  " + " and f.value=b.ipaymode and b.OrderNo=0 and b.cancelstatus='No' and convert(date,b.billdate)=convert(date,getdate()) and b.isnormal='Y' and b.ipaymode<>'5' and b.billno like '%" + billnosearch + "%'  order by b.billno desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else
            {
                string sQry = "select  b.ipaymode, a.CustomerName,'' as ContactType,b.BillDate,b.BillNo,a.Area,a.City,b.Total as NetAmount,b.salesID,a.Email ,F.paymode as Payment_Mode from tblCustomer a," + sSalesTable + " b ,tblsalespaymode F where a.CustomerID=b.CustomerID  " + " and f.value=b.ipaymode and b.OrderNo=0 and b.cancelstatus='No' and convert(date,b.billdate)=convert(date,getdate()) and b.isnormal='Y' and b.ipaymode<>'5'  order by f.OrderWise desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            return ds;
        }

        public DataSet NotpadiBillexisitsOrNot(int UserID, string sSalesTable)
        {
            DataSet ds = new DataSet();
            string sQry = "select  b.ipaymode, a.CustomerName,'' as ContactType,b.BillDate,b.BillNo,a.Area,a.City,b.Total as NetAmount,b.salesID,a.Email ,F.paymode as Payment_Mode from tblCustomer a," + sSalesTable + " b ,tblsalespaymode F where a.CustomerID=b.CustomerID  " + " and f.value=b.ipaymode and b.OrderNo=0 and b.cancelstatus='No' and convert(date,b.billdate)=convert(date,getdate()) and b.isnormal='Y' and f.value='16'  order by b.billno desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet notpadiexisisorbnotefororder(int UserID, string Stable)
        {
            DataSet ds = new DataSet();
            string sqry = " select sum(toa.Amount) as total,sp.paymode from tbltransorderamount_" + Stable + " as toa inner join tblorder_" + Stable + " as o on o.billno=toa.billno " +
                          " inner join tblsalespaymode as sp on sp.Value=toa.paymode where convert(date, billdate)=convert(date,getdate()) and sp.value='16' " +
                          " group by sp.paymode,VALUE ORDER BY VALUE asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet CustomerorderGirdNewordersetting(int UserID, string sSalesTable, string notpaid, string paymode)
        {
            DataSet ds = new DataSet();
            if (notpaid == "No")
            {
                //string sQry = "select Top 50 b.ipaymode, a.CustomerName,'' as ContactType,b.BillDate,b.BillNo,a.Area,a.City,b.Total as NetAmount,b.salesID,a.Email ,F.paymode as Payment_Mode from tblCustomer a," + sSalesTable + " b ,tblsalespaymode F where a.CustomerID=b.CustomerID  " + " and f.value=b.ipaymode and b.OrderNo=0 and b.cancelstatus='No' and convert(date,b.billdate)=convert(date,getdate()) and b.isnormal='Y'  order by b.billno desc";
                //ds = dbObj.InlineExecuteDataSet(sQry);
                string sqry = "select toa.*,sp.paymode as mod from tbltransOrderAmount_" + sSalesTable + " as toa inner join tblsalespaymode as sp on sp.value=toa.paymode where convert(date, billdate)=convert(date,getdate()) and sp.value in (" + paymode + ") order by toa.orderno desc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                //string sQry = "select Top 50 b.ipaymode, a.CustomerName,'' as ContactType,b.BillDate,b.BillNo,a.Area,a.City,b.Total as NetAmount,b.salesID,a.Email ,F.paymode as Payment_Mode from tblCustomer a," + sSalesTable + " b ,tblsalespaymode F where a.CustomerID=b.CustomerID  " + " and f.value=b.ipaymode and b.OrderNo=0 and b.cancelstatus='No' and convert(date,b.billdate)=convert(date,getdate()) and b.isnormal='Y'  order by f.value desc";
                //ds = dbObj.InlineExecuteDataSet(sQry);
                string sqry = "select toa.*,sp.paymode as mod from tbltransOrderAmount_" + sSalesTable + " as toa inner join tblsalespaymode as sp on sp.value=toa.paymode where convert(date, billdate)=convert(date,getdate()) and sp.value in (" + paymode + ") order by sp.OrderWise desc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            return ds;
        }

        public DataSet CustomerorderGirdNewordersettingforcash(int UserID, string sSalesTable, string paymode)
        {
            DataSet ds = new DataSet();

            //string sQry = "select Top 50 b.ipaymode, a.CustomerName,'' as ContactType,b.BillDate,b.BillNo,a.Area,a.City,b.Total as NetAmount,b.salesID,a.Email ,F.paymode as Payment_Mode from tblCustomer a," + sSalesTable + " b ,tblsalespaymode F where a.CustomerID=b.CustomerID  " + " and f.value=b.ipaymode and b.OrderNo=0 and b.cancelstatus='No' and convert(date,b.billdate)=convert(date,getdate()) and b.isnormal='Y'  order by b.billno desc";
            //ds = dbObj.InlineExecuteDataSet(sQry);
            string sqry = "select toa.*,sp.paymode as mod from tbltransOrderAmount_" + sSalesTable + " as toa inner join tblsalespaymode as sp on sp.value=toa.paymode where convert(date, billdate)=convert(date,getdate()) and sp.value in (" + paymode + ") order by toa.orderno desc";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet CustomerorderGirdNewordersettingforcard(int UserID, string sSalesTable, string paymode)
        {
            DataSet ds = new DataSet();

            //string sQry = "select Top 50 b.ipaymode, a.CustomerName,'' as ContactType,b.BillDate,b.BillNo,a.Area,a.City,b.Total as NetAmount,b.salesID,a.Email ,F.paymode as Payment_Mode from tblCustomer a," + sSalesTable + " b ,tblsalespaymode F where a.CustomerID=b.CustomerID  " + " and f.value=b.ipaymode and b.OrderNo=0 and b.cancelstatus='No' and convert(date,b.billdate)=convert(date,getdate()) and b.isnormal='Y'  order by b.billno desc";
            //ds = dbObj.InlineExecuteDataSet(sQry);
            string sqry = "select toa.*,sp.paymode as mod from tbltransOrderAmount_" + sSalesTable + " as toa inner join tblsalespaymode as sp on sp.value=toa.paymode where convert(date, billdate)=convert(date,getdate()) and sp.value in (" + paymode + ") order by toa.orderno desc";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }



        public DataSet CustomerSalesGirdNewbillsettingcash(int UserID, string sSalesTable)
        {
            DataSet ds = new DataSet();

            string sQry = "select top 10 b.BillNo,a.CustomerName,'' as ContactType,b.BillDate,a.Area,a.City,b.Total as NetAmount,b.salesID,a.Email ,F.paymode as Payment_Mode from tblCustomer a," + sSalesTable + " b ,tblsalespaymode F where a.CustomerID=b.CustomerID  " + " and f.value=b.ipaymode and b.OrderNo=0 and b.cancelstatus='No' and convert(date,b.billdate)=convert(date,getdate()) and b.isnormal='Y' and b.ipaymode='1' order by b.billno desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet CustomerSalesGirdNewbillsettingcard(int UserID, string sSalesTable)
        {
            DataSet ds = new DataSet();

            string sQry = "select top 10 b.BillNo, a.CustomerName,'' as ContactType,b.BillDate,a.Area,a.City,b.Total as NetAmount,b.salesID,a.Email ,F.paymode as Payment_Mode from tblCustomer a," + sSalesTable + " b ,tblsalespaymode F where a.CustomerID=b.CustomerID  " + "  and f.value=b.ipaymode and b.OrderNo=0 and b.cancelstatus='No' and convert(date,b.billdate)=convert(date,getdate()) and b.isnormal='Y' and (b.ipaymode='4' or b.ipaymode='10' or b.ipaymode='17') order by b.billno desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public int updatepaymode(string isalesid, string paymode, string stablename)
        {
            int iDel = 0;
            string sQry = "Update tblsales_" + stablename + " set ipaymode='" + paymode + "' where salesid='" + isalesid + "'";
            iDel = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "Update tbltranssalesAmount_" + stablename + " set paymode='" + paymode + "' where salesid='" + isalesid + "'";
            iDel = dbObj.InlineExecuteNonQuery(sQry1);

            return iDel;
        }

        public int updatepaymodeForORder(string isalesid, string paymode, string stablename)
        {
            int iDel = 0;
            string sQry = "Update tbltransorderAmount_" + stablename + " set paymode='" + paymode + "' where TransorderId='" + isalesid + "'";
            iDel = dbObj.InlineExecuteNonQuery(sQry);
            return iDel;
        }



        #endregion

        #region QTY SUMMARY REPORT
        public DataSet getitemlistforsummarylist(string itemList)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;
            if (itemList == "All")
            {

                sQry = "select * from tblCategoryUser as cu inner join tblcategory as c on c.categoryid=cu.categoryid ";
            }
            else
            {
                sQry = "select * from tblCategoryUser as cu inner join tblcategory as c on c.categoryid=cu.categoryid where cu.Categoryuserid='" + itemList + "'";
            }
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getsumgrnqty(string categoryuserid, string Fromdate, string Todate)
        {
            DataSet ds = new DataSet();

            string sQry = "select isnull(sum(GRN_Qty),0) as qty from tblgrn as b where convert(date,b.date) between '" + Fromdate + "' and'" + Todate + "' and categoryuserid='" + categoryuserid + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getsumsaleqty(string categoryuserid, string Fromdate, string Todate, string stable)
        {
            DataSet ds = new DataSet();

            string sQry = "select isnull(sum(quantity),0) as sqty from tblsales_" + stable + " as s inner join tbltranssales_" + stable + " as ts on ts.SalesID=s.billno " +
                         " where convert(date,s.billdate) between '" + Fromdate + "' and '" + Todate + "' and ts.subcategoryid='" + categoryuserid + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getsumRetuqty(string categoryuserid, string Fromdate, string Todate, string stable)
        {
            DataSet ds = new DataSet();

            string sQry = "select isnull(sum(quantity),0) as Rqty from tblreturn_" + stable + " as s inner join tbltransreturn_" + stable + " as ts on ts.retno=s.retno " +
                          " where convert(date,s.Retdate) between '" + Fromdate + "' and '" + Todate + "' and ts.subcategoryid='" + categoryuserid + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getstockauditreport(string categoryuserid, string Fromdate, string Todate, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;
            if (categoryuserid == "All")
            {

                sQry = "select a.screen,a.qtydate,a.qty,a.RefId,a.sign,cu.definition,c.category from tblAuditQty_" + stable + "  as a  " +
                              " inner join tblcategoryuser as cu on cu.categoryuserid=a.itemid inner join tblcategory as c on c.categoryid=cu.categoryid " +
                              " where convert(date,a.QtyDate) between '" + Fromdate + "' and '" + Todate + "' order by qtydate asc ";
            }
            else
            {
                sQry = "select a.screen,a.qtydate,a.qty,a.RefId,a.sign,cu.definition,c.category from tblAuditQty_" + stable + "  as a  " +
                              " inner join tblcategoryuser as cu on cu.categoryuserid=a.itemid inner join tblcategory as c on c.categoryid=cu.categoryid " +
                              " where convert(date,a.QtyDate) between '" + Fromdate + "' and '" + Todate + "' and a.itemid='" + categoryuserid + "' order by qtydate asc ";
            }
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getstocktransferreport(string categoryuserid, string Fromdate, string Todate, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;
            if (categoryuserid == "All")
            {

                sQry = "select a.dc_NO,a.DC_Date,a.BranchReqNo,a.branchcode,c.Category,d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty,b.damage_Qty as damageQty,b.Missing_Qty as MissingQty,d.MRP " +
                        " from tblGoodTransfer_" + stable + " a,tbltransGoodsTransfer_" + stable + " b,tblcategory c,tblCategoryUser d  " +
  " where convert(date,a.Dc_Date) between '" + Fromdate + "' and '" + Todate + "' and a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID  and  a.BranchCode=b.BranchCode order by a.dc_No desc  ";
            }
            else
            {
                sQry = "select a.dc_NO,a.DC_Date,a.BranchReqNo,a.branchcode,c.Category,d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty,b.damage_Qty as damageQty,b.Missing_Qty as MissingQty,d.MRP " +
          " from tblGoodTransfer_" + stable + " a,tbltransGoodsTransfer_" + stable + " b,tblcategory c,tblCategoryUser d  " +
" where convert(date,a.Dc_Date) between '" + Fromdate + "' and '" + Todate + "' and a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID  and  a.BranchCode=b.BranchCode and d.categoryid='" + categoryuserid + "' order by a.dc_No desc ";
            }
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet getstocktransferreportstore(string categoryuserid, string Fromdate, string Todate, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;
            if (categoryuserid == "All")
            {

                sQry = "select a.dc_NO,a.DC_Date,a.BranchReqNo,a.branchcode,c.IngreCategory as Category,d.IngredientName as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty,b.damage_Qty as damageQty,b.Missing_Qty as MissingQty,b.Trate,b.Tgst " +
                        " from tblGoodTransfer_" + stable + " a,tbltransGoodsTransfer_" + stable + " b,tblingridentscategory c,tblingridents d  " +
  " where convert(date,a.Dc_Date) between '" + Fromdate + "' and '" + Todate + "' and a.DC_NO=b.DC_No and d.IngCatID=c.IngCatID  and b.DescriptionId=d.IngridID  and  a.BranchCode=b.BranchCode order by a.dc_No desc  ";
            }
            else
            {
                sQry = "select a.dc_NO,a.DC_Date,a.BranchReqNo,a.branchcode,c.IngreCategory as Category,d.IngredientName as  Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty,b.damage_Qty as damageQty,b.Missing_Qty as MissingQty,b.Trate,b.Tgst " +
          " from tblGoodTransfer_" + stable + " a,tbltransGoodsTransfer_" + stable + " b,tblingridentscategory c,tblingridents d  " +
" where convert(date,a.Dc_Date) between '" + Fromdate + "' and '" + Todate + "' and a.DC_NO=b.DC_No and d.IngCatID=c.IngCatID  and b.DescriptionId=d.IngridID  and  a.BranchCode=b.BranchCode and c.IngCatID='" + categoryuserid + "' order by a.dc_No desc ";
            }
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion


        #region CASH SESSION CLOSE
        public int cashsessionEntry(string mode, string total, string stablename, string narration)
        {
            int Isus = 0;
            //string sQry = "Update tblcashsession_" + stablename + " set ipaymode='" + paymode + "' where salesid='" + isalesid + "'";
            string sqry = "Insert into tblcashsession_" + stablename + "(Mode,TotalCash,Narration)values('" + mode + "','" + total + "','" + narration + "')";
            Isus = dbObj.InlineExecuteNonQuery(sqry);
            return Isus;
        }

        public DataSet checkcountforsession(string stablename)
        {
            DataSet ds = new DataSet();

            string sQry = "select *  from tblcashsession_" + stablename + " as c where convert(date,c.cashdate) =convert(date,getdate())";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet gridsessiondetails(string stablename, string date)
        {
            DataSet ds = new DataSet();

            string sQry = "select c.*,sm.sessionname from tblcashsession_" + stablename + " as c inner join tblsessionmode as sm on sm.sessionmode=c.mode where convert(date,c.cashdate) =convert(date,'" + date + "')";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public int TranscashsessionEntry(string name, string nameid, string value, string total, string stablename, string nos)
        {
            int Isus = 0;
            //string sQry = "Update tblcashsession_" + stablename + " set ipaymode='" + paymode + "' where salesid='" + isalesid + "'";
            string sqry = "Select MAX(CashSessionId) as id from tblcashsession_" + stablename + "";
            DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string id = ds.Tables[0].Rows[0]["id"].ToString();

                string sqrry = "Insert into tblTranscashsession_" + stablename + "(Name,Nameid,Value,Nos,Total,CashSessionId)values('" + name + "','" + nameid + "','" + value + "','" + nos + "','" + total + "','" + id + "')";
                Isus = dbObj.InlineExecuteNonQuery(sqrry);
            }
            return Isus;
        }

        #endregion

        #region NEW Denomination
        public int Denominations(string sTable, string Date, double total, double card, double paytm, double creditsales, double OverallPhonepe)
        {
            int iSuccess = 0;
            string sQry = "insert into tblDenomination_" + sTable + "(Date,Total,OverAllCard,OverAllPaytm,OverallCreditsales,OverallPhonepe) values('" + Date + "','" + Convert.ToDouble(total) + "','" + card + "','" + paytm + "','" + creditsales + "','" + OverallPhonepe + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }

        public DataSet checkdenimonationentry(string stablename, string date)
        {
            DataSet ds = new DataSet();

            string sQry = "select * from tblDenomination_" + stablename + " as d  " +
                " where convert(date,d.date) =convert(date,'" + date + "')";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public int TransDenominationEntry(string name, string nameid, string value, string total, string stablename, string nos)
        {
            int Isus = 0;
            //string sQry = "Update tblcashsession_" + stablename + " set ipaymode='" + paymode + "' where salesid='" + isalesid + "'";
            string sqry = "Select MAX(Denomination_ID) as id from tblDenomination_" + stablename + "";
            DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string id = ds.Tables[0].Rows[0]["id"].ToString();

                string sqrry = "Insert into tblTransDenomination_" + stablename + "(Name,Nameid,Value,Nos,Total,DenominationId)values('" + name + "','" + nameid + "','" + value + "','" + nos + "','" + total + "','" + id + "')";
                Isus = dbObj.InlineExecuteNonQuery(sqrry);
            }
            return Isus;
        }

        public DataSet griddenominationdetails(string stablename, string date)
        {
            DataSet ds = new DataSet();

            string sQry = "select * from tblDenomination_" + stablename + " as d inner join tbltransdenomination_" + stablename + " as td on td.Denominationid=d.denomination_id " +
                " where convert(date,d.date) =convert(date,'" + date + "')";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet gridcashsessionForid(string stablename, string id)
        {
            DataSet ds = new DataSet();

            string sQry = "select * from tblcashsession_" + stablename + " as d inner join tbltranscashsession_" + stablename + " as td on td.CashSessionId=d.CashSessionId " +
                " inner join tblsessionmode as sm on sm.sessionmode=d.mode " +
                " where d.CashSessionId='" + id + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int gridcashdeleteforid(string stablename, string id)
        {
            int iss = 0;

            //string main table
            string sqr = "Delete from tblcashsession_" + stablename + " where cashsessionid='" + id + "'";
            iss = dbObj.InlineExecuteNonQuery(sqr);

            //string main table
            string sqry = "Delete from tbltranscashsession_" + stablename + " where cashsessionid='" + id + "'";
            iss = dbObj.InlineExecuteNonQuery(sqry);


            return iss;
        }

        public DataSet gridcashsessionFordatewise(string stablename, string id, string date)
        {
            DataSet ds = new DataSet();

            string sQry = "select * from tblcashsession_" + stablename + " as d inner join tbltranscashsession_" + stablename + " as td on td.CashSessionId=d.CashSessionId " +
                " inner join tblsessionmode as sm on sm.sessionmode=d.mode " +
                " where d.mode='" + id + "' and convert(date,d.cashdate) = convert(date,'" + date + "')";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion

        #region FIRST COLUMN IN DAILY REPORT CASH FLOW
        public DataSet getcashopcashtoofficedetails(string stablename, string date, string mode)
        {
            DataSet ds = new DataSet();

            string sQry = "select c.*,sm.sessionname from tblcashsession_" + stablename + " as c inner join tblsessionmode as sm on sm.sessionmode=c.mode " +
                " where c.mode in (" + mode + ") and convert(date,c.cashdate) =convert(date,'" + date + "')";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getcarddetails(string stablename, string date, string mode)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();

            //  string sqry = "select sum(total)as Total, sp.paymode as  SalesType  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode where cast (billdate as Date)='" + Date + "'  and cancelstatus='No' group by paymode ";
            string SQRY = "  select sum(s.total)as Total, sp.paymode  from tblsales_" + stablename + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode " +
                         " where cast (billdate as Date)='" + date + "' and s.ipaymode='" + mode + "'  and cancelstatus='No' group by sp.paymode";
            ds = dbObj.InlineExecuteDataSet(SQRY);

            dmerge.Merge(ds);

            string sqry = " select sum(toa.Amount) as Total,sp.paymode from tbltransorderamount_" + stablename + " as toa " +
                           " inner join tblorder_" + stablename + " as o on o.billno=toa.billno " +
                        " inner join tblsalespaymode as sp on sp.Value=toa.paymode where convert(date, billdate)='" + date + "' and toa.paymode='" + mode + "' " +
                        " group by sp.paymode ";
            DataSet ds1 = dbObj.InlineExecuteDataSet(sqry);

            dmerge.Merge(ds1);

            return dmerge;
        }




        public DataSet getcarddetails_datewise(string stablename, string mode, DateTime From, DateTime To)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();

            //  string sqry = "select sum(total)as Total, sp.paymode as  SalesType  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode where cast (billdate as Date)='" + Date + "'  and cancelstatus='No' group by paymode ";
            string SQRY = "  select sum(s.total)as Total,sp.paymode  from tblsales_" + stablename + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode " +
                         " where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and s.ipaymode='" + mode + "'  and cancelstatus='No' group by sp.paymode";
            ds = dbObj.InlineExecuteDataSet(SQRY);

            dmerge.Merge(ds);

            string sqry = " select sum(toa.Amount) as Total,sp.paymode from tbltransorderamount_" + stablename + " as toa " +
                           " inner join tblorder_" + stablename + " as o on o.billno=toa.billno " +
                        " inner join tblsalespaymode as sp on sp.Value=toa.paymode where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and toa.paymode='" + mode + "' " +
                        " group by sp.paymode ";
            DataSet ds1 = dbObj.InlineExecuteDataSet(sqry);

            dmerge.Merge(ds1);

            return dmerge;
        }

        public DataSet gettotalexpense(string sTable, string date)
        {
            DataSet ds = new DataSet();
            string sQry = " select isnull(sum(Amount),0) as Amount from tblPaymentEntry_" + sTable + " where  convert(date,Date)=convert(date, '" + date + "') ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet gettotalexpense_Datewise(string sTable, DateTime From, DateTime To)
        {
            DataSet ds = new DataSet();
            string sQry = " select isnull(sum(Amount),0) as Amount from tblPaymentEntry_" + sTable + " where cast(date as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(date as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet gettotaldetailsexpense(string sTable, string date)
        {
            DataSet ds = new DataSet();
            string sQry = " select p.Amount,l.ledgername from tblPaymentEntry_" + sTable + " as p inner join tblledger as l on l.ledgerid=p.ledgerid where convert(date,p.Date)=convert(date, '" + date + "') ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet getcashsalesandorderdetails(string Date, string sTableName, string paymode, string typename)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();

            //  string sqry = "select sum(total)as Total, sp.paymode as  SalesType  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode where cast (billdate as Date)='" + Date + "'  and cancelstatus='No' group by paymode ";
            string SQRY = "  select sum(s.total)as Total, sp.paymode  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode " +
                         " where cast (billdate as Date)='" + Date + "' and s.ipaymode='" + paymode + "'  and cancelstatus='No' group by paymode ";
            ds = dbObj.InlineExecuteDataSet(SQRY);

            dmerge.Merge(ds);

            string sqry = " select sum(toa.Amount) as Total,sp.paymode from tbltransorderamount_" + sTableName + " as toa " +
                            " inner join tblorder_" + sTableName + " as o on o.billno=toa.billno " +
                         " inner join tblsalespaymode as sp on sp.Value=toa.paymode where convert(date, billdate)='" + Date + "' and toa.paymode='" + paymode + "' and type in (" + typename + ") " +
                         " group by sp.paymode ";
            DataSet ds1 = dbObj.InlineExecuteDataSet(sqry);


            dmerge.Merge(ds1);

            return dmerge;
        }



        #endregion

        #region QUICK ITEM UPDATE
        public DataSet getcatforstk()
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblCategory";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public int updatecategoryitemquick(string itemname, string taxid, string tax, string rate, string uom, string itemid, string printitem, string hsncode, string isactive, string active, string superadmin, string unitname, string dispalyonline,string MRP)
        {
            int iStatus = 0;
            string sqry = "update tblCategoryUser set UnitName='" + unitname + "',isactive='" + active + "',HSNCode='" + hsncode + "',printitem=N'" + printitem + "',isdelete='" + isactive + "', " +
                " Definition=N'" + itemname + "',Rate='" + rate + "',unit=" + uom + " ,Tax=" + tax + "  ,GST=" + tax + ",TaxVal=" + taxid + " ,DisplayOnline ='" + dispalyonline + "',mrp='"+MRP+"'  where itemid='" + itemid + "'";
            iStatus = dbObj.InlineExecuteNonQuery(sqry);

            if (superadmin == "1" || superadmin == "2")
            {

                string getitem = "select * from tblcategoryuser where itemid='" + itemid + "'";
                DataSet dss = dbObj.InlineExecuteDataSet(getitem);
                if (dss.Tables[0].Rows.Count > 0)
                {
                    string itemidd = dss.Tables[0].Rows[0]["itemid"].ToString();
                    string CategoryID = dss.Tables[0].Rows[0]["CategoryID"].ToString();
                    string Definition = dss.Tables[0].Rows[0]["Definition"].ToString();
                    string Serial = dss.Tables[0].Rows[0]["Serial"].ToString();
                    string Tax = dss.Tables[0].Rows[0]["Tax"].ToString();
                    string Rate = dss.Tables[0].Rows[0]["Rate"].ToString();
                    string CategoryUserID = dss.Tables[0].Rows[0]["CategoryUserID"].ToString();
                    string GST = dss.Tables[0].Rows[0]["GST"].ToString();
                    string TaxVal = dss.Tables[0].Rows[0]["TaxVal"].ToString();
                    string unit = dss.Tables[0].Rows[0]["unit"].ToString();
                    string empcode = dss.Tables[0].Rows[0]["empcode"].ToString();
                    string MinimumStock = dss.Tables[0].Rows[0]["MinimumStock"].ToString();
                    string DisplayOnline = dss.Tables[0].Rows[0]["DisplayOnline"].ToString();
                    string ImageUpload = dss.Tables[0].Rows[0]["ImageUpload"].ToString();
                    string UnitName = dss.Tables[0].Rows[0]["UnitName"].ToString();
                    string Printitem = dss.Tables[0].Rows[0]["Printitem"].ToString();
                    string FoodType = dss.Tables[0].Rows[0]["FoodType"].ToString();
                    string HSNCode = dss.Tables[0].Rows[0]["HSNCode"].ToString();
                    string Isactive = dss.Tables[0].Rows[0]["Isactive"].ToString();

                    string Barcode = dss.Tables[0].Rows[0]["Barcode"].ToString();
                    string Mrp = dss.Tables[0].Rows[0]["Mrp"].ToString();
                    string Pagepath = dss.Tables[0].Rows[0]["Pagepath"].ToString();
                    string Description = dss.Tables[0].Rows[0]["Description"].ToString();
                    string ratetype = dss.Tables[0].Rows[0]["ratetype"].ToString();

                    //Barcode,Mrp,Pagepath,Description,ratetype


                    string sqr = "Insert into tblcategoryuserhistory(itemid,CategoryID,Definition,Serial,Tax,Rate,CategoryUserID,GST,TaxVal,unit,empcode,MinimumStock, " +
                        " DisplayOnline,ImageUpload,UnitName,Printitem,FoodType,HSNCode,Isactive,Barcode,Mrp,Pagepath,Description,ratetype) " + 
                        " values('" + itemidd + "','" + CategoryID + "','" + Definition + "','" + Serial + "','" + Tax + "','" + Rate + "','" + CategoryUserID + "', " +
                        " '" + GST + "','" + TaxVal + "','" + unit + "','" + empcode + "','" + MinimumStock + "','" + DisplayOnline + "','" + ImageUpload + "', " +
                        " '" + UnitName + "','" + Printitem + "','" + FoodType + "','" + HSNCode + "','" + Isactive + "','" + Barcode + "','" + Mrp + "','" + Pagepath + "','" + Description + "','" + ratetype + "')";
                    int iss = dbObj.InlineExecuteNonQuery(sqr);
                }

            }



            return iStatus;

        }

        public DataSet getitemss(string category, string isactive)
        {
            DataSet ds = new DataSet();
            // string sQry = "select * from  tblCategoryUser  order by Definition asc";
            string sQry = "select cu.*,u.uom as name from  tblCategoryUser cu inner join tblcategory  as c on c.categoryid=cu.categoryid inner join tbluom as u on u.uomid=cu.unit where cu.categoryid='" + category + "' and cu.isdelete='" + isactive + "'  order by Definition asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getitemss_newsearch(string searchtext, string isactive)
        {
            DataSet ds = new DataSet();
            // string sQry = "select * from  tblCategoryUser  order by Definition asc";
            string sQry = "select cu.*,u.uom as name from  tblCategoryUser cu inner join tblcategory  as c on c.categoryid=cu.categoryid inner join tbluom as u on u.uomid=cu.unit where cu.definition like '%" + searchtext + "%'  and cu.isdelete='" + isactive + "'  order by Definition asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        #endregion
        #region DUMMY METHOD
        public DataSet GetStockDetailsNormalnew(int iSubCatID, int UserID, string stable)
        {
            DataSet ds = new DataSet();
            // string sQry = " select isnull(b.Expirydate,'5000/12/31') as Expirydate,a.CheckStock,ISNULL(Available_QTY,0) as Available_QTY,ISNULL(StockID,0) as StockID, * from tblcategoryuser a left join tblStock_" + stable + " b on a.CategoryUserID=b.SubCategoryID where a.CategoryUserID=" + iSubCatID + " ";
            string sQry = " select isnull(b.Expirydate,'5000/12/31') as Expirydate,a.CheckStock,SUM(ISNULL(ts.Available_QTY,0)) as Available_QTY, ISNULL(b.StockID,0) as StockID,a.CheckStock,a.Definition,a.Rate,a.CategoryID,a.CategoryUserid,a.GST from tblcategoryuser a left join tblStock_" + stable + " b on a.CategoryUserID=b.SubCategoryID  left join tblTransStock_" + stable + " ts on ts.SubCategoryID=a.CategoryUserID where a.CategoryUserID=" + iSubCatID + " and  DATEDIFF(day ,convert(datetime  ,ts.Expirydate, 103),GETDATE() ) <  ts.Expirydays group by  b.Expirydate,a.CheckStock,b.StockID,a.CheckStock,a.Definition,a.Rate,a.CategoryID,a.CategoryUserid,a.GST order by Definition asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet checkordernumber(string salestype, string orderno, string sales, string salestypeorderno, string transsalesid)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (transsalesid == "S")
            {
                sqry = "select * from " + sales + " where " + salestypeorderno + "='" + orderno + "' and Salestype='" + salestype + "'";
            }
            else
            {
                if (transsalesid == "")
                    transsalesid = "0";

                sqry = "select * from " + sales + " where " + salestypeorderno + "='" + orderno + "' and Salestype='" + salestype + "' and Billno<>'" + transsalesid + "'";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet checkLiveordernumber(string salestype, string ordernumber, string branchcode, string statuscolumn)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            sqry = "Select * from tblOnlineOrderNumber where BranchCode='" + branchcode + "' and OnlineType='" + salestype + "' and OnlineNumber='" + ordernumber + "' and  " + statuscolumn + "='N' ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;

        }

        public DataSet checkduplicatenumberlive(string salestype, string ordernumber)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            sqry = "Select * from tblOnlineOrderNumber where  OnlineType='" + salestype + "' and OnlineNumber='" + ordernumber + "'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet checkduplicatenumberlive_update(string salestype, string ordernumber, string onlineid)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            sqry = "Select * from tblOnlineOrderNumber where  OnlineType='" + salestype + "' and OnlineNumber='" + ordernumber + "' and onlineid<>'" + onlineid + "'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet onlineordernumber_update(string onlineid)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            sqry = "Select * from tblOnlineOrderNumber where  OnlineID='" + onlineid + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet checkonlinestatus_updatecheck(string onlineid, string statuscolumn, string columnvalue)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            sqry = "Select * from tblOnlineOrderNumber where  OnlineID='" + onlineid + "' and " + statuscolumn + "='" + columnvalue + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public int onlineupdate(string salestype, string ordernumber, string branchcode, string statuscolumn, string statuscolumn1, string kotno, string column2, string kotdate, string narration)
        {
            int isscuess = 0;
            string sqry = string.Empty;

            //sqry = "Select * from tblonlineordernumber where BranchCode='" + branchcode + "' and OnlineType='" + salestype + "' and OnlineNumber='" + ordernumber + "' and  " + statuscolumn + "='N' ";
            sqry = "Update tblOnlineOrderNumber set " + column2 + "='" + kotdate + "'," + statuscolumn + "='Y'," + statuscolumn1 + "='" + kotno + "',ItemNarration='" + narration + "' where BranchCode='" + branchcode + "' and OnlineType='" + salestype + "' and OnlineNumber='" + ordernumber + "' ";
            isscuess = dbObj.InlineExecuteNonQueryMain(sqry);
            return isscuess;
        }

        public int Transonlineupdate(string transid)
        {
            int isscuess = 0;
            string sqry = string.Empty;

            //sqry = "Select * from tblonlineordernumber where BranchCode='" + branchcode + "' and OnlineType='" + salestype + "' and OnlineNumber='" + ordernumber + "' and  " + statuscolumn + "='N' ";
            sqry = "Update tbltransordernumber set status='Y' where Transonlineid='" + transid + "' ";
            isscuess = dbObj.InlineExecuteNonQueryMain(sqry);
            return isscuess;
        }


        public int insertonlineorder(string OnlineType, string OnlineNumber, string BranchCode, string BranchId, string EntryBy, string HStatus, string HkotNo, string Status, string KotNo, string RequestType, string btntype, string kotdate, string Narration)
        {
            int isscuess = 0;
            string sqry = string.Empty;

            //sqry = "Select * from tblonlineordernumber where BranchCode='" + branchcode + "' and OnlineType='" + salestype + "' and OnlineNumber='" + ordernumber + "' and  " + statuscolumn + "='N' ";
            // sqry = "Update tblOnlineOrdernumber set " + statuscolumn + "='Y'," + statuscolumn1 + "='" + kotno + "' where BranchCode='" + branchcode + "' and OnlineType='" + salestype + "' and OnlineNumber='" + ordernumber + "' ";
            if (btntype == "Sale")
            {
                sqry = "insert into tblOnlineOrderNumber(OnlineType,OnlineNumber,BranchCode,BranchId,EntryBy,Status,KotNo,RequestType,KotDate,ItemNarration) " +
                " values('" + OnlineType + "','" + OnlineNumber + "','" + BranchCode + "','" + BranchId + "','" + EntryBy + "','" + Status + "','" + KotNo + "','" + RequestType + "','" + kotdate + "','" + Narration + "')";
            }
            else
            {
                sqry = "insert into tblOnlineOrderNumber(OnlineType,OnlineNumber,BranchCode,BranchId,EntryBy,HStatus,HkotNo,Status,KotNo,RequestType,Hkotdate,ItemNarration) " +
                " values('" + OnlineType + "','" + OnlineNumber + "','" + BranchCode + "','" + BranchId + "','" + EntryBy + "','" + HStatus + "','" + HkotNo + "','" + Status + "','" + KotNo + "','" + RequestType + "','" + kotdate + "','" + Narration + "')";
            }


            isscuess = dbObj.InlineExecuteNonQueryMain(sqry);
            return isscuess;
        }


        #endregion

        #region CHeck InterNet Connection Or Not
        public bool IsConnectedToInternet()
        {
            //string host = "http://g.cn/generate_204";
            bool result = false;
            //Ping p = new Ping();
            //try
            //{
            //    PingReply reply = p.Send(host, 8000);
            //    //PingReply reply = p.Send(host);
            //    if (reply.Status == IPStatus.Success)
            //        return true;
            //}
            //catch { }
            //return result

            {
                WebClient client = new WebClient();
                byte[] datasize = null;
                try
                {
                    datasize = client.DownloadData("http://www.google.com");
                    return true;
                }
                catch
                {
                }
                return result;
            }
        }

        public bool getsettingid(string id)
        {
            DataSet ds = new DataSet();
            int qty = 0;
            // string sqry = "select * from tblCategory where isdelete=0  ";
            string sqry = "select * from tblsetting where settingid='" + id + "' and settingstatus='Y' ";

            object qtyObj = dbObj.InlineExecuteScalar(sqry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }

        }

        #endregion

        #region Query for TABLE Master
        public DataSet GridTable()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbltablemaster where IsActive='Yes' order by tableid desc  ";
           
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getupdatetablemaster(string itableid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbltablemaster where tableid ='" + itableid + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int deletetablemaster(string tableid)
        {
            int iSucess = 0;
            string sQry = "update  tbltablemaster set  IsActive='No'  where tableid='" + tableid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public DataSet Duplicatetablecheck(string tablename)
        {
            DataSet ds = new DataSet();
            string sqry = "select tableid, tablename from tbltablemaster where tablename = '" + tablename + "' and IsActive='Yes' order by tableid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int InsertTableName(string tablename, string nofochair)
        {
            int iSuccess = 0;



            string sQry = "insert into tbltablemaster(tablename,No_of_Chairs) values ('" + tablename + "','" + nofochair + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            return iSuccess;

        }

        public int updatetablemaster(int tableid, string tablename, string noofchair)
        {
            int iSucess = 0;
            string sQry = "update tbltablemaster set tablename='" + tablename + "',No_of_Chairs='" + noofchair + "'  where tableid='" + tableid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        #endregion

        #region Query for Attender Name Master

        public DataSet getattendertype()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblattendertype ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet GridAttender()
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct a.*,b.brancharea,at.typename from tblattender as a inner join tblbranch as b on b.branchid=a.branch inner join tblattendertype as at on at.attendertypeid=a.type where a.IsActive='Yes'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getupdateattendermaster(string itableid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblattender where AttenderId ='" + itableid + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int deleteattendermaster(string attenderid)
        {
            int iSucess = 0;
            string sQry = "update  tblattender set  IsActive='No'  where AttenderId='" + attenderid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public DataSet duplicateattendercheck(string tablename)
        {
            DataSet ds = new DataSet();
            string sqry = "select attenderid, attendername from tblattender where attendername = '" + tablename + "' and IsActive='Yes' order by attenderid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int InsertAttenderName(string attendername, string branchid, string type, string PWD, string Disc)
        {
            int iSuccess = 0;



            string sQry = "insert into tblattender(AttenderName,Branch,Type,PWD,disc) values ('" + attendername + "','" + branchid + "','" + type + "','" + PWD + "','" + Disc + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            return iSuccess;

        }

        public int updateattendername(int attenderid, string attendername, string branch, string typename, string PWD, string disc)
        {
            int iSucess = 0;
            string sQry = "update tblattender set disc='" + disc + "',PWD='" + PWD + "', type='" + typename + "',AttenderName='" + attendername + "',branch='" + branch + "'  where attenderid='" + attenderid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        #endregion

        #region KOT SALES PROCESS STARTED
        public DataSet selecttablemaster()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblTableMaster where IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet selectTname(int userID, string Stablenaame)
        {
            DataSet ds = new DataSet();
            // string sQry = "select * from " + Stablenaame + " ";
            string sQry = "select distinct t.tablename as Tableno from TBLKOT_" + Stablenaame + " as a inner join tbltablemaster as t on t.tableid=a.tableno  where iedit=0";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int salescancelprint(string stablename)
        {
            int iSuccess = 0;
            int iSuccess1 = 0;

            string sQry = "	UPDATE S SET s.status='1' from tblsales_" + stablename + "  as s WHERE s.status='0'  " +
                " and NOT EXISTS (SELECT * FROM   tbltranssales_" + stablename + " as ts WHERE   ts.salesid=s.salesid )";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "update tblKOT_" + stablename + " set IEdit=1, IsKitchenComplete=1";
            iSuccess1 = dbObj.InlineExecuteNonQuery(sQry1);

            return iSuccess;
        }

        public int updatenewkotcancel(string kotid, string kotno, string stablename, string qty, string status, string SubCategoryID, string kotqty)
        {
            int iSuccess = 0;
            int isave = 0;

            string sQryy = "Update tblKOt_" + stablename + " set iEdit='" + status + "',Quantity='" + kotqty + "',ActualQuantity='" + kotqty + "' where kotid='" + kotid + "' and kotno='" + kotno + "'";
            iSuccess = dbObj.InlineExecuteNonQuery(sQryy);

            string sQry = "Update tblstock_" + stablename + " set Available_QTY=Available_QTY + '" + qty + "' where  SubCategoryID =" + SubCategoryID + " ";
            isave = dbObj.InlineExecuteNonQuery(sQry);

            string AuditQty = "Insert into TblAuditQty_" + stablename + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('Kot/Cancel','" + qty + "','" + kotid + "-" + kotno + "','+','" + SubCategoryID + "','0')";
            isave = dbObj.InlineExecuteNonQuery(AuditQty);

            return iSuccess;

        }

        public DataSet NHoldedKOT(int ID, string sTable, string Mode)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            sqry = "select * from tblkot_" + sTable + " b inner join tblcategoryuser c on b.subcategoryid=c.CategoryUserID "
                   + " inner join tbltablemaster as t on t.tableid=b.tableno  inner join tblstock_" + sTable + " d on b.SubCategoryID = d.SubCategoryID where  b.TableNo=" + ID + " and b.iEdit=0  and b.Quantity <> '0' order by Kotno ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet NSalesBillno(string sSalesTable, string Colunm)
        {

            DataSet ds = new DataSet();
            string sQry = "select isnull((MAX(KotNo)+1),1) as BillNo from tblkot_" + sSalesTable + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        public DataSet selectCAT(int userID)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategory a where IsActive='Yes'  order by category,islivekitchen desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetStockDetailsNeww(int iSubCatID, int UserID, string stable)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();

            //string sQry = " select a.rate as Rate,b.Available_QTY,* from tblcategoryuser a,tblStock_"+stable+" b where  a.CategoryUserID=b.SubCategoryID and   a.Itemid=" + iSubCatID + "  and isdelete=0 and b.available_qty>0 ";
            //ds = dbObj.InlineExecuteDataSet(sQry);  7 dec harish

            //  string sQry = " select  '0' as comboo,a.rate as Rate,* from tblcategoryuser a where     a.Itemid=" + iSubCatID + "  and isdelete=0 ";

            //string sQry = "select  '0' as comboo,a.Rate,a.gst,* from tblcategoryuser a where  a.categoryuserid=" + iSubCatID + " ";

            string sQry = "select '0' as comboo,a.Rate,a.gst,* from tblcategoryuser a,tblStock_" + stable + " b where  a.CategoryUserID=b.SubCategoryID and  a.categoryuserid=" + iSubCatID + "  and isdelete=0 ";

            ds = dbObj.InlineExecuteDataSet(sQry);

            return ds;
        }

        #region KOT PROCESS NEW
        //FOR HOLD PROCESS
        public int insertnewkot(string BillType, string TableNo, string KotDate, DataSet dss, string Total, string NetAmount, string stablename, string attender, int UserID, string StockOption)
        {
            int iSuccess = 0;
            int maxkotno = 0;
            int stkid = 0;
            decimal iAQty = 0;
            string sQry = "Select isnull(MAX(kotno+1),1) as kotno,isnull(MAX(billprint+1),1) as billprint from tblkot_" + stablename + "";
            DataSet ds = dbObj.InlineExecuteDataSet(sQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                string kotno = ds.Tables[0].Rows[0]["kotno"].ToString();
                maxkotno = Convert.ToInt32(ds.Tables[0].Rows[0]["Kotno"]);
                string billprint = ds.Tables[0].Rows[0]["billprint"].ToString();

                if (dss.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
                    {
                        string CategoryID = dss.Tables[0].Rows[i]["CategoryID"].ToString();
                        string SubCategoryID = dss.Tables[0].Rows[i]["CategoryUserID"].ToString();
                        string UnitPrice = dss.Tables[0].Rows[i]["Rate"].ToString();
                        string Amount = dss.Tables[0].Rows[i]["Amount"].ToString();
                        string IsPrint = dss.Tables[0].Rows[i]["Print"].ToString();
                        string qty = dss.Tables[0].Rows[i]["Qty"].ToString();
                        string gst = dss.Tables[0].Rows[i]["GST"].ToString();


                        string sQryy = "insert into tblKOT_" + stablename + "(Kotno,BillType,TableNo,KotDate,CategoryID,SubCategoryID,UnitPrice,Amount,IsPrint,Total,NetAmount,Quantity,BIllPrint,IEdit,IsCancel,ChangeQty,ActualQuantity,GST,Attender) " +
                            " values ('" + kotno + "','" + BillType + "','" + TableNo + "','" + KotDate + "','" + CategoryID + "'," + SubCategoryID + ",'" + UnitPrice + "','" + Amount + "','" + IsPrint + "','" + Total + "','" + NetAmount + "','" + qty + "','" + billprint + "','0','N','" + qty + "','" + qty + "','" + gst + "','" + attender + "')";
                        iSuccess = dbObj.InlineExecuteNonQuery(sQryy);

                        if (StockOption == "1")
                        {
                            DataSet dsStock = GetStockDetailsSubCatID(Convert.ToInt32(SubCategoryID), Convert.ToInt32(0), stablename);
                            if (dsStock.Tables[0].Rows.Count > 0)
                            {
                                iAQty = Convert.ToDecimal(dsStock.Tables[0].Rows[0]["Available_Qty"].ToString());
                                stkid = Convert.ToInt32(dsStock.Tables[0].Rows[0]["StockID"].ToString());

                            }
                            decimal iRemQty = iAQty - Convert.ToDecimal(qty);
                            iSuccess = updateSalesStock(iRemQty, Convert.ToInt32(CategoryID), Convert.ToInt32(SubCategoryID), KotDate, Convert.ToInt32(stkid), UserID, stablename, "-", "KOT Sales", qty, Convert.ToString(maxkotno), StockOption);
                        }
                    }
                }
            }
            return maxkotno;

        }


        public int Newupdategettnameval(string stable, string tableno)
        {
            int iSuccess = 0;
            string sqry = "  update  tblkot_" + stable + " set iedit=1  where TableNo=" + tableno.Trim() + " and iedit=0  ";
            iSuccess = dbObj.InlineExecuteNonQuery(sqry);
            return iSuccess;
        }

        public bool CheckSplitHoldedKOT(string ID, string sTable, string Mode)
        {
            bool IsComplete = false;
            DataSet ds = new DataSet();
            string sqry = "";

            sqry = "select * from tblkot_" + sTable + " b inner join tblcategoryuser c on b.subcategoryid=c.CategoryUserID "
                   + " inner join tbltablemaster as t on t.tableid=b.tableno where  b.TableNo=" + ID + " and b.iEdit=0  and b.Quantity <> '0' order by Kotno";

            ds = dbObj.InlineExecuteDataSet(sqry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                IsComplete = false;
            }
            else
            {
                IsComplete = true;
            }

            return IsComplete;
        }



        #endregion

        #endregion

        public DataSet GetAttender(string branch)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblattender where Branch='" + branch + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet GetAttenderotpcheck(string branch, string attednerid, string otp)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblattender where Branch='" + branch + "' and attenderid='" + attednerid + "' and PWD='" + otp + "' and isactive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet GetAttenderdisc(string branch, string disctype)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblattender where Branch='" + branch + "' and type in (" + disctype + ")";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet PrintKOtORder(int ID, string sTable, string Mode)
        {
            DataSet ds = new DataSet();
            string sqry = "";
            {
                sqry = "select c.category,d.definition,e.tablename, b.*  from tblKot_" + sTable + " b,tblcategory c,tblCategoryUser d,tbltablemaster e " +
                    " where e.tableid=b.tableno and d.categoryuserid=b.subcategoryid " +
                    " and c.categoryid=d.CategoryID and b.kotNo=" + ID + " and c.islivekitchen='1' ";
            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int updatenewkot(string kotno, string stablename)
        {
            int iSuccess = 0;
            int maxkotno = 0;

            string sQryy = "Update tblKOt_" + stablename + " set IsPrint='1' where kotno='" + kotno + "'";
            iSuccess = dbObj.InlineExecuteNonQuery(sQryy);

            return iSuccess;

        }

        #region CHECK MAIN DC CONNECTIVITY PENDING  //WANT TO WRITE


        #endregion

        #region INTER BRANCH STOCK TRANSFER
        public DataSet gridinterbranchsetting()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblinterBranchSetting where IsActive='Yes'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getupdateinterbranchsettingforid(string iCat)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblinterBranchSetting as ibs left join tbltransinterbranchsetting as tibs on tibs.interid=ibs.interid where ibs.interid ='" + iCat + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int deleteinterbranchsetting(string branchsettingno)
        {
            int iSucess = 0;
            string sQry = "update  tblinterBranchSetting set  IsActive='No'  where interid='" + branchsettingno + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public DataSet duplicatebranchintersettingcheck(string BranchId)
        {
            DataSet ds = new DataSet();
            string sqry = "select BranchId from tblinterBranchSetting where BranchId = '" + BranchId + "' and IsActive='Yes' order by BranchId desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int InsertinterBranchSetting(string branchid, string branchname)
        {
            int iSuccess = 0;
            string storecode = string.Empty;
            string prodcode = string.Empty;

            {
                // For Branch code
                string getbranchcode = "Select * from tblbranch where branchid='" + branchid + "'";
                DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
                if (getstorecode.Tables[0].Rows.Count > 0)
                {
                    storecode = getstorecode.Tables[0].Rows[0]["Branchcode"].ToString();

                }
                string sQry = "insert into tblinterBranchSetting( Branchid,BranchName,BranchCode,IsActive) " +
                    " values ('" + branchid + "','" + branchname + "','" + storecode + "','Yes')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;

        }

        public int Inserttransbranchsetting(string interbranchid, string branchname, string interid)
        {
            int iSuccess = 0;
            string storecode = string.Empty;
            string rawid = string.Empty;
            if (interid == "0")
            {

                string sqry = "select max(Interid) as Interid from tblinterBranchSetting ";
                DataSet ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    rawid = ds.Tables[0].Rows[0]["Interid"].ToString();
                }
            }
            else
            {
                rawid = interid;
            }
            string getbranchcode = "Select * from tblbranch where branchid='" + interbranchid + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                storecode = getstorecode.Tables[0].Rows[0]["Branchcode"].ToString();

            }
            string sQry = "insert into tbltransinterBranchSetting( Interid,InterBranchid,BranchName,branchcode) " +
                " values ('" + rawid + "','" + interbranchid + "','" + branchname + "','" + storecode + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            return iSuccess;

        }

        public int deleteinterbranch(string interid)
        {
            int iSucess = 0;
            string sQry = "delete from tbltransinterBranchSetting   where Interid='" + interid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }






        #endregion

        #region Inter Branch Request

        public DataSet interReqGridBranch(string ibranch, string sCode)
        {
            DataSet ds = new DataSet();

            //string sqry = "select   b.entrytime,b.RequestBy as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime,b.prodbranch " +
            //              " from tblworkers a,tblPurchaseRequest_" + sCode + " b where a.EmpID=b.VendorID and b.BranchID='" + ibranch + "' and b.IsAccepted=0   " +
            //              " order by b.entrytime desc  ";

            string sqry = "select   b.entrytime,b.RequestBy as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime,b.FromBranchCode,b.ToBranchCode " +
                          " from tblworkers a,tblinterbranchrequest_" + sCode + " b where a.EmpID=b.VendorID and b.BranchID='" + ibranch + "' and b.IsAccepted=0   " +
                          "  and convert(date,b.RequestDate) between dateadd(day,datediff(day,1,GETDATE()),0) and dateadd(day,datediff(day,0,GETDATE()),0)  " +
                          " order by b.entrytime desc  ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet interRequestDet(string iD, string sCode)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblinterbranchrequest_" + sCode + " a,tblTransinterbranchRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<=b.Order_Qty";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet checkinterrequestallowornot(string brnchcode)
        {
            DataSet ds = new DataSet();
            int qty = 0;
            // string sqry = "select * from tblCategory where isdelete=0  ";
            string sqry = "select * from tblinterbranchsetting Where BranchCode='" + brnchcode + "' and  IsActive='Yes'";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet gettobranch(string frombranchid)
        {
            DataSet ds = new DataSet();
            string sqry = "select tibs.* from tblinterBranchSetting as ibs inner join tbltransinterbranchsetting as tibs on tibs.interid=ibs.interid where ibs.branchid ='" + frombranchid + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet ReqNoInter(int iBranchID, string scode)
        {
            DataSet ds = new DataSet();
            // string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblPurchaseRequest_" + scode + " where BranchID=" + iBranchID + "";
            string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblinterbranchrequest_" + scode + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public int insert_interstockrequest(int VendorID, string RequestNO, DateTime RequestDate, string Status, int isCancel, string sBranch, int isaccept, int Branch, string Sname, string sCodeBnch, string sRequestentrytime, DateTime entrydatetime, string frombranchid, string tobranchid)
        {
            int iSucess = 0;
            string frombranchcode = "";
            string Tobranchcode = "";

            // For Branch code
            string getbranchcode = "Select * from tblbranch where branchid='" + frombranchid + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                frombranchcode = getstorecode.Tables[0].Rows[0]["Branchcode"].ToString();

            }

            // TO BRANCH ID
            // For Branch code
            string gettobranchcode = "Select * from tblbranch where branchid='" + tobranchid + "'";
            DataSet gettostorecode = dbObj.InlineExecuteDataSet(gettobranchcode);
            if (gettostorecode.Tables[0].Rows.Count > 0)
            {
                Tobranchcode = gettostorecode.Tables[0].Rows[0]["Branchcode"].ToString();

            }


            string sQry = "insert into tblinterbranchrequest_" + sCodeBnch + " (VendorID,RequestNO,RequestDate,Status,isCancel,Branch,IsAccepted,BranchID,RequestBy,RequestEntryTime,EntryTime,FromBranch,FromBranchCode,ToBranchid,ToBranchCode) " +
                " values('" + VendorID + "','" + RequestNO + "','" + Convert.ToDateTime(RequestDate).ToString("yyyy/MM/dd") + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "','" + sRequestentrytime + "','" + Convert.ToDateTime(entrydatetime).ToString("yyyy/MM/dd hh:mm") + "','" + frombranchid + "','" + frombranchcode + "','" + tobranchid + "','" + Tobranchcode + "')";
            // Local Server
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            // Main Server

            string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblInterBranchRequest ";
            //////  DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            DataSet ds = dbObj.InlineExecuteDataSetMain(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string prodrequestno = ds.Tables[0].Rows[0]["RequestNo"].ToString();

                string sQryprod = "insert into tblInterBranchRequest(VendorID,RequestNO,RequestDate,Status,isCancel,Branch,IsAccepted,BranchID,RequestBy,RequestEntryTime,BranchReqNo,FromBranch,FromBranchCode,ToBranchid,ToBranchCode) values('" + VendorID + "','" + prodrequestno + "','" + Convert.ToDateTime(RequestDate).ToString("yyyy/MM/dd") + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "','" + sRequestentrytime + "','" + RequestNO + "','" + frombranchid + "','" + frombranchcode + "','" + tobranchid + "','" + Tobranchcode + "')";

                iSucess = dbObj.InlineExecuteNonQueryMain(sQryprod);

                iSucess = Convert.ToInt32(prodrequestno);
            }

            return iSucess;
        }

        public int insertinterTransReqMain(string RequestID, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal Rec, int BranchID, int isTransfer, string sCodeBnch, DateTime date, string SCodeProd, int MainRequestID)
        {
            int iSucess = 0;
            string sQry = "insert into tblTransinterbranchrequest_" + sCodeBnch + " (RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate) values ('" + RequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            //MainServer
            string sqry = "select MAX(requestno) as RequestNo from tblinterbranchrequest";
            ////// DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            //////// DataSet ds = dbObj.InlineExecuteDataSetMain(sqry);
            ////// if (ds.Tables[0].Rows.Count > 0)
            {
                // string prodrequestno = ds.Tables[0].Rows[0]["RequestNo"].ToString();
                string sQryprod = "insert into tblTransinterbranchrequest(RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate) values ('" + MainRequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "')";
                iSucess = dbObj.InlineExecuteNonQueryMain(sQryprod);
            }

            return iSucess;
        }

        #endregion

        #region Accept Request By Another Branch

        public DataSet getrequestbranchfromanotherbranch(string branchcode, DateTime datee)
        {
            DataSet ds = new DataSet();


            string sqry = " select distinct br.RequestNO,br.tobranchcode,br.RequestDate,br.RequestEntryTime,br.Status,br.FromBranchCode,br.branchreqno,br.RequestBy from tblinterbranchrequest as br inner join tbltransinterbranchrequest as tbr on tbr.requestid=br.requestno where ToBranchCode='" + branchcode + "' " +
                "  and convert(date,br.RequestDate) between dateadd(day,datediff(day,1,GETDATE()),0) and dateadd(day,datediff(day,0,GETDATE()),0)   " +
                         " and  (isnull(tbr.Order_Qty,0)- ISNULL(tbr.Received_Qty,0)) >0 order by br.requestno desc";


            ds = dbObj.InlineExecuteDataSetMain(sqry);

            return ds;
        }

        public DataSet getrequestbranchfromanotherbranchdate(string branchcode, DateTime datee)
        {
            DataSet ds = new DataSet();


            string sqry = " select distinct br.RequestNO,br.tobranchcode,br.RequestDate,br.RequestEntryTime,br.Status,br.FromBranchCode,br.branchreqno,br.RequestBy from tblinterbranchrequest as br inner join tbltransinterbranchrequest as tbr on tbr.requestid=br.requestno where ToBranchCode='" + branchcode + "' " +
                "  and convert(date,br.RequestDate)='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'    " +
                         " and  (isnull(tbr.Order_Qty,0)- ISNULL(tbr.Received_Qty,0)) >0 order by br.requestno desc";


            ds = dbObj.InlineExecuteDataSetMain(sqry);

            return ds;
        }

        public DataSet interrequestdetails(string iD, string sCode, string branch, string reqno)
        {
            DataSet ds = new DataSet();

            // string sqry = "select * from tblPurchaseRequest_" + sCode + " a,tblTransPurchaseRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<b.Order_Qty";
            string sqry = "select * from tblinterbranchrequest a,tbltransinterbranchrequest b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid " +
            " and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.branchReqNo='" + iD + "' and a.requestno='" + reqno + "' and a.tobranchcode='" + sCode + "' ";
            //  " and b.Received_Qty<b.Order_Qty";
            ds = dbObj.InlineExecuteDataSetMain(sqry);

            return ds;
        }

        public DataSet interrequestdetailsforitem(string iD, string sCode, string branch, string reqno, string itemid, string frombranch)
        {
            DataSet ds = new DataSet();

            // string sqry = "select * from tblPurchaseRequest_" + sCode + " a,tblTransPurchaseRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<b.Order_Qty";
            string sqry = "select * from tblinterbranchrequest a,tbltransinterbranchrequest b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid " +
            " and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and  a.frombranchcode='" + frombranch + "' and a.branchReqNo='" + iD + "' and b.DescriptionId='" + itemid + "' and a.requestno='" + reqno + "' and a.tobranchcode='" + sCode + "' ";
            //  " and b.Received_Qty<b.Order_Qty";
            ds = dbObj.InlineExecuteDataSetMain(sqry);

            return ds;
        }

        public DataSet getdcnoforinterbranchrequest(string iBranchID, string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(convert(int,DC_NO))+1,1) as DC_No from tblintergoodtransfer";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        public DataSet interbranchReqGridDetails(int ReqNo, string StoreBranch, string Table, string BranchReqNo)
        {
            DataSet ds = new DataSet();
            string sQty = "select (isnull(Order_Qty,0)-isnull(Received_Qty,0)) as Order_Qty,* from tblinterbranchrequest p " +
                " inner join tbltransinterbranchrequest tp on tp.RequestID=p.RequestNO inner join tblcategory c on c.Categoryid=tp.CategoryId " +
                " inner join tblCategoryUser cu on cu.CategoryUserID=tp.DescriptionId  inner join tblUOM u on u.UOMID=cu.unit " +
                "  where RequestNo='" + ReqNo + "' and BranchReqNo='" + BranchReqNo + "' and ToBranchCode='" + StoreBranch + "' and (isnull(Order_Qty,0)-isnull(Received_Qty,0)) >0";
            ds = dbObj.InlineExecuteDataSetMain(sQty);
            return ds;
        }


        public DataSet getinterbranchreqstock(int iSubcategory, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblstock_" + stable + " where SubCategoryID=" + iSubcategory + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int InsertinterGoodsTrasnfer(string ToBranch, string DC_NO, string DC_Date, string RequestNO, string Status, int isCancel, string ProductionName, int trans, int Received, string sent, string Table, string branchreqno, string FromCode)
        {
            int isave = 0;

            string frombranchid = "";
            string Tobranchid = "";

            // For Branch code
            string getbranchcode = "Select * from tblbranch where Branchcode='" + ToBranch + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                Tobranchid = getstorecode.Tables[0].Rows[0]["branchid"].ToString();

            }

            // TO BRANCH ID
            // For Branch code
            string gettobranchcode = "Select * from tblbranch where Branchcode='" + FromCode + "'";
            DataSet gettostorecode = dbObj.InlineExecuteDataSet(gettobranchcode);
            if (gettostorecode.Tables[0].Rows.Count > 0)
            {
                frombranchid = gettostorecode.Tables[0].Rows[0]["branchid"].ToString();

            }


            string sQry = "insert into tblInterGoodTransfer(Branch,DC_NO,DC_Date,RequestNO,Status,isCancel,ProductionName,isTransfer,FromBranchID,IsReceived,SentBY,BranchReqNo,FromBranchCode,ToBranchId,ToBranchCode) " +
                " values('" + ToBranch + "','" + DC_NO + "','" + DC_Date + "','" + RequestNO + "','" + Status + "'," + isCancel + ",'" + ProductionName + "'," + trans + ",'" + frombranchid + "', " +
                " " + Received + ",'" + sent + "','" + branchreqno + "','" + FromCode + "','" + Tobranchid + "','" + ToBranch + "')";
            isave = dbObj.InlineExecuteNonQueryMain(sQry);

            return isave;
        }

        public int InsertinterTransGoodTrasnfer(string DC_NO, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal OrderQty, string expirydate, string iBranchID, int isStock, string Req, string Table, string Breqno)
        {
            int isave = 0;
            string sQry = "insert into tblTransInterGoodsTransfer(DC_No,CategoryId,DescriptionId,Received_Qty,Units,Order_Qty,ExpiryDate,BranchCode,isStocked,RequestNo,BranchReqNo) values('" + DC_NO + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + OrderQty + "','" + Convert.ToDateTime(expirydate).ToString("yyyy-MM-dd") + "','" + iBranchID + "'," + isStock + ",'" + Req + "','" + Breqno + "')";
            isave = dbObj.InlineExecuteNonQueryMain(sQry);


            return isave;
        }

        public DataSet CheckSameQtyininterRequest(string sCode, int ReqNo, int ItemId)
        {
            DataSet ds = new DataSet();
            string sqry = " select * from tbltransinterbranchrequest where RequestID=" + ReqNo + " and Order_Qty>0 and DescriptionId=" + ItemId + "";
            ds = dbObj.InlineExecuteDataSetMain(sqry);

            return ds;
        }

        public int UpdateintertransferQty(int ID, int idescID, decimal dRecQty, string sCode)
        {
            int isave = 0;
            string sQry = "update tbltransinterbranchrequest set Received_Qty=Received_Qty+'" + dRecQty + "' where  RequestID=" + ID + " and DescriptionId=" + idescID + " ";
            isave = dbObj.InlineExecuteNonQueryMain(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int Updateintertransfer_PS1(int DescpID, double iQty, string Table, string dc_NO, string categoryid, string userid, string user, string tobrnach)
        {
            int isave = 0;
            string sQry = "update tblstock_" + Table + " set Available_QTY=Available_QTY-'" + iQty + "' where SubCategoryID=" + DescpID + "  ";
            isave = dbObj.InlineExecuteNonQuery(sQry);

            string AuditQty = "Insert into TblAuditQty_" + Table + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('Inter Stock TRansfer To Branch','" + iQty + "','" + dc_NO + "','-','" + DescpID + "','0')";
            int iupdate = dbObj.InlineExecuteNonQuery(AuditQty);

            string descr = "Against Inter Branch Trasnfer" + '-' + tobrnach;
            DateTime now = DateTime.Now;

            string GRN = "insert into tblGRNmp (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,Name,DayGRNmp,GRNTimemp,Signa,GRNTYPE) values (" + categoryid + "," + DescpID + "," + iQty + ",getdate()," + userid + ",'0','" + user + "','0','" + now.ToString("HH:mm:ss") + "','-','" + descr + "')";

            isave = dbObj.InlineExecuteNonQuery(GRN);

            return isave;
        }

        public DataSet GetinterDCNONew(string sCode)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct s.DC_NO,s.RequestNO,s.dc_date,s.tobranchcode,s.Status  from tblInterGoodTransfer s " +
                " inner join  tblTransInterGoodsTransfer ts on s.DC_NO=ts.DC_NO where  s.FromBranchCode='" + sCode + "' and isStocked=0";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        public DataSet interGoodReceivedNew(string sDCNO, string BranchCode)
        {
            DataSet ds = new DataSet();
            string sqry = "  select Distinct DC_NO,RequestNO,BranchReqNo,Dc_Date,Frombranchcode,Tobranchcode from tblInterGoodTransfer " +
                " where DC_No='" + sDCNO + "'    and FromBranchCode='" + BranchCode + "' ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        public DataSet ineterGoodReceivedListNew(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            string sqry = "select *,case isstocked when 1 then 'Received' else 'Pending' end as stt   from tblTransInterGoodsTransfer b,tblcategory c, " +
                " tblCategoryUser d  where  b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and b.BranchCode='" + BranchID + "' and b.DC_No=" + sDCNO + " ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        public DataSet InterGoodReceived(string sDCNO, string BranchID, string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "select  d.printitem,c.Categoryid,d.CategoryUserID,u.UOM,c.Category,d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty " +
                " from tblInterGoodTransfer a,tblTransInterGoodsTransfer b,tblcategory c,tblCategoryUser d,tbluom u  " +
                " where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and u.UOMID=d.Unit and a.FromBranchCode='" + BranchID + "' " +
                " and a.DC_No='" + sDCNO + "' and b.isStocked='0' ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }



        public int InterInserRecQty(string stable, string ProRequestNO, string UserID, string Branchreqno, string Dc_NO, string Remarks)
        {
            int iSuccess = 0;
            string sQry = "insert into tblInterGoodReceived_" + stable + "(RequestNO, BranchCode,UserID,BranchREqNo,DC_NO,Remarks) values ('" + ProRequestNO + "','" + stable + "','" + UserID + "','" + Branchreqno + "','" + Dc_NO + "','" + Remarks + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string sQry1 = " select max(RecID) as RecID from tblInterGoodReceived_" + stable + " ";
            ds = dbObj.InlineExecuteDataSet(sQry1);

            iSuccess = Convert.ToInt32(ds.Tables[0].Rows[0]["RecID"].ToString());

            return iSuccess;
        }

        public DataSet InterUpdatePurchaseStokNew(double iAvailable, int iSubcategory, int iBranch, string sDate, string stable, int stockid, string recno)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblStock_" + stable + " set Available_QTY=Available_QTY+" + iAvailable + " where stockid=" + stockid + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('SCR-Inter Goods Received Note','" + iAvailable + "','" + recno + "','+','" + iSubcategory + "','" + stockid + "')";
            int iupdate = dbObj.InlineExecuteNonQuery(AuditQty);

            return ds;

        }

        public DataSet InterUpdatereqPurchaseStock(double Received_Qty, string stable, string ReqNo, int DescriptionId)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblTransinterbranchrequest_" + stable + " set Received_Qty=isnull(Received_Qty,0)+" + Received_Qty + " where DescriptionId=" + DescriptionId + " and RequestID='" + ReqNo + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int InterInserDirectGrn(string stable, int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, double Dealer, double Press, double dPurchaseRate, DateTime Expirydate, int ToolID, string refid)
        {
            int iSuccess = 0;
            string sQry = "insert into tblstock_" + stable + "(UserID, CategoryID,SubCategoryID,Quantity,Available_Qty, MinQty,DealerUnitPrice,PressUnitPrice,PurchaseRate,Expirydate,ToolID) values ('" + UserID + "','" + iCategoryID + "','" + iSubCategoryID + "','" + iQty + "'," + iAQty + ",'" + iMinQty + "','" + Dealer + "','" + Press + "','" + dPurchaseRate + "','" + Expirydate.ToString("yyyy/MM/dd") + "'," + ToolID + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('SCR-InterGoodsReceived','" + iAQty + "','" + refid + "','+','" + iSubCategoryID + "','0')";
            iSuccess = dbObj.InlineExecuteNonQuery(AuditQty);
            return iSuccess;
        }

        public DataSet interUpdatereqPurchaseStock(double Received_Qty, string stable, string ReqNo, int DescriptionId)
        {
            DataSet ds = new DataSet();
            string sqry = "update tbltransinterbranchrequest_" + stable + " set Received_Qty=isnull(Received_Qty,0)+" + Received_Qty + " where DescriptionId=" + DescriptionId + " and RequestID='" + ReqNo + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int InterInsertransRecQty(string stable, int RecID, int CategoryId, int DescriptionId, double Order_Qty, double Received_Qty, string DCNO, double dmgqty, double missqty, string userrid, string BREQNO, string TOCodee, string username)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltransinterGoodsReceived_" + stable + "(RecID, CategoryId,DescriptionId,Order_Qty,Received_Qty, RequestNo,BranchCode,Damage_Qty,Missing_Qty) values ('" + RecID + "','" + CategoryId + "','" + DescriptionId + "','" + Order_Qty + "'," + Received_Qty + ",'" + DCNO + "','" + stable + "'," + dmgqty + "," + missqty + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sqry = "select isnull(max(DayGRN) + 1,1) as DayGRN from tblgrn where convert(date,Date)=convert(date,GETDATE())";
            DataSet ds = dbObj.InlineExecuteDataSet(sqry);

            string time = System.DateTime.Now.ToString("hh:mm tt");
            string date = DateTime.Now.ToString("MM/dd/yyyy");

            // GET BRANCH CODE FOR BRNACHTYPE
            string fromowntype = "";


            // For Branch code
            string getbranchcode = "Select * from tblbranch where Branchcode='" + TOCodee + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                fromowntype = getstorecode.Tables[0].Rows[0]["BranchOwnType"].ToString();

            }


            string GRN = "insert into tblGrn (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,Name,DayGRN,GRNTime,Type,RequestNo,Dc_No,FromBranchCode,FromBranchOwnType) values (" + CategoryId + "," + DescriptionId + "," + Received_Qty + ",'" + date + "','" + userrid + "','0','" + username + "'," + ds.Tables[0].Rows[0]["DayGRN"] + ",'" + time + "','Against Inter Branch Request','" + BREQNO + "','" + DCNO + "','" + TOCodee + "','" + fromowntype + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(GRN);


            return iSuccess;
        }


        public int InterupdateRecQty(string stable, string DC_No, int DescriptionId, double dmgqty, double missqty, string remarks)
        {
            int iSuccess = 0;

            string sQry = "update tbltransintergoodstransfer set isStocked=1,Damage_Qty=" + dmgqty + ",Missing_Qty=" + missqty + " where DC_No=" + DC_No + " and DescriptionId=" + DescriptionId + " ";
            iSuccess = dbObj.InlineExecuteNonQueryMain(sQry);

            string sQry1 = "update tblintergoodtransfer set status='" + remarks + "' where DC_No=" + DC_No + " ";
            iSuccess = dbObj.InlineExecuteNonQueryMain(sQry1);


            return iSuccess;
        }
        #endregion

        #region SYNC. FOR CATEGORY AND ITEM

        public DataSet getcategorygetdatafromsever(string server)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblcategory";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }


        public DataSet getUOMdatafromsever(string server)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tbluom";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet getbranchdatafromsever(string server)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblbranch";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet getsalestypeliveserver(string server)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblsalestype";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }


        public DataSet getbranchsettingdatafromsever(string server)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblbranchsetting";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet getInterbranchsettingdatafromsever(string server)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblinterbranchsetting";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }


        public DataSet gettransInterbranchsettingdatafromsever(string server)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tbltransinterbranchsetting";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet getTAXdatafromsever(string server)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tbltax";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }





        public DataSet getcategorygetdatafromlocal(string catid)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblcategory where Catid='" + catid + "'";
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;
        }

        public int syncupdatecategory(string Categoryid, string Category, string CategoryCode, string IsActive, string IsLiveKitchen, string ProductionType, string Request, string poduction, string PrintCategory, string ManualGrn, string cattype)
        {
            int i = 0;

            string sqry = "Update tblcategory set Category='" + Category + "',CategoryCode='" + CategoryCode + "',IsActive='" + IsActive + "',IsLiveKitchen='" + IsLiveKitchen + "',ProductionType='" + ProductionType + "',Request='" + Request + "',poduction='" + poduction + "',PrintCategory='" + PrintCategory + "',ManualGrn='" + ManualGrn + "',Cattype='" + cattype + "' where Categoryid='" + Categoryid + "'";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public int syncinsertcategory(int catid, string Categoryid, string Category, string CategoryCode, string IsActive, string IsLiveKitchen, string ProductionType, string Request, string poduction, string PrintCategory, string ManualGrn, string cattype)
        {
            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblcategory] ON " +
                //" Insert into tblcategory Categoryid='" + Categoryid + "',Category='" + Category + "',CategoryCode='" + CategoryCode + "',IsActive='" + IsActive + "',IsLiveKitchen='" + IsLiveKitchen + "',ProductionType='" + ProductionType + "',Request='" + Request + "',poduction='" + poduction + "',PrintCategory='" + PrintCategory + "',ManualGrn='" + ManualGrn + "' where catid='" + catid + "'";
                " INSERT [dbo].[tblcategory] ([catid], [Categoryid], [Category], [CategoryCode], [IsActive], [IsLiveKitchen], [ProductionType], [Request], [poduction], " +
            " [PrintCategory], [ManualGrn],[Cattype]) VALUES (" + catid + ", " + Categoryid + ", '" + Category + "', '" + CategoryCode + "', '" + IsActive + "', '" + IsLiveKitchen + "', '" + ProductionType + "', " + Request + ", " + poduction + ", '" + PrintCategory + "', " + ManualGrn + ",'" + cattype + "') " +
            " SET IDENTITY_INSERT [dbo].[tblcategory] OFF ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }


        public int syncinsertSales(int SalesID, string StableNmae, string UserID, string BillNo, string BillDate, string CustomerID, string Total, string Tax, string NetAmount, string Discount, string iEdit,
            string ContactTypeID, string Advance, string OrderNo, string Messege, string DeliveryDate, string DeilveryTime, string OrderTakenBy, string Notes, string iPayMode, string cancelstatus,
            string cashpaid, string Balance, string Reference, string IsTransfer, string Provider, string Approved, string Attender, string Biller, string cashier, string Reason,
            string Canceltine, string CGST, string SGST, string STotal, string IsLiveTransfer, string IsAccountsBill, string Roundoff, string Saletypemargin, string GstMargin, string Gateway,
            string salestype, string IsNormal, string SalesOrder, string KOTTbleNo, string Isprint, string discper, string ApprovedId, string OnlineAmount, string CustomerName, string MobileNo, string OldCustomerId)
        {

            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblsales_" + StableNmae + "] ON " +

                " INSERT [dbo].[tblsales_" + StableNmae + "] (Salesid,  UserID, BillNo, BillDate, CustomerID, Total, Tax, NetAmount, Discount, iEdit, ContactTypeID, Advance, OrderNo, Messege, DeliveryDate, DeilveryTime, OrderTakenBy, Notes, iPayMode, cancelstatus, cashpaid, Balance, Reference, IsTransfer, Provider, Approved, Attender, Biller, cashier, Reason, Canceltine, CGST, SGST, STotal, IsLiveTransfer, IsAccountsBill, Roundoff, Saletypemargin, GstMargin, Gateway, salestype, IsNormal, SalesOrder, KOTTbleNo, Isprint, discper, ApprovedId, OnlineAmount,CustomerName,MobileNo,OldCustomerId) VALUES " +
                "(" + SalesID + ", '" + UserID + "', '" + BillNo + "', '" + (BillDate) + "', '" + CustomerID + "', '" + Total + "', '" + Tax + "', '" + NetAmount + "', '" + Discount + "', '" + iEdit + "','" + ContactTypeID + "','" +
                Advance + "','" + OrderNo + "','" + Messege + "','" + (DeliveryDate) + "','" + DeilveryTime + "','" + OrderTakenBy + "','" + Notes + "','" + iPayMode + "','" + cancelstatus + "','" +
                cashpaid + "','" + Balance + "','" + Reference + "','" + IsTransfer + "','" + Provider + "','" + Approved + "','" + Attender + "','" + Biller + "','" + cashier + "','" +
                Reason + "','" + Canceltine + "','" + CGST + "','" + SGST + "','" + STotal + "','" + IsLiveTransfer + "','" + IsAccountsBill + "','" + Roundoff + "','" + Saletypemargin + "','" +
                GstMargin + "','" + Gateway + "','" + salestype + "','" + IsNormal + "','" + SalesOrder + "','" + KOTTbleNo + "','" + Isprint + "','" + discper + "','" + ApprovedId + "','" + OnlineAmount + "','" +
                CustomerName + "','" + MobileNo + "','" + OldCustomerId + "')" +
            " SET IDENTITY_INSERT [dbo].[tblsales_" + StableNmae + "] OFF ";
            i = dbObj.InlineExecuteNonQueryMain(sqry);


            string iupdate = "Update tblsales_" + StableNmae + " set Istransfer='1' where salesid='" + SalesID + "'";
            i = dbObj.InlineExecuteNonQuery(iupdate);

            return i;
        }


        public int syncinsertTransSales(string StableNmae, int TransSalesID, string SalesID, string CategoryID, string UnitPrice, string Amount, string SubCategoryID, string Disc, string Quantity, string StockId, string IsTransfer, string Tax, string Margin, string IsNormal, string Kotid, string Salesuniqueid, string SalesEntryDate, string Shwqty, string Cattype, string Iscombo, string Cqty)
        {

            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblTranssales_" + StableNmae + "] ON " +

                " INSERT [dbo].[tblTranssales_" + StableNmae + "] (TransSalesID,SalesID,CategoryID,UnitPrice,Amount,SubCategoryID,Disc,Quantity,StockId,IsTransfer,Tax,Margin,IsNormal,Kotid,Salesuniqueid,SalesEntryDate,Shwqty,Cattype,Iscombo,Cqty) VALUES " +
                "(" + TransSalesID + ", '" + SalesID + "', '" + CategoryID + "', '" + UnitPrice + "', '" + Amount + "', '" + SubCategoryID + "', '" + Disc + "', '" + Quantity + "', '" + StockId + "', '" + IsTransfer + "','" + Tax + "','" +
                Margin + "','" + IsNormal + "','" + Kotid + "','" + Salesuniqueid + "','" + SalesEntryDate + "','" + Shwqty + "','" + Cattype + "','" + Iscombo + "','" + Cqty + "')" +
            " SET IDENTITY_INSERT [dbo].[tblTranssales_" + StableNmae + "] OFF ";
            i = dbObj.InlineExecuteNonQueryMain(sqry);

            string iupdate = "Update tblTranssales_" + StableNmae + " set Istransfer='1' where TransSalesID='" + TransSalesID + "'";
            i = dbObj.InlineExecuteNonQuery(iupdate);


            return i;
        }


        public int syncinsertOrder(string StableNmae, int OrderID, string BillNo, string OrderNo, string OrderDate, string DeliveryDate, string Total, string NetAmount, string AdvanceDate,
            string Advance, string CustomerID, string ContactID, string Messege, string OrderTakenBy, string DeliveryTime, string isCancel, string ipaymode, string BookNo, string IsTransfer,
            string PayType, string Place, string Paybill, string Cancelled, string CGST, string SGST, string STotal, string OrderTime, string CancelDate, string OrderType, string PickUpLocation,
            string DeliveryCharge, string BalanceDate, string Balance, string BalancePaid, string Ceremonies, string Status, string DiscountPer, string DiscountAmount, string ActualAdvanceDate,
            string RefundAmount, string IsNormal, string DeliveryStatus, string DeliveryBy, string PendingMsg, string PendingEntryBY, string DiscEmp, string FullBookNo, string Pbranch,
            string Issync, string OnlineSync, string onlinecomment, string Onlinesyncdate, string CustomerName, string MobileNo, string OldCustomerId)
        {

            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblOrder_" + StableNmae + "] ON " +

                " INSERT [dbo].[tblOrder_" + StableNmae + "](OrderID, BillNo, OrderNo, OrderDate, DeliveryDate, Total, NetAmount, AdvanceDate, Advance, CustomerID, ContactID, Messege, OrderTakenBy, DeliveryTime, isCancel, ipaymode, BookNo, IsTransfer, PayType, Place, Paybill, Cancelled, CGST, SGST, STotal, OrderTime, CancelDate, OrderType, PickUpLocation, DeliveryCharge, BalanceDate, Balance, BalancePaid, Ceremonies, Status, DiscountPer, DiscountAmount, ActualAdvanceDate, RefundAmount, IsNormal, DeliveryStatus, DeliveryBy, PendingMsg, PendingEntryBY, DiscEmp, FullBookNo, Pbranch, Issync, OnlineSync, onlinecomment, Onlinesyncdate,CustomerName,MobileNo,OldCustomerId) VALUES " +
                "(" + OrderID + ", '" + BillNo + "', '" + OrderNo + "', '" + OrderDate + "', '" + DeliveryDate + "', '" + Total + "', '" + NetAmount + "', '" + AdvanceDate + "', '" + Advance + "', '" + CustomerID + "','" + ContactID + "','" +
                Messege + "','" + OrderTakenBy + "','" + DeliveryTime + "','" + isCancel + "','" + ipaymode + "','" + BookNo + "','" + IsTransfer + "','" + PayType + "','" + Place + "','" +
                 Paybill + "', '" + Cancelled + "', '" + CGST + "', '" + SGST + "', '" + STotal + "', '" + OrderTime + "', '" + CancelDate + "', '" + OrderType + "', '" + PickUpLocation + "', '" +
                 DeliveryCharge + "', '" + BalanceDate + "', '" + Balance + "', '" + BalancePaid + "', '" + Ceremonies + "', '" + Status + "', '" + DiscountPer + "', '" + DiscountAmount + "', '" + ActualAdvanceDate + "', '" +
                 RefundAmount + "','" + IsNormal + "','" +
                 DeliveryStatus + "', '" + DeliveryBy + "', '" + PendingMsg + "', '" + PendingEntryBY + "', '" + DiscEmp + "', '" + FullBookNo + "', '" + Pbranch + "', '" + Issync + "', '" + OnlineSync + "', '" +
                 onlinecomment + "','" + Onlinesyncdate + "','" + CustomerName + "','" + MobileNo + "','" + OldCustomerId + "')" +
            " SET IDENTITY_INSERT [dbo].[tblOrder_" + StableNmae + "] OFF ";

            i = dbObj.InlineExecuteNonQueryMain(sqry);

            string iupdate = "Update tblOrder_" + StableNmae + " set Istransfer='1' where OrderID='" + OrderID + "'";
            i = dbObj.InlineExecuteNonQuery(iupdate);


            return i;
        }


        public int syncinsertTransOrder(string StableNmae, int TransID, string BillNo, string CategoryID, string SubcategoryID, string Qty, string Rate, string Amount, string StockId, string IsTransfer, string Gst, string IsNormal, string Disc, string modelno, string Modelimgpath, string OnlineSync, string onlinecomment, string Onlinesyncdate)
        {

            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblTransOrder_" + StableNmae + "] ON " +

                " INSERT [dbo].[tblTransOrder_" + StableNmae + "](TransID,BillNo,CategoryID,SubcategoryID,Qty,Rate,Amount,StockId,IsTransfer,Gst,IsNormal,Disc,modelno,Modelimgpath,OnlineSync,onlinecomment,Onlinesyncdate) VALUES " +
                "(" + TransID + ", '" + BillNo + "', '" + CategoryID + "', '" + SubcategoryID + "', '" + Qty + "', '" + Rate + "', '" + Amount + "', '" + StockId + "', '" + IsTransfer + "', '" + Gst + "','" + IsNormal + "','" +
                Disc + "','" + modelno + "','" + Modelimgpath + "','" + OnlineSync + "','" + onlinecomment + "','" + Onlinesyncdate + "')" +
            " SET IDENTITY_INSERT [dbo].[tblTransOrder_" + StableNmae + "] OFF ";

            i = dbObj.InlineExecuteNonQueryMain(sqry);

            string iupdate = "Update tblTransOrder_" + StableNmae + " set Istransfer='1' where TransID='" + TransID + "'";
            i = dbObj.InlineExecuteNonQuery(iupdate);


            return i;
        }


        public int syncinsertTransOrderAmount(string StableNmae, int TransorderId, string BIllno, string OrderNO, string Amount, string Type, string BookNo, string Billdate, string PayMode, string EntryBy, string discper, string discamount)
        {

            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblTransOrderAmount_" + StableNmae + "] ON " +

                " INSERT [dbo].[tblTransOrderAmount_" + StableNmae + "](TransorderId,BIllno,OrderNO,Amount,Type,BookNo,Billdate,PayMode,EntryBy,Discamount,DiscPer) VALUES " +
                "(" + TransorderId + ", '" + BIllno + "', '" + OrderNO + "', '" + Amount + "', '" + Type + "', '" + BookNo + "', '" + Billdate + "', '" + PayMode + "', '" + EntryBy + "','" + discamount + "','" + discper + "')" +
            " SET IDENTITY_INSERT [dbo].[tblTransOrderAmount_" + StableNmae + "] OFF ";

            i = dbObj.InlineExecuteNonQueryMain(sqry);

            string iupdate = "Update tblTransOrderAmount_" + StableNmae + " set Istransfer='1' where TransorderId='" + TransorderId + "'";
            i = dbObj.InlineExecuteNonQuery(iupdate);


            return i;
        }


        public int syncinsertGrn(string sTableName, int ID, string CategoryID, string CategoryUserID, string GRN_Qty, string Date, string UserID, string GRNNo, string Name, string DayGRN, string GRNTime, string Type, string RequestNo, string Dc_No, string FromBranchCode, string FromBranchOwnType, string IsTransfer)
        {

            int i = 0;
            string sqry =

                " INSERT [dbo].[tblGrn](ID,CategoryID,CategoryUserID,GRN_Qty,Date,UserID,GRNNo,Name,DayGRN,GRNTime,Type,RequestNo,Dc_No,FromBranchCode,FromBranchOwnType,IsTransfer,BranchCode) VALUES " +
                "(" + ID + ", '" + CategoryID + "', '" + CategoryUserID + "', '" + GRN_Qty + "', '" + Date + "', '" + UserID + "', '" + GRNNo + "', '" + Name + "', '" + DayGRN + "','" +
                      GRNTime + "', '" + Type + "', '" + RequestNo + "', '" + Dc_No + "', '" + FromBranchCode + "', '" + FromBranchOwnType + "', '" + IsTransfer + "','" + sTableName + "')";



            i = dbObj.InlineExecuteNonQueryMain(sqry);


            string iupdate = "Update tblGrn set Istransfer='1' where Id='" + ID + "'";
            i = dbObj.InlineExecuteNonQuery(iupdate);


            return i;
        }



        public int syncinsertReturn(string sTableName, int RetID, string UserID, string RetNo, string RetDate, string CustomerID, string Total, string Tax,
            string NetAmount, string Discount, string iEdit, string Advance, string iPayMode, string cancelstatus, string Name, string Reasonsid, string SaveDateTime, string Notes)
        {

            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblReturn_" + sTableName + "] ON " +

                " INSERT [dbo].[tblReturn_" + sTableName + "](RetID, UserID, RetNo, RetDate, CustomerID, Total, Tax, NetAmount, Discount, iEdit, Advance, iPayMode, cancelstatus, Name, Reasonsid, SaveDateTime, Notes) VALUES (" +
                +RetID + ", '" + UserID + "', '" + RetNo + "', '" + RetDate + "', '" + CustomerID + "', '" + Total + "', '" + Tax + "', '" + NetAmount + "', '" + Discount + "','" +
                     iEdit + "', '" + Advance + "', '" + iPayMode + "', '" + cancelstatus + "', '" + Name + "', '" + Reasonsid + "', '" + SaveDateTime + "', '" + Notes + "')" +

            " SET IDENTITY_INSERT [dbo].[tblReturn_" + sTableName + "] OFF ";

            i = dbObj.InlineExecuteNonQueryMain(sqry);

            string iupdate = "Update tblReturn_" + sTableName + " set Istransfer='1' where RetID='" + RetID + "'";
            i = dbObj.InlineExecuteNonQuery(iupdate);


            return i;
        }


        public int syncinsertTransReturn(string sTableName, int TransRetID, string RetNo, string CategoryID, string UnitPrice, string Amount, string SubCategoryID, string Disc, string Quantity, string StockId, string Istransfer)
        {

            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblTransReturn_" + sTableName + "] ON " +

                " INSERT [dbo].[tblTransReturn_" + sTableName + "] (TransRetID,RetNo,CategoryID,UnitPrice,Amount,SubCategoryID,Disc,Quantity,StockId,Istransfer) VALUES (" +
                +TransRetID + ", '" + RetNo + "', '" + CategoryID + "', '" + UnitPrice + "', '" + Amount + "', '" + SubCategoryID + "', '" + Disc + "', '" + Quantity + "', '" + StockId + "','" + Istransfer + "')" +
            " SET IDENTITY_INSERT [dbo].[tblTransReturn_" + sTableName + "] OFF ";

            i = dbObj.InlineExecuteNonQueryMain(sqry);

            string iupdate = "Update tblTransReturn_" + sTableName + " set Istransfer='1' where TransRetID='" + TransRetID + "'";
            i = dbObj.InlineExecuteNonQuery(iupdate);


            return i;
        }


        public int syncinsertPayment(string sTableName, int PaymentEntryID, string Date, string LedgerID, string Description, string Amount, string inSales, string orderNo, string PayMode)
        {

            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblPaymentEntry_" + sTableName + "] ON " +

                " INSERT [dbo].[tblPaymentEntry_" + sTableName + "](PaymentEntryID, Date, LedgerID, Description, Amount, inSales, orderNo, PayMode) VALUES " +
                "(" + PaymentEntryID + ", '" + Date + "', '" + LedgerID + "', '" + Description + "', '" + Amount + "', '" + inSales + "', '" + orderNo + "', '" + PayMode + "')" +
            " SET IDENTITY_INSERT [dbo].[tblPaymentEntry_" + sTableName + "] OFF ";

            i = dbObj.InlineExecuteNonQueryMain(sqry);

            string iupdate = "Update tblPaymentEntry_" + sTableName + " set Istransfer='1' where PaymentEntryID='" + PaymentEntryID + "'";
            i = dbObj.InlineExecuteNonQuery(iupdate);


            return i;
        }


        public int syncinsertuom(int uomid, string UOM, string Isactive)
        {
            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblUOM] ON " +
                //" Insert into tblcategory Categoryid='" + Categoryid + "',Category='" + Category + "',CategoryCode='" + CategoryCode + "',IsActive='" + IsActive + "',IsLiveKitchen='" + IsLiveKitchen + "',ProductionType='" + ProductionType + "',Request='" + Request + "',poduction='" + poduction + "',PrintCategory='" + PrintCategory + "',ManualGrn='" + ManualGrn + "' where catid='" + catid + "'";
                " INSERT [dbo].[tbluom] ([uomid], [UOM], [IsActive]) VALUES (" + uomid + ", '" + UOM + "', '" + Isactive + "') " +
            " SET IDENTITY_INSERT [dbo].[tblUOM] OFF ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        // INSERT TAX
        public int syncinserttax(int taxid, string taxname, string Isactive)
        {
            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblTAX] ON " +
                //" Insert into tblcategory Categoryid='" + Categoryid + "',Category='" + Category + "',CategoryCode='" + CategoryCode + "',IsActive='" + IsActive + "',IsLiveKitchen='" + IsLiveKitchen + "',ProductionType='" + ProductionType + "',Request='" + Request + "',poduction='" + poduction + "',PrintCategory='" + PrintCategory + "',ManualGrn='" + ManualGrn + "' where catid='" + catid + "'";
                " INSERT [dbo].[tbltax] ([taxid], [taxname], [IsActive]) VALUES (" + taxid + ", '" + taxname + "', '" + Isactive + "') " +
            " SET IDENTITY_INSERT [dbo].[tbltax] OFF ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        // ITEM CHANGES

        public DataSet getitemgetdatafromsever(string server)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblcategoryuser";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet getsalesgetdatafromLocal(string server, string Stable)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            // getcat = "Select * from tblsales_"+Stable+" where Istransfer='0' ";

            getcat = "Select a.*,b.CustomerName,b.MobileNo from tblsales_" + Stable + " as a inner join tblCustomer as b on  b.CustomerID=a.CustomerID where Istransfer='0'";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet getOrdergetdatafromLocal(string server, string Stable)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            //  getcat = "Select * from tblOrder_" + Stable + " where Istransfer='0' ";

            getcat = "Select a.*,b.CustomerName,b.MobileNo from tblOrder_" + Stable + " as a inner join tblCustomer as b on  b.CustomerID=a.CustomerID where Istransfer='0'";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet getPaymentgetdatafromLocal(string server, string Stable)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblPaymentEntry_" + Stable + " where Istransfer='0' ";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }


        public DataSet getGRNgetdatafromLocal(string server, string Stable)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblGRN where Istransfer='0' ";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet geReturngetdatafromLocal(string server, string Stable)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblreturn_" + Stable + " where Istransfer='0' ";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }


        public DataSet geTransReturngetdatafromLocal(string server, string Stable)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblTransreturn_" + Stable + " where Istransfer='0' ";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet getTransOrdergetdatafromLocal(string server, string Stable)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblTransOrder_" + Stable + " where Istransfer='0' ";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet getTransOrderAmountgetdatafromLocal(string server, string Stable)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblTransOrderAmount_" + Stable + " where Istransfer='0' ";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }



        public DataSet getTranssalesgetdatafromLocal(string server, string Stable)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblTranssales_" + Stable + " where Istransfer='0' ";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }


        // Getting Store to Shop Item 
        public DataSet getstoretoshopitemfromserver(string server)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblStoreSetting";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet getitemgetdatafromlocal(string ItemID)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblcategoryuser where ItemID='" + ItemID + "'";
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;
        }

        public DataSet getstoretoshopitemgetdatafromlocal(string ItemID)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblStoreSetting where StoreSettingId='" + ItemID + "'";
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;
        }

        public int syncupdateitem(int ItemID, string CategoryID, string Definition, string IsDelete, string Serial_No, string Serial, string Size, string isChecked, string Tax, string Rate, string CategoryUserID, string GST, string TaxVal, string unit, string empcode, string MinimumStock, string DisplayOnline, string ImageUpload, string IsActive, string hsncode, string printname, string foodtype)
        {
            int i = 0;

            string sqry = "Update tblcategoryuser set FoodType='" + foodtype + "',CategoryID='" + CategoryID + "',Definition='" + Definition + "',IsDelete='" + IsDelete + "',Serial_No='" + Serial_No + "',Serial='" + Serial + "',Size='" + Size + "',isChecked='" + isChecked + "',Tax='" + Tax + "',Rate='" + Rate + "',CategoryUserID='" + CategoryUserID + "',GST='" + GST + "',TaxVal='" + TaxVal + "',unit='" + unit + "',empcode='" + empcode + "',MinimumStock='" + MinimumStock + "',DisplayOnline='" + DisplayOnline + "',ImageUpload='" + ImageUpload + "',IsActive='" + IsActive + "',HSNCode='" + hsncode + "',Printitem='" + printname + "' where ItemID='" + ItemID + "'";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public int syncinsertitem(int ItemID, string CategoryID, string Definition, string IsDelete, string Serial_No, string Serial, string Size, string isChecked, string Tax, string Rate, string CategoryUserID, string GST, string TaxVal, string unit, string empcode, string MinimumStock, string DisplayOnline, string ImageUpload, string IsActive, string hsncode, string Printname, string foodtype, string Barcode, string Mrp, string Pagepath, string Description, string ratetype)
        {
            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblCategoryUser] ON  " +
               //" Insert into tblcategory Categoryid='" + Categoryid + "',Category='" + Category + "',CategoryCode='" + CategoryCode + "',IsActive='" + IsActive + "',IsLiveKitchen='" + IsLiveKitchen + "',ProductionType='" + ProductionType + "',Request='" + Request + "',poduction='" + poduction + "',PrintCategory='" + PrintCategory + "',ManualGrn='" + ManualGrn + "' where catid='" + catid + "'";
               " INSERT [dbo].[tblCategoryUser] ([ItemID], [CategoryID], [Definition], [IsDelete], [Serial_No], [Serial], [Size], [isChecked], [CustomerID], [Tax], [IsExpiry], " +
            " [Rate], [CategoryUserID], [Rate2], [GST], [TaxVal], [unit], [empcode], [MinimumStock], [DisplayOnline], [ImageUpload], [IsActive], [UnitName], [HSNCode], [Common], " +
            " [Printitem],[FoodType],[Barcode],[Mrp],[Pagepath],[Description],[ratetype]) VALUES (" + ItemID + ", " + CategoryID + ", '" + Definition + "', " + IsDelete + ", '" + Serial_No + "', '" + Serial + "', '" + Size + "', " + isChecked + ", NULL, " + Tax + ", NULL, " +
            " " + Rate + ", " + CategoryUserID + ", NULL, " + GST + ", " + TaxVal + ", " + unit + ", '" + empcode + "', '" + MinimumStock + "', '" + DisplayOnline + "', '" + ImageUpload + "', '" + IsActive + "', NULL, '" + hsncode + "', NULL, '" + Printname + "','" + foodtype + "','" + Barcode + "','" + Mrp + "','" + Pagepath + "','" + Description + "','" + ratetype + "') " +
            " SET IDENTITY_INSERT [dbo].[tblCategoryUser] OFF ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public int syncinsertstoretishopitem(int storesettingid, string ingid, string categoryuserid, string isactive, string empname)
        {
            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblStoreSetting] ON   " +
               " INSERT [dbo].[tblStoreSetting] ([StoreSettingId], [Ingid], [Categoryuserid], [IsActive], [Empname]) VALUES " +
               " (" + storesettingid + ", '" + ingid + "', '" + categoryuserid + "', '" + isactive + "', '" + empname + "') " +
            " SET IDENTITY_INSERT [dbo].[tblStoreSetting] OFF ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public int InsertSync(string empname, string buttonname, string synctype, string SyncStatus)
        {
            int iSuccess = 0;
            string sQryy = "Insert into tblsync (SyncButton,EmployeeName,SyncType,SyncStatus) values('" + buttonname + "','" + empname + "','" + synctype + "','" + SyncStatus + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQryy);
            return iSuccess;

        }

        #endregion


        #region INVOICE GENERATE
        public DataSet GetFullValuesForSalesinvoice(string sTableName, string FromDate, string todate, string ipaymode)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;

            string BranchOwnType = "";

            // For Branch code
            string getbranchcode = "Select * from tblbranch where Branchcode='" + sTableName + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                BranchOwnType = getstorecode.Tables[0].Rows[0]["BranchOwnType"].ToString();

            }

            //string cond1 = string.Empty;
            //string con = string.Empty;
            //string getfranch = "Select * from tblbranch where BranchOwnType='" + BranchOwnType + "'";
            //DataSet dsgetfranch = dbObj.InlineExecuteDataSet(getfranch);
            //if (dsgetfranch.Tables[0].Rows.Count > 0)
            //{
            //    for (int i = 0; i < dsgetfranch.Tables[0].Rows.Count; i++)
            //    {
            //        string branchcode = dsgetfranch.Tables[0].Rows[i]["BranchCode"].ToString();

            //        cond1 += " Frombranchcode Not in '" + branchcode + "' ,";
            //        con += branchcode + ",";
            //    }

            //}
            //cond1 = cond1.TrimEnd(',');
            //cond1 = cond1.Replace(",", "or");

            DataSet dmerge = new DataSet();

            // FOR MANUAL
            if (BranchOwnType == "F")
            {

                sQry = "select '" + sTableName + "' as Bcode, type as grnsource,convert(varchar, date, 6) as Date,c.Category as Category,cu.definition as Itemname,cu.gst as GST, " +
    " sum(g.Grn_Qty) as Qty,cu.rate as Rate,(sum(g.grn_Qty) * Cu.Rate) as TotalRate, " +
    " m.margin as Margin,  ( (sum(g.grn_Qty) * Cu.Rate) * m.margin /100) as MarginValue, " +
      " ((sum(g.grn_Qty) * cu.rate) -( (sum(g.grn_Qty) * cu.rate) * m.margin /100)) as  BasicCostAfterMargin, " +
       // " ( cu.Rate / (100 + cu.Tax) * 100 * sum(g.GRN_Qty) ) * (cu.Tax ) /100 as  GSTValue,   " +
       " (((sum(g.grn_Qty) * cu.rate) -( (sum(g.grn_Qty) * cu.rate) * m.margin /100)) * (cu.Tax ) /100) as  GSTValue, " +
   "     (((sum(g.grn_Qty) * cu.rate) -( (sum(g.grn_Qty) * cu.rate) * m.margin /100)) +  " +
   " (((sum(g.grn_Qty) * cu.rate) -( (sum(g.grn_Qty) * cu.rate) * m.margin /100)) * (cu.Tax ) /100)) as NetAmount " +
            // " ((sum(g.grn_Qty) * Cu.Rate) -( (sum(g.grn_Qty) * Cu.Rate) * m.margin /100))  +( Cu.Rate / (100 + cu.Tax) * 100 * " +
            // " sum(g.grn_Qty) ) * (cu.Tax /2 ) /100  +( Cu.Rate / (100 + cu.Tax) * 100 * sum(g.grn_Qty) ) * (cu.Tax /2 ) /100 as NetAmount  " +
            " from tblgrn as g inner join tblcategoryuser as cu on cu.CategoryUserID=g.CategoryUserID  " +
             " inner join tblcategory as c on c.Categoryid=cu.categoryid inner join tblmargin as m on m.categoryid=c.categoryid  " +
             " where convert(date,date)>='" + FromDate + "' and convert(date,date)<='" + todate + "' and m.Branchcode='" + sTableName + "' and type<>'Against Inter Branch Request' " +
               " group by type,date,cu.definition,cu.gst,cu.rate,cu.Tax,c.Category,m.margin,c.Categoryid,cu.CategoryUserID  " +
                 " order by cast(date as date),c.category asc";
                ds = dbObj.InlineExecuteDataSet(sQry);
                dmerge.Merge(ds);


                // FOR INTERBRANCH
                string sqr = " select '" + sTableName + "' as Bcode, type+'-'+frombranchcode as grnsource,convert(varchar, date, 6) as Date,c.Category as Category,cu.definition as Itemname,cu.gst as GST, " +
    " sum(g.Grn_Qty) as Qty,cu.rate as Rate,(sum(g.grn_Qty) * Cu.Rate) as TotalRate, " +
    " m.margin as Margin,  ( (sum(g.grn_Qty) * Cu.Rate) * m.margin /100) as MarginValue, " +
      " ((sum(g.grn_Qty) * cu.rate) -( (sum(g.grn_Qty) * cu.rate) * m.margin /100)) as  BasicCostAfterMargin, " +
          //  " ( cu.Rate / (100 + cu.Tax) * 100 * sum(g.GRN_Qty) ) * (cu.Tax ) /100 as  GSTValue,   " +
          //  " ((sum(g.grn_Qty) * Cu.Rate) -( (sum(g.grn_Qty) * Cu.Rate) * m.margin /100))  +( Cu.Rate / (100 + cu.Tax) * 100 * " +
          //   " sum(g.grn_Qty) ) * (cu.Tax /2 ) /100  +( Cu.Rate / (100 + cu.Tax) * 100 * sum(g.grn_Qty) ) * (cu.Tax /2 ) /100 as NetAmount " +
          " (((sum(g.grn_Qty) * cu.rate) -( (sum(g.grn_Qty) * cu.rate) * m.margin /100)) * (cu.Tax ) /100) as  GSTValue, " +
   "     (((sum(g.grn_Qty) * cu.rate) -( (sum(g.grn_Qty) * cu.rate) * m.margin /100)) +  " +
   " (((sum(g.grn_Qty) * cu.rate) -( (sum(g.grn_Qty) * cu.rate) * m.margin /100)) * (cu.Tax ) /100)) as NetAmount " +
            " from tblgrn as g inner join tblcategoryuser as cu on cu.CategoryUserID=g.CategoryUserID  " +
             " inner join tblcategory as c on c.Categoryid=cu.categoryid inner join tblmargin as m on m.categoryid=c.categoryid  " +
             " where convert(date,date)>='" + FromDate + "' and convert(date,date)<='" + todate + "' " +
              " and type='Against Inter Branch Request'  " +
              " and frombranchowntype<>'F'  " +
               " and m.Branchcode='" + sTableName + "' " +
               " group by frombranchcode,type,date,cu.definition,cu.gst,cu.rate,cu.Tax,c.Category,m.margin,c.Categoryid,cu.CategoryUserID  " +
                 " order by cast(date as date),c.category asc";

                DataSet ds1 = dbObj.InlineExecuteDataSet(sqr);
                dmerge.Merge(ds1);
            }
            else if (BranchOwnType == "O" || BranchOwnType == "F/O")
            {
                sQry = "select '" + sTableName + "' as Bcode, 'SALES' as grnsource,convert(varchar, s.Billdate, 6) as Date,c.Category as Category,cu.definition as Itemname,cu.gst as GST,  sum(ts.Quantity) as Qty, " +
" ts.UnitPrice as Rate,(sum(ts.Quantity) * ts.UnitPrice) as TotalRate,  m.margin as Margin,  ( (sum(ts.Quantity) * ts.UnitPrice) * m.margin /100) as MarginValue,  " +
 " ((sum(ts.Quantity) * ts.UnitPrice) -( (sum(ts.Quantity) * ts.UnitPrice) * m.margin /100)) as  BasicCostAfterMargin,  " +
  // " ( ts.UnitPrice / (100 + ts.Tax) * 100 * sum(ts.Quantity) ) * (ts.Tax ) /100 as  GSTValue,   " +
  //   " ((sum(ts.Quantity) * ts.UnitPrice) -( (sum(ts.Quantity) * ts.UnitPrice) * m.margin /100))  +( ts.UnitPrice / (100 + ts.Tax) * 100 *  sum(ts.Quantity) ) *  " +
  //  " (ts.Tax /2 ) /100  +( ts.UnitPrice / (100 + ts.Tax) * 100 * sum(ts.Quantity) ) * (ts.Tax /2 ) /100 as NetAmount   " +
  " (((sum(ts.Quantity) * ts.UnitPrice) -( (sum(ts.Quantity) * ts.UnitPrice) * m.margin /100)) * (ts.Tax ) /100) as  GSTValue,    " +
    " (((sum(ts.Quantity) * ts.UnitPrice) -( (sum(ts.Quantity) * ts.UnitPrice) * m.margin /100)) +  " +
    " (((sum(ts.Quantity) * ts.UnitPrice) -( (sum(ts.Quantity) * ts.UnitPrice) * m.margin /100)) * (ts.Tax ) /100)) as NetAmount  " +
     " from tblsales_" + sTableName + " as s inner join tbltranssales_" + sTableName + " as ts on ts.salesuniqueid=s.salesid inner join tblcategoryuser as cu on cu.CategoryUserID=ts.subCategoryID   " +
      " inner join tblcategory as c on c.Categoryid=cu.categoryid inner join tblmargin as m on m.categoryid=c.categoryid  " +
        " where convert(date,s.billdate)>='" + FromDate + "' and convert(date,s.billdate)<='" + todate + "' and m.Branchcode='" + sTableName + "' and s.cancelstatus='No' and (" + ipaymode + ") " +
         "   group by billdate,cu.definition,cu.gst,ts.UnitPrice,ts.Tax,c.Category,m.margin, " +
         " c.Categoryid,cu.CategoryUserID    order by cast(Billdate as date),c.category asc";
                ds = dbObj.InlineExecuteDataSet(sQry);
                dmerge.Merge(ds);

            }

            //          if (BranchOwnType == "F")
            //          {

            //              sQry = "select c.Categoryid,cu.CategoryUserID,c.Category,cu.definition,cu.gst,sum(g.Grn_Qty) as qty,cu.rate,(sum(g.grn_Qty) * Cu.Rate) as totalRate,m.margin as marginvalue,(cu.gst/2) as CGST, " +
            //                  // " ( (sum(g.grn_Qty) * Cu.Rate) -( cu.rate / (100 + m.margin) * 100 * sum(g.grn_qty) )) as  Margin, " +
            //" ( (sum(g.grn_Qty) * Cu.Rate) * m.margin /100) as Margin " +
            //                  // "    ( cu.rate / (100 + m.margin) * 100 * sum(g.grn_qty) ) as  BasicValue,  " +
            //" ((sum(g.grn_Qty) * cu.rate) -( (sum(g.grn_Qty) * cu.rate) * m.margin /100)) as  BasicValue, " +
            //  " ( cu.Rate / (100 + cu.Tax) * 100 * sum(g.GRN_Qty) ) * (cu.Tax /2 ) /100 as  GSTAmt, " +
            //                  // " ( cu.Rate / (100 + m.margin) * 100 * sum(g.GRN_Qty) ) +    " +
            //                  //"   ( cu.Rate / (100 + m.margin) * 100 * sum(g.GRN_Qty) ) * (cu.Tax /2 ) /100 +   " +
            //                  //"    ( cu.Rate / (100 + m.margin) * 100 * sum(g.GRN_Qty) ) * (cu.Tax /2 ) /100 as NetAmount " +
            // "   ((sum(g.grn_Qty) * Cu.Rate) -( (sum(g.grn_Qty) * Cu.Rate) * m.margin /100)) " +
            //      " +( Cu.Rate / (100 + cu.Tax) * 100 * sum(g.grn_Qty) ) * (cu.Tax /2 ) /100 " +
            //      " +( Cu.Rate / (100 + cu.Tax) * 100 * sum(g.grn_Qty) ) * (cu.Tax /2 ) /100 as NetAmount " +
            //  " from tblgrn as g inner join tblcategoryuser as cu on cu.CategoryUserID=g.CategoryUserID " +
            // " inner join tblcategory as c on c.Categoryid=cu.categoryid inner join tblmargin as m on m.categoryid=c.categoryid where convert(date,date)='" + Date + "' and m.Branchcode='" + sTableName + "' FromBranchOwnType <>'F'  " +
            // " group by cu.definition,cu.gst,cu.rate,cu.Tax,c.Category,m.margin,c.Categoryid,cu.CategoryUserID   order by Category,Definition asc";

            //          }
            //          else
            //          {

            //              sQry = "select c.Categoryid,cu.CategoryUserID,c.Category,cu.definition,cu.gst,sum(tg.Quantity) as qty,tg.unitprice as rate,(sum(tg.Quantity) * tg.unitprice) as totalRate, " +
            // " tg.margin as marginvalue,(tg.Tax/2) as CGST,  " +
            //                  // " ( (sum(tg.Quantity) * tg.unitprice) -( tg.unitprice / (100 + tg.margin) * 100 * sum(tg.Quantity) )) as  Margin, " +
            //" ( (sum(tg.Quantity) * tg.unitprice) * tg.margin /100) as Margin " +
            //                  //  " ( tg.unitprice / (100 + tg.margin) * 100 * sum(tg.Quantity) ) as  BasicValue,    " +
            //    " ((sum(tg.Quantity) * tg.unitprice) -( (sum(tg.Quantity) * tg.unitprice) * tg.margin /100)) as  BasicValue, " +
            //      " ( tg.unitprice / (100 + tg.Tax) * 100 * sum(tg.Quantity) ) * (tg.Tax /2 ) /100 as  GSTAmt, " +
            //                  //" ( tg.unitprice / (100 + tg.margin) * 100 * sum(tg.Quantity) ) +     " +
            //                  //   " ( tg.unitprice / (100 + tg.margin) * 100 * sum(tg.Quantity) ) * (tg.Tax /2 ) /100 +    " +
            //                  //       " ( tg.unitprice / (100 + tg.margin) * 100 * sum(tg.Quantity) ) * (tg.Tax /2 ) /100 as NetAmount   " +
            //      "   ((sum(tg.Quantity) * tg.unitprice) -( (sum(tg.Quantity) * tg.unitprice) * tg.margin /100)) " +
            //      " +( tg.unitprice / (100 + tg.Tax) * 100 * sum(tg.Quantity) ) * (tg.Tax /2 ) /100 " +
            //      " +( tg.unitprice / (100 + tg.Tax) * 100 * sum(tg.Quantity) ) * (tg.Tax /2 ) /100 as NetAmount " +
            //               " from tblsales_" + sTableName + " as g inner join tbltranssales_" + sTableName + " as tg on g.billno=tg.salesid inner join tblcategoryuser as cu on cu.CategoryUserID=tg.subCategoryID  " +
            //                " inner join tblcategory as c on c.Categoryid=cu.categoryid inner join tblmargin as m on m.categoryid=c.categoryid  " +
            //                " where  convert(date,g.billdate)='" + Date + "' and m.Branchcode='" + sTableName + "'  " +
            //                 " group by cu.definition,cu.gst,tg.unitprice,tg.Tax,c.Category,tg.margin,c.Categoryid,cu.CategoryUserID " +
            //                   " order by Category,Definition asc";


            //          }
            // ds = dbObj.InlineExecuteDataSet(sQry);




            return dmerge;
        }


        public DataSet GetFullValuesFororderinvoice(string sTableName, string FromDate, string todate)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;



            DataSet dmerge = new DataSet();

            // FOR MANUAL

            sQry = "select distinct '" + sTableName + "' as Bcode, a.BillNo,a.OrderNo,a.BookNo,convert(date,a.orderdate) as OrderDate,convert(date,ta.Billdate) as BillDate, a.NetAmount,  " +
" (((ta.amount - a.refundamount) / (too.gst+100) * 100)) as  COST, " +
" case a.CGST when '0' then '0' else (ta.amount - (((ta.amount - a.refundamount) / (too.gst+100) * 100))) end as  GST " +
" ,ta.type as paytype,(ta.amount - a.refundamount) as Amount,  m.margin as marginvalue,((((ta.amount - a.refundamount) / (too.gst+100) * 100)) * m.margin /100) as Margin, " +
 " ((((ta.amount - a.refundamount) / (too.gst+100) * 100))- ((((ta.amount - a.refundamount) / (too.gst+100) * 100)) * m.margin /100)) as  castbeforemargin, " +
 " (((((ta.amount - a.refundamount) / (too.gst+100) * 100))- ((((ta.amount - a.refundamount) / (too.gst+100) * 100)) * m.margin /100)) * too.gst /100) as  GSTV, " +
  " (((((ta.amount - a.refundamount) / (too.gst+100) * 100))- ((((ta.amount - a.refundamount) / (too.gst+100) * 100)) * m.margin /100))+ " +
 " (((((ta.amount - a.refundamount) / (too.gst+100) * 100))- ((((ta.amount - a.refundamount) / (too.gst+100) * 100)) * m.margin /100)) * too.gst /100)) as NetamountV  from tblOrder_" + sTableName + " a  " +
 " inner join tbltransorderamount_" + sTableName + " as ta on ta.BIllno=a.BillNo inner join tbltransorder_" + sTableName + " as too on too.billno=a.billno " +
 " inner join tblmargin as m on m.categoryid=too.categoryid  " +
"   where  m.branchcode='" + sTableName + "' and a.bookno=ta.bookno and too.billno=a.billno and a.isCancel=0 and ta.type <> 'Refund' and (ta.paymode<>'15')  " +
  " and convert(date,ta.Billdate)>='" + FromDate + "' and convert(date,ta.Billdate)<='" + todate + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            dmerge.Merge(ds);

            return dmerge;
        }


        public DataSet checkgrninvoice(string Table, DateTime Date)
        {
            string getcat = "Select * from tblGRNInvoice_" + Table + " where Date='" + Convert.ToDateTime(Date).ToString("yyyy/MM/dd") + "' ";
            DataSet ds = dbObj.InlineExecuteDataSet(getcat);
            return ds;

        }


        public int insertgrninvoice(string Table, DateTime Date, double SalesExempted, double TaxableSales, double CGST, double SGST, double NETAMOUNT, string RoundOff, double FINALAMOUNT)
        {
            int iSucess = 0;

            string getcat = "Select isnull(max(InvoiceNo),1)  as InvoiceNo from tblGRNInvoice_" + Table + "  ";
            DataSet ds = dbObj.InlineExecuteDataSet(getcat);

            string AuditQty = "Insert into tblGRNInvoice_" + Table + "  (InvoiceNo,Date,SalesExempted,TaxableSales,CGST,SGST,NETAMOUNT,RoundOff,FINALAMOUNT) Values(" + ds.Tables[0].Rows[0]["InvoiceNo"].ToString() + ",'" + Convert.ToDateTime(Date).ToString("yyyy/MM/dd") + "'," + SalesExempted + "," + TaxableSales + "," + CGST + "," + SGST + "," + NETAMOUNT + ",'" + RoundOff + "'," + FINALAMOUNT + ") ";
            iSucess = dbObj.InlineExecuteNonQuery(AuditQty);



            iSucess = Convert.ToInt32(ds.Tables[0].Rows[0]["InvoiceNo"].ToString());
            return iSucess;
        }

        public int inserttransgrninvoice(string Table, int InvoiceNo, int CategoryId, int ItemId, string Category, string Item, double GST, double Qty, double Rate, double TotalRate, double MarginValue, double Margin, double BasicValue, double CGSTVal, double CGST, double SGSTVal, double SGST, double NetAmount)
        {
            int iSucess = 0;
            string AuditQty = "Insert into tblTransGRNInvoice_" + Table + "  (InvoiceNo,CategoryId,ItemId,Category,Item,GST,Qty,Rate,TotalRate,MarginValue,Margin,BasicValue,CGSTVal,CGST,SGSTVal,SGST,NetAmount) Values(" + InvoiceNo + "," + CategoryId + "," + ItemId + ",'" + Category + "','" + Item + "'," + GST + "," + Qty + "," + Rate + "," + TotalRate + "," + MarginValue + "," + Margin + "," + BasicValue + "," + CGSTVal + "," + CGST + "," + SGSTVal + "," + SGST + "," + NetAmount + ") ";
            iSucess = dbObj.InlineExecuteNonQuery(AuditQty);
            return iSucess;
        }


        public DataSet getinvviewonly(string Table)
        {
            string getcat = "select * from tblGRNInvoice_" + Table + " order by Date Desc ";
            DataSet ds = dbObj.InlineExecuteDataSet(getcat);
            return ds;

        }

        public DataSet getinvview(string Table, string InvoiceNo)
        {
            string getcat = "Select i.InvoiceNo,i.Date,ti.CategoryId  as Categoryid,ti.ItemId as CategoryUserID,ti.Category  as  Category,ti.Item as Definition,ti.GST as gst,ti.Qty as Qty,ti.Rate as rate,ti.TotalRate as TotalRate,ti.MarginValue as Marginvalue,ti.Margin as Margin,ti.BasicValue as BasicValue,ti.CGSTVal as CGST,ti.CGST as GSTAmt,ti.SGSTVal as CGST,ti.SGST as GSTAmt,ti.NetAmount as NetAmount from tblGRNInvoice_" + Table + " i inner join tbltransGRNInvoice_" + Table + " ti on  ti.InvoiceNo=i.InvoiceNo  where i.InvoiceNo='" + InvoiceNo + "'  order by Category,Definition asc ";
            DataSet ds = dbObj.InlineExecuteDataSet(getcat);
            return ds;

        }



        #endregion


        #region Inter Branch Request/Received/TRansfer Report
        public DataSet interBranchRequestreports(int ibranch, string sCode, string frmdate, string todate)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.name as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime,b.tobranchcode  " +
" from tblworkers a,tblInterBranchRequest_" + sCode + " b  where a.empid=b.VendorID  and b.BranchID='" + ibranch + "'  " +
" and b.IsAccepted=0 and convert(date, b.RequestDate)  between '" + Convert.ToDateTime(frmdate).ToString("yyyy-MM-dd") + "' and '" + Convert.ToDateTime(todate).ToString("yyyy-MM-dd") + "'   order by b.RequestDate desc  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet InterbranchReport_StockReqDetails(int sBillno, string sCode)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblInterBranchRequest_" + sCode + " a,tbltransInterBranchRequest_" + sCode + " b,tblcategory c,tblCategoryUser d " +
                " where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and a.RequestNo='" + sBillno + "' ";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet interbranchReceivedReport_date(string sFromDate, string sToDate, string stable)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblInterGoodReceived_" + stable + " where convert(date,RecDate) between '" + sFromDate + "' and '" + sToDate + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet InterGoodReceivedListExp(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            // string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer a,tblTransGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty,b.damage_Qty as damageQty,b.Missing_Qty as MissingQty " +
                " from tblInterGoodReceived_" + BranchID + " a,tbltransInterGoodsReceived_" + BranchID + " b,tblcategory c,tblCategoryUser d  where a.recid=b.recid " +
                " and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and  a.recid='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet InterbranchTransferReport_date(string sFromDate, string sToDate, string stable, string branchcode)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            {
                sqry = "  select * from tblInterGoodTransfer where convert(date,DC_Date) between '" + sFromDate + "' and '" + sToDate + "' and branch='" + stable + "' order by dc_No desc ";
            }
            ds = dbObj.InlineExecuteDataSetMain(sqry);

            return ds;
        }

        public DataSet InterbranchGoodTrasnferListExp(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            // string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer a,tblTransGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            //string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty,b.damage_Qty as damageQty,b.Missing_Qty as MissingQty " +
            //    " from tblInterGoodTransfer a,tbltransInterGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No " +
            //    " and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and  a.DC_No='" + sDCNO + "' ";

            string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty,b.damage_Qty as damageQty,b.Missing_Qty as MissingQty " +
                " from tblInterGoodTransfer a,tbltransInterGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No " +
                " and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and  a.DC_No='" + sDCNO + "' and  a.FromBranchCode=b.BranchCode ";


            ds = dbObj.InlineExecuteDataSetMain(sqry);

            return ds;
        }


        #endregion


        #region OPENING STOCK
        public DataSet RawmatlSenttoProduction(string scode)
        {
            DataSet ds = new DataSet();
            string paygird = "  select distinct d.IngreCategory,a.IngridID, a.IngredientName,sum(isnull(b.Qty,0 )) as Qty,c.uom,c.uomid,isnull(round(b.rate,2),'0') as rate  from tblIngridents a inner join tblIngridentscategory as d on d.ingcatid=a.IngCatID "
  + " LEFT OUTER JOIN tblRawMatlStock_" + scode + " b ON  a.IngridID=b.IngredientID inner join tbluom as c on c.uomid=a.units group by d.IngreCategory,a.IngridID, a.IngredientName,c.uom,c.uomid,b.rate order by Qty desc";
            ds = dbObj.InlineExecuteDataSet(paygird);
            return ds;
        }


        public DataSet getrawitemneeded(string rawitemname)
        {
            DataSet ds = new DataSet();
            string paygird = "select * from tblIngridents a where a.IngredientName='" + rawitemname + "' ";
            ds = dbObj.InlineExecuteDataSet(paygird);
            return ds;
        }

        //      public int InsertphysicalDatas(int Ingredientid, string TransferDate, double OpStock, double physical, string scode, string uomid, string ExpiryDate, string userid)
        //      {

       //          DateTime ExpiryDate1;
        //          if (ExpiryDate == "" || ExpiryDate == "0")
        //          {
        //              ExpiryDate1 = DateTime.ParseExact("01/01/1900", "dd/MM/yyyy", CultureInfo.InvariantCulture);
        //          }
        //          else
        //          {
        //              ExpiryDate1 = DateTime.ParseExact(ExpiryDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        //          }


        //          int insert = 0;
        //          string strQuery = "INSERT INTO tblPhysicalstock_" + scode + "(ItemId ,Stock,date,Opstock) "
        //+ " VALUES (" + Ingredientid + ",'" + physical + "','" + TransferDate + "','" + OpStock + "')";
        //          insert = dbObj.InlineExecuteNonQuery(strQuery);

        //          double Total = physical;
        //          double Bal = OpStock - Total;

        //          int update = 0;
        //          string ss = "select * from tblRawMatlStock_" + scode + " where IngredientID='" + Ingredientid + "'";
        //          DataSet s = dbObj.InlineExecuteDataSet(ss);
        //          if (s.Tables[0].Rows.Count > 0)
        //          {

        //              string Update = "update tblRawMatlStock_" + scode + " set Qty=Qty +" + Total + " where IngredientID=" + Ingredientid + " ";
        //              update = dbObj.InlineExecuteNonQuery(Update);
        //          }
        //          else
        //          {
        //              //  string sqry = "SELECT * FROM tblIngridents ";
        //              //  DataSet dchq = dbObj.InlineExecuteDataSet(sqry);
        //              // if (dchq.Tables[0].Rows.Count > 0)

        //              double op = physical;
        //              {
        //                  string Query = "insert into tblRawMatlStock_" + scode + " (IngredientID,Qty,UserID,idDelete,units,Rate)values(" + Ingredientid + "," + op + ",'" + userid + "',0,'" + uomid + "',0) ";
        //                  update = dbObj.InlineExecuteNonQuery(Query);
        //              }

        //          }

        //          string sQry11 = "insert into tblRawMatlStockExp_" + scode + " (IngredientID,Qty,ExpiredDate,PurchaseID)values(" + Ingredientid + "," + physical + ",'" + ExpiryDate1.ToString("yyyy-MM-dd") + "','0') ";
        //          update = dbObj.InlineExecuteNonQuery(sQry11);
        //          return insert;
        //      }

        public int InsertphysicalDatas(int Ingredientid, string TransferDate, double OpStock, double physical, string scode, string uomid, string ExpiryDate, string userid, string rate)
        {

            DateTime ExpiryDate1;
            if (ExpiryDate == "" || ExpiryDate == "0")
            {
                ExpiryDate1 = DateTime.ParseExact("01/01/1900", "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }
            else
            {
                ExpiryDate1 = DateTime.ParseExact(ExpiryDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }


            int insert = 0;
            string strQuery = "INSERT INTO tblPhysicalstock_" + scode + "(ItemId ,Stock,date,Opstock,Rate) "
  + " VALUES (" + Ingredientid + ",'" + physical + "','" + TransferDate + "','" + OpStock + "','" + rate + "')";
            insert = dbObj.InlineExecuteNonQuery(strQuery);

            double Total = physical;
            double Bal = OpStock - Total;

            int update = 0;
            string ss = "select * from tblRawMatlStock_" + scode + " where IngredientID='" + Ingredientid + "'";
            DataSet s = dbObj.InlineExecuteDataSet(ss);
            if (s.Tables[0].Rows.Count > 0)
            {

                string Update = "update tblRawMatlStock_" + scode + " set Qty=Qty +" + Total + " where IngredientID=" + Ingredientid + " ";
                update = dbObj.InlineExecuteNonQuery(Update);
            }
            else
            {
                //  string sqry = "SELECT * FROM tblIngridents ";
                //  DataSet dchq = dbObj.InlineExecuteDataSet(sqry);
                // if (dchq.Tables[0].Rows.Count > 0)

                double op = physical;
                {
                    string Query = "insert into tblRawMatlStock_" + scode + " (IngredientID,Qty,UserID,idDelete,units,Rate)values(" + Ingredientid + "," + op + ",'" + userid + "',0,'" + uomid + "',0) ";
                    update = dbObj.InlineExecuteNonQuery(Query);
                }

            }

            string sQry11 = "insert into tblRawMatlStockExp_" + scode + " (IngredientID,Qty,ExpiredDate,PurchaseID)values(" + Ingredientid + "," + physical + ",'" + ExpiryDate1.ToString("yyyy-MM-dd") + "','0') ";
            update = dbObj.InlineExecuteNonQuery(sQry11);
            return insert;
        }


        public int InsertphysicalDatas_Rate(int Ingredientid, string TransferDate, double OpStock, double physical, string scode, string uomid, string ExpiryDate, string userid, string rate)
        {

            DateTime ExpiryDate1;
            if (ExpiryDate == "" || ExpiryDate == "0")
            {
                ExpiryDate1 = DateTime.ParseExact("01/01/1900", "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }
            else
            {
                ExpiryDate1 = DateTime.ParseExact(ExpiryDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }


            int insert = 0;
            //          string strQuery = "INSERT INTO tblPhysicalstock_" + scode + "(ItemId ,Stock,date,Opstock,Rate) "
            //+ " VALUES (" + Ingredientid + ",'" + physical + "','" + TransferDate + "','" + OpStock + "','" + rate + "')";
            //          insert = dbObj.InlineExecuteNonQuery(strQuery);

            //  double Total = physical;
            //   double Bal = OpStock - Total;

            int update = 0;
            string ss = "select * from tblRawMatlStock_" + scode + " where IngredientID='" + Ingredientid + "'";
            DataSet s = dbObj.InlineExecuteDataSet(ss);
            if (s.Tables[0].Rows.Count > 0)
            {

                string Update = "update tblRawMatlStock_" + scode + " set rate=" + rate + " where IngredientID=" + Ingredientid + " ";
                update = dbObj.InlineExecuteNonQuery(Update);
            }
            else
            {
                //  string sqry = "SELECT * FROM tblIngridents ";
                //  DataSet dchq = dbObj.InlineExecuteDataSet(sqry);
                // if (dchq.Tables[0].Rows.Count > 0)

                double op = physical;
                {
                    string Query = "insert into tblRawMatlStock_" + scode + " (IngredientID,Qty,UserID,idDelete,units,Rate)values " +
                        " (" + Ingredientid + "," + op + ",'" + userid + "',0,'" + uomid + "','" + rate + "') ";
                    update = dbObj.InlineExecuteNonQuery(Query);
                }

            }

            //string sQry11 = "insert into tblRawMatlStockExp_" + scode + " (IngredientID,Qty,ExpiredDate,PurchaseID)values(" + Ingredientid + "," + physical + ",'" + ExpiryDate1.ToString("yyyy-MM-dd") + "','0') ";
            //update = dbObj.InlineExecuteNonQuery(sQry11);
            return insert;
        }

        #endregion

        #region SUMMARY VIEW

        public DataSet getcountersales_summarydatewise(string sTableName, string paymode, string typename, DateTime From, DateTime To)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();

            //  string sqry = "select sum(total)as Total, sp.paymode as  SalesType  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode where cast (billdate as Date)='" + Date + "'  and cancelstatus='No' group by paymode ";
            string SQRY = "  select sum(s.total)as Total, sp.paymode,'Sales' as name  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode " +
                         " where cast(s.BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(s.BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and s.ipaymode='" + paymode + "'  and cancelstatus='No' group by paymode ";
            ds = dbObj.InlineExecuteDataSet(SQRY);

            dmerge.Merge(ds);

            string sqry = " select sum(toa.Amount) as Total,sp.paymode,'Order' as name from tbltransorderamount_" + sTableName + " as toa " +
                            " inner join tblorder_" + sTableName + " as o on o.billno=toa.billno " +
                         " inner join tblsalespaymode as sp on sp.Value=toa.paymode where cast(toa.BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(toa.BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and toa.paymode='" + paymode + "' and type in (" + typename + ") " +
                         " group by sp.paymode ";
            DataSet ds1 = dbObj.InlineExecuteDataSet(sqry);


            dmerge.Merge(ds1);

            return dmerge;
        }


        public DataSet getcountersales(string Date, string sTableName, string paymode, string typename)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();

            //  string sqry = "select sum(total)as Total, sp.paymode as  SalesType  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode where cast (billdate as Date)='" + Date + "'  and cancelstatus='No' group by paymode ";
            string SQRY = "  select sum(s.total)as Total, sp.paymode,'Sales' as name  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode " +
                         " where cast (billdate as Date)='" + Date + "' and s.ipaymode='" + paymode + "'  and cancelstatus='No' group by paymode ";
            ds = dbObj.InlineExecuteDataSet(SQRY);

            dmerge.Merge(ds);

            string sqry = " select sum(toa.Amount) as Total,sp.paymode,'Order' as name from tbltransorderamount_" + sTableName + " as toa " +
                            " inner join tblorder_" + sTableName + " as o on o.billno=toa.billno " +
                         " inner join tblsalespaymode as sp on sp.Value=toa.paymode where convert(date, billdate)='" + Date + "' and toa.paymode='" + paymode + "' and type in (" + typename + ") " +
                         " group by sp.paymode ";
            DataSet ds1 = dbObj.InlineExecuteDataSet(sqry);


            dmerge.Merge(ds1);

            return dmerge;
        }

        public DataSet getcountersalesandorderdiscount(string Date, string sTableName)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();

            //  string sqry = "select sum(total)as Total, sp.paymode as  SalesType  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode where cast (billdate as Date)='" + Date + "'  and cancelstatus='No' group by paymode ";
            string SQRY = "  select sum(s.discount)as Total, a.attendername+'- Discount- For Normal Bill' as name from tblsales_" + sTableName + " as  s inner join tblattender as a on a.AttenderId=s.ApprovedId " +
                         " where cast (billdate as Date)='" + Date + "' and cancelstatus='No' group by attendername ";
            ds = dbObj.InlineExecuteDataSet(SQRY);

            dmerge.Merge(ds);



            string SQRY1 = "  select sum(s.discount)as Total, a.attendername+'- Discount- For Cancel Bill' as name from tblsales_" + sTableName + " as  s inner join tblattender as a on a.AttenderId=s.ApprovedId " +
                       " where cast (billdate as Date)='" + Date + "' and cancelstatus='Yes' group by attendername ";
            DataSet dss = dbObj.InlineExecuteDataSet(SQRY1);

            dmerge.Merge(dss);


            string sqry = " select sum(o.DiscountAmount)as Total, a.attendername+'- Discount- For Order Bill' as name from  tblorder_" + sTableName + " as o " +
                         " inner join tblattender as a on a.AttenderId=o.DiscEmp " +
                         " where convert(date, OrderDate)='" + Date + "' and o.iscancel='0'  " +
                         " group by a.attendername ";
            DataSet ds1 = dbObj.InlineExecuteDataSet(sqry);
            dmerge.Merge(ds1);


            string sqryy = " select sum(o.DiscountAmount)as Total, a.attendername+'- Discount- For Order Cancel Bill' as name from  tblorder_" + sTableName + " as o " +
                         " inner join tblattender as a on a.AttenderId=o.DiscEmp " +
                         " where convert(date, OrderDate)='" + Date + "' and o.iscancel='1'  " +
                         " group by a.attendername ";
            DataSet ds1y = dbObj.InlineExecuteDataSet(sqryy);
            dmerge.Merge(ds1y);

            return dmerge;
        }

        public DataSet getcountersalesandorderdiscount_datewise(string sTableName, DateTime From, DateTime To)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();

            //  string sqry = "select sum(total)as Total, sp.paymode as  SalesType  from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode where cast (billdate as Date)='" + Date + "'  and cancelstatus='No' group by paymode ";
            string SQRY = "  select sum(s.discount)as Total, a.attendername+'- Discount- For Normal Bill' as name from tblsales_" + sTableName + " as  s inner join tblattender as a on a.AttenderId=s.ApprovedId " +
                         " where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and cancelstatus='No' group by attendername ";
            ds = dbObj.InlineExecuteDataSet(SQRY);

            dmerge.Merge(ds);



            string SQRY1 = "  select sum(s.discount)as Total, a.attendername+'- Discount- For Cancel Bill' as name from tblsales_" + sTableName + " as  s inner join tblattender as a on a.AttenderId=s.ApprovedId " +
                       " where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and cancelstatus='Yes' group by attendername ";
            DataSet dss = dbObj.InlineExecuteDataSet(SQRY1);

            dmerge.Merge(dss);


            string sqry = " select sum(o.DiscountAmount)as Total, a.attendername+'- Discount- For Order Bill' as name from  tblorder_" + sTableName + " as o " +
                         " inner join tblattender as a on a.AttenderId=o.DiscEmp " +
                         " where cast(orderdate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(orderdate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "'  and o.iscancel='0'  " +
                         " group by a.attendername ";
            DataSet ds1 = dbObj.InlineExecuteDataSet(sqry);
            dmerge.Merge(ds1);


            string sqryy = " select sum(o.DiscountAmount)as Total, a.attendername+'- Discount- For Order Cancel Bill' as name from  tblorder_" + sTableName + " as o " +
                         " inner join tblattender as a on a.AttenderId=o.DiscEmp " +
                         " where cast(orderDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(orderdate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and o.iscancel='1'  " +
                         " group by a.attendername ";
            DataSet ds1y = dbObj.InlineExecuteDataSet(sqryy);
            dmerge.Merge(ds1y);

            return dmerge;
        }

        #endregion


        #region Notification Message
        public int insertmessgae(string messgaetitle, string messgaecontent, DateTime fromdate, DateTime todate, string Isactive)
        {
            int save = 0;
            string sQry = "Insert into tblMessage(MessageTitle,MessageContent,Fromdate,Todate,IsActive)Values('" + messgaetitle + "','" + messgaecontent + "','" + fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "','" + todate.ToString("yyyy/MM/dd HH:mm:ss") + "','" + Isactive + "')";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;
        }

        public int Updatemessgae(string messgaetitle, string messgaecontent, DateTime fromdate, DateTime todate, string Isactive, string messaigeid)
        {
            int save = 0;
            // string sQry = "Insert into tblMessage(MessageTitle,MessageContent,Fromdate,Todate,IsActive)Values('" + messgaetitle + "','" + messgaecontent + "','" + fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "','" + todate.ToString("yyyy/MM/dd HH:mm:ss") + "','" + Isactive + "')";
            string sQry = "Update Tblmessage set MessageTitle='" + messgaetitle + "',MessageContent='" + messgaecontent + "',Fromdate='" + fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "',Todate='" + todate.ToString("yyyy/MM/dd HH:mm:ss") + "',IsActive='" + Isactive + "' where MessageId='" + messaigeid + "'";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;
        }

        public int inserttransmessgae(DataSet dss)
        {
            int iSuccess = 0;
            DataSet ds = new DataSet();
            string max = "select max(MessageId) as MessageId from tblMessage";
            ds = dbObj.InlineExecuteDataSet(max);
            int subcat = 1;
            if (ds.Tables[0].Rows[0]["MessageId"].ToString() != "")
            {
                subcat = Convert.ToInt32(ds.Tables[0].Rows[0]["MessageId"].ToString());
            }

            for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
            {
                string branchcode = dss.Tables[0].Rows[i]["Branchcode"].ToString();
                string branchname = dss.Tables[0].Rows[i]["Branchname"].ToString();

                string sQry = "insert into tbltransmessage( Messageid,BranchCode,BranchName) " +
                    " values ('" + subcat + "','" + branchcode + "','" + branchname + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;

        }

        public int inserttransmessgaeForUpdate(DataSet dss, string messageid)
        {
            int iSuccess = 0;
            DataSet ds = new DataSet();


            for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
            {
                string branchcode = dss.Tables[0].Rows[i]["Branchcode"].ToString();
                string branchname = dss.Tables[0].Rows[i]["Branchname"].ToString();

                string sQry = "insert into tbltransmessage( Messageid,BranchCode,BranchName) " +
                    " values ('" + messageid + "','" + branchcode + "','" + branchname + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;

        }

        public DataSet gettoalmessgae()
        {
            DataSet ds = new DataSet();
            string sqry = "Select * from tblMessage";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;

        }

        public DataSet getonlinenumberdetails()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.onlineid,a.RequestType,a.OnlineNumber,a.BranchCode,a.EntryBy,a.EntryDate,a.HStatus,a.HkotNo,a.KotNo,a.Status, " +
                          " b.PaymentType,convert(varchar, max(GETDATE()) - min(entrydate), 108) do_not_use,a.cstatus,a.cdate,a.reason from tblonlineordernumber as a inner join tblsalestype as b on b.SalesTypeID=a.OnlineType " +
                          " where a.status='N' group by a.onlineid,a.RequestType,a.OnlineNumber,a.BranchCode,a.EntryBy,a.EntryDate,a.HStatus,a.HkotNo,a.KotNo,a.Status, " +
                          " b.PaymentType,a.cstatus,a.cdate,a.reason  order by a.Status asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getorderonline(string onlineid)
        {
            DataSet ds = new DataSet();

            string sqry = "Select * from tblonlineordernumber where onlineid='" + onlineid + "' and Status='N' and Hstatus='N'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int OnlineManualCancel(string onlinenumberid, string reason, string notes)
        {
            int i = 0;
            string mainsqry = "Update tblOnlineOrderNumber set Status='Y',Reason='" + reason + "', CStatus='Y',CDate=getdate(),CNotes='" + notes + "' where onlineid='" + onlinenumberid + "' ";
            i = dbObj.InlineExecuteNonQuery(mainsqry);
            return i;

        }



        public int deletetransmessgae(string messageid)
        {
            string sqry = "Delete from tbltransMessage where Messageid='" + messageid + "'";
            int ii = dbObj.InlineExecuteNonQuery(sqry);

            return ii;

        }

        public DataSet get_happyhoursforupdate(string comboid)
        {
            DataSet dss = new DataSet();
            string item = "Select *,CONVERT(varchar(15),cast(Fromdate as time),100) as fromtt,CONVERT(varchar(15),cast(Todate as time),100) as tott,cast(Fromdate as time) [fromtime],cast(Todate as time) [totime] " +
                " from tblmessage where messageid='" + comboid + "'";
            dss = dbObj.InlineExecuteDataSet(item);
            return dss;
        }

        public DataSet gettransmeessage(string cust)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbltransmessage where messageid='" + cust + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getallnotificationmsg(string brannchcode)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblmessage a,tbltransmessage b where a.messageid=b.messageid " +
                         " and Fromdate < getdate() and Todate>getdate() and Branchcode='" + brannchcode + "'";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }

        #endregion

        #region Kitchen Usage

        public DataSet getingraw(string ingid, string stablename)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (ingid == "All")
            {
                sqry = "Select i.*,rms.qty,u.uom from tblIngridents as i inner join tblRawMatlStock_" + stablename + " as rms on i.IngridID=rms.IngredientID inner join tbluom as u on u.uomid=i.units where i.IsActive='Yes' and rms.Qty > 0";

            }
            else
            {
                sqry = "Select i.*,rms.qty,u.uom from tblIngridents as i inner join tblRawMatlStock_" + stablename + " as rms on i.IngridID=rms.IngredientID inner join tbluom as u on u.uomid=i.units where i.IsActive='Yes' and i.ingcatid='" + ingid + "' and rms.Qty > 0";
            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #endregion

        #region Check tranasfer qty

        public DataSet chkqtytransfer(string itemid, string bracnchreqno, string reqno, string bcode, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select  * from tblPurchaseRequestProd_" + stable + " a,tblTransPurchaseRequestProd_" + stable + " b,tblcategory c,tblCategoryUser d  " +
" where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0  " +
" and a.branchReqNo='" + bracnchreqno + "' and b.descriptionid='" + itemid + "' and a.storebranch='" + bcode + "' and a.requestno='" + reqno + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet chkqtytransfer_Semi(string itemid, string bracnchreqno, string reqno, string bcode, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select  * from tblsemiPurchaseRequestLive_" + stable + " a,tblTranssemiPurchaseRequestLive_" + stable + " b,tblSemiCategory c,tblSemiIngridents d  " +
" where a.RequestNo=b.Requestid and b.CategoryID=c.SemiCatID and b.DescriptionID=d.SemiIngridID  and Order_Qty!=0  " +
" and a.branchReqNo='" + bracnchreqno + "' and b.descriptionid='" + itemid + "' and a.storebranch='" + bcode + "' and a.requestno='" + reqno + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion

        #region KITCHEN USGAE REPORT

        public DataSet getkuasge(string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblAcceptRawMaterials_" + stable + " order by requestno asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getIngridentsforsup()
        {
            DataSet ds = new DataSet();
            string sQry = "select *,0 as Rate from tblIngridents order by IngredientName asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getIngridentsfordealer()
        {
            DataSet ds = new DataSet();
            string sQry = "select *,ItemId as IngridID,Definition as IngredientName from tblcategoryuser order by Definition asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        // Shanthi 1/3/23  getting TotalAmount purpose
        // public DataSet getreportforkitchenusage(string sTablename, string Type, string DCNo, DateTime From, DateTime to, string Category, string Ingridients, string deptid)
        //{

        //    DataSet ds = new DataSet();
        //    string sqry = string.Empty;
        //    if (Ingridients == "All" && deptid == "All")
        //    {
        //        sqry = "select case b.isaccept when 1 then 'Accepted' else 'Pending' end as status,b.MissingQty,b.DamageQty,(b.acceptqty - b.missingqty - b.damageqty) as RecQty,isnull(e.deptname,'No Dept.') as deptname, a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,d.uom from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
        //               " inner join tblIngridents as c on b.rawitemid=c.IngridID inner join tbluom as d on d.uomid=c.Units left join tbldepartment as e on e.deptid=a.deptid where  " +
        //               " cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "'";

        //    }
        //    else if (Ingridients == "All" && deptid != "All")
        //    {
        //        sqry = "select case b.isaccept when 1 then 'Accepted' else 'Pending' end as status,b.MissingQty,b.DamageQty,(b.acceptqty - b.missingqty - b.damageqty) as RecQty,isnull(e.deptname,'No Dept.') as deptname,a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,d.uom from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
        //               " inner join tblIngridents as c on b.rawitemid=c.IngridID inner join tbluom as d on d.uomid=c.Units inner join tbldepartment as e on e.deptid=a.deptid where e.deptid='" + deptid + "'  and  " +
        //               " cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "'";

        //    }
        //    else if (Ingridients != "All" && deptid == "All")
        //    {
        //        sqry = "select case b.isaccept when 1 then 'Accepted' else 'Pending' end as status,b.MissingQty,b.DamageQty,(b.acceptqty - b.missingqty - b.damageqty) as RecQty,isnull(e.deptname,'No Dept.') as deptname,a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,d.uom from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
        //               " inner join tblIngridents as c on b.rawitemid=c.IngridID inner join tbluom as d on d.uomid=c.Units left join tbldepartment as e on e.deptid=a.deptid where c.ingridid='" + Ingridients + "' and  " +
        //               " cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "'";

        //    }
        //    else if (Ingridients != "All" && deptid != "All")
        //    {
        //        sqry = "select case b.isaccept when 1 then 'Accepted' else 'Pending' end as status,b.MissingQty,b.DamageQty,(b.acceptqty - b.missingqty - b.damageqty) as RecQty,isnull(e.deptname,'No Dept.') as deptname,a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,d.uom from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
        //               " inner join tblIngridents as c on b.rawitemid=c.IngridID inner join tbluom as d on d.uomid=c.Units left join tbldepartment as e on e.deptid=a.deptid where e.deptid='" + deptid + "' and c.ingridid='" + Ingridients + "' and  " +
        //               " cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "'";

        //    }

        //    ds = dbObj.InlineExecuteDataSet(sqry);

        //    return ds;
        //}
        public DataSet getreportforkitchenusage(string sTablename, string Type, string DCNo, DateTime From, DateTime to, string Category, string Ingridients, string deptid)
        {

            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (Ingridients == "All" && deptid == "All")
            {
                sqry = "select case b.isaccept when 1 then 'Accepted' else 'Pending' end as status,b.MissingQty,b.DamageQty,(b.acceptqty - b.missingqty - b.damageqty) as RecQty,isnull(e.deptname,'No Dept.') as deptname, a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,d.uom,s.Rate as AvgRate,sum(b.acceptqty)*s.Rate as TotalAmount from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
                       " inner join tblIngridents as c on b.rawitemid=c.IngridID inner join tbluom as d on d.uomid=c.Units left join tbldepartment as e on e.deptid=a.deptid  inner join tblRawMatlStock_prod s on s.IngredientID=b.rawitemid where  " +
                       " cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' group by b.isaccept,b.Missingqty,b.damageqty,b.acceptqty,e.deptname,a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,d.uom,s.Rate";

            }
            else if (Ingridients == "All" && deptid != "All")
            {
                sqry = "select case b.isaccept when 1 then 'Accepted' else 'Pending' end as status,b.MissingQty,b.DamageQty,(b.acceptqty - b.missingqty - b.damageqty) as RecQty,isnull(e.deptname,'No Dept.') as deptname,a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,d.uom,s.Rate as AvgRate,sum(b.acceptqty)*s.Rate as TotalAmount from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
                       " inner join tblIngridents as c on b.rawitemid=c.IngridID inner join tbluom as d on d.uomid=c.Units inner join tbldepartment as e on e.deptid=a.deptid  inner join tblRawMatlStock_prod s on s.IngredientID=b.rawitemid where e.deptid='" + deptid + "'  and  " +
                       " cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' group by b.isaccept,b.Missingqty,b.damageqty,b.acceptqty,e.deptname,a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,d.uom,s.Rate";

            }
            else if (Ingridients != "All" && deptid == "All")
            {
                sqry = "select case b.isaccept when 1 then 'Accepted' else 'Pending' end as status,b.MissingQty,b.DamageQty,(b.acceptqty - b.missingqty - b.damageqty) as RecQty,isnull(e.deptname,'No Dept.') as deptname,a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,d.uom,s.Rate as AvgRate,sum(b.acceptqty)*s.Rate as TotalAmount from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
                       " inner join tblIngridents as c on b.rawitemid=c.IngridID inner join tbluom as d on d.uomid=c.Units left join tbldepartment as e on e.deptid=a.deptid  inner join tblRawMatlStock_prod s on s.IngredientID=b.rawitemid where c.ingridid='" + Ingridients + "' and  " +
                       " cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' group by b.isaccept,b.Missingqty,b.damageqty,b.acceptqty,e.deptname,a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,d.uom,s.Rate";

            }
            else if (Ingridients != "All" && deptid != "All")
            {
                sqry = "select case b.isaccept when 1 then 'Accepted' else 'Pending' end as status,b.MissingQty,b.DamageQty,(b.acceptqty - b.missingqty - b.damageqty) as RecQty,isnull(e.deptname,'No Dept.') as deptname,a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,d.uom,s.Rate as AvgRate,sum(b.acceptqty)*s.Rate as TotalAmount from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
                       " inner join tblIngridents as c on b.rawitemid=c.IngridID inner join tbluom as d on d.uomid=c.Units left join tbldepartment as e on e.deptid=a.deptid  inner join tblRawMatlStock_prod s on s.IngredientID=b.rawitemid where e.deptid='" + deptid + "' and c.ingridid='" + Ingridients + "' and  " +
                       " cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' group by b.isaccept,b.Missingqty,b.damageqty,b.acceptqty,e.deptname,a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,d.uom,s.Rate";

            }

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getreportforkitchenusage_old(string sTablename, string Type, string DCNo, DateTime From, DateTime to, string Category, string Ingridients)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            string sqry1 = string.Empty;
            DataSet dmerge = new DataSet();
            if (Ingridients == "All")
            {
                sqry = "select case b.isaccept when 1 then 'Accepted' else 'Pending' end as status,  a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,b.MissingQty,b.DamageQty,(b.acceptqty - b.missingqty - b.damageqty) as RecQty from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
                       " inner join tblIngridents as c on b.rawitemid=c.IngridID where  " +
                       " cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and b.isaccept='1'";
                DataSet d = dbObj.InlineExecuteDataSet(sqry);
                ds.Merge(d);

                sqry1 = "select case b.isaccept when 1 then 'Accepted' else 'Pending' end as status,  a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,b.MissingQty,b.DamageQty,cast(0 as float) as RecQty from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
                       " inner join tblIngridents as c on b.rawitemid=c.IngridID where  " +
                       " cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and b.isaccept='0'";
                DataSet d1 = dbObj.InlineExecuteDataSet(sqry1);
                ds.Merge(d1);


            }
            else
            {
                sqry = "select case b.isaccept when 1 then 'Accepted' else 'Pending' end as status,  a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,b.MissingQty,b.DamageQty,(b.acceptqty - b.missingqty - b.damageqty) as RecQty from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
                       " inner join tblIngridents as c on b.rawitemid=c.IngridID where c.ingridid='" + Ingridients + "' and  " +
                       " cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and b.isaccept='1'";

                DataSet d = dbObj.InlineExecuteDataSet(sqry);
                ds.Merge(d);

                sqry1 = "select case b.isaccept when 1 then 'Accepted' else 'Pending' end as status,  a.requestno,a.requestdate,a.prepared,a.reqtype,c.ingredientname,b.acceptqty,b.narration,b.MissingQty,b.DamageQty,cast(0 as float) as RecQty from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
                       " inner join tblIngridents as c on b.rawitemid=c.IngridID where c.ingridid='" + Ingridients + "' and  " +
                       " cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "'and b.isaccept='0'";

                DataSet d1 = dbObj.InlineExecuteDataSet(sqry1);
                ds.Merge(d1);

            }

            //  ds = dbObj.InlineExecuteDataSet(sqry);
            //if (Type == "1")
            //{
            //    string sqry = "select '' as Item,Total as Amount, * from tblPurchasetaken  where cast(Billdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(Billdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' order by  purchaseid asc ";
            //    ds = dbObj.InlineExecuteDataSet(sqry);
            //}
            //else
            //{
            //    if (Ingridients == "All")
            //    {
            //        string sqry = "select IngredientName as Item,Total as Amount, * from tblPurchasetaken inner join tbltransPurchasetaken on tblPurchasetaken.purchaseid = tbltransPurchasetaken.purchaseid  inner join tblIngridents on tbltransPurchasetaken.IngredientID =  tblIngridents.IngridID  where cast(Billdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(Billdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' order by  tblPurchasetaken.purchaseid asc ";
            //        ds = dbObj.InlineExecuteDataSet(sqry);
            //    }
            //    else
            //    {
            //        string sqry = "select IngredientName as Item,Total as Amount, * from tblPurchasetaken inner join tbltransPurchasetaken on tblPurchasetaken.purchaseid = tbltransPurchasetaken.purchaseid  inner join tblIngridents on tbltransPurchasetaken.IngredientID =  tblIngridents.IngridID  where cast(Billdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(Billdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and tbltransPurchasetaken.IngredientID = '" + Ingridients + "' order by  tblPurchasetaken.purchaseid asc ";
            //        ds = dbObj.InlineExecuteDataSet(sqry);
            //    }
            //}
            return ds;
        }


        #endregion


        #region  DB BACKUP
        public int Backup_Database(string sbackupDIR, string sDatabaseName, string sBackupName)
        {
            int iSuccess = 0;
            string sQry = "BACKUP DATABASE " + sDatabaseName + " TO DISK = '" + sbackupDIR + "\\" + sBackupName + "' WITH FORMAT, MEDIANAME = 'Z_SQLServerBackups', NAME = '" + sBackupName + "';";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }

        #endregion

        #region OFFER CATEGORY

        public int insertoffer(string OfferName, string OfferValue, DateTime Fromdate, DateTime Todate, string IsActive, string IsDiscount, DataSet dst)
        {
            int iSucess = 0;
            string AuditQty = "Insert into tbloffer(OfferName,OfferValue,Fromdate,Todate,IsActive,IsDiscount) Values('" + OfferName + "','" + OfferValue + "','" + Fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "','" + Todate.ToString("yyyy/MM/dd HH:mm:ss") + "','" + IsActive + "','" + IsDiscount + "') ";
            iSucess = dbObj.InlineExecuteNonQuery(AuditQty);

            string sqrr = "Select max(offerid) as offerid from tbloffer";
            DataSet ds = dbObj.InlineExecuteDataSet(sqrr);
            if (ds.Tables[0].Rows.Count > 0)
            {

                string offerid = ds.Tables[0].Rows[0]["Offerid"].ToString();
                for (int i = 0; i < dst.Tables[0].Rows.Count; i++)
                {
                    string catid = dst.Tables[0].Rows[i]["catid"].ToString();

                    string transauditqty = "insert into tbltransoffer(OfferId,Categoryid)values('" + offerid + "','" + catid + "')";
                    iSucess = dbObj.InlineExecuteNonQuery(transauditqty);
                }

            }
            return iSucess;
        }


        public int Updateoffer(string offerid, string OfferName, string OfferValue, DateTime Fromdate, DateTime Todate, string IsActive, string IsDiscount, DataSet dst)
        {
            int iSucess = 0;
            string AuditQty = "Update tbloffer set OfferName='" + OfferName + "',OfferValue='" + OfferValue + "',Fromdate='" + Fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "' " +
            " ,Todate='" + Todate.ToString("yyyy/MM/dd HH:mm:ss") + "',IsActive='" + IsActive + "',IsDiscount='" + IsDiscount + "' where offerid='" + offerid + "' ";
            iSucess = dbObj.InlineExecuteNonQuery(AuditQty);


            for (int i = 0; i < dst.Tables[0].Rows.Count; i++)
            {
                string catid = dst.Tables[0].Rows[i]["catid"].ToString();

                string transauditqty = "insert into tbltransoffer(OfferId,Categoryid)values('" + offerid + "','" + catid + "')";
                iSucess = dbObj.InlineExecuteNonQuery(transauditqty);
            }
            return iSucess;
        }

        public int deleteoffer(string offerid)
        {
            int idel = 0;

            string sqry = "Delete from tbltransoffer where offerid='" + offerid + "'";
            idel = dbObj.InlineExecuteNonQuery(sqry);
            return idel;
        }

        public DataSet get_offerforupdate(string comboid)
        {
            DataSet dss = new DataSet();
            string item = "Select *,CONVERT(varchar(15),cast(Fromdate as time),100) as fromtt,CONVERT(varchar(15),cast(Todate as time),100) as tott, " +
                " cast(Fromdate as time) [fromtime],cast(Todate as time) [totime] from tbloffer as o inner join tbltransoffer as too on too.offerid=o.offerid where o.offerid='" + comboid + "'";
            dss = dbObj.InlineExecuteDataSet(item);
            return dss;
        }

        public DataSet getalloffer()
        {
            DataSet ds = new DataSet();
            string sqry = "Select * from tblOffer";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;

        }

        #endregion

        #region GET Live CAtegory and Item

        public DataSet getcategoryLiveeSync(string date)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblcategoryhistory where convert(date,Entrydate)>='" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "' ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;

        }


        public DataSet getcategorygethistorydatafromsever(string server, string date)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "select * from tblcategoryhistory where convert(date,Entrydate)>='" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "' ";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet getcategorygethistorydatafromlocal(string catid)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblcategory where Categoryid='" + catid + "'";
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;
        }

        public DataSet getItemLiveeSync(string date)
        {
            DataSet ds = new DataSet();

            string sqry = "select b.printitem,b.CategoryuserID,a.CategoryID,a.category,b.Definition,b.rate as Rate,B.RATE*((B.GST/2)/100) AS cgst, " +
                         " B.RATE*((B.GST/2)/100) AS Sgst,B.RATE+(B.RATE*((B.GST)/100)) AS RATE1,b.tax  from tblcategory a,tblCategoryUserhistory b  " +
                          //" where a.categoryid=b.CategoryID and b.Isactive='Yes' and convert(date,Entrydate)>='" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "' order by a.category,b.definition asc  ";
                          " where a.categoryid=b.CategoryID and convert(date,Entrydate)>='" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "' order by a.category,b.definition asc  ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;

        }

        public DataSet getitemgetdatahistoryfromsever(string server, string date)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblcategoryuserhistory where convert(date,Entrydate)>='" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "' ";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet getstoretoshopitemgetdatahistoryfromsever(string server, string date)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblStoreSettinghistory where convert(date,Entrydate)>='" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "' ";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public int syncupdateitemNEW(int ItemID, string CategoryID, string Definition, string IsDelete, string Serial_No, string Serial, string Tax, string Rate, string CategoryUserID, string GST, string TaxVal, string unit, string MinimumStock, string DisplayOnline, string ImageUpload, string IsActive, string hsncode, string printname, string foodtype, string Barcode, string Mrp, string Pagepath, string Description, string ratetype)
        {
            int i = 0;

            string sqry = "Update tblcategoryuser set Barcode='" + Barcode + "',Mrp='" + Mrp + "',Pagepath='" + Pagepath + "',Description='" + Description + "',ratetype='" + ratetype + "',FoodType='" + foodtype + "',CategoryID='" + CategoryID + "',Definition='" + Definition + "',IsDelete='" + IsDelete + "',Serial_No='" + Serial_No + "',Serial='" + Serial + "',Tax='" + Tax + "',Rate='" + Rate + "',CategoryUserID='" + CategoryUserID + "',GST='" + GST + "',TaxVal='" + TaxVal + "',unit='" + unit + "',MinimumStock='" + MinimumStock + "',DisplayOnline='" + DisplayOnline + "',ImageUpload='" + ImageUpload + "',IsActive='" + IsActive + "',HSNCode='" + hsncode + "',Printitem='" + printname + "' where ItemID='" + ItemID + "'";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public int syncupdatestoretoshopitemNEW(int storesettingid, string IngID, string Categoryuserid, string IsActive, string Empname)
        {
            int i = 0;

            string sqry = "Update tblStoreSetting set Ingid='" + IngID + "',Categoryuserid='" + Categoryuserid + "',IsActive='" + IsActive + "',Empname='" + Empname + "' where StoreSettingId='" + storesettingid + "'";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        #endregion

        #region MArginCategory
        public DataSet Catmergin()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblmarginsetting as a inner join tblcategory as b on b.catid=a.categoryid";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet catmarginsearch(string catid)
        {
            string sqry = string.Empty;
            DataSet ds = new DataSet();
            sqry = "select * from tblmarginsetting where categoryid ='" + catid + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }

        public int InsertCatMargin(string catid, string Omrgin, string Fmargin, string Ofmargin)
        {
            int iSuccess = 0;
            string sQry = "insert into tblmarginsetting(CategoryId,OwnBranch,franchise,Ownfranchise) values ('" + catid + "','" + Omrgin + "','" + Fmargin + "','" + Ofmargin + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }

        public DataSet catmarginsearchforupdate(int catmerid, string catid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblmarginsetting where CategoryId = '" + catid + "' and Catmarginid <>" + catmerid + "  order by Catmarginid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public int updatecatmarginMaster(int catid, string Omargin, string Fmargin, string Ofmargin)
        {
            int iSucess = 0;
            string sQry = "update tblmarginsetting set Ownfranchise='" + Ofmargin + "',OwnBranch='" + Omargin + "',franchise='" + Fmargin + "' where Catmarginid='" + catid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            return iSucess;
        }

        public DataSet editcatmargin(int catid)
        {

            DataSet ds = new DataSet();
            string sQry = "select * from tblmarginsetting  where Catmarginid='" + catid + "' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        public DataSet editcatmarginN(int catid)
        {

            DataSet ds = new DataSet();
            string sQry = "select * from tblmarginsetting  where categoryid='" + catid + "' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }


        public int insertmarginsettingNew(string categoryid, string Omargin, string Fmargin, string OFmargin)
        {
            int isicuess = 0;


            string truncatebrach = "Delete from tblmargin where CategoryId='" + categoryid + "'";
            int ii = dbObj.InlineExecuteNonQuery(truncatebrach);

            // if (dss.Tables[0].Rows.Count > 0)
            // {

            string getbranch = "Select * from tblbranch where Branchtype='0'";
            DataSet getb = dbObj.InlineExecuteDataSet(getbranch);

            if (getb.Tables[0].Rows.Count > 0)
            {
                // for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
                {
                    //string ItemID = dss.Tables[0].Rows[i]["Categoryuserid"].ToString();


                    for (int j = 0; j < getb.Tables[0].Rows.Count; j++)
                    {
                        string Branchid = getb.Tables[0].Rows[j]["Branchid"].ToString();
                        string branchcode = getb.Tables[0].Rows[j]["Branchcode"].ToString();
                        string FranchiseeName = getb.Tables[0].Rows[j]["Branchowntype"].ToString();

                        if (FranchiseeName == "O")
                        {
                            string sQry = "insert into tblMargin( CategoryId,BranchID,Margin,BranchCode) " +
                                " values ('" + categoryid + "','" + Branchid + "'," + Omargin + ",'" + branchcode + "')";
                            isicuess = dbObj.InlineExecuteNonQuery(sQry);
                        }
                        else if (FranchiseeName == "F")
                        {
                            string sQry = "insert into tblMargin( CategoryId,BranchID,Margin,BranchCode) " +
                                " values ('" + categoryid + "','" + Branchid + "'," + Fmargin + ",'" + branchcode + "')";
                            isicuess = dbObj.InlineExecuteNonQuery(sQry);
                        }
                        else if (FranchiseeName == "F/O")
                        {
                            string sQry = "insert into tblMargin( CategoryId,BranchID,Margin,BranchCode) " +
                                " values ('" + categoryid + "','" + Branchid + "'," + OFmargin + ",'" + branchcode + "')";
                            isicuess = dbObj.InlineExecuteNonQuery(sQry);
                        }
                    }

                }
            }
            //}
            return isicuess;

        }

        #endregion

        public DataSet getbookcode(string branch)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblbookcode where Branchcode='" + branch + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet customerkotreport(string sBranch, DateTime sFmdate, DateTime sToDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select s.KotNo ,s.KotDate ,sum(Amount) as NetAmount, sum(((Amount * s.GST) / 100 )) as tax , sum(Amount + ((Amount * s.GST) / 100 )) as Total  ,'Sales' as type, case s.IEdit when 0 then 'Still Hold' else 'Completed' end as Status from tblKOT_" + sBranch + " s,tblCategoryUser cc where  s.subcategoryid=cc.categoryuserid and convert(date,s.KotDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd") + "' and convert(date,s.KotDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd") + "' group by s.KotNo,s.KotDate,s.NetAmount,s.total,IEdit order by KotNo desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet customerkotreportdetails(int KotNo, string sBranch)
        {
            DataSet ds = new DataSet();
            string sqry = "select cc.Definition as Item,case s.IEdit when 0 then 'Still Hold/Cancel' else 'Completed' end as nam,s.KotNo as BillNo,s.KotDate as BillDate,(Amount) as NetAmount, (((Amount * s.GST) / 100 )) as tax , (Amount + ((Amount * s.GST) / 100 )) as Total  ,'Sales' as type from tblKOT_" + sBranch + " s,tblCategoryUser cc where s.subcategoryid=cc.categoryuserid and KotNo='" + KotNo + "' order by KotNo desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        #region GETTING NE DASH

        public DataSet gettingtodaysalesdash(string branch, string Sfromdate)
        {
            DataSet ds = new DataSet();
            string qr = "SELECT DATENAME(year, convert(date,BillDate)) as curyear   " +
                        " ,DATENAME(month, convert(date,BillDate))  as monthnamee  " +
                        " ,DATENAME(day, convert(date,BillDate))  as dayno  " +
                        "   ,DATENAME(weekday, convert(date,BillDate)) as daynamee,  " +
                        " isnull(sum(total),0) as cnt,count(billno) as cvv from tblsales_" + branch + " where convert(date,BillDate) =convert(date,'" + Convert.ToDateTime(Sfromdate).ToString("yyyy-MM-dd") + "')  and cancelstatus='No' " +
                        " group by convert(date,BillDate)";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet gettingtodayorderdash(string branch, string Sfromdate)
        {
            DataSet ds = new DataSet();
            string qr = "SELECT DATENAME(year, convert(date,BillDate)) as curyear   " +
    " ,DATENAME(month, convert(date,BillDate))  as monthnamee " +
    " ,DATENAME(day, convert(date,BillDate))  as dayno " +
  "   ,DATENAME(weekday, convert(date,BillDate)) as daynamee, " +
" isnull(sum(amount),0) as cnt from tbltransorderamount_" + branch + " toa inner join tblOrder_" + branch + " o on o.BillNo=toa.BillNo  where convert(date,BillDate) =convert(date,'" + Convert.ToDateTime(Sfromdate).ToString("yyyy-MM-dd") + "')  and isCancel='0' " +
" group by convert(date,BillDate)";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }


        //Sales 
        public DataSet getSalesRevenue(string branch, string Sfromdate, string stodate)
        {
            DataSet ds = new DataSet();
            string qr = "SELECT isnull(sum(total),0) as cnt,count(billno) as cvv from tblsales_" + branch + " where convert(date,BillDate) >=convert(date,'" + Convert.ToDateTime(Sfromdate).ToString("yyyy-MM-dd") + "') and convert(date,BillDate) <=convert(date,'" + Convert.ToDateTime(stodate).ToString("yyyy-MM-dd") + "')  and cancelstatus='No' ";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        // Order 
        public DataSet getorderRevenue(string branch, string Sfromdate, string stodate)
        {
            DataSet ds = new DataSet();
            string qr = " SELECT isnull(sum(amount),0) as cnt,count(o.OrderNo) as cvv from tbltransorderamount_" + branch + " toa inner join tblOrder_" + branch + " o on o.BillNo=toa.BillNo  where convert(date,BillDate) >=convert(date,'" + Convert.ToDateTime(Sfromdate).ToString("yyyy-MM-dd") + "') and convert(date,BillDate) <=convert(date,'" + Convert.ToDateTime(stodate).ToString("yyyy-MM-dd") + "')  and isCancel='0' ";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        // Order Count
        public DataSet getorderRevenuecount(string branch, string Sfromdate, string stodate)
        {
            DataSet ds = new DataSet();
            string qr = " SELECT isnull(count(o.OrderNo),0) as cvv  from tbltransorderamount_" + branch + " toa inner join tblOrder_" + branch + " o on o.BillNo=toa.BillNo  where convert(date,BillDate) >=convert(date,'" + Convert.ToDateTime(Sfromdate).ToString("yyyy-MM-dd") + "') and convert(date,BillDate) <=convert(date,'" + Convert.ToDateTime(stodate).ToString("yyyy-MM-dd") + "')  and isCancel='0' and toa.Type<>'Bal'  ";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        //Top Sales Item
        public DataSet topandlastsalesitem(string OrderBy, string branch, string Sfromdate, string stodate)
        {
            DataSet ds = new DataSet();
            string qr = " SELECT Definition as Item, sum(too.Quantity) as TotalQty, ROUND(sum((too.Amount * too.Tax / 100 ) + CAST(Amount as money)),0) as Amount from tblsales_" + branch + " o inner join  tblTransSales_" + branch + " too on too.SalesID=o.BillNo inner join tblCategoryUser cu on cu.CategoryUserID=too.SubcategoryID where convert(date,BillDate) >=convert(date,'" + Convert.ToDateTime(Sfromdate).ToString("yyyy-MM-dd") + "') and convert(date,BillDate) <=convert(date,'" + Convert.ToDateTime(stodate).ToString("yyyy-MM-dd") + "') and cancelstatus='No' group by  Definition order by TotalQty " + OrderBy + "";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        //Top Order Item
        public DataSet topandlastorderitem(string OrderBy, string branch, string Sfromdate, string stodate)
        {
            DataSet ds = new DataSet();
            string qr = " SELECT Definition as Item, sum(CAST(Qty as decimal)) as TotalQty, ROUND(sum((CAST(Amount as money) * too.Gst / 100 ) + CAST(Amount as money)),0) as Amount from tblOrder_" + branch + " o inner join  tblTransOrder_" + branch + " too on too.BillNo=o.BillNo inner join tblCategoryUser cu on cu.CategoryUserID=too.SubcategoryID where convert(date,OrderDate) >=convert(date,'" + Convert.ToDateTime(Sfromdate).ToString("yyyy-MM-dd") + "') and convert(date,OrderDate) <=convert(date,'" + Convert.ToDateTime(stodate).ToString("yyyy-MM-dd") + "')  and isCancel='0'  group by  Definition order by TotalQty " + OrderBy + "  ";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }


        //Sales Chart 
        public DataSet getSalesChart(string branch, string Sfromdate, string stodate)
        {
            DataSet ds = new DataSet();
            string qr = "SELECT LEFT(DATENAME(weekday, cast(BillDate as date)),3) as WeekDays,count(billno) as cvv from tblsales_" + branch + " where convert(date,BillDate) >=convert(date,'" + Convert.ToDateTime(Sfromdate).ToString("yyyy-MM-dd") + "') and convert(date,BillDate) <=convert(date,'" + Convert.ToDateTime(stodate).ToString("yyyy-MM-dd") + "')  and cancelstatus='No'  group by cast(BillDate as date) ";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        // Order Chart
        public DataSet getorderChart(string branch, string Sfromdate, string stodate)
        {
            DataSet ds = new DataSet();
            string qr = " SELECT LEFT(DATENAME(weekday, cast(OrderDate as date)),3) as WeekDays,count(o.OrderNo) as cvv from  tblOrder_" + branch + " o   where convert(date,OrderDate) >=convert(date,'" + Convert.ToDateTime(Sfromdate).ToString("yyyy-MM-dd") + "') and convert(date,OrderDate) <=convert(date,'" + Convert.ToDateTime(stodate).ToString("yyyy-MM-dd") + "')  and isCancel='0'  group by cast(OrderDate as date) ";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        //Up Going  Orders
        public DataSet upgoingorders(string branch, string Sfromdate, string stodate)
        {
            DataSet ds = new DataSet();
            string qr = "select c.CustomerName,c.MobileNo,o.OrderNo,o.BookNo,o.OrderDate,o.DeliveryDate,o.Total,SUM(too.Amount) as Paid,o.BalancePaid from tblOrder_" + branch + " o inner join tblTransorderAmount_" + branch + " too on too.BIllno=o.BillNo  inner join tblCustomer c on c.CustomerID=o.CustomerID where convert(date,DeliveryDate) >=convert(date,'" + Convert.ToDateTime(Sfromdate).ToString("yyyy-MM-dd") + "') and isCancel='0' group by c.CustomerName,c.MobileNo,o.OrderNo,o.BookNo,o.OrderDate,o.DeliveryDate,o.Total,o.BalancePaid ";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }


        #endregion


        #region General Reports
        public DataSet getReturnreports(string sTableName, DateTime sFrom, DateTime sTo, String ReasonID)
        {
            DataSet ds = new DataSet();
            if (ReasonID == "All")
            {
                string sqry = "select l.BranchCode as Branch,RetDate AS DATEPART,RetDate AS TIMEPART, RetDate as ReturnDate,d.category,c.Definition,b.Quantity,b.Amount,b.RetNo, f.reason as Reason,e.SubReasons,a.Name,saveDateTime,Notes from tblReturn_" + sTableName + " a,tblTransReturn_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f,tbllogin l where f.reasonid=a.ipaymode and a.RetNo=b.RetNo and c.categoryid=d.categoryid and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and l.userid=a.Userid  and CONVERT(date, a.RetDate )>= '" + Convert.ToDateTime(sFrom).ToString("yyyy-MM-dd") + "' and CONVERT(date, a.RetDate ) <= '" + Convert.ToDateTime(sTo).ToString("yyyy-MM-dd") + "' order by a.RetDate asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                string sqry = "select l.BranchCode as Branch,RetDate AS DATEPART,RetDate AS TIMEPART, RetDate as ReturnDate,d.category,c.Definition,b.Quantity,b.Amount,b.RetNo, f.reason as Reason,e.SubReasons,a.Name,saveDateTime,Notes from tblReturn_" + sTableName + " a,tblTransReturn_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f,tbllogin l where f.reasonid=a.ipaymode and a.RetNo=b.RetNo and c.categoryid=d.categoryid and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and l.userid=a.Userid  and CONVERT(date, a.RetDate )>= '" + Convert.ToDateTime(sFrom).ToString("yyyy-MM-dd") + "' and CONVERT(date, a.RetDate ) <= '" + Convert.ToDateTime(sTo).ToString("yyyy-MM-dd") + "' and a.iPayMode=" + ReasonID + " order by a.RetDate asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            return ds;
        }

        public DataSet getpaymententryreports(DateTime sFrom, DateTime sTo, string sTablename)
        {
            DataSet ds = new DataSet();
            string sqry = "select '" + sTablename + "' as Branch,a.PaymentEntryID,a.Date,b.LedgerName,a.Description,a.Amount from tblPaymentEntry_" + sTablename + " a,tblledger b where a.ledgerid=b.ledgerid and cast(a.Date as Date) >= '" + Convert.ToDateTime(sFrom).ToString("yyyy-MM-dd") + "' and cast(a.Date as Date) <='" + Convert.ToDateTime(sTo).ToString("yyyy-MM-dd") + "' order by Date asc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getstaffcreditsalesreports(string sBranch, DateTime sFmdate, DateTime sToDate, string salestype)
        {
            DataSet ds = new DataSet();
            string sqry = "select '" + sBranch + "' as Branch,'Sales' as Type, ts.disc,cus.customername+'-'+cus.mobileno as name,s.salesorder as No,sp.paymode,st.paymenttype,s.billno,convert(varchar, s.Billdate, 6) as billdate,c.Category,cu.definition,ts.unitprice,ts.quantity,(ts.UnitPrice * ts.Quantity) as amount,ts.tax, " +

             " isnull(((((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100),0)  as GST,  " +
" isnull((((((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100)  " +
" +  ((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100))),0) as TotalValue, s.Saletypemargin,  " +
" isnull(((((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) * s.Saletypemargin) /100),0) as commission,s.gstmargin, " +
" isnull(((((((((ts.UnitPrice * ts.Quantity) * cu.gst) / 100) +  (ts.UnitPrice * ts.Quantity)) * s.Saletypemargin) /100) * s.GstMargin) /100),0)  as commisionfortax,s.Gateway " +
" from tblsales_" + sBranch + " as s inner join tbltranssales_" + sBranch + " as ts on ts.salesid=s.billno inner join tblsalestype as st on st.salestypeid=s.salestype " +
" inner join tblcategoryuser as cu on cu.categoryuserid=ts.subcategoryid inner join tblcategory as c on c.categoryid=ts.CategoryID  " +
" inner  join tblSalesPaymode as sp on sp.value=s.ipaymode inner join tblcustomer as cus on cus.customerid=s.customerid where  " +
" OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd") + "' " +
//" and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd") + "' and s.cancelstatus='No' and s.salesid=ts.salesuniqueid and s.salestype='" + salestype + "'  order by s.billno,s.billdate asc";
" and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd") + "' and s.cancelstatus='No' and s.salesid=ts.salesuniqueid and s.ipaymode='" + salestype + "'  order by s.billno,s.billdate asc";

            ds = dbObj.InlineExecuteDataSet(sqry);

            DataTable dtsum = new DataTable();
            DataSet dssum = new DataSet();
            DataRow drsum;

            dtsum.Columns.Add("Branch");
            dtsum.Columns.Add("Type");
            dtsum.Columns.Add("paymode");
            dtsum.Columns.Add("No");
            dtsum.Columns.Add("paymenttype");
            dtsum.Columns.Add("billno");
            dtsum.Columns.Add("BillDate");
            dtsum.Columns.Add("unitprice");
            dtsum.Columns.Add("quantity");
            dtsum.Columns.Add("amount");
            dtsum.Columns.Add("GST");
            dtsum.Columns.Add("disc");
            dtsum.Columns.Add("TotalValue");
            dtsum.Columns.Add("name");

            dssum.Tables.Add(dtsum);

            #region

            DataTable dtraws = ds.Tables[0];

            var result1 = from r in dtraws.AsEnumerable()
                          group r by new
                          {
                              paymode = r["paymode"],
                              orderno = r["No"],
                              paymenttype = r["paymenttype"],
                              billno = r["billno"],
                              BillDate = r["BillDate"],
                              name = r["Name"],
                              Branch = r["Branch"],
                              Type = r["Type"],
                          }
                              into raw
                          select new
                          {
                              paymode = raw.Key.paymode,
                              orderno = raw.Key.orderno,
                              paymenttype = raw.Key.paymenttype,
                              billno = raw.Key.billno,
                              BillDate = raw.Key.BillDate,
                              name = raw.Key.name,
                              unitprice = raw.Sum(x => Convert.ToDouble(x["unitprice"])),
                              quantity = raw.Sum(x => Convert.ToDouble(x["quantity"])),
                              amount = raw.Sum(x => Convert.ToDouble(x["amount"])),
                              GST = raw.Sum(x => Convert.ToDouble(x["GST"])),
                              disc = raw.Sum(x => Convert.ToDouble(x["disc"])),
                              TotalValue = raw.Sum(x => Convert.ToDouble(x["TotalValue"])),

                              Branch = raw.Key.Branch,
                              Type = raw.Key.Type,
                          };


            foreach (var g in result1)
            {
                drsum = dtsum.NewRow();

                drsum["Branch"] = g.Branch;
                drsum["Type"] = g.Type;
                drsum["Name"] = g.name;
                drsum["billno"] = g.billno;
                drsum["BillDate"] = g.BillDate;
                drsum["unitprice"] = Convert.ToDouble(g.unitprice).ToString("f2");
                drsum["quantity"] = g.quantity;
                drsum["amount"] = Convert.ToDouble(g.amount).ToString("f2");
                drsum["GST"] = Convert.ToDouble(g.GST).ToString("f2");
                drsum["disc"] = Convert.ToDouble(g.disc).ToString("f2");
                drsum["TotalValue"] = Convert.ToDouble(g.TotalValue).ToString("f2");

                dssum.Tables[0].Rows.Add(drsum);
            }
            #endregion


            return dssum;
        }

        public DataSet getstaffcreditorderreports(string sBranch, DateTime sFmdate, DateTime sToDate, string paymode)
        {

            DataSet ds = new DataSet();
            string sqry = "(select '" + sBranch + "' as Branch,'Order' as Type, cu.CustomerName+'-'+mobileno as Name,s.BillNo,convert(varchar, toa.Billdate, 6) as billdate, '-' as quantity,'-' as amount,'-' as GST,'-' as disc, toa.Amount as TotalValue,toa.type as Paytype from tblorder_" + sBranch + " as s inner join tbltransorderamount_" + sBranch + " as toa on toa.billno=s.billno inner join tblsalespaymode as st on st.value=toa.paymode inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where toa.orderno=s.orderno and  s.OrderNo>0  and convert(date,toa.Billdate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd") + "' and convert(date,toa.Billdate)  <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd") + "' and s.iscancel=0 and toa.paymode='" + paymode + "')";
            ds = dbObj.InlineExecuteDataSet(sqry);



            return ds;
        }



        public DataSet getdiscountsalesreports(string sBranch, DateTime sFmdate, DateTime sToDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select s.salesid,s.salestype as typeid,'" + sBranch + "' as Branch,s.BillNo,s.BillDate,sum((((b.Amount) * cc.GST) / 100 )) as tax ,s.NetAmount,((s.Discount)) as discount,round(s.Total,0) as Total,'Sales' as type, sp.PayMode  as SalesType ,s.Provider,s.Approved,c.customername,c.mobileno from tblsales_" + sBranch + " s ,tblcustomer c,tblTransSales_" + sBranch + " b,tblCategoryUser cc,tblSalesPaymode as sp where sp.Value=s.iPayMode and s.customerid=c.customerid and s.BillNo=b.Salesid and b.subcategoryid=cc.categoryuserid  and OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' and s.Discount>0  group by s.BillNo,s.BillDate,s.NetAmount,s.discount,s.total,s.iPayMode,s.Provider,s.Approved, c.customername,c.mobileNo,sp.paymode,s.salesid,s.salestype  order by s.BillDate desc  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet getbranchproduction(string BranchCode)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblbranchsetting where BranchCode='" + BranchCode + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getreturnreceiving(string sTable)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct cast(LocalRetNo as nvarchar)+'-'+LocalBranch as No,r.RetNo as Id from tblReturnProd_" + sTable + " r inner join tbltransReturnProd_" + sTable + " tr on tr.RetNo=r.RetNo where (Quantity-RecQty) >0 ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet getreturnreceivingqty(string sTable)
        {
            DataSet ds = new DataSet();
            //////string sqry = "select r.LocalBranch as Branch,rr.Reason,sr.SubReasons,c.Category,cu.Definition,r.RetNo,r.RetDate,(tr.Quantity-tr.RecQty) as Qty,tr.TransRetID from tblReturnProd_" + sTable + " r inner join tbltransReturnProd_" + sTable + " tr on tr.RetNo=r.RetNo inner join tblreason rr on rr.ReasonID=r.iPayMode inner join tblsubreasons sr on sr.id=r.Reasonsid inner join tblcategory c on c.categoryid=tr.CategoryID inner join tblcategoryuser cu on cu.CategoryUserID=tr.SubCategoryID  where r.RetNo='" + RetNo + "' and  (Quantity-RecQty) >0 ";
            string sqry = "select r.LocalBranch as Branch,rr.Reason,sr.SubReasons,r.RetNo,r.RetDate,sum(tr.Quantity) as Quantity,r.notes from tblReturnProd_" + sTable + " r inner join tbltransReturnProd_" + sTable + " tr on tr.RetNo=r.RetNo inner join tblreason rr on rr.ReasonID=r.iPayMode inner join tblsubreasons sr on sr.id=r.Reasonsid  where ReceivingStatus='No' group by  r.LocalBranch,rr.Reason,sr.SubReasons,r.RetNo,r.RetDate,r.notes ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public DataSet getreturnreceivingqtyall(string sTable, string RetNo)
        {
            DataSet ds = new DataSet();
            string sqry = "select r.LocalBranch as Branch,rr.Reason,sr.SubReasons,c.Category,cu.Definition,r.RetNo,r.RetDate,(tr.Quantity-tr.RecQty) as Qty,tr.TransRetID,r.notes from tblReturnProd_" + sTable + " r inner join tbltransReturnProd_" + sTable + " tr on tr.RetNo=r.RetNo inner join tblreason rr on rr.ReasonID=r.iPayMode inner join tblsubreasons sr on sr.id=r.Reasonsid inner join tblcategory c on c.categoryid=tr.CategoryID inner join tblcategoryuser cu on cu.CategoryUserID=tr.SubCategoryID  where r.RetNo='" + RetNo + "' and  (Quantity-(RecQty+MissingQty)) >0 and ReceivingStatus='NO'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getreturnreceivingqtycheck(string sTable, string TransRetID, double Qty)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbltransReturnProd_" + sTable + " where TransRetID='" + TransRetID + "' and  (Quantity-(RecQty+MissingQty))  >= " + Qty + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public int insertreturnreceivingqty(string sTable, string TransRetID, double Qty, double MissingQty, string ReceivingStatus)
        {
            int insert = 0;
            string sqry = "Update  tbltransReturnProd_" + sTable + "  set RecQty=RecQty+" + Qty + ",MissingQty=MissingQty+" + MissingQty + " where TransRetID='" + TransRetID + "'  ";
            insert = dbObj.InlineExecuteNonQuery(sqry);

            string sqry1 = "insert into tbltransreturnreceiveProd_" + sTable + " (Qty,TransRetID,MissingQty) values(" + Qty + "," + TransRetID + "," + MissingQty + ")  ";
            insert = dbObj.InlineExecuteNonQuery(sqry1);

            if (ReceivingStatus == "Y")
            {
                string sqry2 = "Update  tblReturnProd_" + sTable + "  set ReceivingStatus='YES' where RetNo=(select distinct RetNo from tblTransReturnProd_" + sTable + "  where TransRetID='" + TransRetID + "')  ";
                insert = dbObj.InlineExecuteNonQuery(sqry2);
            }

            return insert;

        }


        #endregion


        public DataSet getretrnrecevingreports(string sTableName, DateTime sFrom, DateTime sTo, String ReasonID)
        {
            DataSet ds = new DataSet();
            if (ReasonID == "All")
            {
                string sqry = "select r.LocalBranch as Branch,rr.Reason,sr.SubReasons,c.Category,cu.Definition,r.RetNo,r.RetDate,tr.Quantity,trr.MissingQty,trr.qty,tr.TransRetID from tblReturnProd_" + sTableName + " r inner join tbltransReturnProd_" + sTableName + " tr on tr.RetNo=r.RetNo inner join tbltransreturnreceiveProd_" + sTableName + " trr on trr.TransRetID=tr.TransRetID inner join tblreason rr on rr.ReasonID=r.iPayMode inner join tblsubreasons sr on sr.id=r.Reasonsid inner join tblcategory c on c.categoryid=tr.CategoryID inner join tblcategoryuser cu on cu.CategoryUserID=tr.SubCategoryID where CONVERT(date, trr.Date )>= '" + Convert.ToDateTime(sFrom).ToString("yyyy-MM-dd") + "' and CONVERT(date, trr.Date ) <= '" + Convert.ToDateTime(sTo).ToString("yyyy-MM-dd") + "' order by Date asc ";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                string sqry = "select r.LocalBranch as Branch,rr.Reason,sr.SubReasons,c.Category,cu.Definition,r.RetNo,r.RetDate,tr.Quantity,trr.MissingQty,trr.qty,tr.TransRetID from tblReturnProd_" + sTableName + " r inner join tbltransReturnProd_" + sTableName + " tr on tr.RetNo=r.RetNo inner join tbltransreturnreceiveProd_" + sTableName + " trr on trr.TransRetID=tr.TransRetID inner join tblreason rr on rr.ReasonID=r.iPayMode inner join tblsubreasons sr on sr.id=r.Reasonsid inner join tblcategory c on c.categoryid=tr.CategoryID inner join tblcategoryuser cu on cu.CategoryUserID=tr.SubCategoryID where CONVERT(date, trr.Date )>= '" + Convert.ToDateTime(sFrom).ToString("yyyy-MM-dd") + "' and CONVERT(date, trr.Date ) <= '" + Convert.ToDateTime(sTo).ToString("yyyy-MM-dd") + "' and a.iPayMode=" + ReasonID + " order by Date asc ";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            return ds;
        }



        public DataSet getReturnreports1(string sTableName, DateTime sFrom, DateTime sTo, String ReasonID)
        {
            DataSet ds = new DataSet();
            if (ReasonID == "All")
            {
                string sqry = "select sum(b.Amount) as Amount,f.Reason,LEFT(DATENAME(weekday, convert(date,RetDate)),3) as day from tblReturn_" + sTableName + " a,tblTransReturn_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f,tbllogin l where f.reasonid=a.ipaymode and a.RetNo=b.RetNo and c.categoryid=d.categoryid and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and l.userid=a.Userid  and CONVERT(date, a.RetDate )>= '" + Convert.ToDateTime(sFrom).ToString("yyyy-MM-dd") + "' and CONVERT(date, a.RetDate ) <= '" + Convert.ToDateTime(sTo).ToString("yyyy-MM-dd") + "' group by Reason,cast(RetDate as Date) order by Reason asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                string sqry = "select sum(b.Amount) as Amount,SubReasons as Reason,LEFT(DATENAME(weekday, convert(date,RetDate)),3) as day from tblReturn_" + sTableName + " a,tblTransReturn_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f,tbllogin l where f.reasonid=a.ipaymode and a.RetNo=b.RetNo and c.categoryid=d.categoryid and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and l.userid=a.Userid  and CONVERT(date, a.RetDate )>= '" + Convert.ToDateTime(sFrom).ToString("yyyy-MM-dd") + "' and CONVERT(date, a.RetDate ) <= '" + Convert.ToDateTime(sTo).ToString("yyyy-MM-dd") + "' and a.iPayMode=" + ReasonID + " group by SubReasons,cast(RetDate as Date) order by SubReasons asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            return ds;
        }

        public DataSet getReturnreports2(string sTableName, DateTime sFrom, DateTime sTo, String ReasonID)
        {
            DataSet ds = new DataSet();
            if (ReasonID == "All")
            {
                string sqry = "select distinct f.Reason from tblReturn_" + sTableName + " a,tblTransReturn_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f,tbllogin l where f.reasonid=a.ipaymode and a.RetNo=b.RetNo and c.categoryid=d.categoryid and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and l.userid=a.Userid  and CONVERT(date, a.RetDate )>= '" + Convert.ToDateTime(sFrom).ToString("yyyy-MM-dd") + "' and CONVERT(date, a.RetDate ) <= '" + Convert.ToDateTime(sTo).ToString("yyyy-MM-dd") + "' group by Reason,RetDate order by Reason asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                string sqry = "select distinct SubReasons as Reason from tblReturn_" + sTableName + " a,tblTransReturn_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f,tbllogin l where f.reasonid=a.ipaymode and a.RetNo=b.RetNo and c.categoryid=d.categoryid and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and l.userid=a.Userid  and CONVERT(date, a.RetDate )>= '" + Convert.ToDateTime(sFrom).ToString("yyyy-MM-dd") + "' and CONVERT(date, a.RetDate ) <= '" + Convert.ToDateTime(sTo).ToString("yyyy-MM-dd") + "' and a.iPayMode=" + ReasonID + " group by SubReasons,RetDate order by SubReasons asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            return ds;
        }


        public DataSet getStockRequestFromBranchsQty(string branchcode, DateTime datee)
        {
            DataSet ds = new DataSet();

            DataSet dsmerge = new DataSet();

            string sqry = "select c.Category,cu.Definition,sum(isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) as Qty,u.UOM,c.Categoryid,cu.CategoryUserID " +
                " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
                " inner join tblTransPurchaseRequestProd_" + branchcode + " tpr on tpr.RequestID=pr.requestno  inner join tblCategoryUser cu on cu.CategoryUserID=tpr.DescriptionId " +
                " inner join tblcategory c on c.Categoryid=cu.CategoryID inner join tblUOM u on u.UOMID=cu.unit  where bs.Productioncode='" + branchcode + "' " +
                " and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  and  " +
                " (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0   group by c.Category,cu.Definition,u.UOM,c.Categoryid,cu.CategoryUserID " +
                " order by c.Category,cu.Definition asc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            dsmerge.Merge(ds);

            string sqry1 = "select c.Category,cu.Definition,sum(isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) as Qty,u.UOM,c.Categoryid,cu.CategoryUserID " +
                " from tblbranchsetting as bs inner join tblpurchaserequestprod_" + branchcode + " as pr on pr.StoreBranch=bs.BranchCode " +
                " inner join tblTransPurchaseRequestProd_" + branchcode + " tpr on tpr.RequestID=pr.requestno  inner join tblCategoryUser cu on cu.CategoryUserID=tpr.DescriptionId " +
                " inner join tblcategory c on c.Categoryid=cu.CategoryID inner join tblUOM u on u.UOMID=cu.unit  where bs.Icingcode='" + branchcode + "' " +
                " and pr.isaccepted='0' and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  and  " +
                " (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0   group by c.Category,cu.Definition,u.UOM,c.Categoryid,cu.CategoryUserID " +
                " order by c.Category,cu.Definition asc ";
            DataSet ds1 = dbObj.InlineExecuteDataSet(sqry1);
            dsmerge.Merge(ds1);



            return dsmerge;
        }

        public DataSet getStockRequestFromBranchsQty_Semi(string branchcode, DateTime datee)
        {
            DataSet ds = new DataSet();
            string sqry = "select c.SemiCategory as Category,cu.SemiIngredientName as Definition,sum(isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) as Qty,u.UOM,c.SemiCatID as Categoryid,cu.SemiIngridID as CategoryUserID " +
                " from tblSemiProdSetting as bs inner join tblSemipurchaserequestlive_" + branchcode + " as pr on pr.StoreBranch=bs.FromProdCode " +
                " inner join tblTranssemiPurchaseRequestlive_" + branchcode + " tpr on tpr.RequestID=pr.requestno " +
                " inner join tblSemiIngridents cu on cu.SemiIngridID=tpr.DescriptionId inner join tblSemiCategory c on c.SemiCatID=cu.SemiCatID " +
                " inner join tblUOM u on u.UOMID=cu.Units  where bs.ToProdCode='" + branchcode + "'  and pr.isaccepted='0' " +
                " and convert(date, pr.requestdate) ='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'  and  (isnull(tpr.Order_Qty,0)- ISNULL(tpr.Received_Qty,0)) >0 " +
                " group by c.SemiCategory,cu.SemiIngredientName,u.UOM,c.SemiCatID,cu.SemiIngridID order by c.SemiCategory,cu.SemiIngredientName asc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getStockRequestFromBranchsQtyDC(string branchcode, DateTime datee, string Fromtime, string Totime, string storelist)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;


            if (storelist == "All")
            {
                sqry = "select u.UOM,d.categoryid,c.CategoryUserID,e.branchid,brancharea,category,definition,sum(order_Qty) as Oqty,sum(received_qty) as qty from tblgoodtransfer_" + branchcode + " as a " +
    " inner join  tbltransgoodstransfer_" + branchcode + " as b on b.dc_no=a.DC_no " +
    " inner join tblcategoryuser as c on c.categoryuserid=b.descriptionid " +
    " inner join tblcategory as d on d.categoryid=b.categoryid inner join tblbranch as e on e.branchcode=a.branch inner join tblUOM u on u.UOMID=c.unit  " +
    " where (cast(dc_date as date)  =  '" + Convert.ToDateTime(datee).ToString("yyyy-MM-dd") + "'  and cast(dc_date as time) >= cast('" + Fromtime + "' as time)  and cast(dc_date as time) <= cast('" + Totime + "' as time))  " +
    " group by u.UOM,branch,brancharea,category,definition,e.branchid,d.categoryid,c.CategoryUserID order by branch,category asc ";
            }
            else
            {
                sqry = "select u.UOM,d.categoryid,c.CategoryUserID,e.branchid,brancharea,category,definition,sum(order_Qty) as Oqty,sum(received_qty) as qty from tblgoodtransfer_" + branchcode + " as a " +
" inner join  tbltransgoodstransfer_" + branchcode + " as b on b.dc_no=a.DC_no " +
" inner join tblcategoryuser as c on c.categoryuserid=b.descriptionid " +
" inner join tblcategory as d on d.categoryid=b.categoryid inner join tblbranch as e on e.branchcode=a.branch inner join tblUOM u on u.UOMID=c.unit  " +
" where a.branch='" + storelist + "' and (cast(dc_date as date)  =  '" + Convert.ToDateTime(datee).ToString("yyyy-MM-dd") + "'  and cast(dc_date as time) >= cast('" + Fromtime + "' as time)  and cast(dc_date as time) <= cast('" + Totime + "' as time))  " +
" group by u.UOM,branch,brancharea,category,definition,e.branchid,d.categoryid,c.CategoryUserID order by branch,category asc ";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet getStockRequestFromBranchsQtyDC_SEMI(string branchcode, DateTime datee, string Fromtime, string Totime, string storelist)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (storelist == "All")
            {
                sqry = "select u.UOM,d.SemiCatID as categoryid,c.SemiIngridID as CategoryUserID,e.branchid,brancharea,SemiCategory as category,SemiIngredientName as definition,sum(order_Qty) as Oqty,sum(received_qty) as qty from tblSemigoodtransfer_" + branchcode + " as a " +
    " inner join  tbltranssemigoodstransfer_" + branchcode + " as b on b.dc_no=a.DC_no " +
    " inner join tblSemiIngridents as c on c.SemiIngridID=b.descriptionid " +
    " inner join tblSemiCategory as d on d.SemiCatID=b.categoryid inner join tblbranch as e on e.branchcode=a.branch inner join tblUOM u on u.UOMID=c.units  " +
    " where (cast(dc_date as date)  =  '" + Convert.ToDateTime(datee).ToString("yyyy-MM-dd") + "'  and cast(dc_date as time) >= cast('" + Fromtime + "' as time)  and cast(dc_date as time) <= cast('" + Totime + "' as time))  " +
    " group by u.UOM,branch,brancharea,SemiCategory,SemiIngredientName,e.branchid,d.SemiCatID,c.SemiIngridID order by branch,SemiCategory asc ";
            }
            else
            {
                sqry = "select u.UOM,d.SemiCatID as categoryid,c.SemiIngridID as CategoryUserID,e.branchid,brancharea,SemiCategory as category,SemiIngredientName as definition,sum(order_Qty) as Oqty,sum(received_qty) as qty from tblsemigoodtransfer_" + branchcode + " as a " +
" inner join  tblSemitransgoodstransfer_" + branchcode + " as b on b.dc_no=a.DC_no " +
" inner join tblSemiIngridents as c on c.SemiIngridID=b.descriptionid " +
" inner join tblSemiCategory as d on d.SemiCatID=b.categoryid inner join tblbranch as e on e.branchcode=a.branch inner join tblUOM u on u.UOMID=c.units  " +
" where a.branch='" + storelist + "' and (cast(dc_date as date)  =  '" + Convert.ToDateTime(datee).ToString("yyyy-MM-dd") + "'  and cast(dc_date as time) >= cast('" + Fromtime + "' as time)  and cast(dc_date as time) <= cast('" + Totime + "' as time))  " +
" group by u.UOM,branch,brancharea,SemiCategory,SemiIngredientName,e.branchid,d.SemiCatID,c.SemiIngridID order by branch,SemiCategory asc ";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet getStockRequestFromBranchsQtyDCstore(string branchcode, DateTime datee, string storelist)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (storelist == "All")
            {
                sqry = "  select u.UOM,d.IngCatID as categoryid,c.IngridID as CategoryUserID,e.branchid,brancharea,IngreCategory as category, " +
                      "  IngredientName as definition,sum(order_Qty) as Oqty,sum(received_qty) as qty from tblgoodtransferstore_" + branchcode + " as a  " +
                      " inner join  tbltransgoodstransferstore_" + branchcode + " as b on b.dc_no=a.DC_no  inner join tblingridents as c on c.IngridID=b.descriptionid  " +
                      " inner join tblingridentscategory as d on d.IngCatID=c.IngCatID  inner join tblbranch as e on e.branchcode=a.branch inner join tblUOM u on u.UOMID=c.Units " +
                      " where (cast(dc_date as date)  =  '" + Convert.ToDateTime(datee).ToString("yyyy-MM-dd") + "')   " +
                      " group by u.UOM,branch,brancharea,IngreCategory,IngredientName,e.branchid,d.IngCatID,c.IngridID order by branch,IngreCategory asc ";
            }
            else
            {
                sqry = "  select u.UOM,d.IngCatID as categoryid,c.IngridID as CategoryUserID,e.branchid,brancharea,IngreCategory as category, " +
                      "  IngredientName as definition,sum(order_Qty) as Oqty,sum(received_qty) as qty from tblgoodtransferstore_" + branchcode + " as a  " +
                      " inner join  tbltransgoodstransferstore_" + branchcode + " as b on b.dc_no=a.DC_no  inner join tblingridents as c on c.IngridID=b.descriptionid  " +
                      " inner join tblingridentscategory as d on d.IngCatID=c.IngCatID  inner join tblbranch as e on e.branchcode=a.branch inner join tblUOM u on u.UOMID=c.Units " +
                      " where a.branch='" + storelist + "' and (cast(dc_date as date)  =  '" + Convert.ToDateTime(datee).ToString("yyyy-MM-dd") + "')  " +
                      " group by u.UOM,branch,brancharea,IngreCategory,IngredientName,e.branchid,d.IngCatID,c.IngridID order by branch,IngreCategory asc ";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }



        public DataSet SalesCharts(string sBranch, DateTime sFmdate, DateTime sToDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select sum(s.Total) as Amount,'Sales' as Reason,LEFT(DATENAME(weekday, convert(date,BillDate)),3) as day from tblsales_" + sBranch + " as s inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID inner join tblSalesPaymode as sp on sp.Value=s.iPayMode where OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' group by convert(date,BillDate) ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet PaymentCharts(DateTime sFrom, DateTime sTo, string sTablename)
        {
            DataSet ds = new DataSet();
            string sqry = "select 'Payments' as Reason, LEFT(DATENAME(weekday, convert(date,Date)),3) as day,sum(a.Amount) as Amount from tblPaymentEntry_" + sTablename + " a,tblledger b where a.ledgerid=b.ledgerid and cast(a.Date as Date) >= '" + Convert.ToDateTime(sFrom).ToString("yyyy-MM-dd") + "' and cast(a.Date as Date) <='" + Convert.ToDateTime(sTo).ToString("yyyy-MM-dd") + "' group by convert(date,Date)";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet SalesStaffCreditCharts(string sBranch, DateTime sFmdate, DateTime sToDate, string salestype)
        {
            DataSet ds = new DataSet();

            string sqry = "select 'SalesStaffCredit' as Reason,LEFT(DATENAME(weekday, convert(date,Billdate)),3) as day, sum(isnull((((((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100)   +  ((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100))),0))  as Amount  from tblsales_" + sBranch + " as s inner join tbltranssales_" + sBranch + " as ts on ts.salesid=s.billno inner join tblsalestype as st on st.salestypeid=s.salestype " +
" inner join tblcategoryuser as cu on cu.categoryuserid=ts.subcategoryid inner join tblcategory as c on c.categoryid=ts.CategoryID  " +
" inner  join tblSalesPaymode as sp on sp.value=s.ipaymode inner join tblcustomer as cus on cus.customerid=s.customerid where  " +
" OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd") + "' " +
" and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd") + "' and s.cancelstatus='No' and s.salesid=ts.salesuniqueid and s.salestype='" + salestype + "' group by convert(date,BillDate)";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet OrderStaffCreditCharts(string sBranch, DateTime sFmdate, DateTime sToDate, string paymode)
        {
            DataSet ds = new DataSet();
            string sqry = "Select 'OrderStaffCredit' as Reason,LEFT(DATENAME(weekday, convert(date,toa.Billdate)),3) as day, sum(toa.Amount) as Amount from tblorder_" + sBranch + " as s inner join tbltransorderamount_" + sBranch + " as toa on toa.billno=s.billno inner join tblsalespaymode as st on st.value=toa.paymode inner join tblCustomer as cu  on s.CustomerID=cu.CustomerID where toa.orderno=s.orderno and  s.OrderNo>0  and convert(date,toa.Billdate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd") + "' and convert(date,toa.Billdate)  <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd") + "' and s.iscancel=0 and toa.paymode='" + paymode + "' group by convert(date,toa.Billdate) ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet SalesDiscountCharts(string sBranch, DateTime sFmdate, DateTime sToDate)
        {
            DataSet ds = new DataSet();
            string sqry = "select 'SalesDiscount' as Reason,sum(s.Discount) as Amount,LEFT(DATENAME(weekday, convert(date,Billdate)),3) as day from tblsales_" + sBranch + " s ,tblcustomer c,tblTransSales_" + sBranch + " b,tblCategoryUser cc,tblSalesPaymode as sp where sp.Value=s.iPayMode and s.customerid=c.customerid and s.BillNo=b.Salesid and b.subcategoryid=cc.categoryuserid  and OrderNo=0  and  convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' and s.Discount>0  group by convert(date,Billdate) ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        #region COMBO PROCESS
        public DataSet getcomboproduct()
        {
            DataSet ds = new DataSet();
            string sqry = "Select * from tblCombo";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;

        }

        public DataSet get_category(string CatType)
        {
            DataSet dss = new DataSet();
            string item = "Select * from tblcategory Where cattype='" + CatType + "'";
            dss = dbObj.InlineExecuteDataSet(item);
            return dss;
        }

        public DataSet get_comboforupdate(string comboid)
        {
            DataSet dss = new DataSet();
            string item = "Select * from tblcombo where comboid='" + comboid + "'";
            dss = dbObj.InlineExecuteDataSet(item);
            return dss;
        }

        public DataSet gettranscomboupdate(string iSalesID)
        {
            DataSet ds = new DataSet();
            string sQry = "select tc.*,cu.rate as ori,tc.Ctax as taxval from tbltranscombo as tc inner join tblcategoryuser as cu on cu.CategoryUserid=tc.categoryuserid where comboid='" + iSalesID + "'";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int insertcombo(string comboname, string amount, string categoryid)
        {
            int save = 0;
            string sQry = "Insert into tblCombo(ComboName,TotalRate,CategoryId)Values('" + comboname + "','" + amount + "','" + categoryid + "')";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;
        }

        public int updatecombo(string comboname, string amount, string categoryid, string icombo, string IsActive)
        {
            int save = 0;
            //string sQry = "Insert into tblCombo(ComboName,TotalRate,CategoryId)Values('" + comboname + "','" + amount + "','" + categoryid + "')";
            string sQry = "Update tblcombo set IsActive='" + IsActive + "',ComboName='" + comboname + "',TotalRate='" + amount + "',CategoryId='" + categoryid + "' where Comboid='" + icombo + "' ";
            save = dbObj.InlineExecuteNonQuery(sQry);

            string sqr = "Delete from tbltranscombo where comboid='" + icombo + "'";
            int check = dbObj.InlineExecuteNonQuery(sqr);

            return save;
        }

        public int updatetranscombo(string categoryuserid, string Qty, string rate, string total, string category, string cate, string ctax, string ctaxvalue)
        {
            int save = 0;
            DataSet ds = new DataSet();
            {
                string sQry = "Insert into tblTransCombo(Comboid,Categoryuserid,Qty,Rate,TotalAmount,Categoryid,Ctax,Ctaxvalue)Values('" + cate + "','" + categoryuserid + "','" + Qty + "','" + rate + "','" + total + "','" + category + "','" + ctax + "','" + ctaxvalue + "')";
                save = dbObj.InlineExecuteNonQuery(sQry);
            }
            return save;
        }

        public int inserttranscombo(string categoryuserid, string Qty, string rate, string total, string category, string ctax, string Ctaxvalue)
        {
            int save = 0;
            DataSet ds = new DataSet();
            string sqr = "Select MAX(Comboid) as comb from tblcombo";
            ds = dbObj.InlineExecuteDataSet(sqr);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string cate = ds.Tables[0].Rows[0]["comb"].ToString();
                string sQry = "Insert into tblTransCombo(Comboid,Categoryuserid,Qty,Rate,TotalAmount,Categoryid,Ctax,Ctaxvalue)Values('" + cate + "','" + categoryuserid + "','" + Qty + "','" + rate + "','" + total + "','" + category + "','" + ctax + "','" + Ctaxvalue + "')";
                save = dbObj.InlineExecuteNonQuery(sQry);
            }
            return save;
        }

        public DataSet get_item()
        {
            DataSet dss = new DataSet();
            string item = "Select * from tblcategoryuser where IsActive='Yes'";
            dss = dbObj.InlineExecuteDataSet(item);
            return dss;
        }

        public DataSet getitemratee(string itemid)
        {
            DataSet ds = new DataSet();
            string sqry = "Select * from tblcategoryuser where Categoryuserid='" + itemid + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #endregion

        #region New Method
        public DataSet gettingcategorybyid(string catid)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategory where categoryid='" + catid + "' and IsActive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        public DataSet gettinground(string stablename)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblround_" + stablename + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet gettinground(string stablename, string roundid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblround_" + stablename + " where Roundid ='" + roundid + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        #region Query for Branch Setting
        public DataSet gridstoresetting()
        {
            DataSet ds = new DataSet();
            string sqry = "select a.*,b.Printitem,c.IngredientName from tblstoreSetting as a inner join tblcategoryuser as b on b.categoryuserid=a.Categoryuserid inner join tblIngridents as c on c.IngridID=a.Ingid where a.IsActive='Yes'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet gridstoresettingHistory(string date)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.*,b.Printitem,c.IngredientName from tblstoreSettingHistory as a inner join tblcategoryuser as b on b.categoryuserid=a.Categoryuserid inner join tblIngridents as c on c.IngridID=a.Ingid where  convert(date,Entrydate)>='" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "'   ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;

        }

        public DataSet gridloadingingitem()
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            {
                sqry = "select * from  tblingridents b " +
                    " where    b.IsActive='Yes' " +
                    "  and b.Isallow='Y' order by b.IngredientName  asc";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet gridloadingbranchitem()
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            {
                sqry = "select * from tblcategoryuser a,tblcategory b where a.CategoryID=b.categoryid and b.isactive='Yes' order by a.definition asc";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getupdateitemsettingforid(string iCat)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblstoreSetting where StoreSettingId ='" + iCat + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int deleteitemsetting(string branchsettingno)
        {
            int iSucess = 0;
            string sQry = "update  tblstoreSetting set  IsActive='No'  where StoreSettingId='" + branchsettingno + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }


        public DataSet duplicateitemsettingcheck(string Ingid, string Categoryuserid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblstoreSetting where (Ingid='" + Ingid + "' or Categoryuserid='" + Categoryuserid + "')  order by StoreSettingId desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int InsertstoritemSetting(string storeitem, string branchitem, string Empname)
        {
            int iSuccess = 0;
            string storecode = string.Empty;
            string prodcode = string.Empty;

            string sQry = "insert into tblstoreSetting(Ingid,Categoryuserid,Empname) " +
                    " values ('" + storeitem + "','" + branchitem + "','" + Empname + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }

        public int updatestoreitemsetting(string storeitem, string branchitem, string isactive, string storesettingid, string Empname)
        {
            int iSucess = 0;
            string prodcode = string.Empty;

            string sQry = "update tblstoreSetting set Ingid='" + storeitem + "',Categoryuserid='" + branchitem + "',isactive='" + isactive + "',Empname='" + Empname + "'  where StoreSettingId='" + storesettingid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);


            string sQry1 = "insert into tblstoreSettinghistory(StoreSettingId,Ingid,Categoryuserid,Empname) " +
                    " values ('" + storesettingid + "','" + storeitem + "','" + branchitem + "','" + Empname + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry1);
            return iSucess;
        }

        #endregion



        #region
        public DataSet GetItemreceivedDetails(DateTime date, string branchode, string typeid)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (typeid == "1")
            {
                sqry = "select printcategory,printitem,sum(received_qty) as received_qty,sum(missing_qty) as missing_qty,sum(damage_qty) as damage_qty from tblGoodReceived_" + branchode + " as a inner join tbltransgoodsreceived_" + branchode + " as b on b.recid=a.recid inner join  " +
                       " tblcategoryuser as c on c.categoryuserid=b.descriptionid  inner join tblcategory as d on d.categoryid=c.categoryid " +
                      " where cast(recdate as date) ='" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "' group by printcategory,printitem";
            }
            else
            {
                sqry = "select dc_no,recdate,printcategory,printitem,received_qty,missing_qty,damage_qty from tblGoodReceived_" + branchode + " as a inner join tbltransgoodsreceived_" + branchode + " as b on b.recid=a.recid inner join  " +
                      " tblcategoryuser as c on c.categoryuserid=b.descriptionid  inner join tblcategory as d on d.categoryid=c.categoryid " +
                     " where cast(recdate as date) ='" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "'";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetItemreceivedDetails_Semi(DateTime date, string branchode, string typeid)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (typeid == "1")
            {
                sqry = "select SemiCategory as printcategory,SemiIngredientName as printitem,sum(received_qty) as received_qty,sum(missing_qty) as missing_qty,sum(damage_qty) as damage_qty from tblsemiGoodReceived_" + branchode + " as a inner join tbltranssemigoodsreceived_" + branchode + " as b on b.recid=a.recid inner join  " +
                       " tblSemiIngridents as c on c.SemiIngridID=b.descriptionid  inner join tblSemiCategory as d on d.SemiCatID=c.SemiCatID " +
                      " where cast(recdate as date) ='" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "' group by SemiCategory,SemiIngredientName";
            }
            else
            {
                sqry = "select dc_no,recdate,SemiCategory as printcategory,SemiIngredientName as printitem,received_qty,missing_qty,damage_qty from tblsemiGoodReceived_" + branchode + " as a inner join tbltranssemigoodsreceived_" + branchode + " as b on b.recid=a.recid inner join  " +
                      " tblSemiIngridents as c on c.SemiIngridID=b.descriptionid  inner join tblSemiCategory as d on d.SemiCatID=c.SemiCatID " +
                     " where cast(recdate as date) ='" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "'";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }



        #endregion


        #region GET LOGNI DETAILS REPORT
        public DataSet getlogindetails(string logintype)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblworkers where logintype=" + logintype + "";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet salesempsummaryreports(string sBranch, DateTime sFmdate, DateTime sToDate, string emptype, string gstbill)
        {
            string store = "";
            string sqry = string.Empty;
            DataSet ds = new DataSet();
            if (emptype == "All")
            {
                sqry = "select sum(c.quantity * c.unitprice) as tot,sum(disc) as dic,sum(quantity) as qty,b.name,b.billtype,a.biller from tblsales_" + sBranch + " as a  inner join tbltranssales_" + sBranch + " as c on c.salesid=a.billno  " +
                       " inner join tblworkers as b on a.billerid=b.empid where a.salesid=c.salesuniqueid and OrderNo=0  and  convert(date,a.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                  " and convert(date,a.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and a.cancelstatus='No'  and a.gstbill ='" + gstbill + "' group by a.biller,b.name,b.billtype Order by b.name asc";
            }
            else
            {
                sqry = "select sum(c.quantity * c.unitprice) as tot,sum(disc) as dic,sum(quantity) as qty,b.name,b.billtype,a.biller from tblsales_" + sBranch + " as a  inner join tbltranssales_" + sBranch + " as c on c.salesid=a.billno  " +
                       " inner join tblworkers as b on a.billerid=b.empid where a.salesid=c.salesuniqueid and a.biller='" + emptype + "' and OrderNo=0  and  convert(date,a.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                  " and convert(date,a.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and a.cancelstatus='No'  and a.gstbill ='" + gstbill + "'  group by a.biller,b.name,b.billtype Order by b.name asc";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet salesempsummarydatereports(string sBranch, DateTime sFmdate, DateTime sToDate, string emptype, string gstbill)
        {
            string store = "";
            string sqry = string.Empty;
            DataSet ds = new DataSet();
            if (emptype == "All")
            {
                sqry = "select cast(a.billdate as date) as bdate,sum(c.quantity * c.unitprice) as tot,sum(disc) as dic,sum(quantity) as qty,b.name,b.billtype,a.biller from tblsales_" + sBranch + " as a  inner join tbltranssales_" + sBranch + " as c on c.salesid=a.billno  " +
                       " inner join tblworkers as b on a.billerid=b.empid where a.salesid=c.salesuniqueid and OrderNo=0  and  convert(date,a.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                  " and convert(date,a.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and a.cancelstatus='No'  and a.gstbill ='" + gstbill + "'  group by b.name,a.biller,b.billtype,cast(a.billdate as date) Order by b.name asc";
            }
            else
            {
                sqry = "select cast(a.billdate as date) as bdate,sum(c.quantity * c.unitprice) as tot,sum(disc) as dic,sum(quantity) as qty,b.name,b.billtype,a.biller from tblsales_" + sBranch + " as a  inner join tbltranssales_" + sBranch + " as c on c.salesid=a.billno  " +
                       " inner join tblworkers as b on a.billerid=b.empid where a.salesid=c.salesuniqueid and a.biller='" + emptype + "' and OrderNo=0  and  convert(date,a.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                  " and convert(date,a.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and a.cancelstatus='No'  and a.gstbill ='" + gstbill + "'  group by b.name,a.biller,b.billtype,cast(a.billdate as date) Order by b.name asc";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet salesempItemwisereports(string sBranch, DateTime sFmdate, DateTime sToDate, string emptype, string gstbill)
        {
            string store = "";
            string sqry = string.Empty;
            DataSet ds = new DataSet();
            if (emptype == "All")
            {
                sqry = "select e.category,d.definition,sum(c.quantity * c.unitprice) as tot,sum(disc) as dic,sum(quantity) as qty,b.name,b.billtype from tblsales_" + sBranch + " as a  inner join tbltranssales_" + sBranch + " as c on c.salesid=a.billno  " +
                       " inner join tblworkers as b on a.billerid=b.empid inner join tblcategoryuser as d on d.categoryuserid=c.subcategoryid inner join tblcategory as e on e.categoryid=d.categoryid where a.salesid=c.salesuniqueid and OrderNo=0  and  convert(date,a.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                  " and convert(date,a.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and a.cancelstatus='No' and a.gstbill ='" + gstbill + "'  group by b.name,b.billtype,e.category,d.definition Order by b.name asc";
            }
            else
            {
                sqry = "select e.category,d.definition,sum(c.quantity * c.unitprice) as tot,sum(disc) as dic,sum(quantity) as qty,b.name,b.billtype from tblsales_" + sBranch + " as a  inner join tbltranssales_" + sBranch + " as c on c.salesid=a.billno  " +
                       " inner join tblworkers as b on a.billerid=b.empid inner join tblcategoryuser as d on d.categoryuserid=c.subcategoryid inner join tblcategory as e on e.categoryid=d.categoryid where a.salesid=c.salesuniqueid and a.biller='" + emptype + "' and OrderNo=0  and  convert(date,a.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                  " and convert(date,a.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and a.cancelstatus='No' and a.gstbill ='" + gstbill + "'  group by b.name,b.billtype,e.category,d.definition Order by b.name asc";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion

        #region DEMAND SEMI STORE REQUEST/ACCEPT
        public DataSet selectcategorymasterforitemrequestSemiStoreDemand()
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategory  where isdelete=0 order by category asc ";
            string sQry = "select distinct ic.* from tblsemicategory as ic inner join tblSemiIngridents b on ic.SemiCatID=b.SemiCatID " +
                " where ic.isActive='Yes'  order by ic.SemiIngredientName asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getmaxrawmaterialrequestDemand_Semi(string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(RequestNo)+1,1) as RequestNo from tblRequestSemiRawMaterials_" + scode + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet itemforreqestSemiStoreDemand(int categoryid, string stable, string type)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            {


                sqry = "select  a.semiCatID as categoryid,a.SemiCategory as category,b.SemiIngridID as categoryuserid,b.SemiIngredientName as definition,'0' as Available_qty, " +
                     " UOM,u.UOMID from tblsemicategory a inner join tblSemiIngridents b on a.SemiCatID=b.SemiCatID   " +
                     "  inner join tblUOM u on u.UOMID=b.units where    b.IsActive='Yes'  " +
                     " and a.SemiCatID=" + categoryid + "  order by b.SemiIngredientName  asc";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }




        #endregion


        #region DEMAND STORE REQUEST/ACCEPT
        public DataSet selectcategorymasterforitemrequestStoreDemand()
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategory  where isdelete=0 order by category asc ";
            string sQry = "select distinct ic.* from tblingridentscategory as ic inner join tblingridents b on ic.IngCatID=b.IngCatID  where ic.isActive='Yes'  order by ic.ingrecategory asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet getmaxrawmaterialrequestDemand(string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(RequestNo)+1,1) as RequestNo from tblRequestRawMaterials_" + scode + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet itemforreqestStoreDemand(string categoryid, string stable, string type)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (categoryid == "All")
            {
                sqry = "select  a.IngCatID as categoryid,a.IngreCategory as category,b.IngridID as categoryuserid,b.IngredientName as definition,'0' as Available_qty, UOM,u.UOMID  " +
                    " from tblingridentscategory a inner join tblingridents b on a.IngCatID=b.IngCatID  " +
                    "  inner join tblUOM u on u.UOMID=b.units where    b.IsActive='Yes' " +
                    " order by b.IngredientName  asc";
            }
            else
            {
                sqry = "select  a.IngCatID as categoryid,a.IngreCategory as category,b.IngridID as categoryuserid,b.IngredientName as definition,'0' as Available_qty, UOM,u.UOMID  " +
                    " from tblingridentscategory a inner join tblingridents b on a.IngCatID=b.IngCatID  " +
                    "  inner join tblUOM u on u.UOMID=b.units where    b.IsActive='Yes' " +
                    " and a.IngCatID=" + categoryid + "  order by b.IngredientName  asc";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int Inserttransrawitemaccept4(string Table, int RequestID, int RawItemId, double Qty, double Reqid, double AcceptQty, string narration)
        {
            int iSuccess = 0;
            double AvStk;
            string sQry = "insert into tbltransAcceptRawItem_" + Table + "( RequestID,RawItemId,Qty,ActualQty,AcceptQty,Narration,IsAccept,MissingQty,DamageQty) values (" + RequestID + "," + RawItemId + "," + Qty + "," + Qty + "," + AcceptQty + ",'" + narration + "','0','0','0')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);


            string sQry12 = "update tbltransRequestRawMaterials_" + Table + " set PendingQty=PendingQty+" + AcceptQty + " where RequestID=" + Reqid + " and ItemId=" + RawItemId + "";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry12);

            string updaanohefunction = "select * from tbltransRequestRawMaterials_" + Table + " where qty=pendingqty and  RequestID=" + Reqid + " and ItemId=" + RawItemId + "";
            DataSet getlist = dbObj.InlineExecuteDataSet(updaanohefunction);
            if (getlist.Tables[0].Rows.Count > 0)
            {
                string ID = getlist.Tables[0].Rows[0]["ID"].ToString();

                string sQry2 = "update tbltransRequestRawMaterials_" + Table + " set isstocked='1' where id='" + ID + "'";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry2);
            }


            string sQry1 = "update tblRawMatlStock_" + Table + " set Qty=Qty-" + AcceptQty + " where IngredientID=" + RawItemId + " ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry1);

            AvStk = AcceptQty;
            DataSet ds = new DataSet();
            string sqry = "select * from tblRawMatlStockExp_" + Table + " where IngredientID=" + RawItemId + " and Qty > 0 order by ExpiredDate";
            ds = dbObj.InlineExecuteDataSet(sqry);
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                if (AvStk > Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]))
                {
                    string sQry11 = "update tblRawMatlStockExp_" + Table + " set Qty=Qty-" + ds.Tables[0].Rows[i]["Qty"] + " where IngredientID=" + RawItemId + " and  StockExpID = '" + ds.Tables[0].Rows[i]["StockExpID"].ToString() + "'";
                    AvStk = AvStk - Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]);
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry11);
                }
                else if (AvStk < Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]))
                {
                    string sQry11 = "update tblRawMatlStockExp_" + Table + " set Qty=Qty-" + AvStk + " where IngredientID=" + RawItemId + " and  StockExpID = '" + ds.Tables[0].Rows[i]["StockExpID"].ToString() + "'";
                    AvStk = 0;
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry11);
                }
                else if (AvStk == Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]))
                {
                    string sQry11 = "update tblRawMatlStockExp_" + Table + " set Qty=Qty-" + AvStk + " where IngredientID=" + RawItemId + " and  StockExpID = '" + ds.Tables[0].Rows[i]["StockExpID"].ToString() + "'";
                    AvStk = 0;
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry11);
                }
            }

            //string sqryP = " select * from tblRawMatlStockProduction_" + Table + " where IngredientID=" + RawItemId + "";
            //ds = dbObj.InlineExecuteDataSet(sqryP);
            //if (ds.Tables[0].Rows.Count > 0)
            //{
            //    string sQry1P = "update tblRawMatlStockProduction_" + Table + " set Qty=Qty+" + AcceptQty + " where IngredientID=" + RawItemId + " ";
            //    iSuccess = dbObj.InlineExecuteNonQuery(sQry1P);
            //}
            //else
            //{
            //    string sQry1P = "insert into tblRawMatlStockProduction_" + Table + "(IngredientID,Qty) values (" + RawItemId + "," + AcceptQty + ") ";
            //    iSuccess = dbObj.InlineExecuteNonQuery(sQry1P);
            //}

            return iSuccess;

        }

        public DataSet DemadGoodTransferList(string Stable, string TansStable, int RequestNo)
        {
            DataSet ds = new DataSet();

            string sqry = "select s.RequestNo,RequestDate,Prepared,c.ingreCategory as Category,cu.IngredientName as Definition,ts.acceptqty as Qty,u.UOM as Unit " +
                " from " + Stable + " s  inner join  " + TansStable + " ts on  ts.RequestID=s.RequestNo  inner join tblIngridents cu on cu.IngridID=ts.rawItemId " +
                " inner join tblIngridentsCategory c on c.IngCatID=cu.IngCatID inner join tblUOM u on u.UOMID=cu.units  where s.RequestNo=" + RequestNo + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        #endregion


        #region Production All ReturnItems

        public DataSet getProductionAllReturnItems(string sTableName, string Branch, string Reason, DateTime From, DateTime To)// string From, string To
        {
            DataSet ds = new DataSet();
            string sqry = "";

            if (Branch == "All")
            {
                if (Reason == "All")
                {
                    sqry = "select CONVERT(VARCHAR(20), [RetDate], 103) AS DATEPART,CONVERT(VARCHAR(20), [RetDate], 108) AS TIMEPART, convert(datetime,a.RetDate) as ReturnDate,d.Category,c.Definition,b.Quantity,b.Amount,b.RetNo,f.reason as Reason,e.SubReasons,a.Name,saveDateTime,LocalBranch,LocalRetNo from tblReturnProd_" + sTableName + " a,tblTransReturnProd_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f where f.reasonid=a.ipaymode and a.RetNo=b.RetNo and c.categoryid=d.categoryid and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and CONVERT(date,RetDate )>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and CONVERT(date,RetDate )<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "'  order by a.RetDate,LocalBranch asc";
                    ds = dbObj.InlineExecuteDataSet(sqry);
                }
                else
                {
                    sqry = "select CONVERT(VARCHAR(20), [RetDate], 103) AS DATEPART,CONVERT(VARCHAR(20), [RetDate], 108) AS TIMEPART, convert(datetime,a.RetDate) as ReturnDate,d.Category,c.Definition,b.Quantity,b.Amount,b.RetNo,f.reason as Reason,e.SubReasons,a.Name,saveDateTime,LocalBranch,LocalRetNo from tblReturnProd_" + sTableName + " a,tblTransReturnProd_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f where f.reasonid=a.ipaymode and a.RetNo=b.RetNo and c.categoryid=d.categoryid and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and CONVERT(date,RetDate )>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and CONVERT(date,RetDate )<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and a.iPayMode=" + Reason + " order by a.RetDate,LocalBranch asc";
                    ds = dbObj.InlineExecuteDataSet(sqry);
                }
            }
            else
            {
                if (Reason == "All")
                {
                    sqry = "select CONVERT(VARCHAR(20), [RetDate], 103) AS DATEPART,CONVERT(VARCHAR(20), [RetDate], 108) AS TIMEPART, convert(datetime,a.RetDate) as ReturnDate,d.Category,c.Definition,b.Quantity,b.Amount,b.RetNo,f.reason as Reason,e.SubReasons,a.Name,saveDateTime,LocalBranch,LocalRetNo from tblReturnProd_" + sTableName + " a,tblTransReturnProd_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f where f.reasonid=a.ipaymode and a.RetNo=b.RetNo and c.categoryid=d.categoryid and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and CONVERT(date,RetDate )>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and CONVERT(date,RetDate )<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and LocalBranch='" + Branch + "' order by a.RetDate,LocalBranch asc";
                    ds = dbObj.InlineExecuteDataSet(sqry);
                }
                else
                {
                    sqry = "select CONVERT(VARCHAR(20), [RetDate], 103) AS DATEPART,CONVERT(VARCHAR(20), [RetDate], 108) AS TIMEPART, convert(datetime,a.RetDate) as ReturnDate,d.Category,c.Definition,b.Quantity,b.Amount,b.RetNo,f.reason as Reason,e.SubReasons,a.Name,saveDateTime,LocalBranch,LocalRetNo from tblReturnProd_" + sTableName + " a,tblTransReturnProd_" + sTableName + " b,tblCategoryUser c,tblcategory d,tblSubReasons e,tblreason f where f.reasonid=a.ipaymode and a.RetNo=b.RetNo and c.categoryid=d.categoryid and b.SubCategoryID=c.CategoryUserID and e.id=a.Reasonsid and CONVERT(date,RetDate )>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and CONVERT(date,RetDate )<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and LocalBranch='" + Branch + "' and a.iPayMode=" + Reason + " order by a.RetDate,LocalBranch asc";
                    ds = dbObj.InlineExecuteDataSet(sqry);
                }
            }

            return ds;
        }

        #endregion


        #region SALES SUMMARY REPORT NEW

        public DataSet getCategoryItems(int CategoryID)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcategoryuser where CategoryID=" + CategoryID + "  and isdelete=0 order by Definition asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet getStockValueReport(string sTableName, string Categoryid, string CategoryUserID)
        {
            DataSet ds = new DataSet();
            if (Categoryid == "All")
            {
                if (CategoryUserID == "All")
                {
                    // string sQry = "select c.Category,cu.Definition,Tax,Rate,Available_QTY,(Available_QTY * Rate) as MRP, ((Available_QTY * Rate) * Tax ) / 100 as GST,((Available_QTY * Rate) + (((Available_QTY * Rate) * Tax ) / 100)) as Price  from tblCategory c inner join tblCategoryUser cu on cu.Categoryid=c.Categoryid inner join tblStock_" + sTableName + " s on s.SubCategoryID=cu.CategoryUserID where Available_QTY>0  order by Category,Definition asc";
                    string sQry = "select c.Category,cu.Definition,Rate,Tax,Round((Rate+((Rate*Tax)/100)),0) as MRP, Available_QTY, Round(((Available_QTY * Rate) + (((Available_QTY * Rate) * Tax ) / 100)),0) as TotalAmount, (Available_QTY * Rate) as MRP1,  ((Available_QTY * Rate) * Tax ) / 100 as GST,cu.qtytype from tblCategory c inner join tblCategoryUser cu on cu.Categoryid=c.Categoryid inner join tblStock_" + sTableName + " s on s.SubCategoryID=cu.CategoryUserID where Available_QTY>0  order by Category,Definition asc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select c.Category,cu.Definition,Tax,Rate,Available_QTY,(Available_QTY * Rate) as MRP, ((Available_QTY * Rate) * Tax ) / 100 as GST,((Available_QTY * Rate) + (((Available_QTY * Rate) * Tax ) / 100)) as Price,cu.qtytype  from tblCategory c inner join tblCategoryUser cu on cu.Categoryid=c.Categoryid inner join tblStock_" + sTableName + " s on s.SubCategoryID=cu.CategoryUserID where CategoryUserID='" + CategoryUserID + "' and Available_QTY>0  order by Category,Definition asc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
            }
            else
            {
                if (CategoryUserID == "All")
                {
                    string sQry = "select c.Category,cu.Definition,Rate,Tax,Round((Rate+((Rate*Tax)/100)),0) as MRP, Available_QTY, Round(((Available_QTY * Rate) + (((Available_QTY * Rate) * Tax ) / 100)),0) as TotalAmount, (Available_QTY * Rate) as MRP1,  ((Available_QTY * Rate) * Tax ) / 100 as GST,cu.qtytype from tblCategory c inner join tblCategoryUser cu on cu.Categoryid=c.Categoryid inner join tblStock_" + sTableName + " s on s.SubCategoryID=cu.CategoryUserID where c.Categoryid='" + Categoryid + "' and Available_QTY>0  order by Category,Definition asc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select c.Category,cu.Definition,Tax,Rate,Available_QTY,(Available_QTY * Rate) as MRP, ((Available_QTY * Rate) * Tax ) / 100 as GST,((Available_QTY * Rate) + (((Available_QTY * Rate) * Tax ) / 100)) as Price,cu.qtytype  from tblCategory c inner join tblCategoryUser cu on cu.Categoryid=c.Categoryid inner join tblStock_" + sTableName + " s on s.SubCategoryID=cu.CategoryUserID where c.Categoryid='" + Categoryid + "' and CategoryUserID='" + CategoryUserID + "' and Available_QTY>0  order by Category,Definition asc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
            }
            return ds;
        }

        public DataSet getSalesBillCount(string sTableName, DateTime From, DateTime To)
        {
            DataSet ds = new DataSet();
            string sQry = "select 'Direct' as Type, MIN(BillNo) as StartBill,MAX(BillNo) as EndBill,COUNT(BillNo) as BillCount from tblsales_" + sTableName + " where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and IsNormal='Y' having COUNT(BillNo)>0 "
                          + "Union All "
                        + "select 'Online' as Type, MIN(BillNo) as StartBill,MAX(BillNo) as EndBill,COUNT(BillNo) as BillCount from tblsales_" + sTableName + " where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and IsNormal='N' having COUNT(BillNo)>0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet getCancelSalesBillCount(string sTableName, DateTime From, DateTime To)
        {
            DataSet ds = new DataSet();
            string sQry = "select BillNo from tblsales_" + sTableName + " where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and cancelstatus='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sQry);

            #region Cancel Sales Bill Count

            DataSet DS = new DataSet();
            DataTable DT = new DataTable();
            DT.Columns.Add("CancelBill");
            DT.Columns.Add("BillCount");
            DS.Tables.Add(DT);

            string CancelBill = ""; int BillCount = 0;
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (i == 0)
                    {
                        CancelBill = ds.Tables[0].Rows[i]["BillNo"].ToString();
                        BillCount++;
                    }
                    else
                    {
                        CancelBill = CancelBill + " , " + ds.Tables[0].Rows[i]["BillNo"].ToString();
                        BillCount++;
                    }

                }
            }

            DataRow DR = DT.NewRow();

            DR["CancelBill"] = CancelBill;
            DR["BillCount"] = BillCount;

            // DT.Rows.Add(DR);
            DS.Tables[0].Rows.Add(DR);

            #endregion

            return DS;
        }

        public DataSet getSalesTaxDetails(string sTableName, DateTime From, DateTime To)
        {
            DataSet ds = new DataSet();

            string sQry = "select ts.Tax,sum(ts.Amount) as NetAmount,Sum(ts.Disc) as DisCount,(Sum(((ts.Amount-ts.Disc) * ts.Tax )/100))/2 as TaxValue, Sum((ts.Amount - (ts.Disc)) + (((ts.Amount-ts.Disc) * ts.Tax )/100)) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and cancelstatus='No'   group  By ts.Tax order by ts.Tax asc";
            ds = dbObj.InlineExecuteDataSet(sQry);

            return ds;
        }

        public DataSet getSalesTaxDetails_Categorywise(string sTableName, DateTime From, DateTime To)
        {
            DataSet ds = new DataSet();

            string sQry = "select c.category,ts.Tax,sum(ts.Amount) as NetAmount,Sum(ts.Disc) as DisCount,(Sum(((ts.Amount-ts.Disc) * ts.Tax )/100))/2 as TaxValue, " +
                " Sum((ts.Amount - (ts.Disc)) + (((ts.Amount-ts.Disc) * ts.Tax )/100)) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts " +
                " on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID " +
                " where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and cancelstatus='No'   group  By c.categoryid,c.category,ts.Tax  order by c.categoryid,ts.Tax asc";
            ds = dbObj.InlineExecuteDataSet(sQry);

            return ds;
        }

        public DataSet getSalesItemQtyDetails(string sTableName, DateTime From, DateTime To)
        {
            DataSet ds = new DataSet();

            // string sQry = "select c.Category,cu.Definition,Sum(ts.Quantity) as Quantity from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' group by c.Category,cu.Definition order by Category,Definition asc";
            string sQry = "select c.Category,cu.Definition,Sum(ts.Quantity) as Quantity,sum(Amount) as Amount,Sum(Disc) as Disc,(Sum((((Amount-Disc) * ts.Tax) / 100)))/2 as TaxAmount,Sum((Amount-Disc)+(((Amount-Disc) * ts.Tax) / 100)) as NetAmount from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and cancelstatus='No' group by c.Category,cu.Definition order by Category,Definition asc";
            ds = dbObj.InlineExecuteDataSet(sQry);

            return ds;
        }

        public DataSet getSalesItemCount(string sTableName, DateTime From, DateTime To, string Categoryid, string CategoryUserID)
        {
            DataSet ds = new DataSet();
            if (Categoryid == "All")
            {
                if (CategoryUserID == "All")
                {
                    string sQry = "select c.Category,cu.Definition,ts.Quantity from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "'  order by Category,Definition asc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select c.Category,cu.Definition,ts.Quantity from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and CategoryUserID='" + CategoryUserID + "' order by Category,Definition asc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
            }
            else
            {
                if (CategoryUserID == "All")
                {
                    string sQry = "select c.Category,cu.Definition,ts.Quantity from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and c.Categoryid='" + Categoryid + "' order by Category,Definition asc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select c.Category,cu.Definition,ts.Quantity from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and c.Categoryid='" + Categoryid + "' and CategoryUserID='" + CategoryUserID + "' order by Category,Definition asc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
            }
            return ds;
        }

        public DataSet getSalesBillDetails(string sTableName, DateTime From, DateTime To, string Type)
        {
            DataSet ds = new DataSet();
            if (Type == "1")
            {
                string sQry = "select * from tblsales_" + sTableName + " s  where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "'  order by BillNo desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else if (Type == "2")
            {
                string sQry = "select * from tblsales_" + sTableName + " s  where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and Discount>0 order by BillNo desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else if (Type == "3")
            {
                string sQry = "select * from tblsales_" + sTableName + " s  where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and Discount=0 order by BillNo desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else if (Type == "4")
            {
                string sQry = "select * from tblsales_" + sTableName + " s  where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and Tax>0 order by BillNo desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else if (Type == "5")
            {
                string sQry = "select * from tblsales_" + sTableName + " s  where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and Tax=0 order by BillNo desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            return ds;
        }

        public DataSet getSalesBillItemDetails(string sTableName, DateTime From, DateTime To, string Categoryid, string CategoryUserID, string Type)
        {
            DataSet ds = new DataSet();
            if (Type == "1")
            {
                #region
                if (Categoryid == "All")
                {
                    if (CategoryUserID == "All")
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "'  order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and CategoryUserID='" + CategoryUserID + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
                else
                {
                    if (CategoryUserID == "All")
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and c.Categoryid='" + Categoryid + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and c.Categoryid='" + Categoryid + "' and CategoryUserID='" + CategoryUserID + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
                #endregion
            }
            else if (Type == "2")
            {
                #region
                if (Categoryid == "All")
                {
                    if (CategoryUserID == "All")
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Disc>0 order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Disc>0 and CategoryUserID='" + CategoryUserID + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
                else
                {
                    if (CategoryUserID == "All")
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Disc>0 and c.Categoryid='" + Categoryid + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Disc>0 and c.Categoryid='" + Categoryid + "' and CategoryUserID='" + CategoryUserID + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
                #endregion
            }
            else if (Type == "3")
            {
                #region
                if (Categoryid == "All")
                {
                    if (CategoryUserID == "All")
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Disc=0 order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Disc=0 and CategoryUserID='" + CategoryUserID + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
                else
                {
                    if (CategoryUserID == "All")
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Disc=0 and c.Categoryid='" + Categoryid + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Disc=0 and c.Categoryid='" + Categoryid + "' and CategoryUserID='" + CategoryUserID + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
                #endregion
            }
            else if (Type == "4")
            {
                #region
                if (Categoryid == "All")
                {
                    if (CategoryUserID == "All")
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Tax>0 order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Tax>0 and CategoryUserID='" + CategoryUserID + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
                else
                {
                    if (CategoryUserID == "All")
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Tax>0 and c.Categoryid='" + Categoryid + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Tax>0 and c.Categoryid='" + Categoryid + "' and CategoryUserID='" + CategoryUserID + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
                #endregion
            }
            else if (Type == "5")
            {
                #region
                if (Categoryid == "All")
                {
                    if (CategoryUserID == "All")
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Tax=0 order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Tax=0 and CategoryUserID='" + CategoryUserID + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
                else
                {
                    if (CategoryUserID == "All")
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Tax=0 and c.Categoryid='" + Categoryid + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                    else
                    {
                        string sQry = "select BillNo,BillDate,c.Category,cu.Definition,ts.Quantity,ts.UnitPrice,ts.Amount,s.discper,ts.Disc,ts.Tax as TaxPer,((ts.Amount-ts.Disc) * ts.Tax )/100 as Tax,(ts.Amount - ts.Disc) + (((ts.Amount-ts.Disc) * ts.Tax )/100) as Total from tblsales_" + sTableName + " s inner join tblTranssales_" + sTableName + " ts on ts.Salesuniqueid=s.SalesID inner join tblCategory c on c.Categoryid=ts.CategoryID inner join tblCategoryUser cu on cu.CategoryUserID=ts.SubCategoryID where cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and ts.Tax=0 and c.Categoryid='" + Categoryid + "' and CategoryUserID='" + CategoryUserID + "' order by Category,Definition asc";
                        ds = dbObj.InlineExecuteDataSet(sQry);
                    }
                }
                #endregion
            }
            return ds;
        }

        #endregion


        #region Store Day Close

        public DataSet StoreDayPreviousdayCheckInser(string stable)
        {
            DataSet ds = new DataSet();
            string s = "select * from tblOpeningStockStore_" + stable + "  where convert(date,Date)= convert(date,getdate()) ";
            ds = dbObj.InlineExecuteDataSet(s);
            return ds;
        }
        public int StoreDaydelOpening_Previousday(string stable)
        {
            int save = 0;

            string sQry = "delete from tblOpeningStockStore_" + stable + " where convert(date,Date)= convert(date,GetDate())";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;

        }
        public int StoreDayCloseinsert(string stable)
        {
            int save = 0;
            string sQry = string.Empty;
            string sqr = "Select * from tblOpeningStockStore_" + stable + "";
            DataSet dss = dbObj.InlineExecuteDataSet(sqr);
            if (dss.Tables[0].Rows.Count > 0)
            {
                sQry = "insert into tblOpeningStockStore_" + stable + "(categoryid,subcategoryid,qty,Date,DayCloseDate) select 0,IngredientID,Qty,GetDate(),GetDate()-1 from tblRawMatlStock_" + stable + "";
            }
            else
            {
                sQry = "insert into tblOpeningStockStore_" + stable + "(categoryid,subcategoryid,qty,Date,DayCloseDate) values('1','1','0',GetDate(),GetDate()-1)";
            }
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;

        }

        public DataSet checkinserStore(string stable)
        {
            DataSet ds = new DataSet();
            string s = "select * from tblOpeningStockStore_" + stable + "  where convert(date,Date)= convert(date,getdate()+1) ";
            ds = dbObj.InlineExecuteDataSet(s);
            return ds;
        }
        public int delOpeningStore(string stable)
        {
            int save = 0;

            string sQry = "delete from tblOpeningStockStore_" + stable + " where convert(date,Date)= convert(date,GetDate()+1)";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;

        }
        public int insertselectStore(string stable)
        {
            int save = 0;

            string sQry = "insert into tblOpeningStockStore_" + stable + "(categoryid,subcategoryid,qty,Date,DayCloseDate) select 0,IngredientID,Qty,GetDate()+1,Getdate() from tblRawMatlStock_" + stable + "";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;

        }

        #endregion


        #region Purchase Report
        //shanthi add orderby BillDate
        public DataSet GetPurchaseReport(string sTableName, string From, string To, string Group, string ListItems, string Subcompany)
        {
            DataSet ds = new DataSet();
            if (Group == "Supplier")
            {
                if (ListItems == "All")
                {
                    if (Subcompany == "All")
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID  inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "' order by BillDate,LedgerName,IngreCategory,IngredientName asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                    else
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID   inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "' and p.subcompanyid='" + Subcompany + "' order by BillDate,LedgerName,IngreCategory,IngredientName asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                }
                else
                {
                    if (Subcompany == "All")
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID   inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "' and LedgerId=" + ListItems + " order by BillDate,LedgerName,IngreCategory,IngredientName asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                    else
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID   inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "' and LedgerId=" + ListItems + "  and p.subcompanyid='" + Subcompany + "' order by BillDate,LedgerName,IngreCategory,IngredientName asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                }
            }
            else if (Group == "Company")
            {
                if (ListItems == "All")
                {
                    if (Subcompany == "All")
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID  inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "' order by cm.customername,LedgerName,IngreCategory,IngredientName,p.BillDate asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                    else
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID   inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "' and p.subcompanyid='" + Subcompany + "' order by cm.customername,LedgerName,IngreCategory,IngredientName,p.BillDate asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                }
                else
                {
                    if (Subcompany == "All")
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID   inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "' and p.subcompanyid=" + ListItems + " order by cm.customername,LedgerName,IngreCategory,IngredientName,p.BillDate asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                    else
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID   inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "' and p.subcompanyid=" + ListItems + "  and p.subcompanyid='" + Subcompany + "' order by cm.customername,LedgerName,IngreCategory,IngredientName,p.BillDate asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                }
            }
            else if (Group == "Category")
            {
                if (ListItems == "All")
                {
                    if (Subcompany == "All")
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID   inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "' order by IngreCategory,IngredientName,LedgerName,p.BillDate asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                    else
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID   inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "'  and p.subcompanyid='" + Subcompany + "' order by IngreCategory,IngredientName,LedgerName,p.BillDate asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                }
                else
                {
                    if (Subcompany == "All")
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID   inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "' and ic.IngCatID=" + ListItems + "  order by IngreCategory,IngredientName,LedgerName,p.BillDate asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                    else
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID   inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "' and ic.IngCatID=" + ListItems + "   and p.subcompanyid='" + Subcompany + "'  order by IngreCategory,IngredientName,LedgerName,p.BillDate asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                }
            }
            else if (Group == "Ingredent")
            {
                if (ListItems == "All")
                {
                    if (Subcompany == "All")
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID   inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "'   order by IngredientName,IngreCategory,LedgerName,p.BillDate asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                    else
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID   inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "'   and p.subcompanyid='" + Subcompany + "'  order by IngredientName,IngreCategory,LedgerName,p.BillDate asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                }
                else
                {
                    if (Subcompany == "All")
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID   inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "' and IngridID=" + ListItems + " order by IngredientName,IngreCategory,LedgerName,p.BillDate asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                    else
                    {
                        string qry = "select cm.customername as compname,cm.GSTNO,cm.subComapanyID, p.BillNo,BillDate,EntryDate,p.BillingType,LedgerId,LedgerName,ic.IngCatID,IngreCategory,IngridID,IngredientName,Qty,tp.Rate,Amount,tp.Tax,tp.Disc from tblkitchenPurchase_" + sTableName + " p inner join tbltranskitchenPurchase_" + sTableName + " tp on tp.PurchaseID=p.purchaseID inner join tblLedger l on l.LedgerID=p.supplier inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblIngridentsCategory ic on ic.IngCatID=i.IngCatID   inner join tblsubCompanyDetails cm on cm.subComapanyID = p.subcompanyid where convert(date,p.BillDate) >= '" + From + "' and convert(date,p.BillDate) <= '" + To + "' and IngridID=" + ListItems + "   and p.subcompanyid='" + Subcompany + "'  order by IngredientName,IngreCategory,LedgerName,p.BillDate asc ";
                        ds = dbObj.InlineExecuteDataSet(qry);
                    }
                }
            }
            return ds;
        }

        
        #endregion


        #region
        public DataSet getmotivation()
        {
            DataSet ds = new DataSet();

            string sqr = "SELECT top 1 motivationwords +' - '+ authorby as words FROM tblmotivation ORDER BY NEWID()";
            ds = dbObj.InlineExecuteDataSet(sqr);

            return ds;
        }

        #endregion

        #region
        public DataSet PrimaryUNITS()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblprimaryuom where IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getPrimaryUNITSvalue(string Primaryid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblprimaryuom where IsActive='Yes' and Primaryuomid='" + Primaryid + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #endregion


        #region RAW  SALES KITCHNE
        public DataSet getSalesMaster(string Table)
        {
            DataSet ds = new DataSet();
            string sQry = " select 'Raw Sales' as CustomerName,kp.*,case kp.Paymode when 1 then 'Cash' when 2 then 'Credit' else 'Cheque' end as PaymentMode " +
                " from  tblkitchenSales_" + Table + " kp  order by kp.BillNo desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getSalesMasterdate(string Table, string Supplier, DateTime from, DateTime to)
        {
            DataSet ds = new DataSet();

            {
                string sQry = " select 'Raw Sales' as CustomerName,kp.*,case kp.Paymode when 1 then 'Cash' when 2 then 'Credit' else 'Cheque' end as PaymentMode " +
                    " from  tblkitchenSales_" + Table + " kp  where  CAST(kp.BillDate AS DATE) >= '" + Convert.ToDateTime(from).ToString("yyyy/MM/dd") + "'  AND CAST(kp.BillDate AS DATE) <= '" + Convert.ToDateTime(to).ToString("yyyy/MM/dd") + "' order by kp.BillNo desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }

            return ds;
        }


        public int deleteSALmaster(string ID, string Table)
        {
            int TransNo = 0;
            int iSucess = 0;

            DataSet ds1 = new DataSet();
            string qy1 = "select Daybookid from tblkitchensales_" + Table + " where  Salesid='" + ID + "' ";
            ds1 = dbObj.InlineExecuteDataSet(qy1);

            if (ds1.Tables[0].Rows.Count > 0)
            {

                TransNo = Convert.ToInt32(ds1.Tables[0].Rows[0]["Daybookid"].ToString());
            }

            string sQry1 = "delete from tblDayBook_" + Table + " where TransNo='" + TransNo + "' ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry1);

            string sQry2 = "delete from tblkitchensales_" + Table + " where Salesid='" + ID + "' ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry2);

            DataSet trans = getsaleslisttrans1(ID, Table);

            if (trans != null)
            {
                if (trans.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < trans.Tables[0].Rows.Count; i++)
                    {

                        int stock = 0;
                        DataSet dcheck = new DataSet();
                        string chk = "select * from tblRawMatlStock_" + Table + " where IngredientID=" + trans.Tables[0].Rows[i]["IngredientID"] + " ";
                        dcheck = dbObj.InlineExecuteDataSet(chk);


                        string Query = "";
                        if (dcheck.Tables[0].Rows.Count > 0)
                        {
                            decimal AvlQty = Convert.ToDecimal(dcheck.Tables[0].Rows[0]["Qty"].ToString());

                            decimal dQty = AvlQty + Convert.ToDecimal(trans.Tables[0].Rows[i]["PUQty"]);

                            Query = " update tblRawMatlStock_" + Table + " set Qty=" + dQty + " where IngredientID=" + trans.Tables[0].Rows[i]["IngredientID"] + "   ";
                        }


                        stock = dbObj.InlineExecuteNonQuery(Query);
                    }
                }
            }



            string sQry3 = "delete from tbltranskitchenSales_" + Table + " where salesid='" + ID + "' ";
            iSucess = dbObj.InlineExecuteNonQuery(sQry3);
            return iSucess;
        }

        public DataSet getsaleslisttrans1(string iSalesID, string Table)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tbltranskitchenSales_" + Table + " where salesid='" + iSalesID + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet entrysalesno(string TableName)
        {
            DataSet ds = new DataSet();
            string qy = "select isnull(max(billno+1),1) as billno from tblkitchenSales_" + TableName + "";
            ds = dbObj.InlineExecuteDataSet(qy);
            return ds;
        }


        public int insertSales(string Table, int ledgerid, int CreditorID1, string BillNo, DateTime BillDate, string EntryDate, decimal Subtotal, decimal Tax, decimal Total, int Supplier, int Paymode, int bank, string chequeno, string cgst, string sgst, string igst, string dcno, int EntryUserID, string billingtype, int pono, string Province, double DiscountAmount, double FreightCharge, double FreightChargeTax, int FreightChargeTaxId, double FreightChargeTaxValue, double Roundoff, string itemloadtype, string itemload)
        {
            int TransNo = 0;
            int Bn0 = 0;
            int save = 0;

            string Date = DateTime.Now.ToString("dd/MM/yyyy hh:mm tt");
            DateTime date1 = DateTime.ParseExact(Date, "dd/MM/yyyy hh:mm tt", CultureInfo.InvariantCulture);

            DataSet ds1 = new DataSet();
            string qy1 = "select isnull(max(BillNo+1),1) as BillNo from tblkitchenSales_" + Table + "";
            ds1 = dbObj.InlineExecuteDataSet(qy1);

            if (ds1.Tables[0].Rows.Count > 0)
            {

                Bn0 = Convert.ToInt32(ds1.Tables[0].Rows[0]["BillNo"].ToString());
            }

            string sqry = "insert into tblDayBook_" + Table + " (TransDate,DebtorId,CreditorId,Narration,RefNo,Type,Amount)values('" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd") + "'," + ledgerid + ",'" + CreditorID1 + "','PurchaseNar'," + Bn0 + ",'Purchase','" + Convert.ToDouble(Total) + "')";
            save = dbObj.InlineExecuteNonQuery(sqry);

            DataSet ds2 = new DataSet();
            string qy2 = "select max(TransNo) as TransNo from tblDayBook_" + Table + "";
            ds2 = dbObj.InlineExecuteDataSet(qy2);
            TransNo = Convert.ToInt32(ds2.Tables[0].Rows[0]["TransNo"].ToString());

            string sQry = "insert into tblkitchenSales_" + Table + "(BillNo,BillDate,EntryDate,Subtotal,Tax,Total,Supplier,Paymode,Bank,ChequeNo,Daybookid,CGST,SGST,IGST,DCNO,EntryUserID,BillingType,POOrderNo,Province,Status,DiscountAmount,FreightCharge,FreightChargeTax,FreightChargeTaxId,FreightChargeTaxValue,RoundOff,itemloadtype,itemload) values(" + Bn0 + ",'" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd") + "','" + Convert.ToDateTime(date1).ToString("yyyy/MM/dd hh:mm ") + "'," + Subtotal + "," + Tax + "," + Total + "," + Supplier + "," + Paymode + "," + bank + ",'" + chequeno + "'," + TransNo + ",'" + cgst + "','" + sgst + "','" + igst + "','" + dcno + "'," + EntryUserID + ",'" + billingtype + "','" + pono + "','" + Province + "','NO'," + DiscountAmount + "," + FreightCharge + "," + FreightChargeTax + "," + FreightChargeTaxId + "," + FreightChargeTaxValue + "," + Roundoff + ",'" + itemloadtype + "','" + itemload + "')";
            save = dbObj.InlineExecuteNonQuery(sQry);

            //if (billingtype == "Purchase Order")
            //{
            //    string sQry11 = "update tblkitchenPurchaseorder_" + Table + " set Status='YES' where OrderNo = '" + pono + "'";
            //    save = dbObj.InlineExecuteNonQuery(sQry11);
            //}

            DataSet ds = new DataSet();
            string qy = "select max(Salesid) as Id from tblkitchenSales_" + Table + "";
            ds = dbObj.InlineExecuteDataSet(qy);
            save = Convert.ToInt32(ds.Tables[0].Rows[0]["ID"].ToString());
            return save;
        }


        public int insertTransSales(string Table, int PurchaseID, int IngredientID, decimal Qty, decimal Rate, decimal Amount, decimal Tax, int userid, string Units, decimal billno, int supplier, string pay, string ExpiryDate, string Narrations, double Disc, double discamount, string Punitsid, double Pvalue, double PUqty)
        {
            int save = 0;

            string Date = DateTime.Now.ToString("dd/MM/yyyy hh:mm tt");
            DateTime date1 = DateTime.ParseExact(Date, "dd/MM/yyyy hh:mm tt", CultureInfo.InvariantCulture);


            DateTime ExpiryDate1;
            if (ExpiryDate == "" || ExpiryDate == "0")
            {
                ExpiryDate1 = DateTime.ParseExact("01/01/1900", "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }
            else
            {
                ExpiryDate1 = DateTime.ParseExact(ExpiryDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            }

            string sQry = "insert into tbltranskitchenSales_" + Table + "(SalesID,IngredientID,Qty,Rate,Amount,Tax,Units,BillNo,SupplierID,Paymode,ExpiryDate,Narrations,Status,RQty,Disc,DiscountAmnt,Punitsid,Pvalue,PUqty) values(" + PurchaseID + "," + IngredientID + "," + Qty + "," + Rate + "," + Amount + "," + Tax + ",'" + Units + "'," + billno + "," + supplier + ",'" + pay + "','" + ExpiryDate1.ToString("yyyy-MM-dd") + "','" + Narrations + "','NO',0," + Disc + "," + discamount + ",'" + Punitsid + "','" + Pvalue + "','" + PUqty + "')";
            save = dbObj.InlineExecuteNonQuery(sQry);



            int stock = 0;
            decimal dQty = 0;
            DataSet dcheck = new DataSet();
            string chk = "select * from tblRawMatlStock_" + Table + " where IngredientID=" + IngredientID + " ";
            dcheck = dbObj.InlineExecuteDataSet(chk);

            //  double Qtyrate1 = Convert.ToDouble(Qty) * Convert.ToDouble(Rate);

            string Query = "";
            if (dcheck.Tables[0].Rows.Count > 0)
            {
                decimal AvlQty = Convert.ToDecimal(dcheck.Tables[0].Rows[0]["Qty"].ToString());

                //double ItemRate = Convert.ToDouble(dcheck.Tables[0].Rows[0]["Rate"].ToString());

                //double Qtyrate2 = Convert.ToDouble(AvlQty) * Convert.ToDouble(ItemRate);

                //double ttlQtyrate = ((Qtyrate1 + Qtyrate2) / (Convert.ToDouble(Qty) + Convert.ToDouble(AvlQty)));

                dQty = AvlQty - Convert.ToDecimal(PUqty);

                //  decimal dQty = AvlQty + Qty;

                // Query = " update tblRawMatlStock_" + Table + " set Qty=" + dQty + ",Rate=" + ttlQtyrate + " where IngredientID=" + IngredientID + " and userID=" + userid + "  ";
                Query = " update tblRawMatlStock_" + Table + " set Qty=" + dQty + " where IngredientID=" + IngredientID + "";
            }
            else
            {
                // Query = "insert into tblRawMatlStock_" + Table + " (IngredientID,Qty,UserID,idDelete,units,Rate)values(" + IngredientID + "," + PUqty + "," + userid + ",0,'" + Units + "'," + Rate + ") ";
            }

            stock = dbObj.InlineExecuteNonQuery(Query);

            // UPDATE stock - expiry date  

            double AvStk = PUqty;
            DataSet ds = new DataSet();
            string sqry = "select * from tblRawMatlStockExp_" + Table + " where IngredientID=" + IngredientID + " and Qty > 0 order by ExpiredDate";
            ds = dbObj.InlineExecuteDataSet(sqry);
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                if (AvStk > Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]))
                {
                    string sQry11 = "update tblRawMatlStockExp_" + Table + " set Qty=Qty-" + ds.Tables[0].Rows[i]["Qty"] + " where IngredientID=" + IngredientID + " and  StockExpID = '" + ds.Tables[0].Rows[i]["StockExpID"].ToString() + "'";
                    AvStk = AvStk - Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]);
                    save = dbObj.InlineExecuteNonQuery(sQry11);
                }
                else if (AvStk < Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]))
                {
                    string sQry11 = "update tblRawMatlStockExp_" + Table + " set Qty=Qty-" + AvStk + " where IngredientID=" + IngredientID + " and  StockExpID = '" + ds.Tables[0].Rows[i]["StockExpID"].ToString() + "'";
                    AvStk = 0;
                    save = dbObj.InlineExecuteNonQuery(sQry11);
                }
                else if (AvStk == Convert.ToDouble(ds.Tables[0].Rows[i]["Qty"]))
                {
                    string sQry11 = "update tblRawMatlStockExp_" + Table + " set Qty=Qty-" + AvStk + " where IngredientID=" + IngredientID + " and  StockExpID = '" + ds.Tables[0].Rows[i]["StockExpID"].ToString() + "'";
                    AvStk = 0;
                    save = dbObj.InlineExecuteNonQuery(sQry11);
                }
            }


            return save;
        }

        #endregion

        public DataSet getreportforkitchenreceived(string sTablename, string Type, string DCNo, DateTime From, DateTime to, string Category, string Ingridients)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            string sqry1 = string.Empty;
            DataSet dmerge = new DataSet();
            if (Ingridients == "All")
            {
                sqry = "select a.requestno,a.requestdate,a.prepared,c.ingredientname,b.qty,b.MissingQty,b.DamageQty,(b.qty - b.missingqty - b.damageqty) as RecQty  " +
                    " from tblReceiveRawMaterials_" + sTablename + "  as a " +
                    " inner join tbltransReceiveRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
                       " inner join tblIngridents as c on b.rawitemid=c.IngridID where  " +
                       " cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' ";



            }
            else
            {
                sqry = "select a.requestno,a.requestdate,a.prepared,c.ingredientname,b.qty,b.MissingQty,b.DamageQty,(b.qty - b.missingqty - b.damageqty) as RecQty " +
                    " from tblReceiveRawMaterials_" + sTablename + "  as a inner join tbltransReceiveRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
                       " inner join tblIngridents as c on b.rawitemid=c.IngridID where c.ingridid='" + Ingridients + "' and  " +
                       " cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' ";



            }

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet GetbranchForGRN(string branchid, DateTime datetime, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            string branchcode = string.Empty;

            DataSet dbranch = new DataSet();

            string Sqrybranch = "select * from tblBranch where branchid='" + branchid + "'";
            dbranch = dbObj.InlineExecuteDataSet(Sqrybranch);

            if (dbranch.Tables[0].Rows.Count > 0)
            {
                branchcode = dbranch.Tables[0].Rows[0]["branchcode"].ToString();

                sqry = "Select * from tblGoodTransfer_" + stable + " where cast(dc_date as Date)='" + datetime.ToString("yyyy/MM/dd") + "' and branch='" + branchcode + "' and Invoicestatus='N' ";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }

            return ds;
        }


        public DataSet GetbranchForGRN_Store(string branchid, DateTime datetime, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            string branchcode = string.Empty;

            DataSet dbranch = new DataSet();

            string Sqrybranch = "select * from tblBranch where branchid='" + branchid + "'";
            dbranch = dbObj.InlineExecuteDataSet(Sqrybranch);

            if (dbranch.Tables[0].Rows.Count > 0)
            {
                branchcode = dbranch.Tables[0].Rows[0]["branchcode"].ToString();

                sqry = "Select * from tblGoodTransferStore_" + stable + " where cast(dc_date as Date)='" + datetime.ToString("yyyy/MM/dd") + "' and branch='" + branchcode + "' and Invoicestatus='N' ";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }

            return ds;
        }

        public DataSet igetbillentry(string P_id, string stablename)
        {
            DataSet ds = new DataSet();

            string sqry = string.Empty;

            sqry = " select a.branch,a.DC_NO,a.DC_Date,c.CategoryUserID,c.Definition,c.Rate,c.TaxVal,c.GST,b.Received_Qty,c.hsncode,d.UOM " +
                   " from tblgoodtransfer_" + stablename + " as a inner join tblTransGoodsTransfer_" + stablename + " as b on a.dc_no=b.dc_no " +
                   " inner join tblCategoryUser as c on c.CategoryUserID=b.DescriptionId " +
                   " inner join  tblUOM as d on d.UOMID=c.unit where (" + P_id + ")";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;

        }

        public DataSet igetbillentrysummary(string cond, string stablename)
        {
            DataSet ds = new DataSet();

            string sqry = string.Empty;

            sqry = " select c.CategoryUserID,c.Definition,c.Rate,c.TaxVal,c.GST,sum(b.Received_Qty) as Received_Qty ,c.hsncode,d.UOM " +
                   " from tblgoodtransfer_" + stablename + " as a inner join tblTransGoodsTransfer_" + stablename + " as b on a.dc_no=b.dc_no " +
                   " inner join tblCategoryUser as c on c.CategoryUserID=b.DescriptionId " +
                   " inner join  tblUOM as d on d.UOMID=c.unit where (" + cond + ") group by c.CategoryUserID,c.Definition,c.Rate,c.TaxVal,c.GST,c.hsncode,d.UOM ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;

        }

        public DataSet igetbillentrysummary_Store(string cond, string stablename)
        {
            DataSet ds = new DataSet();

            string sqry = string.Empty;

            sqry = " select c.IngridID as CategoryUserID,c.IngredientName as Definition,'0' as Rate,c.TaxValue as TaxVal,c.TaxValue as GST,sum(b.Received_Qty) as Received_Qty ,c.hsncode,d.UOM " +
                   " from tblgoodtransferstore_" + stablename + " as a inner join tblTransGoodsTransferstore_" + stablename + " as b on a.dc_no=b.dc_no " +
                   " inner join tblIngridents as c on c.IngridID=b.DescriptionId " +
                   " inner join  tblUOM as d on d.UOMID=c.Units where (" + cond + ") group by c.IngridID,c.IngredientName,c.TaxValue,c.TaxValue,c.hsncode,d.UOM ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;

        }

        public DataSet igetbillentrysummary_Dept(string cond, string stablename)
        {
            DataSet ds = new DataSet();

            string sqry = string.Empty;

            //sqry = " select a.requestno,a.requestdate,c.CategoryUserID,c.Definition,c.Rate,c.TaxVal,c.GST,((isnull(Order_Qty,0)-isnull(Received_Qty,0))) as order_Qty ,c.hsncode,d.UOM " +
            //       " from tblPurchaseRequestStoreDept_" + stablename + " as a inner join tbltransPurchaseRequestStoreDept_" + stablename + " as b on a.RequestNO=b.requestid " +
            //       " inner join tblCategoryUser as c on c.CategoryUserID=b.DescriptionId " +
            //       " inner join  tblUOM as d on d.UOMID=c.units where (" + cond + ")  ";

            sqry = "select a.requestno,a.requestdate,c.IngridID as CategoryUserID,c.IngredientName as Definition,'0' as Rate,c.TaxValue,c.TaxValue as GST, " +
 " ((isnull(Order_Qty,0)-isnull(Received_Qty,0))) as order_Qty ,c.hsncode,d.UOM ,isnull(e.Qty,0) as AvlQty  " +
 " from tblPurchaseRequestStoreDept_" + stablename + " as a inner join tbltransPurchaseRequestStoreDept_" + stablename + " as b  " +
 " on a.RequestNO=b.requestid  inner join tblIngridents as c on c.IngridID=b.DescriptionId  left join tblRawMatlStock_" + stablename + " as e on e.IngredientID=b.DescriptionId " +
 " inner join  tblUOM as d on d.UOMID=c.Units where (" + cond + ") and  (isnull(Order_Qty,0)-isnull(Received_Qty,0)) >0  ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;

        }

        public int InsertInvoice(string stablename, string frombranch, DateTime invoicedate, string tallybillno, DateTime grndate, string preparedby, string cgst, string sgst, string igst, string grandtotal, string roundoff, string narration, string VehicleNo)
        {
            int iSuccess = 0;
            string invno = "";
            string branchcode = string.Empty;

            DataSet dbranch = new DataSet();

            string Sqrybranch = "select * from tblBranch where branchid='" + frombranch + "'";
            dbranch = dbObj.InlineExecuteDataSet(Sqrybranch);

            if (dbranch.Tables[0].Rows.Count > 0)
            {
                branchcode = dbranch.Tables[0].Rows[0]["branchcode"].ToString();
            }
            // GET MAX NO
            string maxno = "select isnull(max(InvoiceNo+1),1) as invno from tblinvoice_" + stablename + "";
            DataSet ds = dbObj.InlineExecuteDataSet(maxno);
            if (ds.Tables[0].Rows.Count > 0)
            {
                invno = ds.Tables[0].Rows[0]["invno"].ToString();

                string sQry = "insert into tblinvoice_" + stablename + "(InvoiceNo,InvoiceDate,FullInvoiceNo,InvoiceBranch,InvoicedCode,GRNDate,PreparedBy " +
                " ,GRNNO,CGST,Sgst,Igst,TotalAmount,Roundoff,Narration,VehicleNo) values " +
                    " ('" + invno + "','" + invoicedate.ToString("yyyy-MM-dd") + "','" + tallybillno + "','" + frombranch + "','" + branchcode + "','" + grndate.ToString("yyyy-MM-dd") + "','" + preparedby + "' " +
                " ,'0','" + cgst + "','" + sgst + "','" + igst + "','" + grandtotal + "','" + roundoff + "','" + narration + "','" + VehicleNo + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            }

            DataSet dss = new DataSet();
            string sqry = " select max(InvoiceID) as InvoiceID from tblinvoice_" + stablename + "";
            dss = dbObj.InlineExecuteDataSet(sqry);

            iSuccess = Convert.ToInt32(dss.Tables[0].Rows[0]["InvoiceID"].ToString());
            return iSuccess;

        }


        public int InsertInvoice_Dept(string stablename, string frombranch, DateTime invoicedate, string tallybillno, DateTime grndate, string preparedby, string cgst, string sgst, string igst, string grandtotal, string roundoff, string narration, string VehicleNo, string deptid, string customername, string address)
        {
            int iSuccess = 0;
            string invno = "";
            string branchcode = "0";

            DataSet dbranch = new DataSet();

            //string Sqrybranch = "select * from tblBranch where branchid='" + frombranch + "'";
            //dbranch = dbObj.InlineExecuteDataSet(Sqrybranch);

            //if (dbranch.Tables[0].Rows.Count > 0)
            //{
            //    branchcode = dbranch.Tables[0].Rows[0]["branchcode"].ToString();
            //}
            // GET MAX NO
            string maxno = "select isnull(max(InvoiceNo+1),1) as invno from tblinvoiceDept_" + stablename + "";
            DataSet ds = dbObj.InlineExecuteDataSet(maxno);
            if (ds.Tables[0].Rows.Count > 0)
            {
                invno = ds.Tables[0].Rows[0]["invno"].ToString();

                string sQry = "insert into tblinvoiceDept_" + stablename + "(InvoiceNo,InvoiceDate,FullInvoiceNo,InvoiceBranch,InvoicedCode,GRNDate,PreparedBy " +
                " ,GRNNO,CGST,Sgst,Igst,TotalAmount,Roundoff,Narration,VehicleNo,deptid,Customername,address) values " +
                    " ('" + invno + "','" + invoicedate.ToString("yyyy-MM-dd") + "','" + tallybillno + "','" + frombranch + "','" + branchcode + "','" + grndate.ToString("yyyy-MM-dd") + "','" + preparedby + "' " +
                " ,'0','" + cgst + "','" + sgst + "','" + igst + "','" + grandtotal + "','" + roundoff + "','" + narration + "','" + VehicleNo + "','" + deptid + "','" + customername + "','" + address + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            }

            DataSet dss = new DataSet();
            string sqry = " select max(InvoiceID) as InvoiceID from tblinvoiceDept_" + stablename + "";
            dss = dbObj.InlineExecuteDataSet(sqry);

            iSuccess = Convert.ToInt32(dss.Tables[0].Rows[0]["InvoiceID"].ToString());
            return iSuccess;

        }

        public int Inserttransinvoice_Dept(string invoiceid, string itemid, string hsncode, string uom, string qty, string Rate, string gsttax, string gstamount, string toalamount, string stablename, string requestid)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltransinvoiceDept_" + stablename + "(InvoiceId,Itemid,Qty,Rate,GST,GstAmount,TotalAmount)  " +
                " values (" + invoiceid + "," + itemid + "," + qty + ",'" + Rate + "','" + gsttax + "','" + gstamount + "','" + toalamount + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);


            string sqry = "update tbltransPurchaseRequeststoreDept_" + stablename + " set Received_Qty=isnull(Received_Qty,0)+" + qty + " where DescriptionId=" + itemid + " and RequestID='" + requestid + "' ";
            iSuccess = dbObj.InlineExecuteNonQuery(sqry);

            return iSuccess;

        }


        public int InsertInvoice_Store(string stablename, string frombranch, DateTime invoicedate, string tallybillno, DateTime grndate, string preparedby, string cgst, string sgst, string igst, string grandtotal, string roundoff, string narration, string VehicleNo)
        {
            int iSuccess = 0;
            string invno = "";
            string branchcode = string.Empty;

            DataSet dbranch = new DataSet();

            string Sqrybranch = "select * from tblBranch where branchid='" + frombranch + "'";
            dbranch = dbObj.InlineExecuteDataSet(Sqrybranch);

            if (dbranch.Tables[0].Rows.Count > 0)
            {
                branchcode = dbranch.Tables[0].Rows[0]["branchcode"].ToString();
            }
            // GET MAX NO
            string maxno = "select isnull(max(InvoiceNo+1),1) as invno from tblstoreinvoice_" + stablename + "";
            DataSet ds = dbObj.InlineExecuteDataSet(maxno);
            if (ds.Tables[0].Rows.Count > 0)
            {
                invno = ds.Tables[0].Rows[0]["invno"].ToString();

                string sQry = "insert into tblstoreinvoice_" + stablename + "(InvoiceNo,InvoiceDate,FullInvoiceNo,InvoiceBranch,InvoicedCode,GRNDate,PreparedBy " +
                " ,GRNNO,CGST,Sgst,Igst,TotalAmount,Roundoff,Narration,VehicleNo) values " +
                    " ('" + invno + "','" + invoicedate.ToString("yyyy-MM-dd") + "','" + tallybillno + "','" + frombranch + "','" + branchcode + "','" + grndate.ToString("yyyy-MM-dd") + "','" + preparedby + "' " +
                " ,'0','" + cgst + "','" + sgst + "','" + igst + "','" + grandtotal + "','" + roundoff + "','" + narration + "','" + VehicleNo + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            }

            DataSet dss = new DataSet();
            string sqry = " select max(InvoiceID) as InvoiceID from tblstoreinvoice_" + stablename + "";
            dss = dbObj.InlineExecuteDataSet(sqry);

            iSuccess = Convert.ToInt32(dss.Tables[0].Rows[0]["InvoiceID"].ToString());
            return iSuccess;

        }

        public int Inserttransinvoice(string invoiceid, string itemid, string hsncode, string uom, string qty, string Rate, string gsttax, string gstamount, string toalamount, string stablename)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltransinvoice_" + stablename + "(InvoiceId,Itemid,Qty,Rate,GST,GstAmount,TotalAmount)  " +
                " values (" + invoiceid + "," + itemid + "," + qty + ",'" + Rate + "','" + gsttax + "','" + gstamount + "','" + toalamount + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);


            return iSuccess;

        }


        public int Inserttransinvoice_Store(string invoiceid, string itemid, string hsncode, string uom, string qty, string Rate, string gsttax, string gstamount, string toalamount, string stablename)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltransstoreinvoice_" + stablename + "(InvoiceId,Itemid,Qty,Rate,GST,GstAmount,TotalAmount)  " +
                " values (" + invoiceid + "," + itemid + "," + qty + ",'" + Rate + "','" + gsttax + "','" + gstamount + "','" + toalamount + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);


            return iSuccess;

        }

        public int Inserttransinvoicegrn(string invoiceid, string stablename, string grnno, DateTime grndate)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltransinvoicegrn_" + stablename + "(InvoiceID,GRNNo,GrNDate)  " +
                " values (" + invoiceid + ",'" + grnno + "','" + grndate.ToString("yyyy-MM-dd") + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);


            string updatequyery = "update tblgoodtransfer_" + stablename + " set invoicestatus='Y' where P_ID='" + grnno + "' ";
            iSuccess = dbObj.InlineExecuteNonQuery(updatequyery);


            return iSuccess;

        }

        public int Inserttransinvoicegrn_Store(string invoiceid, string stablename, string grnno, DateTime grndate)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltransstoreinvoicegrn_" + stablename + "(InvoiceID,GRNNo,GrNDate)  " +
                " values (" + invoiceid + ",'" + grnno + "','" + grndate.ToString("yyyy-MM-dd") + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);


            string updatequyery = "update tblgoodtransferstore_" + stablename + " set invoicestatus='Y' where P_ID='" + grnno + "' ";
            iSuccess = dbObj.InlineExecuteNonQuery(updatequyery);


            return iSuccess;

        }


        public DataSet GwtinvoiceBillgrid(string stablename)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.*,b.brancharea,(cgst+sgst+igst) as tax from tblinvoice_" + stablename + " as a inner join tblbranch as b on b.branchid=a.invoicebranch order by a.invoiceid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet GwtStoreinvoiceBillgrid(string stablename)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.*,b.brancharea,(cgst+sgst+igst) as tax from tblstoreinvoice_" + stablename + " as a inner join tblbranch as b on b.branchid=a.invoicebranch order by a.invoiceid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GwtinvoiceBillDeptgrid(string stablename)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.*,b.deptname,(cgst+sgst+igst) as tax from tblInvoiceDept_" + stablename + " as a " +
               " inner join tbldepartment as b on b.deptid=a.deptid order by a.invoiceid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet GwtinvoiceBillgridsearch(string stablename, string columnname, string colvalue)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.*,b.brancharea,(cgst+sgst+igst) as tax from tblinvoice_" + stablename + " as a inner join tblbranch as b on b.branchid=a.invoicebranch " +
                " where  " + columnname + " like '%" + colvalue + "%' order by a.invoiceid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GwtSToreinvoiceBillgridsearch(string stablename, string columnname, string colvalue)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.*,b.brancharea,(cgst+sgst+igst) as tax from tblstoreinvoice_" + stablename + " as a inner join tblbranch as b on b.branchid=a.invoicebranch " +
                " where  " + columnname + " like '%" + colvalue + "%' order by a.invoiceid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GwtinvoiceBillgridsearch_Dept(string stablename, string columnname, string colvalue)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.*,b.deptname,(cgst+sgst+igst) as tax from tblInvoiceDept_" + stablename + " as a inner join tbldepartment as b on b.deptid=a.deptid " +
                " where  " + columnname + " like '%" + colvalue + "%' order by a.invoiceid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet GwtinvoiceBillgridbyid(string stablename, string invoiceid)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.*,b.brancharea,(cgst+sgst+igst) as tax from tblinvoice_" + stablename + " as a inner join tblbranch as b on b.branchid=a.invoicebranch where a.invoiceid='" + invoiceid + "' order by a.invoiceid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GwtStoreinvoiceBillgridbyid(string stablename, string invoiceid)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.*,b.brancharea,(cgst+sgst+igst) as tax from tblstoreinvoice_" + stablename + " as a inner join tblbranch as b on b.branchid=a.invoicebranch where a.invoiceid='" + invoiceid + "' order by a.invoiceid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GwtinvoiceBillgridbyid_Dept(string stablename, string invoiceid)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.*,b.deptname,(cgst+sgst+igst) as tax from tblinvoice_" + stablename + " as a " +
                " inner join tbldepartment as b on b.deptid=a.deptid  where a.invoiceid='" + invoiceid + "' order by a.invoiceid desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet gettransitemforid(string stablename, string invoiceid)
        {
            DataSet ds = new DataSet();
            string sQry = " select c.definition,b.qty,b.rate,(b.qty * b.rate) as netamount,d.taxname,e.uom,b.gstamount,b.totalamount from tblinvoice_" + stablename + " as a inner join tbltransinvoice_" + stablename + " as b on a.invoiceid=b.invoiceid " +
                          " inner join tblcategoryuser as c on c.categoryuserid=b.itemid inner join tbltax as d on d.taxid=c.taxval inner join tbluom  as e on e.uomid=c.unit where a.invoiceid='" + invoiceid + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet gettransitemforid_Store(string stablename, string invoiceid)
        {
            DataSet ds = new DataSet();
            string sQry = " select c.IngredientName as definition,b.qty,b.rate,(b.qty * b.rate) as netamount,d.taxname,e.uom,b.gstamount,b.totalamount from tblstoreinvoice_" + stablename + " as a inner join tbltransstoreinvoice_" + stablename + " as b on a.invoiceid=b.invoiceid " +
                          " inner join tblIngridents as c on c.IngridID=b.itemid inner join tbltax as d on d.taxid=c.taxid inner join tbluom  as e on e.uomid=c.units where a.invoiceid='" + invoiceid + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet gettransitemforid_Dept(string stablename, string invoiceid)
        {
            DataSet ds = new DataSet();
            string sQry = " select c.IngredientName as definition,b.qty,b.rate,(b.qty * b.rate) as netamount,d.taxname,e.uom,b.gstamount,b.totalamount from tblinvoiceDept_" + stablename + " as a " +
                " inner join tbltransinvoiceDept_" + stablename + " as b on a.invoiceid=b.invoiceid " +
                          " inner join tblIngridents as c on c.IngridID=b.itemid inner join tbltax as d on d.taxid=c.taxid inner join tbluom  as e " +
                          " on e.uomid=c.units where a.invoiceid='" + invoiceid + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getmaxinvoiceno(string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(InvoiceNo+1),1) as invno from tblinvoice_" + scode + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet getmaxinvoiceno_Store(string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(InvoiceNo+1),1) as invno from tblstoreinvoice_" + scode + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getmaxinvoiceno_Dept(string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(InvoiceNo+1),1) as invno from tblinvoiceDept_" + scode + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet getprintforinvoice(string stablename, string invoiceid)
        {
            DataSet ds = new DataSet();

            string sQry = " select a.roundoff,a.VehicleNo, a.FullInvoiceNo,a.InvoiceDate, c.definition,b.qty,b.rate,(b.qty * b.rate) as netamount,d.taxname,e.uom,b.gstamount,b.totalamount,f.*,c.hsncode from tblinvoice_" + stablename + " as a inner join tbltransinvoice_" + stablename + " as b on a.invoiceid=b.invoiceid " +
                       " inner join tblcategoryuser as c on c.categoryuserid=b.itemid inner join tbltax as d on d.taxid=c.taxval inner join tbluom  as e on e.uomid=c.unit inner join tblbranch as f on f.branchid=a.InvoiceBranch where a.invoiceid='" + invoiceid + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);

            return ds;

        }

        public DataSet getprintforinvoice_Store(string stablename, string invoiceid)
        {
            DataSet ds = new DataSet();

            string sQry = " select a.roundoff,a.VehicleNo, a.FullInvoiceNo,a.InvoiceDate, c.IngredientName as definition,b.qty,b.rate,(b.qty * b.rate) as netamount,d.taxname,e.uom, " +
                " b.gstamount,b.totalamount,f.*,c.hsncode from tblstoreinvoice_" + stablename + " as a inner join tbltransstoreinvoice_" + stablename + " as b on a.invoiceid=b.invoiceid " +
                       " inner join tblIngridents as c on c.IngridID=b.itemid inner join tbltax as d on d.taxid=c.taxid " +
                       " inner join tbluom  as e on e.uomid=c.Units inner join tblbranch as f on f.branchid=a.InvoiceBranch where a.invoiceid='" + invoiceid + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);

            return ds;

        }

        public DataSet GetInternalTransferPrintOnlyGST_Store(string stablename, string invoiceId)
        {
            DataSet ds = new DataSet();
            string sQry = " select sum(b.totalamount) as netamount,isnull(c.hsncode,'-') as hsncode from tblstoreinvoice_" + stablename + " as a inner join tbltransstoreinvoice_" + stablename + " as b on a.invoiceid=b.invoiceid  " +
" inner join tblIngridents as c on c.IngridID=b.itemid inner join tbltax as d on d.taxid=c.taxid inner join tbluom  as e on e.uomid=c.units " +
" inner join tblbranch as f on f.branchid=a.InvoiceBranch where a.invoiceid='" + invoiceId + "' group by c.hsncode ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetInternalTransferPrintOnlyGST(string stablename, string invoiceId)
        {
            DataSet ds = new DataSet();
            string sQry = " select sum(b.totalamount) as netamount,isnull(c.hsncode,'-') as hsncode from tblinvoice_" + stablename + " as a inner join tbltransinvoice_" + stablename + " as b on a.invoiceid=b.invoiceid  " +
" inner join tblcategoryuser as c on c.categoryuserid=b.itemid inner join tbltax as d on d.taxid=c.taxval inner join tbluom  as e on e.uomid=c.unit " +
" inner join tblbranch as f on f.branchid=a.InvoiceBranch where a.invoiceid='" + invoiceId + "' group by c.hsncode ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet invoicealreadyfind(string productionbranch, string supplierid, string invoiceno)
        {
            string sqry = string.Empty;
            DataSet ds = new DataSet();
            string prodcode = "";
            string getprod = "Select * from tblbranch where branchid='" + productionbranch + "'";
            DataSet getprodcode = dbObj.InlineExecuteDataSet(getprod);
            if (getprodcode.Tables[0].Rows.Count > 0)
            {
                prodcode = getprodcode.Tables[0].Rows[0]["Branchcode"].ToString();

            }


            sqry = "select * from tblinvoiceupload where BranchCode ='" + prodcode + "' and SuplierID='" + supplierid + "' and InvoiceNo='" + invoiceno + "' ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }


        public int InsertInvoiceUpload(DateTime invoicedate, string supplierid, string productionid, string invoiceno, string invoiceimage)
        {
            int iSuccess = 0;

            //string Date = DateTime.Now.ToString("dd/MM/yyyy hh:mm tt");
            //DateTime date1 = DateTime.ParseExact(Date, "dd/MM/yyyy hh:mm tt", CultureInfo.InvariantCulture);

            string prodcode = "";
            string getprod = "Select * from tblbranch where branchid='" + productionid + "'";
            DataSet getprodcode = dbObj.InlineExecuteDataSet(getprod);
            if (getprodcode.Tables[0].Rows.Count > 0)
            {
                prodcode = getprodcode.Tables[0].Rows[0]["Branchcode"].ToString();

            }

            string sQry = "insert into tblinvoiceupload( UploadDate,SuplierID,InvoiceImage,BranchCode,InvoiceNo) values " +
                " ('" + Convert.ToDateTime(invoicedate).ToString("yyyy/MM/dd") + "','" + supplierid + "','" + invoiceimage + "','" + prodcode + "','" + invoiceno + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            return iSuccess;



        }

        public DataSet getinvoiceupload(string stablename)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblinvoiceupload as a inner join tblledger as b on b.ledgerid=a.SuplierID inner join tblbranch as c on c.branchcode=a.branchcode Where a.BranchCode='" + stablename + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getnotoficationshow(string stablename)
        {
            DataSet ds = new DataSet();
            DataSet dsnew = new DataSet();
            DataSet dmerge = new DataSet();

            string sqr = "SELECT *  FROM tblinvoiceupload as a inner join tblledger as b on b.ledgerid=a.suplierid " +
  " WHERE NOT EXISTS   (select * from tblinvoiceupload as a inner join tblkitchenpurchase_" + stablename + " as c on c.dcno=a.invoiceno) and a.branchcode='" + stablename + "';";
            ds = dbObj.InlineExecuteDataSet(sqr);

            return ds;
        }

        #region Payment

        //public DataSet GetPayment(string Stable, int PaymentID)
        //{
        //    DataSet ds = new DataSet();
        //    string sqry = "select r.BankName,r.ChequeNo,s.BillNo,s.BillDate,p.PayMode,r.PaymentNo,r.PaymentDate,r.NetAmount,c.LedgerName,c.MobileNo,c.Address,tr.Amount,tr.CloseDiscount,tr.Narration  from tblPayment_" + Stable + " r inner join tblTransPayment_" + Stable + " tr on r.PaymentID=tr.PaymentID inner join tblLedger c on c.LedgerID=r.CustomerID inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID inner join tblkitchenPurchase_" + Stable + " s on s.purchaseID=tr.BillNo where r.PaymentID=" + PaymentID + "";
        //    ds = dbObj.InlineExecuteDataSet(sqry);
        //    return ds;

        //}

        public DataSet GetPayment(string Stable, int PaymentID)
        {
            DataSet ds = new DataSet();
            //string sqry = "select r.BankName,r.ChequeNo,s.BillNo,s.BillDate,p.PayMode,r.PaymentNo,r.PaymentDate,r.NetAmount,c.LedgerName,c.MobileNo,c.Address,tr.Amount,tr.CloseDiscount,tr.Narration  from tblPayment_" + Stable + " r inner join tblTransPayment_" + Stable + " tr on r.PaymentID=tr.PaymentID inner join tblLedger c on c.LedgerID=r.CustomerID inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID inner join tblkitchenPurchase_" + Stable + " s on s.purchaseID=tr.BillNo where r.PaymentID=" + PaymentID + "";
            string sqry = "select r.BankName,r.ChequeNo,s.BillNo,s.BillDate,p.PayMode,r.PaymentNo,r.PaymentDate,r.NetAmount,c.LedgerName,c.MobileNo,c.Address,tr.Amount, " +
                " tr.CloseDiscount,tr.Narration  from tblPayment_" + Stable + " r inner join tblTransPayment_" + Stable + " tr on r.PaymentID=tr.PaymentID " +
                " inner join tblLedger c on c.LedgerID=r.CustomerID inner join tblsalespaymode p on p.value=r.Payment_ID " +
                " inner join tblkitchenPurchase_" + Stable + " s on s.purchaseID=tr.BillNo where r.PaymentID=" + PaymentID + "";


            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        //public DataSet GetPayment(string sTableName)
        //{
        //    DataSet ds = new DataSet();
        //    string sQry = "select PaymentID,PaymentNo,PaymentDate,LedgerName,NetAmount,PayMode from tblPayment_" + sTableName + " r inner join tblLedger c on c.LedgerID=r.CustomerID inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID order by PaymentDate desc";
        //    ds = dbObj.InlineExecuteDataSet(sQry);
        //    return ds;
        //}

        public DataSet GetPayment(string sTableName)
        {
            DataSet ds = new DataSet();
            string sQry = "select PaymentID,PaymentNo,PaymentDate,LedgerName,NetAmount,PayMode from tblPayment_" + sTableName + " r inner join tblLedger c on c.LedgerID=r.CustomerID inner join tblSalesPaymode p on p.value=r.Payment_ID order by PaymentDate desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetPaymentGrid(string sTableName, DateTime From, DateTime To, string CustomerID)
        {
            DataSet ds = new DataSet();
            if (CustomerID == "All")
            {
                string sQry = "select PaymentID,PaymentNo,PaymentDate,CustomerName,NetAmount,PayMode from tblPayment_" + sTableName + " r inner join tblCustomer c on c.CustomerID=r.CustomerID inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID where r.PaymentDate >='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and r.PaymentDate <='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' order by PaymentDate desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else
            {
                string sQry = "select PaymentID,PaymentNo,PaymentDate,CustomerName,NetAmount,PayMode from tblPayment_" + sTableName + " r inner join tblCustomer c on c.CustomerID=r.CustomerID inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID where r.PaymentDate >='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and r.PaymentDate <='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and c.CustomerID=" + CustomerID + "  order by PaymentDate desc";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            return ds;
        }

        public DataSet getPaymentnumber(string sTableName)
        {
            DataSet ds = new DataSet();
            string sQry3 = "select isnull(Max(PaymentNo+1),1) as PaymentNo from tblPayment_" + sTableName + "";
            ds = dbObj.InlineExecuteDataSet(sQry3);
            return ds;

        }

        public DataSet GetCreditPurchasebills(string sTableName, string supplier, string Type)
        {
            DataSet ds = new DataSet();

            //string sQry = "select  purchaseID as salesid,BillNo,BillDate,Total,ReturnAmount,ReceiptAmount,(Total-(ReceiptAmount+ReturnAmount)) as Balance from tblkitchenPurchase_" + sTableName + "  where supplier='" + supplier + "' and Paymode=2 and (Total-(ReceiptAmount+ReturnAmount))>0 and IsHide='N' ";
            string sQry = "select  purchaseID as salesid,BillNo,BillDate,isnull(roundoff,0) as Total,ReturnAmount,ReceiptAmount,(isnull(roundoff,0)-(ReceiptAmount+ReturnAmount)) as Balance from tblkitchenPurchase_" + sTableName + "  where supplier='" + supplier + "' and Paymode=18 and (isnull(roundoff,0)-(ReceiptAmount+ReturnAmount))>0  ";
            ds = dbObj.InlineExecuteDataSet(sQry);


            return ds;
        }

        public int insertPayment(string sTableName, DateTime BillDate, DateTime ChequeDate, string Customer, double NetAmount, string BankName, string ChequeNo, int Payment_ID, int BankId, double CloseDiscount, int userId, string PaymentType)
        {
            int save = 0;
            int PaymentNo = 0;
            int PaymentID = 0;

            DataSet ds = new DataSet();
            string sQry1 = "select isnull(Max(PaymentNo+1),1) as PaymentNo from tblPayment_" + sTableName + "";
            ds = dbObj.InlineExecuteDataSet(sQry1);
            PaymentNo = Convert.ToInt32(ds.Tables[0].Rows[0]["PaymentNo"].ToString());

            string sQry2 = "insert into tblPayment_" + sTableName + "(PaymentNo,PaymentDate,CustomerID,NetAmount,BankName,ChequeNo,Payment_ID,ChequeDate,BankId,CloseDiscount,userId,PaymentType)values(" + PaymentNo + ",'" + BillDate.ToString("yyyy/MM/dd") + "','" + Customer + "'," + NetAmount + ",'" + BankName + "','" + ChequeNo + "'," + Payment_ID + ",'" + ChequeDate.ToString("yyyy/MM/dd") + "'," + BankId + "," + CloseDiscount + "," + userId + ",'" + PaymentType + "')";
            save = dbObj.InlineExecuteNonQuery(sQry2);

            DataSet ds1 = new DataSet();
            string sQry3 = "select Max(PaymentID) as PaymentID from tblPayment_" + sTableName + "";
            ds1 = dbObj.InlineExecuteDataSet(sQry3);

            PaymentID = Convert.ToInt32(ds1.Tables[0].Rows[0]["PaymentID"].ToString());

            return PaymentID;

        }
        public int UpPaidinPurchase(int PaymentID, string sTableName, int purchaseID, decimal paid, string narration, decimal CloseDiscount, string PaymentType)
        {
            int save = 0;
            string sQry1 = "insert into tblTransPayment_" + sTableName + "(BillNo,PaymentID,Amount,Narration,CloseDiscount)values(" + purchaseID + "," + PaymentID + "," + paid + ",'" + narration + "'," + CloseDiscount + ")";
            save = dbObj.InlineExecuteNonQuery(sQry1);

            string sQry2 = "Update tblkitchenPurchase_" + sTableName + " set ReceiptAmount=ReceiptAmount+" + paid + " where purchaseID=" + purchaseID + " ";
            save = dbObj.InlineExecuteNonQuery(sQry2);

            return save;
        }

        public DataSet getPaymentrecord(string sTableName, string CustomerID, DateTime From, DateTime To, string Pay)
        {
            DataSet ds = new DataSet();
            if (Pay == "All")
            {
                if (CustomerID == "All")
                {
                    string sQry = "select distinct PaymentType,COUNT(tr.Paymentid) as BillNo,COUNT(tr.Paymentid) as DCNO,r.PaymentDate as BillDate,r.PaymentID,r.PaymentNo,r.PaymentDate,c.LedgerName,r.NetAmount,p.PayMode,'' as Narration,case isnull(ChequeNo,0) when  '0' then '-' else ChequeNo end as ChequeNo from tblPayment_" + sTableName + " r inner join tblTransPayment_" + sTableName + " tr on r.PaymentID=tr.PaymentID inner join tblLedger c on c.LedgerID=r.CustomerID inner join tblSalesPaymode p on p.value=r.Payment_ID where r.PaymentDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' group by PaymentType,r.PaymentID,r.PaymentNo,r.PaymentDate,c.LedgerName,r.NetAmount,p.PayMode,ChequeNo,r.CloseDiscount order by PaymentNo desc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select distinct  PaymentType,COUNT(tr.Paymentid) as  BillNo,COUNT(tr.Paymentid) as DCNO,r.PaymentDate as BillDate,r.PaymentID,r.PaymentNo,r.PaymentDate,c.LedgerName,r.NetAmount,p.PayMode,'' as Narration,case isnull(ChequeNo,0) when  '0' then '-' else ChequeNo end as ChequeNo from tblPayment_" + sTableName + " r inner join tblTransPayment_" + sTableName + " tr on r.PaymentID=tr.PaymentID inner join tblLedger c on c.LedgerID=r.CustomerID  inner join tblSalesPaymode p on p.value=r.Payment_ID  where r.PaymentDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and r.CustomerID=" + CustomerID + " group by PaymentType,r.PaymentID,r.PaymentNo,r.PaymentDate,c.LedgerName,r.NetAmount,p.PayMode,ChequeNo,r.CloseDiscount order by PaymentNo desc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
            }
            else
            {
                if (CustomerID == "All")
                {
                    string sQry = "select distinct  PaymentType,COUNT(tr.Paymentid) as  BillNo,COUNT(tr.Paymentid) as DCNO,r.PaymentDate as BillDate,r.PaymentID,r.PaymentNo,r.PaymentDate,c.LedgerName,r.NetAmount,p.PayMode,'' as Narration,case isnull(ChequeNo,0) when  '0' then '-' else ChequeNo end as ChequeNo from tblPayment_" + sTableName + " r inner join tblTransPayment_" + sTableName + " tr on r.PaymentID=tr.PaymentID inner join tblLedger c on c.LedgerID=r.CustomerID  inner join tblSalesPaymode p on p.value=r.Payment_ID where r.PaymentDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and Payment_ID=" + Pay + " group by PaymentType,r.PaymentID,r.PaymentNo,r.PaymentDate,c.LedgerName,r.NetAmount,p.PayMode,ChequeNo,r.CloseDiscount order by PaymentNo desc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select distinct  PaymentType,COUNT(tr.Paymentid) as BillNo,COUNT(tr.Paymentid) as DCNO,r.PaymentDate as BillDate,r.PaymentID,r.PaymentNo,r.PaymentDate,c.LedgerName,r.NetAmount,p.PayMode,'' as Narration,case isnull(ChequeNo,0) when  '0' then '-' else ChequeNo end as ChequeNo from tblPayment_" + sTableName + " r inner join tblTransPayment_" + sTableName + " tr on r.PaymentID=tr.PaymentID inner join tblLedger c on c.LedgerID=r.CustomerID  inner join tblSalesPaymode p on p.value=r.Payment_ID  where r.PaymentDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and r.CustomerID=" + CustomerID + "  and Payment_ID=" + Pay + " group by PaymentType,r.PaymentID,r.PaymentNo,r.PaymentDate,c.LedgerName,r.NetAmount,p.PayMode,ChequeNo,r.CloseDiscount order by PaymentNo desc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }

            }
            return ds;
        }
       
        public DataSet getPaymentrecorddetail(string sTableName, string CustomerID, DateTime From, DateTime To, string Pay)
        {
            DataSet ds = new DataSet();
            if (Pay == "All")
            {
                if (CustomerID == "All")
                {
                    string sQry = "select PaymentType,w.BillNo,w.BillDate,r.PaymentID,r.PaymentNo,r.PaymentDate,c.LedgerName,tr.Amount as NetAmount,p.PayMode,tr.narration,case isnull(r.ChequeNo,0) when  '0' then '-' else r.ChequeNo end as ChequeNo  from tblPayment_" + sTableName + " r inner join tblTransPayment_" + sTableName + " tr on r.PaymentID=tr.PaymentID inner join tblLedger c on c.LedgerID=r.CustomerID inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID  inner join tblkitchenPurchase_" + sTableName + " w on w.purchaseID=tr.BillNo where r.PaymentDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select PaymentType,w.BillNo,w.BillDate,r.PaymentID,r.PaymentNo,r.PaymentDate,c.LedgerName,tr.Amount as NetAmount,p.PayMode,tr.narration,case isnull(r.ChequeNo,0) when  '0' then '-' else r.ChequeNo end as ChequeNo  from tblPayment_" + sTableName + " r inner join tblTransPayment_" + sTableName + " tr on r.PaymentID=tr.PaymentID inner join tblLedger c on c.LedgerID=r.CustomerID  inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID   inner join tblkitchenPurchase_" + sTableName + " w on w.purchaseID=tr.BillNo where r.PaymentDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and r.CustomerID=" + CustomerID + "";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
            }
            else
            {
                if (CustomerID == "All")
                {
                    string sQry = "select PaymentType,w.BillNo,w.BillDate,r.PaymentID,r.PaymentNo,r.PaymentDate,c.LedgerName,tr.Amount as NetAmount,p.PayMode,tr.narration,case isnull(r.ChequeNo,0) when  '0' then '-' else r.ChequeNo end as ChequeNo  from tblPayment_" + sTableName + " r inner join tblTransPayment_" + sTableName + " tr on r.PaymentID=tr.PaymentID inner join tblLedger c on c.LedgerID=r.CustomerID  inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID  inner join tblkitchenPurchase_" + sTableName + " w on w.purchaseID=tr.BillNo where r.PaymentDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and Payment_ID=" + Pay + " ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select PaymentType,w.BillNo,w.BillDate,r.PaymentID,r.PaymentNo,r.PaymentDate,c.LedgerName,tr.Amount as NetAmount,p.PayMode,tr.narration,case isnull(r.ChequeNo,0) when  '0' then '-' else r.ChequeNo end as ChequeNo  from tblPayment_" + sTableName + " r inner join tblTransPayment_" + sTableName + " tr on r.PaymentID=tr.PaymentID inner join tblLedger c on c.LedgerID=r.CustomerID  inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID   inner join tblkitchenPurchase_" + sTableName + " w on w.purchaseID=tr.BillNo where r.PaymentDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and r.CustomerID=" + CustomerID + "  and Payment_ID=" + Pay + "";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }

            }
            return ds;
        }


        public DataSet getSupplierOutStanding(string Type, string sTableName, string CustomerID, DateTime From, DateTime To)
        {
            DataSet ds = new DataSet();
            string sQry = "";

            if (Type == "2")
            {
                if (CustomerID == "All")
                {
                    //sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,Total as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((Total - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  order by c.LedgerName asc ";
                    sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,roundoff as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,p.paymode as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier inner join tblsalespaymode as p on p.value=w.paymode where  cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=18  and  (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  order by c.LedgerName asc ";
                }
                else
                {
                    //sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,Total  as NetAmount,isnull(ReceiptAmount,0) as Receipt,ReturnAmount,0 as CloseDiscount, round((Total - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "'  and w.PayMode=2   and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' order by c.LedgerName asc ";
                    sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,roundoff  as NetAmount,isnull(ReceiptAmount,0) as Receipt,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,p.paymode as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier inner join tblsalespaymode as p on p.value=w.paymode where  cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "'  and w.PayMode=18   and  (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' order by c.LedgerName asc ";
                }
            }
            else
            {
                if (CustomerID == "All")
                {
                    //sQry = "select '-' as DCNo,'-' as BillNo,'-' as BillDate,COUNT(c.LedgerName) as BillCount,c.LedgerName as CustomerName,c.MobileNo,sum(Total) as NetAmount,sum(isnull(ReceiptAmount,0)) as Receipt ,sum(ReturnAmount) as ReturnAmount,0 as CloseDiscount,round((sum(Total) - (sum(isnull(ReceiptAmount,0))+sum(ReturnAmount))),0) as Balance  ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "'  and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 group by c.LedgerName,c.MobileNo,PayMode  order by c.LedgerName asc ";
                    sQry = "select '-' as DCNo,'-' as BillNo,'-' as BillDate,COUNT(c.LedgerName) as BillCount,c.LedgerName as CustomerName,c.MobileNo,sum(roundoff) as NetAmount,sum(isnull(ReceiptAmount,0)) as Receipt ,sum(ReturnAmount) as ReturnAmount,0 as CloseDiscount,round((sum(isnull(roundoff,0)) - (sum(isnull(ReceiptAmount,0))+sum(ReturnAmount))),0) as Balance  ,p.paymode as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier inner join tblsalespaymode as p on p.value=w.paymode where  cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "'  and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=18  and  (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 group by c.LedgerName,c.MobileNo,p.PayMode  order by c.LedgerName asc ";
                }
                else
                {
                    //sQry = "select '-' as DCNo,'-' as BillNo,'-' as BillDate,COUNT(c.LedgerName)  as BillCount,c.LedgerName as CustomerName,c.MobileNo,sum(Total) as NetAmount,sum(isnull(ReceiptAmount,0)) as Receipt,sum(ReturnAmount) as ReturnAmount,0 as CloseDiscount,round((sum(Total) - (sum(isnull(ReceiptAmount,0))+sum(ReturnAmount))),0) as Balance  ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "'   and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(Total,0) -(isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' group by c.LedgerName,c.MobileNo,PayMode  order by c.LedgerName asc ";
                    sQry = "select '-' as DCNo,'-' as BillNo,'-' as BillDate,COUNT(c.LedgerName)  as BillCount,c.LedgerName as CustomerName,c.MobileNo,sum(roundoff) as NetAmount,sum(isnull(ReceiptAmount,0)) as Receipt,sum(ReturnAmount) as ReturnAmount,0 as CloseDiscount,round((sum(isnull(roundoff,0)) - (sum(isnull(ReceiptAmount,0))+sum(ReturnAmount))),0) as Balance  ,p.paymode as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier inner join tblsalespaymode as p on p.value=w.paymode where cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "'   and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=18  and  (isnull(roundoff,0) -(isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' group by c.LedgerName,c.MobileNo,p.PayMode  order by c.LedgerName asc ";
                }

            }
            ds = dbObj.InlineExecuteDataSet(sQry);

            return ds;
        }


        //Shanthi 28/2/23 For Outstanding with Company Report
        public DataSet getSupplierOutStandingwithCompany(string Type, string sTableName, string CustomerID, DateTime From, DateTime To,string SubCompanyId)
        {
            DataSet ds = new DataSet();
            string sQry = "";

            if (Type == "2")
            {
                if (SubCompanyId == "All")
                {
                    if (CustomerID == "All")
                    {
                        //sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,Total as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((Total - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  order by c.LedgerName asc ";
                        sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,roundoff as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,p.paymode as PayType,sc.CustomerName+'-'+sc.GSTNO as CompanyName,c.LedgerId from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier inner join tblsalespaymode as p on p.value=w.paymode inner join tblSubCompanydetails sc on sc.subComapanyId=w.subCompanyId where  cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=18  and  (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0   order by c.LedgerName asc ";
                    }
                    else
                    {
                        //sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,Total  as NetAmount,isnull(ReceiptAmount,0) as Receipt,ReturnAmount,0 as CloseDiscount, round((Total - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "'  and w.PayMode=2   and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' order by c.LedgerName asc ";
                        sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,roundoff  as NetAmount,isnull(ReceiptAmount,0) as Receipt,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,p.paymode as PayType,sc.CustomerName+'-'+sc.GSTNO as CompanyName,c.LedgerId from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier inner join tblsalespaymode as p on p.value=w.paymode inner join tblsubCompanydetails sc on sc.SubComapanyId=w.subComapanyId where  cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "'  and w.PayMode=18   and  (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "'  order by c.LedgerName asc ";
                    }
                }
                else
                {
                    if (CustomerID == "All")
                    {
                        //sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,Total as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((Total - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  order by c.LedgerName asc ";
                        sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,roundoff as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,p.paymode as PayType,sc.CustomerName+'-'+sc.GSTNO as CompanyName,c.LedgerId from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier inner join tblsalespaymode as p on p.value=w.paymode inner join tblSubCompanyDetails sc on sc.subcomapanyId=w.SubcompanyId where  cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=18  and  (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.SubcompanyId='" + SubCompanyId + "'  order by c.LedgerName asc ";
                    }
                    else
                    {
                        //sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,Total  as NetAmount,isnull(ReceiptAmount,0) as Receipt,ReturnAmount,0 as CloseDiscount, round((Total - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "'  and w.PayMode=2   and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' order by c.LedgerName asc ";
                        sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,roundoff  as NetAmount,isnull(ReceiptAmount,0) as Receipt,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,p.paymode as PayType,sc.CustomerName+'-'+sc.GSTNO as CompanyName,c.LedgerId from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier inner join tblsalespaymode as p on p.value=w.paymode inner join tblsubCompanydetails sc on sc.SubcomapanyId=w.subcompanyID where  cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "'  and w.PayMode=18   and  (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' and w.subCompanyId='" + SubCompanyId + "'  order by c.LedgerName asc ";
                    }
                }
            }
            else
            {
                if (SubCompanyId == "All")
                {
                    if (CustomerID == "All")
                    {
                        //sQry = "select '-' as DCNo,'-' as BillNo,'-' as BillDate,COUNT(c.LedgerName) as BillCount,c.LedgerName as CustomerName,c.MobileNo,sum(Total) as NetAmount,sum(isnull(ReceiptAmount,0)) as Receipt ,sum(ReturnAmount) as ReturnAmount,0 as CloseDiscount,round((sum(Total) - (sum(isnull(ReceiptAmount,0))+sum(ReturnAmount))),0) as Balance  ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "'  and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 group by c.LedgerName,c.MobileNo,PayMode  order by c.LedgerName asc ";
                        sQry = "select '-' as DCNo,'-' as BillNo,'-' as BillDate,COUNT(c.LedgerName) as BillCount,c.LedgerName as CustomerName,c.MobileNo,sum(roundoff) as NetAmount,sum(isnull(ReceiptAmount,0)) as Receipt ,sum(ReturnAmount) as ReturnAmount,0 as CloseDiscount,round((sum(isnull(roundoff,0)) - (sum(isnull(ReceiptAmount,0))+sum(ReturnAmount))),0) as Balance  ,p.paymode as PayType,sc.CustomerName+'-'+sc.GSTNO as CompanyName from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier inner join tblsalespaymode as p on p.value=w.paymode inner join tblSubCompanyDetails sc on sc.subcomapanyId=w.SubcompanyId  where  cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "'  and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=18  and  (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 group by c.LedgerName,c.MobileNo,p.PayMode,sc.CustomerName,sc.GStNo  order by c.LedgerName asc ";
                    }
                    else
                    {
                        //sQry = "select '-' as DCNo,'-' as BillNo,'-' as BillDate,COUNT(c.LedgerName)  as BillCount,c.LedgerName as CustomerName,c.MobileNo,sum(Total) as NetAmount,sum(isnull(ReceiptAmount,0)) as Receipt,sum(ReturnAmount) as ReturnAmount,0 as CloseDiscount,round((sum(Total) - (sum(isnull(ReceiptAmount,0))+sum(ReturnAmount))),0) as Balance  ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "'   and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(Total,0) -(isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' group by c.LedgerName,c.MobileNo,PayMode  order by c.LedgerName asc ";
                        sQry = "select '-' as DCNo,'-' as BillNo,'-' as BillDate,COUNT(c.LedgerName)  as BillCount,c.LedgerName as CustomerName,c.MobileNo,sum(roundoff) as NetAmount,sum(isnull(ReceiptAmount,0)) as Receipt,sum(ReturnAmount) as ReturnAmount,0 as CloseDiscount,round((sum(isnull(roundoff,0)) - (sum(isnull(ReceiptAmount,0))+sum(ReturnAmount))),0) as Balance  ,p.paymode as PayType,sc.CustomerName+'-'+sc.GSTNO as CompanyName from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier inner join tblsalespaymode as p on p.value=w.paymode inner join tblSubCompanyDetails sc on sc.subcomapanyId=w.SubcompanyId  where cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "'   and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=18  and  (isnull(roundoff,0) -(isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' group by c.LedgerName,c.MobileNo,p.PayMode,sc.CustomerName,sc.GStNo  order by c.LedgerName asc ";
                    }
                }
                else
                {
                    if (CustomerID == "All")
                    {
                        //sQry = "select '-' as DCNo,'-' as BillNo,'-' as BillDate,COUNT(c.LedgerName) as BillCount,c.LedgerName as CustomerName,c.MobileNo,sum(Total) as NetAmount,sum(isnull(ReceiptAmount,0)) as Receipt ,sum(ReturnAmount) as ReturnAmount,0 as CloseDiscount,round((sum(Total) - (sum(isnull(ReceiptAmount,0))+sum(ReturnAmount))),0) as Balance  ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "'  and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 group by c.LedgerName,c.MobileNo,PayMode  order by c.LedgerName asc ";
                        sQry = "select '-' as DCNo,'-' as BillNo,'-' as BillDate,COUNT(c.LedgerName) as BillCount,c.LedgerName as CustomerName,c.MobileNo,sum(roundoff) as NetAmount,sum(isnull(ReceiptAmount,0)) as Receipt ,sum(ReturnAmount) as ReturnAmount,0 as CloseDiscount,round((sum(isnull(roundoff,0)) - (sum(isnull(ReceiptAmount,0))+sum(ReturnAmount))),0) as Balance  ,p.paymode as PayType,sc.CustomerName+'-'+sc.GSTNO as CompanyName from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier inner join tblsalespaymode as p on p.value=w.paymode inner join tblsubcompanydetails sc on sc.subcomapanyId=w.SubCompanyId where  cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "'  and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=18  and  (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.subCompanyId='" + SubCompanyId + "'  group by c.LedgerName,c.MobileNo,p.PayMode,sc.CustomerName,sc.gstNo  order by c.LedgerName asc ";
                    }
                    else
                    {
                        //sQry = "select '-' as DCNo,'-' as BillNo,'-' as BillDate,COUNT(c.LedgerName)  as BillCount,c.LedgerName as CustomerName,c.MobileNo,sum(Total) as NetAmount,sum(isnull(ReceiptAmount,0)) as Receipt,sum(ReturnAmount) as ReturnAmount,0 as CloseDiscount,round((sum(Total) - (sum(isnull(ReceiptAmount,0))+sum(ReturnAmount))),0) as Balance  ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "'   and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(Total,0) -(isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' group by c.LedgerName,c.MobileNo,PayMode  order by c.LedgerName asc ";
                        sQry = "select '-' as DCNo,'-' as BillNo,'-' as BillDate,COUNT(c.LedgerName)  as BillCount,c.LedgerName as CustomerName,c.MobileNo,sum(roundoff) as NetAmount,sum(isnull(ReceiptAmount,0)) as Receipt,sum(ReturnAmount) as ReturnAmount,0 as CloseDiscount,round((sum(isnull(roundoff,0)) - (sum(isnull(ReceiptAmount,0))+sum(ReturnAmount))),0) as Balance  ,p.paymode as PayType,sc.CustomerName+'-'+sc.GSTNO as CompanyName from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier inner join tblsalespaymode as p on p.value=w.paymode  inner join tblsubcompanydetails sc on sc.subcomapanyId=w.SubCompanyId where cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "'   and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=18  and  (isnull(roundoff,0) -(isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' and w.subCompanyId='" + SubCompanyId + "' group by c.LedgerName,c.MobileNo,p.PayMode,sc.CustomerName,sc.GSTNo  order by c.LedgerName asc ";
                    }

                }
            }
                ds = dbObj.InlineExecuteDataSet(sQry);
           
            return ds;
        }

        public DataSet getSupplierOutStanding_report(string Type, string sTableName, string CustomerID, DateTime From)
        {
            DataSet ds = new DataSet();
            string sQry = "";

            if (Type == "2")
            {
               
                    if (CustomerID == "All")
                    {
                        ////sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,Total as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((Total - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  order by c.LedgerName asc ";
                        //                    sQry = "select DATEDIFF(day,billdate, ('" + From.ToString("yyyy/MM/dd") + "')) AS DateDiff,paymentdays, " +
                        //" (BillDate+(CAST(paymentdays AS INT))) as real_dt, DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount, " +
                        //" roundoff as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance , " +
                        // " case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier " +
                        //   " where (BillDate+(CAST(paymentdays AS INT))) <= '" + From.ToString("yyyy/MM/dd") + "'  and w.PayMode=2  and  " +
                        //     " (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  order by c.LedgerName,Billdate asc";
                        sQry = "select DATEDIFF(day,billdate, ('" + From.ToString("yyyy/MM/dd") + "')) AS DateDiff,paymentdays, " +
         " (BillDate+(CAST(paymentdays AS INT))) as real_dt, DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount, " +
         " roundoff as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance , " +
          " p.paymode as PayType,sc.CustomerName as CompanyName from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier " +
          " inner join tblsalespaymode as p on p.value=w.paymode inner join tblSubCompanyDetails sc on sc.SubcomapanyId=w.subcompanyId" +
            " where (BillDate+(CAST(paymentdays AS INT))) <= '" + From.ToString("yyyy/MM/dd") + "'  and w.PayMode=18  and  " +
              " (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  order by c.LedgerName,Billdate asc";
                    }
                    else
                    {
                        //sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,Total  as NetAmount,isnull(ReceiptAmount,0) as Receipt,ReturnAmount,0 as CloseDiscount, round((Total - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "'  and w.PayMode=2   and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' order by c.LedgerName asc ";
                        //sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,roundoff  as NetAmount,isnull(ReceiptAmount,0) as Receipt,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where  cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "'  and w.PayMode=2   and  (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' order by c.LedgerName asc ";
                        sQry = "select DATEDIFF(day,billdate, ('" + From.ToString("yyyy/MM/dd") + "')) AS DateDiff,paymentdays, " +
    " (BillDate+(CAST(paymentdays AS INT))) as real_dt, DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount, " +
    " roundoff as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance , " +
    " p.paymode as PayType,sc.CustomerName as CompanyName from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier " +
    " inner join tblsalespaymode as p on p.value=w.paymode inner join tblSubCompanydetails sc on sc.subcomapanyId=w.subcompanyId " +
    " where (BillDate+(CAST(paymentdays AS INT))) <= '" + From.ToString("yyyy/MM/dd") + "'  and w.PayMode=18  and  " +
    " (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  and w.supplier='" + CustomerID + "' order by c.LedgerName,Billdate asc";
                    }
               
               
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
          

          

            return ds;
        }


        public DataSet getSupplierOutStandingwithCompany_report(string Type, string sTableName, string CustomerID, DateTime From, string SubCompanyId)
        {
            DataSet ds = new DataSet();
            string sQry = "";

            if (Type == "2")
            {
                if (SubCompanyId == "All")
                {
                    if (CustomerID == "All")
                    {
                        ////sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,Total as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((Total - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  order by c.LedgerName asc ";
                        //                    sQry = "select DATEDIFF(day,billdate, ('" + From.ToString("yyyy/MM/dd") + "')) AS DateDiff,paymentdays, " +
                        //" (BillDate+(CAST(paymentdays AS INT))) as real_dt, DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount, " +
                        //" roundoff as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance , " +
                        // " case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier " +
                        //   " where (BillDate+(CAST(paymentdays AS INT))) <= '" + From.ToString("yyyy/MM/dd") + "'  and w.PayMode=2  and  " +
                        //     " (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  order by c.LedgerName,Billdate asc";
                        sQry = "select DATEDIFF(day,billdate, ('" + From.ToString("yyyy/MM/dd") + "')) AS DateDiff,paymentdays, " +
         " (BillDate+(CAST(paymentdays AS INT))) as real_dt, DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount, " +
         " roundoff as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance , " +
          " p.paymode as PayType,sc.CustomerName+'-'+sc.GSTNO as CompanyName from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier " +
          " inner join tblsalespaymode as p on p.value=w.paymode inner join tblSubCompanyDetails sc on sc.SubcomapanyId=w.subcompanyId" +
            " where (BillDate+(CAST(paymentdays AS INT))) <= '" + From.ToString("yyyy/MM/dd") + "'  and w.PayMode=18  and  " +
              " (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  order by c.LedgerName,Billdate asc";
                    }
                    else
                    {
                        //sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,Total  as NetAmount,isnull(ReceiptAmount,0) as Receipt,ReturnAmount,0 as CloseDiscount, round((Total - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "'  and w.PayMode=2   and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' order by c.LedgerName asc ";
                        //sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,roundoff  as NetAmount,isnull(ReceiptAmount,0) as Receipt,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where  cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "'  and w.PayMode=2   and  (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' order by c.LedgerName asc ";
                        sQry = "select DATEDIFF(day,billdate, ('" + From.ToString("yyyy/MM/dd") + "')) AS DateDiff,paymentdays, " +
    " (BillDate+(CAST(paymentdays AS INT))) as real_dt, DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount, " +
    " roundoff as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance , " +
    " p.paymode as PayType,sc.CustomerName+'-'+sc.GSTNO as CompanyName from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier " +
    " inner join tblsalespaymode as p on p.value=w.paymode inner join tblSubCompanydetails sc on sc.subcomapanyId=w.subcompanyId " +
    " where (BillDate+(CAST(paymentdays AS INT))) <= '" + From.ToString("yyyy/MM/dd") + "'  and w.PayMode=18  and  " +
    " (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  and w.supplier='" + CustomerID + "' order by c.LedgerName,Billdate asc";
                    }
                }
                else
                     if (CustomerID == "All")
                {
                    ////sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,Total as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((Total - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  order by c.LedgerName asc ";
                    //                    sQry = "select DATEDIFF(day,billdate, ('" + From.ToString("yyyy/MM/dd") + "')) AS DateDiff,paymentdays, " +
                    //" (BillDate+(CAST(paymentdays AS INT))) as real_dt, DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount, " +
                    //" roundoff as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance , " +
                    // " case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier " +
                    //   " where (BillDate+(CAST(paymentdays AS INT))) <= '" + From.ToString("yyyy/MM/dd") + "'  and w.PayMode=2  and  " +
                    //     " (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  order by c.LedgerName,Billdate asc";
                    sQry = "select DATEDIFF(day,billdate, ('" + From.ToString("yyyy/MM/dd") + "')) AS DateDiff,paymentdays, " +
     " (BillDate+(CAST(paymentdays AS INT))) as real_dt, DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount, " +
     " roundoff as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance , " +
      " p.paymode as PayType,sc.CustomerName+'-'+sc.GSTNO as CompanyName from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier " +
      " inner join tblsalespaymode as p on p.value=w.paymode inner join tblSubCompanyDetails sc on sc.SubcomapanyId=w.subcompanyId" +
        " where (BillDate+(CAST(paymentdays AS INT))) <= '" + From.ToString("yyyy/MM/dd") + "'  and w.PayMode=18  and  " +
          " (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.SubcompanyId='" + SubCompanyId + "'  order by c.LedgerName,Billdate asc";
                }
                else
                {
                    //sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,Total  as NetAmount,isnull(ReceiptAmount,0) as Receipt,ReturnAmount,0 as CloseDiscount, round((Total - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where IsHide='N' and cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "'  and w.PayMode=2   and  (round(Total,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' order by c.LedgerName asc ";
                    //sQry = "select DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount,roundoff  as NetAmount,isnull(ReceiptAmount,0) as Receipt,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier where  cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "'  and w.PayMode=2   and  (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0 and w.supplier='" + CustomerID + "' order by c.LedgerName asc ";
                    sQry = "select DATEDIFF(day,billdate, ('" + From.ToString("yyyy/MM/dd") + "')) AS DateDiff,paymentdays, " +
" (BillDate+(CAST(paymentdays AS INT))) as real_dt, DCNo,BillNo,BillDate,c.LedgerName as CustomerName,c.MobileNo,'1' as BillCount, " +
" roundoff as NetAmount,isnull(ReceiptAmount,0) as Receipt ,ReturnAmount,0 as CloseDiscount, round((isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)),0) as Balance , " +
" p.paymode as PayType,sc.CustomerName+'-'+sc.GSTNO as CompanyName from tblkitchenPurchase_" + sTableName + " w inner join tblLedger c on c.LedgerID=w.supplier " +
" inner join tblsalespaymode as p on p.value=w.paymode inner join tblSubCompanydetails sc on sc.subcomapanyId=w.subcompanyId " +
" where (BillDate+(CAST(paymentdays AS INT))) <= '" + From.ToString("yyyy/MM/dd") + "'  and w.PayMode=18  and  " +
" (isnull(roundoff,0) - (isnull(ReceiptAmount,0)+ReturnAmount)) >0  and w.subCompanyId='" + SubCompanyId + "' and w.supplier='" + CustomerID + "' order by c.LedgerName,Billdate asc";
                }
                ds = dbObj.InlineExecuteDataSet(sQry);
            }




            return ds;
        }

        public DataSet tblsalespaymode()
        {
            DataSet ds = new DataSet();
            //////string sqry = "select * from tblsalespaymode where PayModeId in(1)";
            string sqry = "select * from tblPaymode where PayModeId in(1,7,8)";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #endregion

        #region INVOICE ORDER BILL ENTRY

        public int insertOnline_Order(string salestype, string ordernumber, string branchcode, string entryby, string requesttype, string paymentmode, string sendername,
            string senderno, string receivername, string receivedno, string orderdate, string deliverydate, string totalamount, string totalqy, string discount,
            string deliverycharge, string grandtotal, string actualtotal, string gstper, string gstamount)
        {
            int iss = 0;
            string sqry = string.Empty;
            string Branchid = string.Empty;
            int onlinenumber = 0;

            string getbranchcode = "Select * from tblbranch where Branchcode='" + branchcode + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                Branchid = getstorecode.Tables[0].Rows[0]["branchid"].ToString();

            }

            // getmax of onlinenumber
            string maxonline = "select isnull(MAX(onlineno+1),1) as maxonlineno from tblonlineordernumber";
            DataSet donlineno = dbObj.InlineExecuteDataSet(maxonline);

            if (donlineno.Tables[0].Rows.Count > 0)
            {

                onlinenumber = Convert.ToInt32(donlineno.Tables[0].Rows[0]["maxonlineno"]);

                sqry = "Insert into tblonlineordernumber(OnlineType,OnlineNumber,BranchCode,BranchId,EntryBy,RequestType,OnlineNo,PaymentMode,Sendername,SenderNo,ReceiverName, " +
                    " ReceiverNo,OrderDate,DeliveryDate,NetAmount,Discountamount,Deliverycharge,TotalQty,ActualtotalAmount,TotalAmount,Gstper,gstamount)values('" + salestype + "','" + ordernumber + "', " +
                    " '" + branchcode + "','" + Branchid + "','" + entryby + "','" + requesttype + "','" + onlinenumber + "','" + paymentmode + "','" + sendername + "','" + senderno + "', " +
                    " '" + receivername + "','" + receivedno + "','" + Convert.ToDateTime(orderdate).ToString("yyyy-MM-dd hh:mm") + "','" + Convert.ToDateTime(deliverydate).ToString("yyyy-MM-dd hh:mm") + "', " +
                    " '" + totalamount + "','" + discount + "','" + deliverycharge + "','" + totalqy + "','" + actualtotal + "','" + grandtotal + "','" + gstper + "','" + gstamount + "')";
                iss = dbObj.InlineExecuteNonQuery(sqry);
            }
            return onlinenumber;
        }


        public int insertTransOnline_Order(string onlineno, string Categoryid, string SubCategoryID, string Unitprice, string Amount, string NetAmount, string Quantity, string Branchcode)
        {
            int iss = 0;
            string sqry = string.Empty;
            string Branchid = string.Empty;
            int OnlineID = 0;

            //string getbranchcode = "Select * from tblbranch where Branchcode='" + branchcode + "'";
            //DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            //if (getstorecode.Tables[0].Rows.Count > 0)
            //{
            //    Branchid = getstorecode.Tables[0].Rows[0]["branchid"].ToString();

            //}

            // getmax of onlinenumber
            string maxonline = "select * from tblonlineordernumber where onlineno='" + onlineno + "'";
            DataSet donlineno = dbObj.InlineExecuteDataSet(maxonline);

            if (donlineno.Tables[0].Rows.Count > 0)
            {

                OnlineID = Convert.ToInt32(donlineno.Tables[0].Rows[0]["OnlineID"]);

                sqry = "Insert into tbltransOrderNumber(OnlineId,Categoryid,SubCategoryID,Unitprice,Amount,NetAmount,Quantity,Status,Branchcode)values('" + OnlineID + "','" + Categoryid + "', " +
                    " '" + SubCategoryID + "','" + Unitprice + "','" + Amount + "','" + NetAmount + "','" + Quantity + "','N','" + Branchcode + "')";
                iss = dbObj.InlineExecuteNonQuery(sqry);
            }
            return iss;
        }

        public int UpdateOnline_order(string onlineid, string salestype, string ordernumber, string branchcode, string entryby, string paymentmode, string sendername,
            string senderno, string receivername, string receivedno, string orderdate, string deliverydate, string totalamount, string totalqy, string discount,
            string deliverycharge, string grandtotal, string actualtotal, string gstper, string gstamount)
        {
            int iss = 0;
            string sqry = string.Empty;
            string Branchid = string.Empty;

            string getbranchcode = "Select * from tblbranch where Branchcode='" + branchcode + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                Branchid = getstorecode.Tables[0].Rows[0]["branchid"].ToString();

            }

            // sqry = "Insert into tblonlineordernumber(OnlineType,OnlineNumber,BranchCode,BranchId,EntryBy,RequestType)values('" + salestype + "','" + ordernumber + "','" + branchcode + "','" + Branchid + "','" + entryby + "','" + requesttype + "')";
            sqry = "Update tblonlineordernumber set PaymentMode='" + paymentmode + "',Sendername='" + sendername + "',SenderNo='" + senderno + "',ReceiverName='" + receivername + "', " +
                " ReceiverNo='" + receivedno + "',OrderDate='" + Convert.ToDateTime(orderdate).ToString("yyyy-MM-dd hh:mm") + "',DeliveryDate='" + Convert.ToDateTime(deliverydate).ToString("yyyy-MM-dd hh:mm") + "',NetAmount='" + totalamount + "',TotalAmount='" + grandtotal + "',Discountamount='" + discount + "', " +
                    " Deliverycharge='" + deliverycharge + "',TotalQty='" + totalqy + "',ActualtotalAmount='" + actualtotal + "',Gstper='" + gstper + "',gstamount='" + gstamount + "',Onlinetype='" + salestype + "',OnlineNumber='" + ordernumber + "',BranchCode='" + branchcode + "',BranchId='" + Branchid + "' " +
                " where Onlineid='" + onlineid + "'";
            iss = dbObj.InlineExecuteNonQuery(sqry);
            return iss;
        }


        public int insertTransOnline_Order_update(string OnlineID, string Categoryid, string SubCategoryID, string Unitprice, string Amount, string NetAmount, string Quantity, string Branchcode)
        {
            int iss = 0;
            string sqry = string.Empty;
            string Branchid = string.Empty;
            // int OnlineID = 0;

            //string getbranchcode = "Select * from tblbranch where Branchcode='" + branchcode + "'";
            //DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            //if (getstorecode.Tables[0].Rows.Count > 0)
            //{
            //    Branchid = getstorecode.Tables[0].Rows[0]["branchid"].ToString();

            //}

            // getmax of onlinenumber

            {

                // OnlineID = Convert.ToInt32(donlineno.Tables[0].Rows[0]["OnlineID"]);

                sqry = "Insert into tbltransOrderNumber(OnlineId,Categoryid,SubCategoryID,Unitprice,Amount,NetAmount,Quantity,Status,Branchcode) " +
                    " values('" + OnlineID + "','" + Categoryid + "', " +
                    " '" + SubCategoryID + "','" + Unitprice + "','" + Amount + "','" + NetAmount + "','" + Quantity + "','N','" + Branchcode + "')";
                iss = dbObj.InlineExecuteNonQuery(sqry);
            }
            return iss;
        }


        #endregion


        #region Online Report
        public DataSet OnlineReport(string sBranch, DateTime sFmdate, DateTime sToDate, string salestype)
        {
            DataSet ds = new DataSet();
            string sqr = string.Empty;


            if (sBranch == "All" && salestype == "All")
            {

                sqr = "select a.branchcode,a.reason,a.entryby,a.entrydate,a.kotno,a.kotdate,a.Hkotno,a.Hkotdate,a.Requesttype,isnull(a.Cstatus,'N/A') as Cstatus,a.Cdate,a.Cnotes,a.itemnarration,b.paymenttype,a.Hstatus,a.Status,a.onlinenumber " +
                            " from tblOnlineOrderNumber as a inner join tblsalestype as b on b.salestypeid=a.onlinetype  where convert(date,a.EntryDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                            " and convert(date,a.EntryDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'";
            }
            else if (sBranch == "All" && salestype != "All")
            {

                sqr = "select a.branchcode,a.reason,a.entryby,a.entrydate,a.kotno,a.kotdate,a.Hkotno,a.Hkotdate,a.Requesttype,isnull(a.Cstatus,'N/A') as Cstatus,a.Cdate,a.Cnotes,a.itemnarration,b.paymenttype,a.Hstatus,a.Status,a.onlinenumber " +
                            " from tblOnlineOrderNumber as a inner join tblsalestype as b on b.salestypeid=a.onlinetype  where OnlineType='" + salestype + "' and convert(date,a.EntryDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                            " and convert(date,a.EntryDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'";
            }
            else if (sBranch != "All" && salestype == "All")
            {

                sqr = "select a.branchcode,a.reason,a.entryby,a.entrydate,a.kotno,a.kotdate,a.Hkotno,a.Hkotdate,a.Requesttype,isnull(a.Cstatus,'N/A') as Cstatus,a.Cdate,a.Cnotes,a.itemnarration,b.paymenttype,a.Hstatus,a.Status,a.onlinenumber " +
                            " from tblOnlineOrderNumber as a inner join tblsalestype as b on b.salestypeid=a.onlinetype  where Branchcode='" + sBranch + "' and convert(date,a.EntryDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                            " and convert(date,a.EntryDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'";
            }
            else if (sBranch != "All" && salestype != "All")
            {

                sqr = "select a.branchcode,a.reason,a.entryby,a.entrydate,a.kotno,a.kotdate,a.Hkotno,a.Hkotdate,a.Requesttype,isnull(a.Cstatus,'N/A') as Cstatus,a.Cdate,a.Cnotes,a.itemnarration,b.paymenttype,a.Hstatus,a.Status,a.onlinenumber " +
                            " from tblOnlineOrderNumber as a inner join tblsalestype as b on b.salestypeid=a.onlinetype  where OnlineType='" + salestype + "' and Branchcode='" + sBranch + "' and convert(date,a.EntryDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                            " and convert(date,a.EntryDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'";
            }


            ds = dbObj.InlineExecuteDataSet(sqr);

            return ds;
        }


        public DataSet OnlineReport_summary(string sBranch, DateTime sFmdate, DateTime sToDate, string salestype)
        {
            DataSet ds = new DataSet();
            string sqr = string.Empty;


            if (sBranch == "All" && salestype == "All")
            {

                //sqr = "select a.branchcode,a.reason,a.entryby,a.entrydate,a.kotno,a.kotdate,a.Hkotno,a.Hkotdate,a.Requesttype,isnull(a.Cstatus,'N/A') as Cstatus,a.Cdate,a.Cnotes,a.itemnarration,b.paymenttype,a.Hstatus,a.Status,a.onlinenumber " +
                //            " from tblOnlineOrderNumber as a inner join tblsalestype as b on b.salestypeid=a.onlinetype  where convert(date,a.EntryDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                //            " and convert(date,a.EntryDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'";


                sqr = "SELECT ROW_NUMBER() OVER(ORDER BY onlineid ASC) AS Rown,'W'+ cast((DATEPART(week, OrderDate) - DATEPART(week, DATEADD(day, 1, EOMONTH(OrderDate, -1)))) + 1 as nvarchar) as week " +
  " , DATENAME(dw,OrderDate) 'DayName',FORMAT(OrderDate, 'MMM') AS 'MonthName',isnull(a.Cstatus,'N/A') as Cstatus,a.*,b.PaymentType,c.PayMode,d.city,d.brancharea from tblOnlineOrderNumber as a inner join tblsalestype as b on b.salestypeid=a.onlinetype " +
  " inner join tblSalesPaymode as c on c.Value=a.paymentmode  inner join tblbranch as d on d.branchid=a.branchid where convert(date,a.orderdate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                            " and convert(date,a.orderdate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'";
            }
            else if (sBranch == "All" && salestype != "All")
            {

                //sqr = "select a.branchcode,a.reason,a.entryby,a.entrydate,a.kotno,a.kotdate,a.Hkotno,a.Hkotdate,a.Requesttype,isnull(a.Cstatus,'N/A') as Cstatus,a.Cdate,a.Cnotes,a.itemnarration,b.paymenttype,a.Hstatus,a.Status,a.onlinenumber " +
                //            " from tblOnlineOrderNumber as a inner join tblsalestype as b on b.salestypeid=a.onlinetype  where OnlineType='" + salestype + "' and convert(date,a.EntryDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                //            " and convert(date,a.EntryDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'";
                sqr = "SELECT ROW_NUMBER() OVER(ORDER BY onlineid ASC) AS Rown,'W'+ cast((DATEPART(week, OrderDate) - DATEPART(week, DATEADD(day, 1, EOMONTH(OrderDate, -1)))) + 1 as nvarchar) as week " +
  " , DATENAME(dw,OrderDate) 'DayName',FORMAT(OrderDate, 'MMM') AS 'MonthName',isnull(a.Cstatus,'N/A') as Cstatus,a.*,b.PaymentType,c.PayMode,d.city,d.brancharea from tblOnlineOrderNumber as a inner join tblsalestype as b on b.salestypeid=a.onlinetype " +
  " inner join tblSalesPaymode as c on c.Value=a.paymentmode  inner join tblbranch as d on d.branchid=a.branchid where a.OnlineType='" + salestype + "' and convert(date,a.orderdate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                            " and convert(date,a.orderdate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'";
            }
            else if (sBranch != "All" && salestype == "All")
            {

                //sqr = "select a.branchcode,a.reason,a.entryby,a.entrydate,a.kotno,a.kotdate,a.Hkotno,a.Hkotdate,a.Requesttype,isnull(a.Cstatus,'N/A') as Cstatus,a.Cdate,a.Cnotes,a.itemnarration,b.paymenttype,a.Hstatus,a.Status,a.onlinenumber " +
                //            " from tblOnlineOrderNumber as a inner join tblsalestype as b on b.salestypeid=a.onlinetype  where Branchcode='" + sBranch + "' and convert(date,a.EntryDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                //            " and convert(date,a.EntryDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'";

                sqr = "SELECT ROW_NUMBER() OVER(ORDER BY onlineid ASC) AS Rown,'W'+ cast((DATEPART(week, OrderDate) - DATEPART(week, DATEADD(day, 1, EOMONTH(OrderDate, -1)))) + 1 as nvarchar) as week " +
  " , DATENAME(dw,OrderDate) 'DayName',FORMAT(OrderDate, 'MMM') AS 'MonthName',isnull(a.Cstatus,'N/A') as Cstatus,a.*,b.PaymentType,c.PayMode,d.city,d.brancharea from tblOnlineOrderNumber as a inner join tblsalestype as b on b.salestypeid=a.onlinetype " +
  " inner join tblSalesPaymode as c on c.Value=a.paymentmode  inner join tblbranch as d on d.branchid=a.branchid where a.Branchcode='" + sBranch + "' and convert(date,a.orderdate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                            " and convert(date,a.orderdate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'";
            }
            else if (sBranch != "All" && salestype != "All")
            {

                //sqr = "select a.branchcode,a.reason,a.entryby,a.entrydate,a.kotno,a.kotdate,a.Hkotno,a.Hkotdate,a.Requesttype,isnull(a.Cstatus,'N/A') as Cstatus,a.Cdate,a.Cnotes,a.itemnarration,b.paymenttype,a.Hstatus,a.Status,a.onlinenumber " +
                //            " from tblOnlineOrderNumber as a inner join tblsalestype as b on b.salestypeid=a.onlinetype  where OnlineType='" + salestype + "' and Branchcode='" + sBranch + "' and convert(date,a.EntryDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                //            " and convert(date,a.EntryDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'";

                sqr = "SELECT ROW_NUMBER() OVER(ORDER BY onlineid ASC) AS Rown,'W'+ cast((DATEPART(week, OrderDate) - DATEPART(week, DATEADD(day, 1, EOMONTH(OrderDate, -1)))) + 1 as nvarchar) as week " +
  " , DATENAME(dw,OrderDate) 'DayName',FORMAT(OrderDate, 'MMM') AS 'MonthName',isnull(a.Cstatus,'N/A') as Cstatus,a.*,b.PaymentType,c.PayMode,d.city,d.brancharea from tblOnlineOrderNumber as a inner join tblsalestype as b on b.salestypeid=a.onlinetype " +
  " inner join tblSalesPaymode as c on c.Value=a.paymentmode  inner join tblbranch as d on d.branchid=a.branchid where a.OnlineType='" + salestype + "' and  a.Branchcode='" + sBranch + "' and convert(date,a.orderdate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                            " and convert(date,a.orderdate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "'";




            }




            ds = dbObj.InlineExecuteDataSet(sqr);

            return ds;
        }

        #endregion

        #region EMAIL STATUS REPORT

        public int EmailStatus(string sbranch, string ScreenName, string Frommail, string Tomail, string Msg, string MailStatus)
        {
            int i = 0;
            string sqry = string.Empty;

            sqry = "insert into tblemail_" + sbranch + "(ScreenName,FromEmail,ToEmail,Msg,MailStatus) values('" + ScreenName + "','" + Frommail + "','" + Tomail + "','" + Msg + "','" + MailStatus + "')";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;

        }

        public DataSet GetBranchEmail(string branchcode, string Producttype)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (Producttype == "All")
            {
                sqry = "select isnull(Pemail,'Nil')+','+isnull(iemail,'Nil') as email from tblbranch where branchcode='" + branchcode + "'";
            }
            else if (Producttype == "P")
            {
                sqry = "select isnull(Pemail,'Nil') as email from tblbranch where branchcode='" + branchcode + "'";
            }
            else if (Producttype == "I")
            {
                sqry = "select isnull(iemail,'Nil') as email from tblbranch where branchcode='" + branchcode + "'";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #endregion

        #region
        public int syncinsertbranch(int BranchId, string BranchName, string ContactName, string Country, string State, string City, string Address, string MobileNo, string LandLine, string Email, string Currency, string LOGO, string BranchCode, string BranchArea, string GSTIN, string IsActive, string BranchType, string Pincode, string BranchOwnType, string FranchiseeName, string OnlineSalesActive, string Pemail, string Iemail, string Oemail, string mtype, string Printtype, string OnlineCakeSync, string dipatchdirectly, string Fssaino, string onlinepos, string PrintOption, string StockOption, string Imagepath, string Username, string Password, string BillCode, string BillGenerateSetting, string Billtaxsplitupshown, string BillPrintLogo, string BigVersion, string TaxSetting, string Ratesetting, string Qtysetting, string possalessetting, string RoundoffSetting)
        {
            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblbranch] ON " +
                //" Insert into tblcategory Categoryid='" + Categoryid + "',Category='" + Category + "',CategoryCode='" + CategoryCode + "',IsActive='" + IsActive + "',IsLiveKitchen='" + IsLiveKitchen + "',ProductionType='" + ProductionType + "',Request='" + Request + "',poduction='" + poduction + "',PrintCategory='" + PrintCategory + "',ManualGrn='" + ManualGrn + "' where catid='" + catid + "'";
                " INSERT INTO [dbo].[tblBranch]([BranchId],[BranchName],[ContactName],[Country],[State],[City],[Address],[MobileNo],[LandLine],[Email], " +
            " [Currency],[LOGO],[BranchCode],[BranchArea],[GSTIN],[IsActive],[BranchType],[Pincode],[BranchOwnType],[FranchiseeName],[OnlineSalesActive],[Pemail],[Iemail],[Oemail],[Mtype],[Printtype],[OnlineCakeSync],[dipatchdirectly],[Fssaino],[onlinepos],[PrintOption],[StockOption],[Imagepath],[Username],[Password],[BillCode],[BillGenerateSetting],[Billtaxsplitupshown],[BillPrintLogo],[BigVersion],[TaxSetting],[Ratesetting],[Qtysetting],[possalessetting],[RoundoffSetting]) " +
            " VALUES (" + BranchId + ",'" + BranchName + "','" + ContactName + "','" + Country + "','" + State + "','" + City + "','" + Address + "','" + MobileNo + "','" + LandLine + "','" + Email + "', " +
            " '" + Currency + "','" + LOGO + "','" + BranchCode + "','" + BranchArea + "','" + GSTIN + "','" + IsActive + "','" + BranchType + "','" + Pincode + "','" + BranchOwnType + "','" + FranchiseeName + "','" + OnlineSalesActive + "','" + Pemail + "','" + Iemail + "','" + Oemail + "','" + mtype + "','" + Printtype + "','" + OnlineCakeSync + "','" + dipatchdirectly + "','" + Fssaino + "','" + onlinepos + "','" + PrintOption + "','" + StockOption + "','" + Imagepath + "','" + Username + "','" + Password + "','" + BillCode + "','" + BillGenerateSetting + "','" + Billtaxsplitupshown + "','" + BillPrintLogo + "','" + BigVersion + "','" + TaxSetting + "','" + Ratesetting + "','" + Qtysetting + "','" + possalessetting + "','" + RoundoffSetting + "') " +
            " SET IDENTITY_INSERT [dbo].[tblbranch] OFF ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }


        public int syncinsertbranchsetting(int Settingid, string BranchNo, string BranchId, string BranchCode, string ProductionId, string Productioncode, string IsActive, string Narration, string IcingId, string IcingCode)
        {
            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblbranchsetting] ON " +
                //" Insert into tblcategory Categoryid='" + Categoryid + "',Category='" + Category + "',CategoryCode='" + CategoryCode + "',IsActive='" + IsActive + "',IsLiveKitchen='" + IsLiveKitchen + "',ProductionType='" + ProductionType + "',Request='" + Request + "',poduction='" + poduction + "',PrintCategory='" + PrintCategory + "',ManualGrn='" + ManualGrn + "' where catid='" + catid + "'";
                " INSERT INTO [dbo].[tblbranchsetting] ([Settingid],[BranchNo],[BranchId],[BranchCode],[ProductionId],[Productioncode],[IsActive],[Narration],[IcingId],[IcingCode]) " +
            " VALUES (" + Settingid + ",'" + BranchNo + "','" + BranchId + "','" + BranchCode + "','" + ProductionId + "','" + Productioncode + "','" + IsActive + "','" + Narration + "','" + IcingId + "','" + IcingCode + "') " +
            " SET IDENTITY_INSERT [dbo].[tblbranchsetting] OFF ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public int syncinsertinterbranchsetting(int Interid, string Branchid, string IsActive, string BranchName, string BranchCode)
        {
            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblinterbranchsetting] ON " +
                //" Insert into tblcategory Categoryid='" + Categoryid + "',Category='" + Category + "',CategoryCode='" + CategoryCode + "',IsActive='" + IsActive + "',IsLiveKitchen='" + IsLiveKitchen + "',ProductionType='" + ProductionType + "',Request='" + Request + "',poduction='" + poduction + "',PrintCategory='" + PrintCategory + "',ManualGrn='" + ManualGrn + "' where catid='" + catid + "'";
                " INSERT INTO [dbo].[tblinterbranchsetting] ([Interid],[Branchid],[IsActive],[BranchName],[BranchCode]) " +
            " VALUES (" + Interid + ",'" + Branchid + "','" + IsActive + "','" + BranchName + "','" + BranchCode + "') " +
            " SET IDENTITY_INSERT [dbo].[tblinterbranchsetting] OFF ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }


        public int syncinsertTransinterbranchsetting(int Transid, string InterBranchid, string Interid, string BranchName, string branchcode)
        {
            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tbltransinterbranchsetting] ON " +
                //" Insert into tblcategory Categoryid='" + Categoryid + "',Category='" + Category + "',CategoryCode='" + CategoryCode + "',IsActive='" + IsActive + "',IsLiveKitchen='" + IsLiveKitchen + "',ProductionType='" + ProductionType + "',Request='" + Request + "',poduction='" + poduction + "',PrintCategory='" + PrintCategory + "',ManualGrn='" + ManualGrn + "' where catid='" + catid + "'";
                " INSERT INTO [dbo].[tbltransinterbranchsetting] ([Transid],[InterBranchid],[Interid],[BranchName],[branchcode]) " +
            " VALUES (" + Transid + ",'" + InterBranchid + "','" + Interid + "','" + BranchName + "','" + branchcode + "') " +
            " SET IDENTITY_INSERT [dbo].[tbltransinterbranchsetting] OFF ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }
        #endregion

        #region BFModel
        public DataSet Get_model()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblmodelcake ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet Model_srchgrid(string Name, string columnname)
        {
            string sqry = string.Empty;
            DataSet ds = new DataSet();
            sqry = "select * from tblmodelcake where " + columnname + " ='" + Name + "'  order by modelid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);


            return ds;


        }

        public int Insert_ModelCake(string ModelCode, string ModelName, string ModelImage)
        {
            int iSuccess = 0;
            string sQry = "insert into tblmodelcake( ModelCode,ModelName,ModelImage) values ('" + ModelCode + "','" + ModelName + "','" + ModelImage + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            return iSuccess;
        }

        public DataSet Model_Serach_Update(int modelid, string value, string columnname)
        {
            DataSet ds = new DataSet();
            string sqry = "select modelid, " + columnname + " from tblmodelcake where " + columnname + " = '" + value + "' and modelid <>" + modelid + "  order by modelid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int update_Model_Master(int modelid, string ModelCode, string ModelName, string ModelImage)
        {
            int iSucess = 0;
            string sQry = "update tblmodelcake set ModelCode='" + ModelCode + "',ModelName='" + ModelName + "',ModelImage='" + ModelImage + "' where modelid='" + modelid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            return iSucess;
        }

        public DataSet EDIT_Model(int modelid)
        {

            DataSet ds = new DataSet();
            string sQry = "select * from tblmodelcake  where modelid='" + modelid + "'  ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        #endregion

        #region Employee
        public DataSet getallempandsupp(string ContactTypeID)
        {
            DataSet ds = new DataSet();
            string sQry = "select top 500  ct.ContactType,* from tblCustomer c inner join tblcontacttype ct on ct.ContactID=c.ContactTypeID where ContactTypeID in (" + ContactTypeID + ") order by CustomerName asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getallempandsuppsearch1(string CustomerName, string ContactTypeID)
        {
            DataSet ds = new DataSet();
            string sqry = "select ct.ContactType,* from tblCustomer c inner join tblcontacttype ct on ct.ContactID=c.ContactTypeID  WHERE  c.CustomerName LIKE '%" + CustomerName + "%' and ContactTypeID='" + ContactTypeID + "' order by CustomerName asc   ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getallempandsuppsearch2(string mobileno, string ContactTypeID)
        {
            DataSet ds = new DataSet();

            string sqry = "select ct.ContactType,* from tblCustomer c inner join tblcontacttype ct on ct.ContactID=c.ContactTypeID WHERE ContactTypeID='" + ContactTypeID + "' and mobileno LIKE '%" + mobileno + "%'  order by CustomerName asc  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getallempandsuppsearch3(string emailid, string ContactTypeID)
        {
            DataSet ds = new DataSet();

            string sqry = "select ct.ContactType,* from tblCustomer c inner join tblcontacttype ct on ct.ContactID=c.ContactTypeID  WHERE ContactTypeID='" + ContactTypeID + "' and  email LIKE '%" + emailid + "%' order by CustomerName asc   ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion

        #region State,City
        public DataSet Getstate()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblstate";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet Getcity(string id)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblcity where state='" + id + "'";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet ChecityDuplicate(string city, int state)
        {
            DataSet ds = new DataSet();
            string cmd = " select * from tblcity where city='" + city + "' and state='" + state + "' ";
            ds = dbObj.InlineExecuteDataSet(cmd);
            return ds;
        }

        public int insertcity(string city, int state)
        {
            int iSucess = 0;
            string sQry = "insert into tblcity(city,state)values('" + city + "'," + state + ")";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            return iSucess;
        }

        public DataSet selecityid()
        {
            DataSet ds = new DataSet();
            string cmd = " select ISNULL(MAX(cityid),1) as cityid from tblcity";
            ds = dbObj.InlineExecuteDataSet(cmd);
            return ds;
        }

        #endregion

        #region Cake Summary PRocess
        public DataSet getstatuscakes(string sbranchcode, string status)
        {
            DataSet dgetorder = new DataSet();
            DataSet dmerge = new DataSet();

            DataSet ds = new DataSet();
            string branch = string.Empty;
            if (sbranchcode == "All")
            {
                string sqry = "Select * from tblbranch where branchtype='0'";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        branch = ds.Tables[0].Rows[i]["branchname"].ToString();
                        string tablename = "tblordersummary_" + ds.Tables[0].Rows[i]["branchname"].ToString();

                        string gettablename = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";
                        DataSet dc = dbObj.InlineExecuteDataSet(gettablename);

                        if (dc.Tables[0].Rows.Count > 0)
                        {
                            //string ordersummary = "Select * from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where convert(date,Deliverydate) = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'";
                            string ordersummary = "Select * from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too " +
                                " on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where  DeliverStatus='" + status + "' ";
                            dgetorder = dbObj.InlineExecuteDataSet(ordersummary);
                            dmerge.Merge(dgetorder);
                        }
                    }

                }


            }
            else
            {
                string sqry = "Select * from tblbranch where branchtype='0' and branchname='" + sbranchcode + "'";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        branch = ds.Tables[0].Rows[i]["branchname"].ToString();
                        string tablename = "tblordersummary_" + ds.Tables[0].Rows[i]["branchname"].ToString();

                        string gettablename = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";
                        DataSet dc = dbObj.InlineExecuteDataSet(gettablename);

                        if (dc.Tables[0].Rows.Count > 0)
                        {
                            //  string ordersummary = "Select * from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where convert(date,Deliverydate) = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'";
                            string ordersummary = "Select * from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too " +
                                " on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where  DeliverStatus='" + status + "'";
                            dgetorder = dbObj.InlineExecuteDataSet(ordersummary);
                            dmerge.Merge(dgetorder);
                        }
                    }

                }
            }
            return dmerge;

        }

        public DataSet getbranchordersummary_Status(string sbranchcode, string FromDate, string statustext, string stablename)
        {
            DataSet dgetorder = new DataSet();
            DataSet dmerge = new DataSet();

            DataSet ds = new DataSet();
            string branch = string.Empty;
            if (sbranchcode == "All")
            {
                string sqry = "Select * from tblbranch where branchtype='0'";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        branch = ds.Tables[0].Rows[i]["branchcode"].ToString();
                        string tablename = "tblordersummary_" + ds.Tables[0].Rows[i]["branchcode"].ToString();

                        string gettablename = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";
                        DataSet dc = dbObj.InlineExecuteDataSet(gettablename);

                        if (dc.Tables[0].Rows.Count > 0)
                        {
                            //string ordersummary = "Select * from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where convert(date,Deliverydate) = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'";
                            string ordersummary = "Select o.*,too.*,cu.*,isnull(customername,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too " +
                                " on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid left join tblCustomer as c on c.IDCust=o.employeeid where o.Pbranch='" + stablename + "' and  DeliverStatus='" + statustext + "'";
                            dgetorder = dbObj.InlineExecuteDataSet(ordersummary);
                            dmerge.Merge(dgetorder);
                        }
                    }

                }


            }
            else
            {
                string sqry = "Select * from tblbranch where branchtype='0' and branchname='" + sbranchcode + "'";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        branch = ds.Tables[0].Rows[i]["branchcode"].ToString();
                        string tablename = "tblordersummary_" + ds.Tables[0].Rows[i]["branchcode"].ToString();

                        string gettablename = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";
                        DataSet dc = dbObj.InlineExecuteDataSet(gettablename);

                        if (dc.Tables[0].Rows.Count > 0)
                        {
                            //  string ordersummary = "Select * from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where convert(date,Deliverydate) = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'";
                            string ordersummary = "Select o.*,too.*,cu.*,isnull(customername,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too " +
                                " on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid left join tblCustomer as c on c.IDCust=o.employeeid where o.Pbranch='" + stablename + "' and DeliverStatus='" + statustext + "'";
                            dgetorder = dbObj.InlineExecuteDataSet(ordersummary);
                            dmerge.Merge(dgetorder);
                        }
                    }

                }
            }
            return dmerge;
        }

        public int InsertStatus(string billno, string brancode, string Rowvalue, string rowtext, string lblUser)
        {
            int i = 0;

            string sqry = "Update tblordersummary_" + brancode + " set Deliverstatus='" + rowtext + "',Deliveryid='" + Rowvalue + "'  where billno='" + billno + "' ";
            i = dbObj.InlineExecuteNonQuery(sqry);

            string ordestatus = "insert into tblOrderStatusHistory(Statusid,Statusname,Narration,BranchCode,OrderNo,Bookno,Entryby)values('" + Rowvalue + "','" + rowtext + "','" + rowtext + "','" + brancode + "','" + billno + "','" + billno + "','" + lblUser + "')";
            i = dbObj.InlineExecuteNonQuery(ordestatus);


            return i;


        }

        public int InsertStatus_transit(string billno, string brancode, string Rowvalue, string rowtext)
        {
            int i = 0;

            string sqry = "Update tblordersummary_" + brancode + " set TransitStatus='Y',Deliverystatus='" + rowtext + "',DeliveryStatusid='" + Rowvalue + "' where billno='" + billno + "' ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;


        }


        public int IUpdateEmployee(string Billno, string branchcode, string Empid)
        {
            int i = 0;

            string sqry = "Update tblordersummary_" + branchcode + " set Employeeid='" + Empid + "' where billno='" + Billno + "' ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        #endregion

        #region INTER PROD STOCK TRANSFER
        public DataSet gridinterprodsetting()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblinterprodSetting where IsActive='Yes'  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getupdateinterprodsettingforid(string iCat)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblinterprodSetting as ibs inner join tbltransinterprodsetting as tibs on tibs.interprodid=ibs.interprodid where ibs.interprodid ='" + iCat + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet gettoProd(string frombranchid)
        {
            DataSet ds = new DataSet();
            string sqry = "select tibs.* from tblinterprodSetting as ibs inner join tbltransinterprodsetting as tibs on tibs.interprodid=ibs.interprodid where ibs.prodid ='" + frombranchid + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int deleteinterProdsetting(string branchsettingno)
        {
            int iSucess = 0;
            string sQry = "update  tblinterprodSetting set  IsActive='No'  where interprodid='" + branchsettingno + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public DataSet duplicateprodintersettingcheck(string BranchId)
        {
            DataSet ds = new DataSet();
            string sqry = "select Prodid from tblinterprodSetting where Prodid = '" + BranchId + "' and IsActive='Yes' order by Prodid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int InsertinterprodSetting(string branchid, string branchname)
        {
            int iSuccess = 0;
            string storecode = string.Empty;
            string prodcode = string.Empty;

            {
                // For Branch code
                string getbranchcode = "Select * from tblbranch where branchid='" + branchid + "'";
                DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
                if (getstorecode.Tables[0].Rows.Count > 0)
                {
                    storecode = getstorecode.Tables[0].Rows[0]["Branchcode"].ToString();

                }
                string sQry = "insert into tblinterprodSetting( Prodid,BranchName,BranchCode,IsActive) " +
                    " values ('" + branchid + "','" + branchname + "','" + storecode + "','Yes')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;

        }

        public int Inserttransprodsetting(string interbranchid, string branchname, string interid)
        {
            int iSuccess = 0;
            string storecode = string.Empty;
            string rawid = string.Empty;
            if (interid == "0")
            {

                string sqry = "select max(Interprodid) as Interid from tblinterprodSetting ";
                DataSet ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    rawid = ds.Tables[0].Rows[0]["Interid"].ToString();
                }
            }
            else
            {
                rawid = interid;
            }
            string getbranchcode = "Select * from tblbranch where branchid='" + interbranchid + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                storecode = getstorecode.Tables[0].Rows[0]["Branchcode"].ToString();

            }
            string sQry = "insert into tbltransinterprodsetting( Interprodid,InterBranchid,BranchName,branchcode) " +
                " values ('" + rawid + "','" + interbranchid + "','" + branchname + "','" + storecode + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            return iSuccess;

        }

        public int deleteinterprod(string interid)
        {
            int iSucess = 0;
            string sQry = "delete from tbltransinterprodsetting   where Interprodid='" + interid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public DataSet checkinterProdrequestallowornot(string brnchcode)
        {
            DataSet ds = new DataSet();
            int qty = 0;
            // string sqry = "select * from tblCategory where isdelete=0  ";
            string sqry = "select * from tblinterprodSetting Where BranchCode='" + brnchcode + "' and  IsActive='Yes'";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion

        #region Inter Production Request

        public DataSet interReqGridprod(string ibranch, string sCode)
        {
            DataSet ds = new DataSet();

            //string sqry = "select   b.entrytime,b.RequestBy as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime,b.prodbranch " +
            //              " from tblworkers a,tblPurchaseRequest_" + sCode + " b where a.EmpID=b.VendorID and b.BranchID='" + ibranch + "' and b.IsAccepted=0   " +
            //              " order by b.entrytime desc  ";

            string sqry = "select   b.entrytime,b.RequestBy as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime,b.FromBranchCode,b.ToBranchCode " +
                          " from tblworkers a,tblinterbranchrequest_" + sCode + " b where a.EmpID=b.VendorID and b.BranchID='" + ibranch + "' and b.IsAccepted=0   " +
                          "  and convert(date,b.RequestDate) between dateadd(day,datediff(day,1,GETDATE()),0) and dateadd(day,datediff(day,0,GETDATE()),0)  " +
                          " order by b.entrytime desc  ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public int insert_interstockrequest_prod(int VendorID, string RequestNO, DateTime RequestDate, string Status, int isCancel, string sBranch, int isaccept, int Branch, string Sname, string sCodeBnch, string sRequestentrytime, DateTime entrydatetime, string frombranchid, string tobranchid)
        {
            int iSucess = 0;
            string frombranchcode = "";
            string Tobranchcode = "";

            // For Branch code
            string getbranchcode = "Select * from tblbranch where branchid='" + frombranchid + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                frombranchcode = getstorecode.Tables[0].Rows[0]["Branchcode"].ToString();

            }

            // TO BRANCH ID
            // For Branch code
            string gettobranchcode = "Select * from tblbranch where branchid='" + tobranchid + "'";
            DataSet gettostorecode = dbObj.InlineExecuteDataSet(gettobranchcode);
            if (gettostorecode.Tables[0].Rows.Count > 0)
            {
                Tobranchcode = gettostorecode.Tables[0].Rows[0]["Branchcode"].ToString();

            }


            string sQry = "insert into tblinterbranchrequest_" + sCodeBnch + " (VendorID,RequestNO,RequestDate,Status,isCancel,Branch,IsAccepted,BranchID,RequestBy,RequestEntryTime,EntryTime,FromBranch,FromBranchCode,ToBranchid,ToBranchCode) " +
                " values('" + VendorID + "','" + RequestNO + "','" + Convert.ToDateTime(RequestDate).ToString("yyyy/MM/dd") + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "','" + sRequestentrytime + "','" + Convert.ToDateTime(entrydatetime).ToString("yyyy/MM/dd hh:mm") + "','" + frombranchid + "','" + frombranchcode + "','" + tobranchid + "','" + Tobranchcode + "')";
            // Local Server
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            // Main Server

            string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblInterProdRequest ";
            //////  DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string prodrequestno = ds.Tables[0].Rows[0]["RequestNo"].ToString();

                string sQryprod = "insert into tblInterProdRequest(VendorID,RequestNO,RequestDate,Status,isCancel,Branch,IsAccepted,BranchID,RequestBy,RequestEntryTime,BranchReqNo,FromBranch,FromBranchCode,ToBranchid,ToBranchCode) values('" + VendorID + "','" + prodrequestno + "','" + Convert.ToDateTime(RequestDate).ToString("yyyy/MM/dd") + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "','" + sRequestentrytime + "','" + RequestNO + "','" + frombranchid + "','" + frombranchcode + "','" + tobranchid + "','" + Tobranchcode + "')";

                iSucess = dbObj.InlineExecuteNonQuery(sQryprod);

                iSucess = Convert.ToInt32(prodrequestno);
            }

            return iSucess;
        }

        public int insertinterTransReqMain_prod(string RequestID, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal Rec, int BranchID, int isTransfer, string sCodeBnch, DateTime date, string SCodeProd, int MainRequestID)
        {
            int iSucess = 0;
            string sQry = "insert into tblTransinterbranchrequest_" + sCodeBnch + " (RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate) values ('" + RequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            //MainServer
            // string sqry = "select MAX(requestno) as RequestNo from tblinterbranchrequest";
            ////// DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            //////// DataSet ds = dbObj.InlineExecuteDataSetMain(sqry);
            ////// if (ds.Tables[0].Rows.Count > 0)
            {
                // string prodrequestno = ds.Tables[0].Rows[0]["RequestNo"].ToString();
                string sQryprod = "insert into tblTransInterProdRequest(RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate) values ('" + MainRequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "')";
                iSucess = dbObj.InlineExecuteNonQuery(sQryprod);
            }

            return iSucess;
        }

        #endregion

        #region Accept Request By Another Production

        public DataSet getrequestprodfromanotherprod(string branchcode, DateTime datee)
        {
            DataSet ds = new DataSet();


            string sqry = " select distinct br.RequestNO,br.tobranchcode,br.RequestDate,br.RequestEntryTime,br.Status,br.FromBranchCode,br.branchreqno,br.RequestBy " +
                " from tblinterprodrequest as br inner join tbltransinterprodrequest as tbr on tbr.requestid=br.requestno where ToBranchCode='" + branchcode + "' " +
                "  and convert(date,br.RequestDate) between dateadd(day,datediff(day,1,GETDATE()),0) and dateadd(day,datediff(day,0,GETDATE()),0)   " +
                         " and  (isnull(tbr.Order_Qty,0)- ISNULL(tbr.Received_Qty,0)) >0 order by br.requestno desc";


            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet getrequestprodfromanotherproddate(string branchcode, DateTime datee)
        {
            DataSet ds = new DataSet();


            string sqry = " select distinct br.RequestNO,br.tobranchcode,br.RequestDate,br.RequestEntryTime,br.Status,br.FromBranchCode,br.branchreqno,br.RequestBy from " +
                " tblinterprodrequest as br inner join tbltransinterprodrequest as tbr on tbr.requestid=br.requestno where ToBranchCode='" + branchcode + "' " +
                "  and convert(date,br.RequestDate)='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'    " +
                         " and  (isnull(tbr.Order_Qty,0)- ISNULL(tbr.Received_Qty,0)) >0 order by br.requestno desc";


            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet getdcnoforinterProdrequest(string iBranchID, string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(convert(int,DC_NO))+1,1) as DC_No from tblinterprodgoodtransfer";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet interProdReqGridDetails(int ReqNo, string StoreBranch, string Table, string BranchReqNo)
        {
            DataSet ds = new DataSet();
            string sQty = "select (isnull(Order_Qty,0)-isnull(Received_Qty,0)) as Order_Qty,* from tblinterprodrequest p " +
                " inner join tbltransinterprodrequest tp on tp.RequestID=p.RequestNO inner join tblcategory c on c.Categoryid=tp.CategoryId " +
                " inner join tblCategoryUser cu on cu.CategoryUserID=tp.DescriptionId  inner join tblUOM u on u.UOMID=cu.unit " +
                "  where RequestNo='" + ReqNo + "' and BranchReqNo='" + BranchReqNo + "' and ToBranchCode='" + StoreBranch + "' and (isnull(Order_Qty,0)-isnull(Received_Qty,0)) >0";
            ds = dbObj.InlineExecuteDataSet(sQty);
            return ds;
        }

        public DataSet getinterProdreqstock(int iSubcategory, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select *,Prod_Qty as Available_QTY from tblproductionqty_" + stable + " where DescriptionId=" + iSubcategory + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet interrequestdetailsforitem_prod(string iD, string sCode, string branch, string reqno, string itemid, string frombranch)
        {
            DataSet ds = new DataSet();

            // string sqry = "select * from tblPurchaseRequest_" + sCode + " a,tblTransPurchaseRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<b.Order_Qty";
            string sqry = "select * from tblinterProdrequest a,tbltransinterprodrequest b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid " +
            " and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and  a.frombranchcode='" + frombranch + "' and a.branchReqNo='" + iD + "' and b.DescriptionId='" + itemid + "' and a.requestno='" + reqno + "' and a.tobranchcode='" + sCode + "' ";
            //  " and b.Received_Qty<b.Order_Qty";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public int InsertinterGoodsTrasnfer_prod(string ToBranch, string DC_NO, string DC_Date, string RequestNO, string Status, int isCancel, string ProductionName, int trans, int Received, string sent, string Table, string branchreqno, string FromCode)
        {
            int isave = 0;

            string frombranchid = "";
            string Tobranchid = "";

            // For Branch code
            string getbranchcode = "Select * from tblbranch where Branchcode='" + ToBranch + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                Tobranchid = getstorecode.Tables[0].Rows[0]["branchid"].ToString();

            }

            // TO BRANCH ID
            // For Branch code
            string gettobranchcode = "Select * from tblbranch where Branchcode='" + FromCode + "'";
            DataSet gettostorecode = dbObj.InlineExecuteDataSet(gettobranchcode);
            if (gettostorecode.Tables[0].Rows.Count > 0)
            {
                frombranchid = gettostorecode.Tables[0].Rows[0]["branchid"].ToString();

            }


            string sQry = "insert into tblInterProdGoodTransfer(Branch,DC_NO,DC_Date,RequestNO,Status,isCancel,ProductionName,isTransfer,FromBranchID,IsReceived,SentBY,BranchReqNo,FromBranchCode,ToBranchId,ToBranchCode) " +
                " values('" + ToBranch + "','" + DC_NO + "','" + DC_Date + "','" + RequestNO + "','" + Status + "'," + isCancel + ",'" + ProductionName + "'," + trans + ",'" + frombranchid + "', " +
                " " + Received + ",'" + sent + "','" + branchreqno + "','" + FromCode + "','" + Tobranchid + "','" + ToBranch + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);

            return isave;
        }

        public int InsertinterTransGoodTrasnfer_prod(string DC_NO, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal OrderQty, string expirydate, string iBranchID, int isStock, string Req, string Table, string Breqno)
        {
            int isave = 0;
            string sQry = "insert into tblTransInterProdGoodsTransfer(DC_No,CategoryId,DescriptionId,Received_Qty,Units,Order_Qty,ExpiryDate,BranchCode,isStocked,RequestNo,BranchReqNo) values('" + DC_NO + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + OrderQty + "','" + Convert.ToDateTime(expirydate).ToString("yyyy-MM-dd") + "','" + iBranchID + "'," + isStock + ",'" + Req + "','" + Breqno + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);


            return isave;
        }


        public DataSet CheckSameQtyininterRequest_prod(string sCode, int ReqNo, int ItemId)
        {
            DataSet ds = new DataSet();
            string sqry = " select * from tbltransinterprodrequest where RequestID=" + ReqNo + " and Order_Qty>0 and DescriptionId=" + ItemId + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public int UpdateintertransferQty_prod(int ID, int idescID, decimal dRecQty, string sCode)
        {
            int isave = 0;
            string sQry = "update tbltransinterprodrequest set Received_Qty=Received_Qty+'" + dRecQty + "' where  RequestID=" + ID + " and DescriptionId=" + idescID + " ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }


        public int Updateintertransfer_prod(int DescpID, double iQty, string Table, string dc_NO, string categoryid, string userid, string user, string tobrnach)
        {
            int isave = 0;
            string sQry = "update tblproductionqty_" + Table + " set Prod_Qty=Prod_Qty-'" + iQty + "' where DescriptionId=" + DescpID + "  ";
            isave = dbObj.InlineExecuteNonQuery(sQry);

            //string AuditQty = "Insert into TblAuditQty_" + Table + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('Inter Stock TRansfer To Branch','" + iQty + "','" + dc_NO + "','-','" + DescpID + "','0')";
            //int iupdate = dbObj.InlineExecuteNonQuery(AuditQty);

            //string descr = "Against Inter Branch Trasnfer" + '-' + tobrnach;
            //DateTime now = DateTime.Now;

            //string GRN = "insert into tblGRNmp (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,Name,DayGRNmp,GRNTimemp,Signa,GRNTYPE) values (" + categoryid + "," + DescpID + "," + iQty + ",getdate()," + userid + ",'0','" + user + "','0','" + now.ToString("HH:mm:ss") + "','-','" + descr + "')";

            //isave = dbObj.InlineExecuteNonQuery(GRN);

            return isave;
        }

        #endregion

        #region INTER GOODS RECEIVED
        public DataSet GetinterDCNONew_prod(string sCode)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct s.DC_NO,s.RequestNO,s.dc_date,s.tobranchcode,s.Status  from tblInterprodGoodTransfer s " +
                " inner join  tblTransInterprodGoodsTransfer ts on s.DC_NO=ts.DC_NO where  s.FromBranchCode='" + sCode + "' and isStocked=0";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet interGoodReceivedNew_prod(string sDCNO, string BranchCode)
        {
            DataSet ds = new DataSet();
            string sqry = "  select Distinct DC_NO,RequestNO,BranchReqNo,Dc_Date,Frombranchcode,Tobranchcode from tblInterprodGoodTransfer " +
                " where DC_No='" + sDCNO + "'    and FromBranchCode='" + BranchCode + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }



        public DataSet ineterGoodReceivedListNew_prod(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            string sqry = "select *,case isstocked when 1 then 'Received' else 'Pending' end as stt   from tblTransInterprodGoodsTransfer b,tblcategory c, " +
                " tblCategoryUser d  where  b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and b.BranchCode='" + BranchID + "' and b.DC_No=" + sDCNO + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet InterGoodReceived_prod(string sDCNO, string BranchID, string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "select  d.printitem,c.Categoryid,d.CategoryUserID,u.UOM,c.Category,d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty " +
                " from tblInterprodGoodTransfer a,tblTransInterprodGoodsTransfer b,tblcategory c,tblCategoryUser d,tbluom u  " +
                " where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and u.UOMID=d.Unit and a.FromBranchCode='" + BranchID + "' " +
                " and a.DC_No='" + sDCNO + "' and b.isStocked='0' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int InterInserRecQty_prod(string stable, string ProRequestNO, string UserID, string Branchreqno, string Dc_NO, string Remarks)
        {
            int iSuccess = 0;
            string sQry = "insert into tblInterprodGoodReceived_" + stable + "(RequestNO, BranchCode,UserID,BranchREqNo,DC_NO,Remarks) values ('" + ProRequestNO + "','" + stable + "','" + UserID + "','" + Branchreqno + "','" + Dc_NO + "','" + Remarks + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string sQry1 = " select max(RecID) as RecID from tblInterprodGoodReceived_" + stable + " ";
            ds = dbObj.InlineExecuteDataSet(sQry1);

            iSuccess = Convert.ToInt32(ds.Tables[0].Rows[0]["RecID"].ToString());

            return iSuccess;
        }


        public DataSet GetPurchaseStok_prod(int iSubcategory, int ibranch, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblproductionqty_" + stable + " where DescriptionId=" + iSubcategory + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet InterUpdatePurchaseStokNew_prod(double iAvailable, int iSubcategory, int iBranch, string sDate, string stable, int stockid, string recno)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblproductionqty_" + stable + " set Prod_Qty=Prod_Qty+" + iAvailable + " where Id=" + stockid + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            //string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('SCR-Inter Goods Received Note','" + iAvailable + "','" + recno + "','+','" + iSubcategory + "','" + stockid + "')";
            //int iupdate = dbObj.InlineExecuteNonQuery(AuditQty);

            return ds;

        }

        public DataSet InterUpdatereqPurchaseStock_prod(double Received_Qty, string stable, string ReqNo, int DescriptionId)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblTransinterbranchrequest_" + stable + " set Received_Qty=isnull(Received_Qty,0)+" + Received_Qty + " where DescriptionId=" + DescriptionId + " and RequestID='" + ReqNo + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public int InterInserDirectGrn_prod(string stable, int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, double Dealer, double Press, double dPurchaseRate, DateTime Expirydate, int ToolID, string refid)
        {
            int iSuccess = 0;
            //string sQry = "insert into tblstock_" + stable + "(UserID, CategoryID,SubCategoryID,Quantity,Available_Qty, MinQty,DealerUnitPrice,PressUnitPrice,PurchaseRate,Expirydate,ToolID) values ('" + UserID + "','" + iCategoryID + "','" + iSubCategoryID + "','" + iQty + "'," + iAQty + ",'" + iMinQty + "','" + Dealer + "','" + Press + "','" + dPurchaseRate + "','" + Expirydate.ToString("yyyy/MM/dd") + "'," + ToolID + ")";
            //iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sQry3 = "insert into tblProductionQty_" + stable + "( DescriptionId,Prod_Qty) values (" + iSubCategoryID + "," + iAQty + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry3);


            return iSuccess;
        }

        public int InterInsertransRecQty_prod(string stable, int RecID, int CategoryId, int DescriptionId, double Order_Qty, double Received_Qty, string DCNO, double dmgqty, double missqty, string userrid, string BREQNO, string TOCodee, string username)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltransinterprodGoodsReceived_" + stable + "(RecID, CategoryId,DescriptionId,Order_Qty,Received_Qty, RequestNo,BranchCode,Damage_Qty,Missing_Qty) values ('" + RecID + "','" + CategoryId + "','" + DescriptionId + "','" + Order_Qty + "'," + Received_Qty + ",'" + DCNO + "','" + stable + "'," + dmgqty + "," + missqty + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            //string sqry = "select isnull(max(DayGRN) + 1,1) as DayGRN from tblgrn where convert(date,Date)=convert(date,GETDATE())";
            //DataSet ds = dbObj.InlineExecuteDataSet(sqry);

            //string time = System.DateTime.Now.ToString("hh:mm tt");
            //string date = DateTime.Now.ToString("MM/dd/yyyy");

            //// GET BRANCH CODE FOR BRNACHTYPE
            //string fromowntype = "";


            //// For Branch code
            //string getbranchcode = "Select * from tblbranch where Branchcode='" + TOCodee + "'";
            //DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            //if (getstorecode.Tables[0].Rows.Count > 0)
            //{
            //    fromowntype = getstorecode.Tables[0].Rows[0]["BranchOwnType"].ToString();

            //}


            //string GRN = "insert into tblGrn (CategoryID,categoryuserid,GRN_Qty,Date,UserID,GRNNo,Name,DayGRN,GRNTime,Type,RequestNo,Dc_No,FromBranchCode,FromBranchOwnType) values (" + CategoryId + "," + DescriptionId + "," + Received_Qty + ",'" + date + "','" + userrid + "','0','" + username + "'," + ds.Tables[0].Rows[0]["DayGRN"] + ",'" + time + "','Against Inter Branch Request','" + BREQNO + "','" + DCNO + "','" + TOCodee + "','" + fromowntype + "')";
            //iSuccess = dbObj.InlineExecuteNonQuery(GRN);


            return iSuccess;
        }

        public int InterupdateRecQty_prod(string stable, string DC_No, int DescriptionId, double dmgqty, double missqty, string remarks)
        {
            int iSuccess = 0;

            string sQry = "update tbltransinterprodgoodstransfer set isStocked=1,Damage_Qty=" + dmgqty + ",Missing_Qty=" + missqty + " where DC_No=" + DC_No + " and DescriptionId=" + DescriptionId + " ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "update tblinterprodgoodtransfer set status='" + remarks + "' where DC_No=" + DC_No + " ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry1);


            return iSuccess;
        }


        public DataSet interrequestdetails_prod(string iD, string sCode, string branch, string reqno)
        {
            DataSet ds = new DataSet();

            // string sqry = "select * from tblPurchaseRequest_" + sCode + " a,tblTransPurchaseRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<b.Order_Qty";
            string sqry = "select * from tblinterprodrequest a,tbltransinterprodrequest b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid " +
            " and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.branchReqNo='" + iD + "' and a.requestno='" + reqno + "' and a.tobranchcode='" + sCode + "' ";
            //  " and b.Received_Qty<b.Order_Qty";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion

        #region BFVEHICLE
        public DataSet GET_vehicle()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblvehiclemaster Where IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }



        public DataSet Vehiclesrchgrid(string Name, int id)
        {
            string sqry = string.Empty;
            DataSet ds = new DataSet();
            sqry = "select * from tblvehiclemaster where VehicleNumber ='" + Name + "' and IsActive='Yes' order by VehicleID desc";

            ds = dbObj.InlineExecuteDataSet(sqry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }

        public int Insert_Vehicle(string VehicleNumber, string VehicleType, string Notes, string isactive)
        {
            int iSuccess = 0;

            //string Date = DateTime.Now.ToString("dd/MM/yyyy hh:mm tt");
            //DateTime date1 = DateTime.ParseExact(Date, "dd/MM/yyyy hh:mm tt", CultureInfo.InvariantCulture);

            string sQry = "insert into tblvehiclemaster( VehicleNumber,VehicleType,Notes,IsActive,Status) values ('" + VehicleNumber + "','" + VehicleType + "','" + Notes + "','" + isactive + "','N')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            return iSuccess;



        }

        public DataSet Vehiclesrchgridforupdate(int VehicleID, string VehicleNumber)
        {
            DataSet ds = new DataSet();
            string sqry = "select VehicleID, VehicleNumber from tblvehiclemaster where VehicleNumber = '" + VehicleNumber + "' and VehicleID <>" + VehicleID + " and IsActive='Yes'  order by VehicleID desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int updateVehicleMaster(int VehicleID, string VehicleNumber, string Vehicletype, string notes, string IsActive)
        {
            int iSucess = 0;
            string sQry = "update tblvehiclemaster set VehicleNumber='" + VehicleNumber + "',VehicleType='" + Vehicletype + "',Notes='" + notes + "',Isactive='" + IsActive + "' where VehicleID='" + VehicleID + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            return iSucess;
        }

        public DataSet editvehicle(int VehicleID)
        {

            DataSet ds = new DataSet();
            string sQry = "select * from tblvehiclemaster  where VehicleID='" + VehicleID + "' and IsActive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        public int deletevehiclenumber(string VehicleID)
        {
            int iSucess = 0;
            string sQry = "update  tblvehiclemaster set  IsActive='No'  where VehicleID='" + VehicleID + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        #endregion

        #region dispatch Entry
        public DataSet grdidispatchentryload(string stablename)
        {
            DataSet ds = new DataSet();
            string sqry = " Select a.*,b.customername as Employeename,c.VehicleNumber from tbldispatchentry_" + stablename + " as a inner join tblcustomer as b on b.ledgerid=a.employee " +
                          " inner join tblvehiclemaster as c on c.VehicleID=a.vehicleno ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet gridmaxno_dispatch(string stablename)
        {
            DataSet ds = new DataSet();
            string sqry = " Select isnull(max(dispatchno+1),1) as dispatch from tbldispatchentry_" + stablename + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getalldispatchno(string stable)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            {
                sqry = "  select dc_no +'-'+branchcode as name ,P_ID as value from tblGoodTransfer_" + stable + " where Dispatchstatus='N' order by dc_No desc ";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public int Insertdisaptchentry(string stablename, string DispatchNo, string VehicleNo, string Employee)
        {
            int iSuccess = 0;
            string storecode = string.Empty;
            string prodcode = string.Empty;

            {

                string sQry = "insert into tbldispatchentry_" + stablename + "( DispatchNo,VehicleNo,Employee) " +
                    " values ('" + DispatchNo + "','" + VehicleNo + "','" + Employee + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(sQry);

                //string vehicle = "update tblvehiclemaster set"

            }
            return iSuccess;

        }

        public int Inserttransdispatchenntry(string stablename, string GoodsTransferId, string goodstype, string goodstext, string username)
        {
            int iSuccess = 0;
            string storecode = string.Empty;
            string rawid = string.Empty;
            string dispatchentryno = string.Empty;
            string vehicleno = string.Empty;
            //  if (interid == "0")
            {

                string sqry = "select max(Dispatchid) as Dispatchid from tbldispatchentry_" + stablename + " ";
                DataSet ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {


                    rawid = ds.Tables[0].Rows[0]["Dispatchid"].ToString();

                    string getvehicleno = "select (DispatchNo) as DispatchNo,VehicleNumber from tbldispatchentry_" + stablename + " as a inner join tblvehiclemaster as b on b.vehicleid=a.vehicleno where Dispatchid='" + rawid + "'";
                    DataSet getvehicle = dbObj.InlineExecuteDataSet(getvehicleno);
                    if (getvehicle.Tables[0].Rows.Count > 0)
                    {

                        dispatchentryno = getvehicle.Tables[0].Rows[0]["DispatchNo"].ToString();
                        vehicleno = getvehicle.Tables[0].Rows[0]["VehicleNumber"].ToString();
                    }
                }
            }

            string[] titledata = goodstext.Split(new[] { " - " }, StringSplitOptions.None);
            string ordersummaryid = titledata[0].Trim();
            string branchcode = titledata[1].Trim();

            string fullno = dispatchentryno + " / " + vehicleno;

            string sQry = "insert into tbltransdispatchentry_" + stablename + "( DispatchId,GoodsTransferId,goodstype,Bcode) " +
                " values ('" + rawid + "','" + GoodsTransferId + "','" + goodstype + "','" + branchcode + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);


            string goodsreceived = "Update tblGoodTransfer_" + stablename + " set Dispatchstatus='Y',dispatchno='" + fullno + "' where P_ID='" + GoodsTransferId + "' ";
            int ii = dbObj.InlineExecuteNonQuery(goodsreceived);

            if (goodstype == "O")
            {


                string sqry = "Update tblordersummary_" + branchcode + " set Deliverstatus='Transit',Deliveryid='5'  where OrderSummaryId='" + GoodsTransferId + "' ";
                iSuccess = dbObj.InlineExecuteNonQuery(sqry);





                string ordestatus = "insert into tblOrderStatusHistory(Statusid,Statusname,Narration,BranchCode,OrderNo,Bookno,Entryby)values('5','Transit','Cake In Transit','" + branchcode + "','" + ordersummaryid + "','" + ordersummaryid + "','" + username + "')";
                iSuccess = dbObj.InlineExecuteNonQuery(ordestatus);



            }

            return iSuccess;

        }

        public DataSet GET_vehicle_load()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblvehiclemaster Where IsActive='Yes' and status='N'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getdispatchprint(string branchcode, string dcno, string goodstype)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;


            //if (storelist == "All")
            {
                sqry = "select f.dispatchno,f.dispatchdate,a.P_id, a.dc_no+' - '+brancharea as heading,a.dc_date, u.UOM,d.categoryid,c.CategoryUserID,e.branchid,brancharea,category,definition,(order_Qty) as Oqty, " +
" (received_qty) as qty from tbldispatchentry_" + branchcode + " as f  inner join tbltransdispatchentry_" + branchcode + " as g on g.dispatchid=f.dispatchid " +
" inner join tblgoodtransfer_" + branchcode + " as a on a.p_id=g.goodstransferid inner join  tbltransgoodstransfer_" + branchcode + " as b on b.dc_no=a.DC_no  " +
 " inner join tblcategoryuser as c on c.categoryuserid=b.descriptionid  inner join tblcategory as d on d.categoryid=b.categoryid  " +
 " inner join tblbranch as e on e.branchcode=a.branch inner join tblUOM u on u.UOMID=c.unit   " +
  " where f.dispatchid='" + dcno + "' and g.goodstype='" + goodstype + "'   " +
    " order by a.dc_no,branch,category asc  ";
            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getdispatchprint_order(string branchcode, string dcno, string goodstype)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            DataSet dmerge = new DataSet();

            string brnch = "select distinct bcode from tbldispatchentry_" + branchcode + " as a inner join tbltransdispatchentry_" + branchcode + " as b on b.dispatchid=a.dispatchid where a.dispatchid='" + dcno + "'";
            DataSet dbranch = dbObj.InlineExecuteDataSet(brnch);

            if (dbranch.Tables[0].Rows.Count > 0)
            {

                for (int i = 0; i < dbranch.Tables[0].Rows.Count; i++)
                {
                    string orderbranch = dbranch.Tables[0].Rows[i]["bcode"].ToString();

                    {
                        //                sqry = "select f.dispatchno,f.dispatchdate,a.P_id, a.dc_no+' - '+brancharea as heading,a.dc_date, u.UOM,d.categoryid,c.CategoryUserID,e.branchid,brancharea,category,definition,(order_Qty) as Oqty, " +
                        //" (received_qty) as qty from tbldispatchentry_" + branchcode + " as f  inner join tbltransdispatchentry_" + branchcode + " as g on g.dispatchid=f.dispatchid " +
                        //" inner join tblgoodtransfer_" + branchcode + " as a on a.p_id=g.goodstransferid inner join  tbltransgoodstransfer_" + branchcode + " as b on b.dc_no=a.DC_no  " +
                        // " inner join tblcategoryuser as c on c.categoryuserid=b.descriptionid  inner join tblcategory as d on d.categoryid=b.categoryid  " +
                        // " inner join tblbranch as e on e.branchcode=a.branch inner join tblUOM u on u.UOMID=c.unit   " +
                        //  " where f.dispatchid='" + dcno + "' and g.goodstype='" + goodstype + "'   " +
                        //    " order by a.dc_no,branch,category asc  ";
                        sqry = "select c.deliverytime,c.bookno,a.dispatchno,a.dispatchdate,c.ordersummaryid, brancharea as heading,c.orderdate,c.deliverydate, u.UOM,f.categoryid,e.CategoryUserID, " +
" g.branchid,brancharea,category,definition,(d.qty) as Oqty from tbldispatchentry_" + branchcode + " as a inner join tbltransdispatchentry_" + branchcode + " as b on b.dispatchid=a.dispatchid " +
" inner join tblordersummary_" + orderbranch + " as c on c.ordersummaryid=b.goodstransferid  inner join tbltransordersummary_" + orderbranch + " as d on d.billno=c.billno  " +
" inner join tblcategoryuser as e on e.categoryuserid = d.subcategoryid inner join tblcategory as f on f.categoryid=d.categoryid  " +
" inner join tblbranch as g on g.branchcode=b.bcode inner join tblUOM u on u.UOMID=e.unit where a.dispatchid='" + dcno + "' and b.goodstype='" + goodstype + "'   order by bcode asc";

                        ds = dbObj.InlineExecuteDataSet(sqry);
                        dmerge.Merge(ds);
                    }
                }

                //  ds = dbObj.InlineExecuteDataSet(sqry);

            }
            return dmerge;
        }

        public DataSet grdidispatchentryload(string stablename, string dcid)
        {
            DataSet ds = new DataSet();
            string sqry = " Select a.*,b.customername as Employeename,c.VehicleNumber from tbldispatchentry_" + stablename + " as a inner join tblcustomer as b on b.ledgerid=a.employee  " +
                          " inner join tblvehiclemaster as c on c.VehicleID=a.vehicleno where dispatchid='" + dcid + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        #endregion

        #region Inter Store Request

        public DataSet interReqGridstore(string ibranch, string sCode)
        {
            DataSet ds = new DataSet();

            //string sqry = "select   b.entrytime,b.RequestBy as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime,b.prodbranch " +
            //              " from tblworkers a,tblPurchaseRequest_" + sCode + " b where a.EmpID=b.VendorID and b.BranchID='" + ibranch + "' and b.IsAccepted=0   " +
            //              " order by b.entrytime desc  ";

            string sqry = "select   b.entrytime,b.RequestBy as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime,b.FromBranchCode,b.ToBranchCode " +
                          " from tblworkers a,tblinterstorerequest_" + sCode + " b where a.EmpID=b.VendorID and b.BranchID='" + ibranch + "' and b.IsAccepted=0   " +
                          "  and convert(date,b.RequestDate) between dateadd(day,datediff(day,1,GETDATE()),0) and dateadd(day,datediff(day,0,GETDATE()),0)  " +
                          " order by b.entrytime desc  ";

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet interRequestDet_store(string iD, string sCode)
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblinterstorerequest_" + sCode + " a,tblTransinterstoreRequest_" + sCode + " b,tblIngridentsCategory c,tblIngridents d " +
                " where a.RequestNo=b.Requestid and b.CategoryID=c.IngCatID and b.DescriptionID=d.IngridID  and Order_Qty!=0 and a.RequestNo='" + iD + "' " +
                " and b.Received_Qty<=b.Order_Qty";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet selectcategorymasterforproductionentry_store()
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategory  where isdelete=0 order by category asc ";
            string sQry = "select * from tblIngridentsCategory  where isActive='Yes'  order by IngreCategory asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet ReqNoInter_store(int iBranchID, string scode)
        {
            DataSet ds = new DataSet();
            // string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblPurchaseRequest_" + scode + " where BranchID=" + iBranchID + "";
            string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblinterStorerequest_" + scode + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet itemforreqest_store(int categoryid, string stable, string type)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            if (categoryid == 0)
            {

                {
                    sqry = "select  b.IngredientName as printitem,a.IngCatID as categoryid,a.IngreCategory as category,b.IngridID as categoryuserid,b.IngredientName as definition,isnull(c.Qty,0) as Available_qty, UOM,u.UOMID  " +
                        " from tblIngridentsCategory a inner join tblIngridents b on a.IngCatID=b.IngCatID left join tblRawMatlStock_" + stable + " c on " +
                        " c.IngredientID=b.IngridID  inner join tblUOM u on u.UOMID=b.Units " +
                        " where  a.IsActive='Yes' and  b.IsActive='Yes'   order by c.Qty  asc";
                }
            }
            else
            {


                {
                    sqry = "select  b.IngredientName as printitem,a.IngCatID as categoryid,a.IngreCategory as category,b.IngridID as categoryuserid,b.IngredientName as definition,isnull(c.Qty,0) as Available_qty, UOM,u.UOMID  " +
                         " from tblIngridentsCategory a inner join tblIngridents b on a.IngCatID=b.IngCatID left join tblRawMatlStock_" + stable + " c on " +
                         " c.IngredientID=b.IngridID  inner join tblUOM u on u.UOMID=b.Units " +
                         " where  a.IsActive='Yes' and  b.IsActive='Yes' and a.IngCatID ='" + categoryid + "'  order by c.Qty  asc";
                }
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int insert_interstockrequest_store(int VendorID, string RequestNO, DateTime RequestDate, string Status, int isCancel, string sBranch, int isaccept, int Branch, string Sname, string sCodeBnch, string sRequestentrytime, DateTime entrydatetime, string frombranchid, string tobranchid)
        {
            int iSucess = 0;
            string frombranchcode = "";
            string Tobranchcode = "";

            // For Branch code
            string getbranchcode = "Select * from tblbranch where branchid='" + frombranchid + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                frombranchcode = getstorecode.Tables[0].Rows[0]["Branchcode"].ToString();

            }

            // TO BRANCH ID
            // For Branch code
            string gettobranchcode = "Select * from tblbranch where branchid='" + tobranchid + "'";
            DataSet gettostorecode = dbObj.InlineExecuteDataSet(gettobranchcode);
            if (gettostorecode.Tables[0].Rows.Count > 0)
            {
                Tobranchcode = gettostorecode.Tables[0].Rows[0]["Branchcode"].ToString();

            }


            string sQry = "insert into tblinterstorerequest_" + sCodeBnch + " (VendorID,RequestNO,RequestDate,Status,isCancel,Branch,IsAccepted,BranchID,RequestBy,RequestEntryTime,EntryTime,FromBranch,FromBranchCode,ToBranchid,ToBranchCode) " +
                " values('" + VendorID + "','" + RequestNO + "','" + Convert.ToDateTime(RequestDate).ToString("yyyy/MM/dd") + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "','" + sRequestentrytime + "','" + Convert.ToDateTime(entrydatetime).ToString("yyyy/MM/dd hh:mm") + "','" + frombranchid + "','" + frombranchcode + "','" + tobranchid + "','" + Tobranchcode + "')";
            // Local Server
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            // Main Server

            string sqry = "select isnull(MAX(convert(int,requestno))+1,1) as RequestNo from tblInterStoreRequest ";
            //////  DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string prodrequestno = ds.Tables[0].Rows[0]["RequestNo"].ToString();

                string sQryprod = "insert into tblInterStoreRequest(VendorID,RequestNO,RequestDate,Status,isCancel,Branch,IsAccepted,BranchID,RequestBy,RequestEntryTime,BranchReqNo,FromBranch,FromBranchCode,ToBranchid,ToBranchCode) values('" + VendorID + "','" + prodrequestno + "','" + Convert.ToDateTime(RequestDate).ToString("yyyy/MM/dd") + "','" + Status + "','" + isCancel + "','Branch -'+'" + sBranch + "','" + isaccept + "','" + Branch + "','" + Sname + "','" + sRequestentrytime + "','" + RequestNO + "','" + frombranchid + "','" + frombranchcode + "','" + tobranchid + "','" + Tobranchcode + "')";

                iSucess = dbObj.InlineExecuteNonQuery(sQryprod);

                iSucess = Convert.ToInt32(prodrequestno);
            }

            return iSucess;
        }

        public int insertinterTransReqMain_Store(string RequestID, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal Rec, int BranchID, int isTransfer, string sCodeBnch, DateTime date, string SCodeProd, int MainRequestID)
        {
            int iSucess = 0;
            string sQry = "insert into tblTransinterStorerequest_" + sCodeBnch + " (RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate) values ('" + RequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            //MainServer
            // string sqry = "select MAX(requestno) as RequestNo from tblinterbranchrequest";
            ////// DataSet ds = dbObj.InlineExecuteDataSet(sqry);
            //////// DataSet ds = dbObj.InlineExecuteDataSetMain(sqry);
            ////// if (ds.Tables[0].Rows.Count > 0)
            {
                // string prodrequestno = ds.Tables[0].Rows[0]["RequestNo"].ToString();
                string sQryprod = "insert into tblTransInterStoreRequest(RequestID,CategoryId,DescriptionId,Order_Qty,Units,Received_Qty,BranchID,isTransFer,OrderDate) values ('" + MainRequestID + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + Rec + "'," + BranchID + "," + isTransfer + ",'" + Convert.ToDateTime(date).ToString("yyyy/MM/dd") + "')";
                iSucess = dbObj.InlineExecuteNonQuery(sQryprod);
            }

            return iSucess;
        }


        #endregion

        #region Accept Request By Another Store

        public DataSet getrequestprodfromanotherstore(string branchcode, DateTime datee)
        {
            DataSet ds = new DataSet();


            string sqry = " select distinct br.RequestNO,br.tobranchcode,br.RequestDate,br.RequestEntryTime,br.Status,br.FromBranchCode,br.branchreqno,br.RequestBy " +
                " from tblinterstorerequest as br inner join tbltransinterstorerequest as tbr on tbr.requestid=br.requestno where ToBranchCode='" + branchcode + "' " +
                "  and convert(date,br.RequestDate) between dateadd(day,datediff(day,1,GETDATE()),0) and dateadd(day,datediff(day,0,GETDATE()),0)   " +
                         " and  (isnull(tbr.Order_Qty,0)- ISNULL(tbr.Received_Qty,0)) >0 order by br.requestno desc";


            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet interrequestdetails_store(string iD, string sCode, string branch, string reqno)
        {
            DataSet ds = new DataSet();

            // string sqry = "select * from tblPurchaseRequest_" + sCode + " a,tblTransPurchaseRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<b.Order_Qty";
            string sqry = "select * from tblinterstorerequest a,tbltransinterstorerequest b,tblIngridentsCategory c,tblIngridents d where a.RequestNo=b.Requestid " +
            " and b.CategoryID=c.IngCatID and b.DescriptionID=d.IngridID  and Order_Qty!=0 and a.branchReqNo='" + iD + "' and a.requestno='" + reqno + "' and a.tobranchcode='" + sCode + "' ";
            //  " and b.Received_Qty<b.Order_Qty";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet RequestDetExport_store(string iD, string sCode)
        {
            DataSet ds = new DataSet();

            string sqry = "select d.IngredientName as Item,b.order_Qty from tblPurchaseRequest_" + sCode + " a,tblTransPurchaseRequest_" + sCode + " b, " +
                " tblIngridentsCategory c,tblIngridents d where a.RequestNo=b.Requestid and b.CategoryID=c.IngCatID and b.DescriptionID=d.IngridID  " +
                " and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<b.Order_Qty";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getrequestprodfromanotherStoredate(string branchcode, DateTime datee)
        {
            DataSet ds = new DataSet();


            string sqry = " select distinct br.RequestNO,br.tobranchcode,br.RequestDate,br.RequestEntryTime,br.Status,br.FromBranchCode,br.branchreqno,br.RequestBy " +
                " from tblinterstorerequest as br inner join tbltransinterstorerequest as tbr on tbr.requestid=br.requestno where ToBranchCode='" + branchcode + "' " +
                "  and convert(date,br.RequestDate)='" + Convert.ToDateTime(datee).ToString("yyyy/MM/dd") + "'    " +
                         " and  (isnull(tbr.Order_Qty,0)- ISNULL(tbr.Received_Qty,0)) >0 order by br.requestno desc";


            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet getdcnoforinterStorerequest(string iBranchID, string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(convert(int,DC_NO))+1,1) as DC_No from tblinterstoregoodtransfer";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet interStoreReqGridDetails(int ReqNo, string StoreBranch, string Table, string BranchReqNo)
        {
            DataSet ds = new DataSet();
            string sQty = "select (isnull(Order_Qty,0)-isnull(Received_Qty,0)) as Order_Qty,*,'0' as Rate from tblinterStorerequest p " +
                " inner join tbltransinterStorerequest tp on tp.RequestID=p.RequestNO inner join tblIngridentsCategory c on c.IngCatID=tp.CategoryId " +
                " inner join tblIngridents cu on cu.IngridID=tp.DescriptionId  inner join tblUOM u on u.UOMID=cu.units " +
                "  where RequestNo='" + ReqNo + "' and BranchReqNo='" + BranchReqNo + "' and ToBranchCode='" + StoreBranch + "' and (isnull(Order_Qty,0)-isnull(Received_Qty,0)) >0";
            ds = dbObj.InlineExecuteDataSet(sQty);
            return ds;
        }

        public DataSet getinterStorereqstock(int iSubcategory, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select *,Qty as Available_QTY from tblRawMatlStock_" + stable + " where IngredientID=" + iSubcategory + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet interrequestdetailsforitem_store(string iD, string sCode, string branch, string reqno, string itemid, string frombranch)
        {
            DataSet ds = new DataSet();

            // string sqry = "select * from tblPurchaseRequest_" + sCode + " a,tblTransPurchaseRequest_" + sCode + " b,tblcategory c,tblCategoryUser d where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and Order_Qty!=0 and a.RequestNo='" + iD + "' and b.Received_Qty<b.Order_Qty";
            string sqry = "select * from tblinterstorerequest a,tbltransinterStorerequest b,tblIngridentsCategory c,tblIngridents d where a.RequestNo=b.Requestid " +
            " and b.CategoryId=c.IngCatID and b.DescriptionId=d.IngridID  and Order_Qty!=0 and  a.frombranchcode='" + frombranch + "' and a.branchReqNo='" + iD + "' and b.DescriptionId='" + itemid + "' and a.requestno='" + reqno + "' and a.tobranchcode='" + sCode + "' ";
            //  " and b.Received_Qty<b.Order_Qty";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public int InsertinterGoodsTrasnfer_Store(string ToBranch, string DC_NO, string DC_Date, string RequestNO, string Status, int isCancel, string ProductionName, int trans, int Received, string sent, string Table, string branchreqno, string FromCode)
        {
            int isave = 0;

            string frombranchid = "";
            string Tobranchid = "";

            // For Branch code
            string getbranchcode = "Select * from tblbranch where Branchcode='" + ToBranch + "'";
            DataSet getstorecode = dbObj.InlineExecuteDataSet(getbranchcode);
            if (getstorecode.Tables[0].Rows.Count > 0)
            {
                Tobranchid = getstorecode.Tables[0].Rows[0]["branchid"].ToString();

            }

            // TO BRANCH ID
            // For Branch code
            string gettobranchcode = "Select * from tblbranch where Branchcode='" + FromCode + "'";
            DataSet gettostorecode = dbObj.InlineExecuteDataSet(gettobranchcode);
            if (gettostorecode.Tables[0].Rows.Count > 0)
            {
                frombranchid = gettostorecode.Tables[0].Rows[0]["branchid"].ToString();

            }


            string sQry = "insert into tblInterStoreGoodTransfer(Branch,DC_NO,DC_Date,RequestNO,Status,isCancel,ProductionName,isTransfer,FromBranchID,IsReceived,SentBY,BranchReqNo,FromBranchCode,ToBranchId,ToBranchCode) " +
                " values('" + ToBranch + "','" + DC_NO + "','" + DC_Date + "','" + RequestNO + "','" + Status + "'," + isCancel + ",'" + ProductionName + "'," + trans + ",'" + frombranchid + "', " +
                " " + Received + ",'" + sent + "','" + branchreqno + "','" + FromCode + "','" + Tobranchid + "','" + ToBranch + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);

            return isave;
        }

        public int InsertinterTransGoodTrasnfer_Store(string DC_NO, int CategoryId, int DescriptionId, decimal Qty, string Units, decimal OrderQty, string expirydate, string iBranchID, int isStock, string Req, string Table, string Breqno)
        {
            int isave = 0;
            string sQry = "insert into tblTransInterStoreGoodsTransfer(DC_No,CategoryId,DescriptionId,Received_Qty,Units,Order_Qty,ExpiryDate,BranchCode,isStocked,RequestNo,BranchReqNo) values('" + DC_NO + "','" + CategoryId + "','" + DescriptionId + "','" + Qty + "','" + Units + "','" + OrderQty + "','" + Convert.ToDateTime(expirydate).ToString("yyyy-MM-dd") + "','" + iBranchID + "'," + isStock + ",'" + Req + "','" + Breqno + "')";
            isave = dbObj.InlineExecuteNonQuery(sQry);


            return isave;
        }

        public DataSet CheckSameQtyininterRequest_Store(string sCode, int ReqNo, int ItemId)
        {
            DataSet ds = new DataSet();
            string sqry = " select * from tbltransinterStorerequest where RequestID=" + ReqNo + " and Order_Qty>0 and DescriptionId=" + ItemId + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public int UpdateintertransferQty_Store(int ID, int idescID, decimal dRecQty, string sCode)
        {
            int isave = 0;
            string sQry = "update tbltransinterStorerequest set Received_Qty=Received_Qty+'" + dRecQty + "' where  RequestID=" + ID + " and DescriptionId=" + idescID + " ";
            isave = dbObj.InlineExecuteNonQuery(sQry);
            // Main Server
            //   isave = dbObj.InlineExecuteNonQueryMain(sQry);
            return isave;
        }

        public int Updateintertransfer_Store(int DescpID, double iQty, string Table, string dc_NO, string categoryid, string userid, string user, string tobrnach)
        {
            int isave = 0;
            string sQry = "update tblRawMatlStock_" + Table + " set Qty=Qty -'" + iQty + "' where IngredientID=" + DescpID + "  ";
            isave = dbObj.InlineExecuteNonQuery(sQry);



            return isave;
        }

        #endregion

        #region INTER STORE GOODS RECEIVED
        public DataSet GetinterDCNONew_store(string sCode)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct s.DC_NO,s.RequestNO,s.dc_date,s.tobranchcode,s.Status  from tblInterstoreGoodTransfer s " +
                " inner join  tblTransInterstoreGoodsTransfer ts on s.DC_NO=ts.DC_NO where  s.FromBranchCode='" + sCode + "' and isStocked=0";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet interGoodReceivedNew_Store(string sDCNO, string BranchCode)
        {
            DataSet ds = new DataSet();
            string sqry = "  select Distinct DC_NO,RequestNO,BranchReqNo,Dc_Date,Frombranchcode,Tobranchcode from tblInterStoreGoodTransfer " +
                " where DC_No='" + sDCNO + "'    and FromBranchCode='" + BranchCode + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet ineterGoodReceivedListNew_Store(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            string sqry = "select *,case isstocked when 1 then 'Received' else 'Pending' end as stt   from tblTransInterstoreGoodsTransfer b,tblIngridentsCategory c, " +
                " tblIngridents d  where  b.CategoryId=c.IngCatID and b.DescriptionId=d.IngridID and b.BranchCode='" + BranchID + "' and b.DC_No=" + sDCNO + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet InterGoodReceived_Store(string sDCNO, string BranchID, string Productioncode)
        {
            DataSet ds = new DataSet();
            string sqry = "select  d.IngredientName as printitem,c.IngCatID as Categoryid,d.IngridID as CategoryUserID,u.UOM,c.IngreCategory as Category,d.IngredientName as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty " +
                " from tblInterstoreGoodTransfer a,tblTransInterstoreGoodsTransfer b,tblIngridentsCategory c,tblIngridents d,tbluom u  " +
                " where a.DC_NO=b.DC_No and b.CategoryId=c.IngCatID and b.DescriptionId=d.IngridID and u.UOMID=d.Units and a.FromBranchCode='" + BranchID + "' " +
                " and a.DC_No='" + sDCNO + "' and b.isStocked='0' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public int InterInserRecQty_Store(string stable, string ProRequestNO, string UserID, string Branchreqno, string Dc_NO, string Remarks)
        {
            int iSuccess = 0;
            string sQry = "insert into tblInterStoreGoodReceived_" + stable + "(RequestNO, BranchCode,UserID,BranchREqNo,DC_NO,Remarks) values ('" + ProRequestNO + "','" + stable + "','" + UserID + "','" + Branchreqno + "','" + Dc_NO + "','" + Remarks + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string sQry1 = " select max(RecID) as RecID from tblInterStoreGoodReceived_" + stable + " ";
            ds = dbObj.InlineExecuteDataSet(sQry1);

            iSuccess = Convert.ToInt32(ds.Tables[0].Rows[0]["RecID"].ToString());

            return iSuccess;
        }

        public DataSet GetPurchaseStok_Store(int iSubcategory, int ibranch, string stable)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblRawMatlStock_" + stable + " where IngredientID=" + iSubcategory + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet InterUpdatePurchaseStokNew_Store(double iAvailable, int iSubcategory, int iBranch, string sDate, string stable, int stockid, string recno)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblRawMatlStock_" + stable + " set Qty=Qty+" + iAvailable + " where IngredientID=" + iSubcategory + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            //string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('SCR-Inter Goods Received Note','" + iAvailable + "','" + recno + "','+','" + iSubcategory + "','" + stockid + "')";
            //int iupdate = dbObj.InlineExecuteNonQuery(AuditQty);

            return ds;

        }

        public DataSet InterUpdatereqPurchaseStock_Store(double Received_Qty, string stable, string ReqNo, int DescriptionId)
        {
            DataSet ds = new DataSet();
            string sqry = "update tblTransinterStorerequest_" + stable + " set Received_Qty=isnull(Received_Qty,0)+" + Received_Qty + " where DescriptionId=" + DescriptionId + " and RequestID='" + ReqNo + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int InterInserDirectGrn_Store(string stable, int UserID, int iCategoryID, int iSubCategoryID, double iQty, double iAQty, double iMinQty, double Dealer, double Press, double dPurchaseRate, DateTime Expirydate, int ToolID, string refid)
        {
            int iSuccess = 0;

            //  string sQry3 = "insert into tblProductionQty_" + stable + "( DescriptionId,Prod_Qty) values (" + iSubCategoryID + "," + iAQty + ")";
            string Query = "insert into tblRawMatlStock_" + stable + " (IngredientID,Qty,UserID,idDelete,units,Rate)values(" + iSubCategoryID + "," + iAQty + "," + UserID + ",0,'0','0') ";
            iSuccess = dbObj.InlineExecuteNonQuery(Query);


            return iSuccess;
        }

        public int InterInsertransRecQty_Store(string stable, int RecID, int CategoryId, int DescriptionId, double Order_Qty, double Received_Qty, string DCNO, double dmgqty, double missqty, string userrid, string BREQNO, string TOCodee, string username)
        {
            int iSuccess = 0;
            string sQry = "insert into tbltransinterstoreGoodsReceived_" + stable + "(RecID, CategoryId,DescriptionId,Order_Qty,Received_Qty, RequestNo,BranchCode,Damage_Qty,Missing_Qty) values ('" + RecID + "','" + CategoryId + "','" + DescriptionId + "','" + Order_Qty + "'," + Received_Qty + ",'" + DCNO + "','" + stable + "'," + dmgqty + "," + missqty + ")";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);




            return iSuccess;
        }

        public int InterupdateRecQty_store(string stable, string DC_No, int DescriptionId, double dmgqty, double missqty, string remarks)
        {
            int iSuccess = 0;

            string sQry = "update tbltransinterstoregoodstransfer set isStocked=1,Damage_Qty=" + dmgqty + ",Missing_Qty=" + missqty + " where DC_No=" + DC_No + " and DescriptionId=" + DescriptionId + " ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "update tblinterStoregoodtransfer set status='" + remarks + "' where DC_No=" + DC_No + " ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry1);


            return iSuccess;
        }


        #endregion

        #region dispatch Entry
        public DataSet griddispatch_date(string stablename, string sFromDate, string sToDate)
        {
            DataSet ds = new DataSet();
            string sqry = " Select a.*,b.customername as Employeename,c.VehicleNumber from tbldispatchentry_" + stablename + " as a inner join tblcustomer as b on b.ledgerid=a.employee " +
                          " inner join tblvehiclemaster as c on c.VehicleID=a.vehicleno where cast(dispatchdate as date) >='" + sFromDate + "' and cast(dispatchdate as date) <='" + sToDate + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet griddispatch_branch(string stablename, string diptchid)
        {
            DataSet ds = new DataSet();
            string sqry = "        select distinct d.branchcode,d.brancharea from tbldispatchentry_" + stablename + " as a inner join tbltransdispatchentry_" + stablename + " as b on b.DispatchId=a.DispatchId " +
" inner join tblgoodtransfer_prod as c on c.p_id=b.GoodsTransferId inner join tblbranch as d on d.branchcode=c.branchcode " +
" where a.Dispatchid='" + diptchid + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet griddispatch_dispatchn(string stablename, string diptchid, string branchcode)
        {
            DataSet ds = new DataSet();
            string sqry = "        select distinct c.P_id,c.DC_NO from tbldispatchentry_" + stablename + " as a inner join tbltransdispatchentry_" + stablename + " as b on b.DispatchId=a.DispatchId " +
" inner join tblgoodtransfer_prod as c on c.p_id=b.GoodsTransferId inner join tblbranch as d on d.branchcode=c.branchcode " +
" where a.Dispatchid='" + diptchid + "' and c.branchcode='" + branchcode + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet getdispatchprint_multipledc(string branchcode, string cond)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;


            //if (storelist == "All")
            {
                sqry = "select f.dispatchid,f.dispatchno,f.dispatchdate,a.P_id, a.dc_no+' - '+brancharea as heading,a.dc_date, u.UOM,d.categoryid,c.CategoryUserID,e.branchid,brancharea,category,definition,(order_Qty) as Oqty, " +
" (received_qty) as qty from tbldispatchentry_" + branchcode + " as f  inner join tbltransdispatchentry_" + branchcode + " as g on g.dispatchid=f.dispatchid " +
" inner join tblgoodtransfer_" + branchcode + " as a on a.p_id=g.goodstransferid inner join  tbltransgoodstransfer_" + branchcode + " as b on b.dc_no=a.DC_no  " +
 " inner join tblcategoryuser as c on c.categoryuserid=b.descriptionid  inner join tblcategory as d on d.categoryid=b.categoryid  " +
 " inner join tblbranch as e on e.branchcode=a.branch inner join tblUOM u on u.UOMID=c.unit   " +
  " where (" + cond + ")    " +
    " order by a.dc_no,branch,category asc  ";
            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        #endregion

        #region GET ONLINE STATUS

        public DataSet getonlinesttus()
        {
            DataSet ds = new DataSet();

            string sqry = "Select * from tblonlinestatus";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;

        }

        public DataSet getordercount_summary(string sbranchcode, string FromDate, string columnname, string Todate, string totime)
        {
            DataSet dgetorder = new DataSet();
            DataSet dmerge = new DataSet();

            DataSet dgetorder1 = new DataSet();
            DataSet dmerge1 = new DataSet();

            DataSet ds = new DataSet();
            string branch = string.Empty;
            if (sbranchcode == "All")
            {
                string sqry = "Select * from tblbranch where branchtype='0'";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        branch = ds.Tables[0].Rows[i]["branchcode"].ToString();
                        string tablename = "tblordersummary_" + ds.Tables[0].Rows[i]["branchcode"].ToString();

                        string gettablename = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";
                        DataSet dc = dbObj.InlineExecuteDataSet(gettablename);

                        if (dc.Tables[0].Rows.Count > 0)
                        {
                            //  string ordersummary = "Select *,isnull(Employeeid,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where convert(date,Deliverydate) = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'";
                            //string ordersummary = "Select o.*,too.*,cu.*,isnull(customername,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too " +
                            //    " on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid left join tblCustomer as c on c.IDCust=o.employeeid " +
                            //    " where convert(date,"+columnname+") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "' and Deliveryid='"+status+"'";

                            string ordersummary = "select b.statusname,count(ordersummaryid) as cnt  from tblordersummary_" + branch + " as a inner join tblonlinestatus as b on b.statusid=a.deliveryid " +
                                " where convert(date," + columnname + ") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "' group by b.statusname ";
                            dgetorder = dbObj.InlineExecuteDataSet(ordersummary);

                            dmerge1.Merge(dgetorder);

                            string ordersummary1 = "select b.statusname,count(ordersummaryid) as cnt  from tblordersummary_" + branch + " as a inner join tblonlinestatus as b on b.statusid=a.deliveryid " +
                                " where  convert(date," + columnname + ") = '" + Convert.ToDateTime(Todate).ToString("yyyy/MM/dd") + "' and CONVERT(time, LEFT(DeliveryTime, 2) + ':' + SUBSTRING(DeliveryTime, 4, 2) +' '+ SUBSTRING(DeliveryTime, 7, 2),108) <= '" + totime + "' group by b.statusname ";
                            dgetorder1 = dbObj.InlineExecuteDataSet(ordersummary1);

                            dmerge1.Merge(dgetorder1);


                        }
                    }
                    dmerge.Merge(dmerge1);

                }


            }
            else
            {
                string sqry = "Select * from tblbranch where branchtype='0' and branchname='" + sbranchcode + "'";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        branch = ds.Tables[0].Rows[i]["branchcode"].ToString();
                        string tablename = "tblordersummary_" + ds.Tables[0].Rows[i]["branchcode"].ToString();

                        string gettablename = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";
                        DataSet dc = dbObj.InlineExecuteDataSet(gettablename);

                        if (dc.Tables[0].Rows.Count > 0)
                        {
                            // string ordersummary = "Select *,isnull(Employeeid,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where convert(date,Deliverydate) = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'";
                            //string ordersummary = "Select o.*,too.*,cu.*,isnull(customername,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too " +
                            //    " on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid left join tblCustomer as c on c.IDCust=o.employeeid " +
                            //    " where convert(date," + columnname + ") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "' and Deliveryid='"+status+"'";

                            string ordersummary = "select b.statusname,count(ordersummaryid) as cnt  from tblordersummary_" + branch + " as a inner join tblonlinestatus as b on b.statusid=a.deliveryid " +
                                " where convert(date," + columnname + ") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'   group by b.statusname ";
                            dgetorder = dbObj.InlineExecuteDataSet(ordersummary);

                            dmerge1.Merge(dgetorder);

                            string ordersummary1 = "select b.statusname,count(ordersummaryid) as cnt  from tblordersummary_" + branch + " as a inner join tblonlinestatus as b on b.statusid=a.deliveryid " +
                                " where  convert(date," + columnname + ") = '" + Convert.ToDateTime(Todate).ToString("yyyy/MM/dd") + "' and CONVERT(time, LEFT(DeliveryTime, 2) + ':' + SUBSTRING(DeliveryTime, 4, 2) +' '+ SUBSTRING(DeliveryTime, 7, 2),108) <= '" + totime + "'  group by b.statusname ";
                            dgetorder1 = dbObj.InlineExecuteDataSet(ordersummary1);

                            dmerge1.Merge(dgetorder1);


                        }
                    }
                    dmerge.Merge(dmerge1);

                }
            }
            return dmerge;
        }


        public DataSet getordercount_summaryDetails(string sbranchcode, string FromDate, string columnname, string status, string stablename, string Todate, string totime)
        {
            DataSet dgetorder = new DataSet();
            DataSet dgetorder1 = new DataSet();
            DataSet dmerge = new DataSet();
            DataSet dmerge1 = new DataSet();

            DataSet ds = new DataSet();
            string branch = string.Empty;
            if (sbranchcode == "All")
            {
                string sqry = "Select * from tblbranch where branchtype='0'";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        branch = ds.Tables[0].Rows[i]["branchcode"].ToString();
                        string tablename = "tblordersummary_" + ds.Tables[0].Rows[i]["branchcode"].ToString();

                        string gettablename = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";
                        DataSet dc = dbObj.InlineExecuteDataSet(gettablename);

                        if (dc.Tables[0].Rows.Count > 0)
                        {
                            //  string ordersummary = "Select *,isnull(Employeeid,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where convert(date,Deliverydate) = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'";
                            //string ordersummary = "Select o.*,too.*,cu.*,isnull(customername,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too " +
                            //    " on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid left join tblCustomer as c on c.IDCust=o.employeeid " +
                            //    " where convert(date,"+columnname+") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "' and Deliveryid='"+status+"'";

                            if (status == "All")
                            {

                                string ordersummary = "select b.statusname,a.*,isnull(customername,'Not Assign') as Empname  from tblordersummary_" + branch + " as a inner join tblonlinestatus as b on b.statusid=a.deliveryid left join tblCustomer as c on c.IDCust=a.employeeid " +
                                    " where Pbranch='" + stablename + "' and  convert(date," + columnname + ") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'  order by deliverydate,DeliveryTime asc  ";
                                dgetorder = dbObj.InlineExecuteDataSet(ordersummary);

                                dmerge1.Merge(dgetorder);

                                string ordersummary1 = "select b.statusname,a.*,isnull(customername,'Not Assign') as Empname  from tblordersummary_" + branch + " as a inner join tblonlinestatus as b on b.statusid=a.deliveryid left join tblCustomer as c on c.IDCust=a.employeeid " +
                                    " where Pbranch='" + stablename + "' and convert(date," + columnname + ") = '" + Convert.ToDateTime(Todate).ToString("yyyy/MM/dd") + "' and CONVERT(time, LEFT(DeliveryTime, 2) + ':' + SUBSTRING(DeliveryTime, 4, 2) +' '+ SUBSTRING(DeliveryTime, 7, 2),108) <= '" + totime + "' order by deliverydate,DeliveryTime asc  ";
                                dgetorder1 = dbObj.InlineExecuteDataSet(ordersummary1);
                                dmerge1.Merge(dgetorder1);
                            }
                            else
                            {
                                string ordersummary = "select b.statusname,a.*,isnull(customername,'Not Assign') as Empname  from tblordersummary_" + branch + " as a inner join tblonlinestatus as b on b.statusid=a.deliveryid left join tblCustomer as c on c.IDCust=a.employeeid " +
                                    " where Pbranch='" + stablename + "' and  convert(date," + columnname + ") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "' and a.deliveryid='" + status + "'  order by deliverydate,DeliveryTime asc  ";
                                dgetorder = dbObj.InlineExecuteDataSet(ordersummary);

                                dmerge1.Merge(dgetorder);

                                string ordersummary1 = "select b.statusname,a.*,isnull(customername,'Not Assign') as Empname  from tblordersummary_" + branch + " as a inner join tblonlinestatus as b on b.statusid=a.deliveryid left join tblCustomer as c on c.IDCust=a.employeeid " +
                                    " where Pbranch='" + stablename + "' and convert(date," + columnname + ") = '" + Convert.ToDateTime(Todate).ToString("yyyy/MM/dd") + "' and CONVERT(time, LEFT(DeliveryTime, 2) + ':' + SUBSTRING(DeliveryTime, 4, 2) +' '+ SUBSTRING(DeliveryTime, 7, 2),108) <= '" + totime + "' and a.deliveryid='" + status + "' order by deliverydate,DeliveryTime asc  ";
                                dgetorder1 = dbObj.InlineExecuteDataSet(ordersummary1);

                                dmerge1.Merge(dgetorder1);



                            }

                        }
                    }
                    dmerge.Merge(dmerge1);

                }


            }
            else
            {
                string sqry = "Select * from tblbranch where branchtype='0' and branchname='" + sbranchcode + "'";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        branch = ds.Tables[0].Rows[i]["branchcode"].ToString();
                        string tablename = "tblordersummary_" + ds.Tables[0].Rows[i]["branchcode"].ToString();

                        string gettablename = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";
                        DataSet dc = dbObj.InlineExecuteDataSet(gettablename);

                        if (dc.Tables[0].Rows.Count > 0)
                        {
                            // string ordersummary = "Select *,isnull(Employeeid,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid where convert(date,Deliverydate) = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'";
                            //string ordersummary = "Select o.*,too.*,cu.*,isnull(customername,'Not Assign') as Empname from tblordersummary_" + branch + " as o inner join tbltransordersummary_" + branch + " as too " +
                            //    " on too.billno=o.billno inner join tblcategoryuser as cu on cu.categoryuserid=too.SubCategoryid left join tblCustomer as c on c.IDCust=o.employeeid " +
                            //    " where convert(date," + columnname + ") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "' and Deliveryid='"+status+"'";

                            //string ordersummary = "select b.statusname,count(ordersummaryid) as cnt  from tblordersummary_" + branch + " as a inner join tblonlinestatus as b on b.statusid=a.deliveryid " +
                            //    " where convert(date," + columnname + ") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "' group by b.statusname ";
                            //dgetorder = dbObj.InlineExecuteDataSet(ordersummary);
                            if (status == "All")
                            {

                                string ordersummary = "select b.statusname,a.*,isnull(customername,'Not Assign') as Empname  from tblordersummary_" + branch + " as a inner join tblonlinestatus as b on b.statusid=a.deliveryid left join tblCustomer as c on c.IDCust=a.employeeid " +
                                    " where Pbranch='" + stablename + "' and  convert(date," + columnname + ") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "'  order by deliverydate,DeliveryTime asc  ";
                                dgetorder = dbObj.InlineExecuteDataSet(ordersummary);

                                dmerge1.Merge(dgetorder);

                                string ordersummary1 = "select b.statusname,a.*,isnull(customername,'Not Assign') as Empname  from tblordersummary_" + branch + " as a inner join tblonlinestatus as b on b.statusid=a.deliveryid left join tblCustomer as c on c.IDCust=a.employeeid " +
                                    " where Pbranch='" + stablename + "' and convert(date," + columnname + ") = '" + Convert.ToDateTime(Todate).ToString("yyyy/MM/dd") + "' and CONVERT(time, LEFT(DeliveryTime, 2) + ':' + SUBSTRING(DeliveryTime, 4, 2) +' '+ SUBSTRING(DeliveryTime, 7, 2),108) <= '" + totime + "' order by deliverydate,DeliveryTime asc  ";
                                dgetorder1 = dbObj.InlineExecuteDataSet(ordersummary1);
                                dmerge1.Merge(dgetorder1);
                            }
                            else
                            {
                                string ordersummary = "select b.statusname,a.*,isnull(customername,'Not Assign') as Empname  from tblordersummary_" + branch + " as a inner join tblonlinestatus as b on b.statusid=a.deliveryid left join tblCustomer as c on c.IDCust=a.employeeid " +
                                    " where Pbranch='" + stablename + "' and  convert(date," + columnname + ") = '" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "' and a.deliveryid='" + status + "'  order by deliverydate,DeliveryTime asc  ";
                                dgetorder = dbObj.InlineExecuteDataSet(ordersummary);

                                dmerge1.Merge(dgetorder);

                                string ordersummary1 = "select b.statusname,a.*,isnull(customername,'Not Assign') as Empname  from tblordersummary_" + branch + " as a inner join tblonlinestatus as b on b.statusid=a.deliveryid left join tblCustomer as c on c.IDCust=a.employeeid " +
                                    " where Pbranch='" + stablename + "' and convert(date," + columnname + ") = '" + Convert.ToDateTime(Todate).ToString("yyyy/MM/dd") + "' and CONVERT(time, LEFT(DeliveryTime, 2) + ':' + SUBSTRING(DeliveryTime, 4, 2) +' '+ SUBSTRING(DeliveryTime, 7, 2),108) <= '" + totime + "' and a.deliveryid='" + status + "' order by deliverydate,DeliveryTime asc  ";
                                dgetorder1 = dbObj.InlineExecuteDataSet(ordersummary1);

                                dmerge1.Merge(dgetorder1);
                            }

                        }
                    }
                    dmerge.Merge(dmerge1);
                }
            }
            return dmerge;
        }

        public DataSet getCakeSummary(string orderno, string stablename)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            sqry = "Select * from tblordersummary_" + stablename + " where orderno='" + orderno + "'  order by ordersummaryid desc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        #endregion

        #region Inter Production Request/Received/TRansfer Report
        public DataSet interProductionRequestreports(int ibranch, string sCode, string frmdate, string todate)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.name as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime,b.tobranchcode  " +
" from tblworkers a,tblInterProdRequest b  where a.empid=b.VendorID  and b.BranchID='" + ibranch + "' and b.Frombranchcode='" + sCode + "' " +
" and b.IsAccepted=0 and convert(date, b.RequestDate)  between '" + Convert.ToDateTime(frmdate).ToString("yyyy-MM-dd") + "' and '" + Convert.ToDateTime(todate).ToString("yyyy-MM-dd") + "'   order by b.RequestDate desc  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet InterProdReport_StockReqDetails(int sBillno, string sCode)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblInterProdRequest a,tbltransInterProdRequest b,tblcategory c,tblCategoryUser d " +
                " where a.RequestNo=b.Requestid and b.CategoryID=c.CategoryID and b.DescriptionID=d.CategoryUserID  and a.RequestNo='" + sBillno + "' ";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet interProdReceivedReport_date(string sFromDate, string sToDate, string stable)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblInterprodGoodReceived_" + stable + " where convert(date,RecDate) between '" + sFromDate + "' and '" + sToDate + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet InterProdGoodReceivedListExp(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            // string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer a,tblTransGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty,b.damage_Qty as damageQty,b.Missing_Qty as MissingQty " +
                " from tblInterprodGoodReceived_" + BranchID + " a,tbltransInterprodGoodsReceived_" + BranchID + " b,tblcategory c,tblCategoryUser d  where a.recid=b.recid " +
                " and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and  a.recid='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet InterProdTransferReport_date(string sFromDate, string sToDate, string stable, string branchcode)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            {
                sqry = "  select * from tblInterprodGoodTransfer where convert(date,DC_Date) between '" + sFromDate + "' and '" + sToDate + "' and branch='" + stable + "' order by dc_No desc ";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet InterProdGoodTrasnferListExp(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty,b.damage_Qty as damageQty,b.Missing_Qty as MissingQty " +
                " from tblInterprodGoodTransfer a,tbltransInterprodGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No " +
                " and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and  a.DC_No='" + sDCNO + "' and  a.FromBranchCode=b.BranchCode ";


            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion

        #region Inter Store Request/Received/TRansfer Report
        public DataSet interStoreRequestreports(int ibranch, string sCode, string frmdate, string todate)
        {
            DataSet ds = new DataSet();
            string sqry = "select a.name as Production_To,b.RequestDate,b.TotalQty,b.Status,b.RequestNO,b.Branch,b.RequestEntryTime,b.tobranchcode  " +
" from tblworkers a,tblInterstoreRequest b  where a.empid=b.VendorID  and b.BranchID='" + ibranch + "' and b.Frombranchcode='" + sCode + "' " +
" and b.IsAccepted=0 and convert(date, b.RequestDate)  between '" + Convert.ToDateTime(frmdate).ToString("yyyy-MM-dd") + "' and '" + Convert.ToDateTime(todate).ToString("yyyy-MM-dd") + "'   order by b.RequestDate desc  ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet InterstoreReport_StockReqDetails(int sBillno, string sCode)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblInterstoreRequest a,tbltransInterstoreRequest b,tblIngridentsCategory c,tblIngridents d " +
                " where a.RequestNo=b.Requestid and b.CategoryID=c.IngCatID and b.DescriptionID=d.IngridID  and a.RequestNo='" + sBillno + "' ";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet interStoreReceivedReport_date(string sFromDate, string sToDate, string stable)
        {
            DataSet ds = new DataSet();

            string sqry = "  select * from tblInterstoreGoodReceived_" + stable + " where convert(date,RecDate) between '" + sFromDate + "' and '" + sToDate + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet InterstoreGoodReceivedListExp(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            // string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer a,tblTransGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            string sqry = "select d.IngredientName as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty,b.damage_Qty as damageQty,b.Missing_Qty as MissingQty " +
                " from tblInterstoreGoodReceived_" + BranchID + " a,tbltransInterstoreGoodsReceived_" + BranchID + " b,tblIngridentsCategory c,tblIngridents d  where a.recid=b.recid " +
                " and b.CategoryId=c.IngCatID and b.DescriptionId=d.IngridID and  a.recid='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }


        public DataSet InterStoreTransferReport_date(string sFromDate, string sToDate, string stable, string branchcode)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            {
                sqry = "  select * from tblInterstoreGoodTransfer where convert(date,DC_Date) between '" + sFromDate + "' and '" + sToDate + "' and branch='" + stable + "' order by dc_No desc ";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet InterStoreGoodTrasnferListExp(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            string sqry = "select d.IngredientName as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty,b.damage_Qty as damageQty,b.Missing_Qty as MissingQty " +
                " from tblInterprodGoodTransfer a,tbltransInterprodGoodsTransfer b,tblIngridentsCategory c,tblIngridents d  where a.DC_NO=b.DC_No " +
                " and b.CategoryId=c.IngCatID and b.DescriptionId=d.IngridID and  a.DC_No='" + sDCNO + "' and  a.FromBranchCode=b.BranchCode ";


            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion

        #region ORDER SUMMARY DETAILS

        public DataSet getodersummaryonlytransitdetails(string sbranchcode, string status, string branchcode)
        {
            DataSet dgetorder = new DataSet();
            DataSet dmerge = new DataSet();

            DataSet ds = new DataSet();
            string branch = string.Empty;
            // if (sbranchcode == "All")
            {
                string sqry = "Select * from tblbranch where branchtype='0'";
                ds = dbObj.InlineExecuteDataSet(sqry);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        branch = ds.Tables[0].Rows[i]["branchname"].ToString();
                        string tablename = "tblordersummary_" + ds.Tables[0].Rows[i]["branchname"].ToString();

                        string gettablename = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='" + tablename + "'";
                        DataSet dc = dbObj.InlineExecuteDataSet(gettablename);

                        if (dc.Tables[0].Rows.Count > 0)
                        {

                            {
                                string ordersummary = "select b.statusname,a.*,isnull(customername,'Not Assign') as Empname,cast(bookno as nvarchar)+' - '+branchcode as ordertext   from tblordersummary_" + branch + " as a inner join tblonlinestatus as b on b.statusid=a.deliveryid left join tblCustomer as c on c.IDCust=a.employeeid " +
                                    " where Pbranch='" + sbranchcode + "'  and a.deliveryid='" + status + "'  ";
                                dgetorder = dbObj.InlineExecuteDataSet(ordersummary);
                            }
                            dmerge.Merge(dgetorder);
                        }
                    }

                }


            }

            return dmerge;
        }

        #endregion

        public DataSet CheckduplicateDC(string sTableName, string DCno)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblwholesales_" + sTableName + " where billno='" + DCno + "'";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet CheckduplicateDC_edit(string sTableName, string BillNo, string iSalesID)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblwholesales_" + sTableName + " where BillNo='" + BillNo + "' and SalesId<>'" + iSalesID + "'";


            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int DeleteTransSalesNew(string Stable, int SalesId)
        {
            int iSucess = 0;
            string sqry = "delete  from  " + Stable + "  Where SalesID='" + SalesId + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sqry);
            return iSucess;

        }

        public DataSet GetOrderSalesView(string OrderId)
        {
            DataSet ds = new DataSet();
            //string sqry = "select *  from  orders Where OrderID='" + OrderId + "'";
            //string sqry = "select * from orders a inner join customermaster b on a.customerid = b.id Where a.OrderID='" + OrderId + "'";
            string sqry = "select * from orders a inner join tblCustomer b on a.customerid = b.customerid Where a.OrderID='" + OrderId + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GetOrderTransSalesView(string OrderId)
        {
            DataSet ds = new DataSet();
            //////string sqry = "select isnull(Available_QTY,0) as Available_QTY,s.qty-s.salesqty as SQty,* from transorder s left join tblProductionStock_Pro c on s.productid = c.subcategoryid Where OrderID='" + OrderId + "' and s.qty != s.salesqty";
            string sqry = "select isnull(Available_QTY,0) as Available_QTY,s.qty-s.salesqty as SQty,* from transorder s left join tblProductionStock_Pro c on s.productid = c.subcategoryid Where OrderID='" + OrderId + "' and s.qty > (s.salesqty + s.CancelQty) ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet getsalesdcno(string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(cast(DCNo AS int) + 1),1) as DCNo from tblWholesales_" + Table + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetSalesEdit(string Stable, string SalesId)
        {
            DataSet ds = new DataSet();
            string sqry = "select *  from  " + Stable + " s Where s.SalesID='" + SalesId + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GetTransSalesEditNew(string Stable, string SalesId, string table)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            sqry = "select s.UOMID as PackType,s.*  from  " + Stable + " s " +
                "  Where s.SalesID='" + SalesId + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GetTransSalesEdit(string Stable, int SalesId)
        {
            DataSet ds = new DataSet();
            string sqry = "select *  from  " + Stable + "  Where SalesID='" + SalesId + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public int updateSalesStock(decimal iQty, int iCategoryID, int iSubCategoryID, string date, int iStockID, int UserID, string stable, string sign, string screenname, string Qty, string isalesid, string stockoption)
        {
            int iSucess = 0;
            string stocktype = "";
            if (stockoption == "1")
            {
                string sQry = "update tblStock_" + stable + " set available_Qty=" + iQty + " where stockid=" + iStockID + " "; //CategoryID=" + iCategoryID + " and SubCategoryID=" + iSubCategoryID + " and Expirydate='"+date+"'";
                iSucess = dbObj.InlineExecuteNonQuery(sQry);
            }

            if (stockoption == "1")
            {
                stocktype = "W/S";
            }
            else if (stockoption == "2")
            {
                stocktype = "WO/S";
            }

            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid,stockoption)VAlues('" + screenname + "','" + Qty + "','" + isalesid + "','" + sign + "','" + iSubCategoryID + "','" + iStockID + "','" + stocktype + "')";
            iSucess = dbObj.InlineExecuteNonQuery(AuditQty);


            return iSucess;
        }

        public int updateSalesStock1(double iQty, int iSubCategoryID, string tblStock,string Logintypeid)
        {
            int iSucess = 0;
            string sQry = string.Empty;
            if (Logintypeid == "3")
            {
                sQry = "update tblstock_" + tblStock + " set Available_QTY=Available_QTY+" + iQty + " where SubCategoryID=" + iSubCategoryID + "";
            }
            else
            {
                sQry = "update tblProductionQty_" + tblStock + " set Prod_Qty=Prod_Qty+" + iQty + " where DescriptionId=" + iSubCategoryID + "";
            }
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }

        public int updatewholesalesnew(string salesid, string Prefix, string Years, string sTableName, DateTime BillDate, int PayMode, string Narration, int CustomerName, string Mobile, string Address, double Amount, double Tax, double GrandTotal, int TaxVal, double DiscPer, double DiscAmount, double TotalItems, string DCNo, double Disc, int DiscType, double DeliveryVal, string billno, string Logintype, double CGST, double SGST, double IGST, string SalesType, string VehicleNo)
        {
            int i = 0;
            billno = Convert.ToInt32(billno).ToString();
            string billseries = Prefix + billno + Years;


            string sQry1 = "Update tblWholesales_" + sTableName + " set BillDate='" + Convert.ToDateTime(BillDate).ToString("yyyy/MM/dd hh:mm tt") + "',PayMode=" + PayMode + ",Narration='" + Narration + "',CustomerName='" + CustomerName + "',Mobile='" + Mobile + "',Address='" + Address + "',Amount=" + Amount + ",Tax=" + Tax + ",GrandTotal=" + GrandTotal + ",TaxVal=" + TaxVal + ",DiscPer='" + DiscPer + "',DiscAmount='" + DiscAmount + "',TotalItems=" + TotalItems + ",DCNo='" + DCNo + "',Disc=" + Disc + ",DiscType=" + DiscType + ",DeliveryVal=" + DeliveryVal + ",Logintype='" + Logintype + "',CGST='" + CGST + "', SGST='" + SGST + "', IGST='" + IGST + "', SalesType='" + SalesType + "',VehicleNo='" + VehicleNo + "',BillNO='" + billno + "',FullBillNo='" + billseries + "' where salesid='" + salesid + "'";

            i = dbObj.InlineExecuteNonQuery(sQry1);

            DataSet ds1 = new DataSet();
            string sQry3 = "select SalesId from tblWholesales_" + sTableName + " where Billno='" + billno + "'";
            ds1 = dbObj.InlineExecuteDataSet(sQry3);

            i = Convert.ToInt32(ds1.Tables[0].Rows[0]["SalesId"].ToString());

            return i;

        }



        public int insertnewkot1(string BillType, string TableNo, string KotDate, DataSet dss, string Total, string NetAmount, string stablename, string attender, int UserID)
        {
            int iSuccess = 0;
            int maxkotno = 0;
            int stkid = 0;
            decimal iAQty = 0;
            string sQry = "Select isnull(MAX(kotno+1),1) as kotno,isnull(MAX(billprint+1),1) as billprint from tblkot_" + stablename + "";
            DataSet ds = dbObj.InlineExecuteDataSet(sQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                string kotno = ds.Tables[0].Rows[0]["kotno"].ToString();
                maxkotno = Convert.ToInt32(ds.Tables[0].Rows[0]["Kotno"]);
                string billprint = ds.Tables[0].Rows[0]["billprint"].ToString();

                if (dss.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
                    {
                        string CategoryID = dss.Tables[0].Rows[i]["CategoryID"].ToString();
                        string SubCategoryID = dss.Tables[0].Rows[i]["CategoryUserID"].ToString();
                        string UnitPrice = dss.Tables[0].Rows[i]["Rate"].ToString();
                        string Amount = dss.Tables[0].Rows[i]["Amount"].ToString();
                        string IsPrint = dss.Tables[0].Rows[i]["Print"].ToString();
                        string qty = dss.Tables[0].Rows[i]["Qty"].ToString();
                        string gst = dss.Tables[0].Rows[i]["GST"].ToString();


                        string sQryy = "insert into tblKOT_" + stablename + "(Kotno,BillType,TableNo,KotDate,CategoryID,SubCategoryID,UnitPrice,Amount,IsPrint,Total,NetAmount,Quantity,BIllPrint,IEdit,IsCancel,ChangeQty,ActualQuantity,GST,Attender) " +
                            " values ('" + kotno + "','" + BillType + "','" + TableNo + "','" + KotDate + "','" + CategoryID + "'," + SubCategoryID + ",'" + UnitPrice + "','" + Amount + "','" + IsPrint + "','" + Total + "','" + NetAmount + "','" + qty + "','" + billprint + "','0','N','" + qty + "','" + qty + "','" + gst + "','" + attender + "')";
                        iSuccess = dbObj.InlineExecuteNonQuery(sQryy);


                        DataSet dsStock = GetStockDetailsSubCatID(Convert.ToInt32(SubCategoryID), Convert.ToInt32(0), stablename);
                        if (dsStock.Tables[0].Rows.Count > 0)
                        {
                            iAQty = Convert.ToDecimal(dsStock.Tables[0].Rows[0]["Available_Qty"].ToString());
                            stkid = Convert.ToInt32(dsStock.Tables[0].Rows[0]["StockID"].ToString());

                        }
                        decimal iRemQty = iAQty - Convert.ToDecimal(qty);
                        iSuccess = updateSalesStock(iRemQty, Convert.ToInt32(CategoryID), Convert.ToInt32(SubCategoryID), KotDate, Convert.ToInt32(stkid), UserID, stablename, "-", "KOT Sales", qty, Convert.ToString(maxkotno), "");

                    }
                }
            }
            return maxkotno;

        }



        public int updateorderqty(int OrderID, double salesqty, int ProductID)
        {
            int iSucess = 0;
            string sQry = "update transorder set salesqty=salesqty-" + salesqty + " where ProductID=" + ProductID + " and OrderID=" + OrderID + "";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }



        public DataSet checkingSalesRepORRtn(int salesid, string tablename)
        {
            DataSet save = new DataSet();
            //////  string sQry = "select * from tblWholesales_" + tablename + " where salesid='" + salesid + "' and Receipt is null and Returnamount is null";
            //string sQry = "select case when (Receipt+ReturnAmount+CloseDiscount+CreditNoteAmount)>0 then '1' else '0' end as EditStatus from tblWholesales_" + tablename + " where salesid='" + salesid + "' ";
            //save = dbObj.InlineExecuteDataSet(sQry);
            return save;
        }

        public DataSet GetSalesall_Filter(string Stable, DateTime From, DateTime to, string ledgerid)
        {
            DataSet ds = new DataSet();
            string sqry;
            if (ledgerid == "All")
            {
                sqry = "select *  from  tblWholesales_" + Stable + " s inner join tblCustomer c on c.Ledgerid=s.CustomerName inner join tblPaymode p on p.PayModeId=s.PayMode where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' order by Billdate desc ";
            }
            else
            {
                sqry = "select *  from  tblWholesales_" + Stable + " s inner join tblCustomer c on c.Ledgerid=s.CustomerName inner join tblPaymode p on p.PayModeId=s.PayMode where cast(BillDate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(BillDate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and s.Customername = '" + ledgerid + "' order by Billdate desc ";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public int normalsalescancel1(string table, int salesid, string Ref, string stable, string reason)
        {
            int iSuccess = 0;
            int iupdate = 0;

            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet dqty = new DataSet();

            string sqry1 = "select * from tblsales_" + table + " where orderno=0 and cancelstatus='No' and salesid='" + salesid + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry1);

            if (ds.Tables[0].Rows.Count > 0)
            {

                int billno = Convert.ToInt32(ds.Tables[0].Rows[0]["billNo"]);
                //int salesidd = Convert.ToInt32(ds.Tables[0].Rows[0]["salesid"]);

                string strans = "select * from tbltranssales_" + table + " where Salesid='" + billno + "' and salesuniqueid='" + salesid + "'";
                dss = dbObj.InlineExecuteDataSet(strans);
                if (dss.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
                    {
                        int stockid = Convert.ToInt32(dss.Tables[0].Rows[i]["stockid"]);
                        int qty = Convert.ToInt32(dss.Tables[0].Rows[i]["Quantity"]);

                        string getstoc = "select * from tblStock_" + stable + " where stockid='" + stockid + "'";
                        dqty = dbObj.InlineExecuteDataSet(getstoc);

                        if (dqty.Tables[0].Rows.Count > 0)
                        {
                            int avali = Convert.ToInt32(dqty.Tables[0].Rows[0]["Available_QTY"]);
                            string itemid = dqty.Tables[0].Rows[0]["SubCategoryID"].ToString();

                            int finalqty = qty + avali;

                            string update = "Update tblStock_" + stable + " set Available_QTY = '" + finalqty + "' where stockid='" + stockid + "' ";
                            iupdate = dbObj.InlineExecuteNonQuery(update);

                            //  string AuditQty = "Insert into TblAuditQty_" + table + "(Screen,Qty,RefId)VAlues('Sales/Cancel','" + qty + "','" + salesid + "')";
                            //  iupdate = dbObj.InlineExecuteNonQuery(AuditQty);
                            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('Sales/Cancel','" + qty + "','" + salesid + "','+','" + itemid + "','" + stockid + "')";
                            iupdate = dbObj.InlineExecuteNonQuery(AuditQty);

                        }




                    }
                }

            }

            string sQry = "update tblsales_" + table + " set cancelstatus='Yes',Reference=" + Ref + ",Reason='" + reason + "',Canceltine= getdate() where salesid='" + salesid + "' and orderno=0 ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);


            return iSuccess;

        }


        public DataSet GetSalesGSTSummary(string Stable, int SalesId, string SalesType)
        {
            DataSet ds = new DataSet();
            string sqry = "";
            if (SalesType == "1")
            {
                sqry = "select a.tax,sum(a.taxamount / 2) as CGST, sum(a.taxamount) / 2 as SGST,'0' as IGST, sum(a.taxamount) as TaxAmount from  tblTransWholeSales_" + Stable + " a Where a.SalesID=" + SalesId + " group by a.tax,a.salesid ";
            }
            else
            {
                sqry = "select a.tax,'0' as CGST, '0' as SGST,sum(a.taxamount) as IGST, sum(a.taxamount) as TaxAmount from  tblTransWholeSales_" + Stable + " a Where a.SalesID=" + SalesId + " group by a.tax,a.salesid ";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet getrecptnumber(string sTableName)
        {
            DataSet ds = new DataSet();
            string sQry3 = "select isnull(Max(ReceiptNo+1),1) as ReceiptNo from tblReceipt_" + sTableName + "";
            ds = dbObj.InlineExecuteDataSet(sQry3);
            return ds;

        }

        public DataSet Bankactive()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblBank where Active='Yes' order by bankname asc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getreceiptrecord(string sTableName, string CustomerID, DateTime From, DateTime To, string Pay,string ReceiptType)
        {
            DataSet ds = new DataSet();
            if (Pay == "All")
            {
                if (CustomerID == "All")
                {
                    string sQry = "select distinct ReceiptType,COUNT(tr.Receiptid) as BillNo,COUNT(tr.Receiptid) as DCNO,r.CloseDiscount,r.ReceiptDate as BillDate,r.ReceiptID,r.ReceiptNo,r.ReceiptDate,c.CustomerName,r.NetAmount,p.PayMode,'' as Narration,case isnull(ChequeNo,0) when  '0' then '-' else ChequeNo end as ChequeNo from tblReceipt_" + sTableName + " r left join tblTransReceipt_" + sTableName + " tr on r.ReceiptID=tr.ReceiptID inner join tblCustomer c on c.LedgerID=r.CustomerID inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID where r.ReceiptDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and ReceiptType='"+ ReceiptType + "' group by ReceiptType,r.ReceiptID,r.ReceiptNo,r.ReceiptDate,c.CustomerName,r.NetAmount,p.PayMode,ChequeNo,r.CloseDiscount order by ReceiptNo desc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select distinct  ReceiptType,COUNT(tr.Receiptid) as  BillNo,COUNT(tr.Receiptid) as DCNO,r.CloseDiscount,r.ReceiptDate as BillDate,r.ReceiptID,r.ReceiptNo,r.ReceiptDate,c.CustomerName,r.NetAmount,p.PayMode,'' as Narration,case isnull(ChequeNo,0) when  '0' then '-' else ChequeNo end as ChequeNo from tblReceipt_" + sTableName + " r left join tblTransReceipt_" + sTableName + " tr on r.ReceiptID=tr.ReceiptID inner join tblCustomer c on c.LedgerID=r.CustomerID  inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID  where r.ReceiptDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and r.CustomerID=" + CustomerID + "  and ReceiptType='"+ ReceiptType + "' group by ReceiptType,r.ReceiptID,r.ReceiptNo,r.ReceiptDate,c.CustomerName,r.NetAmount,p.PayMode,ChequeNo,r.CloseDiscount order by ReceiptNo desc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
            }
            else
            {
                if (CustomerID == "All")
                {
                    string sQry = "select distinct  ReceiptType,COUNT(tr.Receiptid) as  BillNo,COUNT(tr.Receiptid) as DCNO,r.CloseDiscount,r.ReceiptDate as BillDate,r.ReceiptID,r.ReceiptNo,r.ReceiptDate,c.CustomerName,r.NetAmount,p.PayMode,'' as Narration,case isnull(ChequeNo,0) when  '0' then '-' else ChequeNo end as ChequeNo from tblReceipt_" + sTableName + " r left join tblTransReceipt_" + sTableName + " tr on r.ReceiptID=tr.ReceiptID inner join tblCustomer c on c.LedgerID=r.CustomerID  inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID where r.ReceiptDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and Payment_ID=" + Pay + " and ReceiptType='"+ ReceiptType + "' group by ReceiptType,r.ReceiptID,r.ReceiptNo,r.ReceiptDate,c.CustomerName,r.NetAmount,p.PayMode,ChequeNo,r.CloseDiscount order by ReceiptNo desc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select distinct  ReceiptType,COUNT(tr.Receiptid) as BillNo,COUNT(tr.Receiptid) as DCNO,r.CloseDiscount,r.ReceiptDate as BillDate,r.ReceiptID,r.ReceiptNo,r.ReceiptDate,c.CustomerName,r.NetAmount,p.PayMode,'' as Narration,case isnull(ChequeNo,0) when  '0' then '-' else ChequeNo end as ChequeNo from tblReceipt_" + sTableName + " r left join tblTransReceipt_" + sTableName + " tr on r.ReceiptID=tr.ReceiptID inner join tblCustomer c on c.LedgerID=r.CustomerID  inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID  where r.ReceiptDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and r.CustomerID=" + CustomerID + "  and Payment_ID=" + Pay + " and ReceiptType='"+ ReceiptType + "' group by ReceiptType,r.ReceiptID,r.ReceiptNo,r.ReceiptDate,c.CustomerName,r.NetAmount,p.PayMode,ChequeNo,r.CloseDiscount order by ReceiptNo desc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }

            }

            return ds;
        }

        public DataSet GetCreditbillsExcel(string sTableName, string CustomerID)
        {
            DataSet ds = new DataSet();
            string sQry = "select  BillNo,BillDate,Total,ReceiptAmount,(Total-ReceiptAmount) as BalanceAmount from tblSales_" + sTableName + "  a where CustomerID='" + CustomerID + "' and iPayMode=2 and (Total-ReceiptAmount)>0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public int UpPaidinsalesnew(int ReceiptID, string sTableName, int SalesID, decimal paid, string narration, decimal CloseDiscount)
        {
            int save = 0;
            //string sQry1 = " update tblSales_" + sTableName + " set receipt=isnull(receipt,0)+" + paid + " where SalesID=" + SalesID + "";
            string sQry1 = " update tblWholesales_" + sTableName + " set receipt=isnull(receipt,0)+" + paid + ",CloseDiscount=CloseDiscount+" + CloseDiscount + " where SalesID=" + SalesID + "";
            save = dbObj.InlineExecuteNonQuery(sQry1);

            string sQry3 = "insert into tblTransReceipt_" + sTableName + "(BillNo,ReceiptID,Amount,Narration,CloseDiscount)values(" + SalesID + "," + ReceiptID + "," + paid + ",'" + narration + "'," + CloseDiscount + ")";
            save = dbObj.InlineExecuteNonQuery(sQry3);


            return save;

        }

        public DataSet CheckCustomerforCreditNoteEntry(string Stable, double Amount, int SalesId)
        {
            DataSet ds = new DataSet();
            string sqry = "select *  from  tblWholesales_" + Stable + " s Where (round(GrandTotal,0)>=(Receipt+ReturnAmount+CloseDiscount+CreditNoteAmount+" + Amount + ")) and SalesId=" + SalesId + "  ";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        #region Cash Receipt New
        public DataSet getpaymoderecNew()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblPaymode where value in(1,8,9)";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetCreditbills(string sTableName, string CustomerID)
        {
            DataSet ds = new DataSet();
            //////string sQry = "select  salesid,Amount,round(((GrandTotal - isnull(receipt,0))- isnull(ReturnAmount,0)),0)  as Total,isnull(receipt,0) as Paidamt,isnull(ReturnAmount,0) as ReturnAmount,BillDate,* from tblWholesales_" + sTableName + "  where CustomerName='" + CustomerID + "' and PayMode=2 and  (round(GrandTotal,0) - (isnull(receipt,0) + isnull(ReturnAmount,0) + isnull(CloseDiscount,0))) >0 ";
            //////string sQry = "select  salesid,round(GrandTotal,0) as Amount,round(((GrandTotal - isnull(receipt,0))- isnull(ReturnAmount,0)),0)  as Total,isnull(receipt,0) as Paidamt,isnull(ReturnAmount,0) as ReturnAmount,BillDate,* from tblWholesales_" + sTableName + "  where CustomerName='" + CustomerID + "' and PayMode=2 and  (round(GrandTotal,0) - (isnull(receipt,0) + isnull(ReturnAmount,0) + isnull(CloseDiscount,0))) >0 ";
            string sQry = "select  salesid,round(GrandTotal,0) as Amount,round(((GrandTotal - isnull(receipt,0))- isnull(ReturnAmount,0)-CloseDiscount-round(CreditNoteAmount,0)),0) " +
            " as Total,isnull(receipt,0) as Paidamt,isnull(ReturnAmount,0) as ReturnAmount,round(CreditNoteAmount,0) as CreditNoteAmount,* from tblWholesales_" + sTableName + "  " +
            " where CustomerName='" + CustomerID + "' and PayMode=2 and round(GrandTotal,0) - round((isnull(receipt,0) + isnull(ReturnAmount,0) + isnull(CloseDiscount,0)+CreditNoteAmount),0) >0  order by BillDate,DCNo asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int insertreceipts(string sTableName, DateTime BillDate, DateTime ChequeDate, string Customer, double NetAmount, string BankName, string ChequeNo, int Payment_ID, int BankId, double CloseDiscount, int userId,string ReceiptType)
        {
            int save = 0;
            int ReceiptNo = 0;
            int ReceiptID = 0;

            DataSet ds = new DataSet();
            string sQry1 = "select isnull(Max(ReceiptNo+1),1) as ReceiptNo from tblReceipt_" + sTableName + "";
            ds = dbObj.InlineExecuteDataSet(sQry1);
            ReceiptNo = Convert.ToInt32(ds.Tables[0].Rows[0]["ReceiptNo"].ToString());

            string sQry2 = "insert into tblReceipt_" + sTableName + "(ReceiptNo,ReceiptDate,CustomerID,NetAmount,BankName,ChequeNo,Payment_ID,ChequeDate,BankId,CloseDiscount,userId,ReceiptType)values(" + ReceiptNo + ",'" + BillDate.ToString("yyyy/MM/dd") + "','" + Customer + "'," + NetAmount + ",'" + BankName + "','" + ChequeNo + "'," + Payment_ID + ",'" + ChequeDate.ToString("yyyy/MM/dd") + "'," + BankId + "," + CloseDiscount + "," + userId + ",'"+ReceiptType+"')";
            save = dbObj.InlineExecuteNonQuery(sQry2);

            DataSet ds1 = new DataSet();
            string sQry3 = "select Max(ReceiptID) as ReceiptID from tblReceipt_" + sTableName + "";
            ds1 = dbObj.InlineExecuteDataSet(sQry3);

            ReceiptID = Convert.ToInt32(ds1.Tables[0].Rows[0]["ReceiptID"].ToString());

            return ReceiptID;

        }

        public DataSet chkbankdetails(string table, int BankId, string ChequeNo, int Payment_ID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from " + table + " where ChequeNo = '" + ChequeNo + "' and BankId=" + BankId + " and Payment_ID=" + Payment_ID + "  ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet GetReceipt(string Stable, int ReceiptID)
        {
            DataSet ds = new DataSet();
            string sqry = "select   r.BankName,r.ChequeNo,s.DCNo,s.BillNo,round(s.GrandTotal,0) as GrandTotal,p.PayMode,r.ReceiptNo,r.ReceiptDate,r.NetAmount,c.CustomerName,c.MobileNo,c.Address,tr.Amount,tr.CloseDiscount,tr.Narration  from tblReceipt_" + Stable + " r inner join tblTransReceipt_" + Stable + " tr on r.ReceiptID=tr.ReceiptID inner join tblCustomer c on c.LedgerId=r.CustomerID inner join tblPaymode p on p.PayModeId=r.Payment_ID inner join tblWholesales_" + Stable + " s on s.SalesId=tr.BillNo where r.ReceiptID=" + ReceiptID + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        #endregion

        public DataSet getsalesrecord(string sTableName, string CustomerID, DateTime From, DateTime To, string Type)
        {
            DataSet ds = new DataSet();
            if (Type == "1")
            {
                if (CustomerID == "All")
                {
                    string sQry = "select c.CustomerName as LedgerName,sum(GrandTotal) as GrandTotal from tblwholesales_" + sTableName + " r  inner join tblCustomer c on c.LedgerId=r.CustomerName  where cast(r.BillDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.BillDate as Date)<=  '" + From.ToString("yyyy/MM/dd") + "' group by c.CustomerName,BillDate  order by BillDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select c.CustomerName as LedgerName,sum(GrandTotal) as GrandTotal from tblwholesales_" + sTableName + " r  inner join tblCustomer c on c.LedgerId=r.CustomerName  where cast(r.BillDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.BillDate as Date)<=  '" + From.ToString("yyyy/MM/dd") + "' and CustomerID='" + CustomerID + "'  group by c.CustomerName,BillDate  order by BillDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
            }
            else
            {
                if (CustomerID == "All")
                {
                    string sQry = "select c.CustomerName as LedgerName,cast(r.BillDate as Date) as BillDate1,r.*  from tblwholesales_" + sTableName + " r  inner join tblCustomer c on c.LedgerId=r.CustomerName  where cast(r.BillDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.BillDate as Date)<=  '" + From.ToString("yyyy/MM/dd") + "'  order by BillDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select  c.CustomerName as LedgerName,cast(r.BillDate as Date) as BillDate1,r.* from tblwholesales_" + sTableName + " r  inner join tblCustomer c on c.LedgerId=r.CustomerName  where cast(r.BillDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.BillDate as Date)<=  '" + From.ToString("yyyy/MM/dd") + "' and CustomerID='" + CustomerID + "'  order by BillDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
            }

            return ds;
        }

        public DataSet getreceiptsrecord(string sTableName, string CustomerID, DateTime From, DateTime To, string Type)
        {
            DataSet ds = new DataSet();

            if (Type == "1")
            {
                if (CustomerID == "All")
                {
                    string sQry = "select c.CustomerName as LedgerName,sum(tr.Amount) as Amount,sum(tr.CloseDiscount) as CloseDiscount from tblreceipt_" + sTableName + " r inner join tbltransreceipt_" + sTableName + " tr on tr.receiptid=r.receiptid inner join tblCustomer c on c.LedgerId=r.CustomerID  where cast(r.ReceiptDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.ReceiptDate as Date)<=  '" + From.ToString("yyyy/MM/dd") + "' group by c.CustomerName,ReceiptDate  order by ReceiptDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select c.CustomerName as LedgerName,sum(tr.Amount) as Amount,sum(tr.CloseDiscount) as CloseDiscount from tblreceipt_" + sTableName + " r inner join tbltransreceipt_" + sTableName + " tr on tr.receiptid=r.receiptid inner join tblCustomer c on c.LedgerId=r.CustomerID  where cast(r.ReceiptDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.ReceiptDate as Date)<=  '" + From.ToString("yyyy/MM/dd") + "' group by c.CustomerName ,ReceiptDate  order by ReceiptDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }

            }
            else
            {
                if (CustomerID == "All")
                {
                    string sQry = "select c.CustomerName as LedgerName,ReceiptNo,cast(ReceiptDate as Date) as ReceiptDate1,sum(tr.Amount) as Amount,sum(tr.CloseDiscount) as CloseDiscount from tblreceipt_" + sTableName + " r inner join tbltransreceipt_" + sTableName + " tr on tr.receiptid=r.receiptid inner join tblCustomer c on c.LedgerId=r.CustomerID  where cast(r.ReceiptDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.ReceiptDate as Date)<=  '" + From.ToString("yyyy/MM/dd") + "' group by c.CustomerName,ReceiptNo,ReceiptDate order by ReceiptDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = "select c.CustomerName as LedgerName,ReceiptNo,cast(ReceiptDate as Date) as ReceiptDate1,sum(tr.Amount) as Amount,sum(tr.CloseDiscount) as CloseDiscount from tblreceipt_" + sTableName + " r inner join tbltransreceipt_" + sTableName + " tr on tr.receiptid=r.receiptid inner join tblCustomer c on c.LedgerId=r.CustomerID  where cast(r.ReceiptDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.ReceiptDate as Date)<=  '" + From.ToString("yyyy/MM/dd") + "' group by c.CustomerName,ReceiptNo,ReceiptDate order by ReceiptDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }

            }
            return ds;
        }



        public DataSet getSalesandReceiptReport(string sTableName, string CustomerID, DateTime From, DateTime To, string Type)
        {
            DataSet dsMerge = new DataSet();
            DataSet ds = new DataSet();
            string sQry = "";
            if (Type == "1")
            {
                if (CustomerID == "All")
                {
                    sQry = "select 'Sales' as Type,'All' as DCNo,'All' as Date,c.CustomerName ,sum(GrandTotal) as GrandTotal,'All' as ReceiptNo,cast(0 as money) as Amount,cast(0 as decimal) as CloseDiscount  from tblwholesales_" + sTableName + " r  inner join tblCustomer c on c.LedgerId=r.CustomerName  where cast(r.BillDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.BillDate as Date)<=  '" + To.ToString("yyyy/MM/dd") + "' group by c.CustomerName ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                    dsMerge.Merge(ds);

                    sQry = "select 'Receipt' as Type,'All' as DCNo,'All' as Date,c.CustomerName,cast(0.00 as float) as GrandTotal,'All' as ReceiptNo,sum(tr.Amount) as Amount,sum(tr.CloseDiscount) as CloseDiscount from tblreceipt_" + sTableName + " r inner join tbltransreceipt_" + sTableName + " tr on tr.receiptid=r.receiptid inner join tblCustomer c on c.LedgerId=r.CustomerID  where cast(r.ReceiptDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.ReceiptDate as Date)<=  '" + To.ToString("yyyy/MM/dd") + "' group by c.CustomerName ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                    dsMerge.Merge(ds);

                }
                else
                {
                    sQry = "select 'Sales' as Type,'All' as DCNo,'All' as Date,c.CustomerName,sum(GrandTotal) as GrandTotal,'All' as ReceiptNo,cast(0 as money) as Amount,cast(0 as decimal) as CloseDiscount  from tblwholesales_" + sTableName + " r  inner join tblCustomer c on c.LedgerId=r.CustomerName  where cast(r.BillDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.BillDate as Date)<=  '" + To.ToString("yyyy/MM/dd") + "' and r.CustomerName='" + CustomerID + "'  group by c.CustomerName ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                    dsMerge.Merge(ds);

                    sQry = "select 'Receipt' as Type,'All' as DCNo,'All' as Date,c.CustomerName,cast(0.00 as float) as GrandTotal,'All' as ReceiptNo,sum(tr.Amount) as Amount,sum(tr.CloseDiscount) as CloseDiscount from tblreceipt_" + sTableName + " r inner join tbltransreceipt_" + sTableName + " tr on tr.receiptid=r.receiptid inner join tblCustomer c on c.LedgerId=r.CustomerID  where cast(r.ReceiptDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.ReceiptDate as Date)<=  '" + To.ToString("yyyy/MM/dd") + "' and r.CustomerID='" + CustomerID + "' group by c.CustomerName  ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                    dsMerge.Merge(ds);
                }
            }
            else
            {
                if (CustomerID == "All")
                {
                    sQry = "select 'Sales' as Type,c.CustomerName,DCNo,'' as ReceiptNo,cast(r.BillDate as Date) as Date,GrandTotal,cast(0 as money) as Amount,cast(0 as decimal) as CloseDiscount   from tblwholesales_" + sTableName + " r  inner join tblCustomer c on c.LedgerId=r.CustomerName  where cast(r.BillDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.BillDate as Date)<=  '" + To.ToString("yyyy/MM/dd") + "'  order by BillDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                    dsMerge.Merge(ds);

                    sQry = "select 'Receipt' as Type,c.CustomerName,'' as DCNo,cast(ReceiptNo as nvarchar(50)) as ReceiptNo ,cast(ReceiptDate as Date) as Date,cast(0.00 as float) as GrandTotal,sum(tr.Amount) as Amount,sum(tr.CloseDiscount) as CloseDiscount from tblreceipt_" + sTableName + " r inner join tbltransreceipt_" + sTableName + " tr on tr.receiptid=r.receiptid inner join tblCustomer c on c.LedgerId=r.CustomerID  where cast(r.ReceiptDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.ReceiptDate as Date)<=  '" + To.ToString("yyyy/MM/dd") + "' group by c.CustomerName,ReceiptNo,ReceiptDate order by ReceiptDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                    dsMerge.Merge(ds);
                }
                else
                {
                    sQry = "select  'Sales' as Type,c.CustomerName,DCNo,'' as ReceiptNo,cast(r.BillDate as Date) as Date,GrandTotal,cast(0 as money) as Amount,cast(0 as decimal) as CloseDiscount from tblwholesales_" + sTableName + " r  inner join tblCustomer c on c.LedgerId=r.CustomerName  where cast(r.BillDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.BillDate as Date)<=  '" + To.ToString("yyyy/MM/dd") + "' and r.CustomerName='" + CustomerID + "'  order by BillDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                    dsMerge.Merge(ds);

                    sQry = "select 'Receipt' as Type,c.CustomerName,'' as DCNo,cast(ReceiptNo as nvarchar(50)) as ReceiptNo,cast(ReceiptDate as Date) as Date,cast(0.00 as float) as GrandTotal,sum(tr.Amount) as Amount,sum(tr.CloseDiscount) as CloseDiscount from tblreceipt_" + sTableName + " r inner join tbltransreceipt_" + sTableName + " tr on tr.receiptid=r.receiptid inner join tblCustomer c on c.LedgerId=r.CustomerID  where cast(r.ReceiptDate as Date)>=  '" + From.ToString("yyyy/MM/dd") + "'  and cast(r.ReceiptDate as Date)<=  '" + To.ToString("yyyy/MM/dd") + "' and r.CustomerID='" + CustomerID + "' group by c.CustomerName,ReceiptNo,ReceiptDate order by ReceiptDate desc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                    dsMerge.Merge(ds);

                }
            }

            return dsMerge;
        }


        public DataSet getreceiptrecorddetail(string sTableName, string CustomerID, DateTime From, DateTime To, string Pay,string ReceiptType)
        {
            DataSet ds = new DataSet();
            if (Pay == "All")
            {
                if (CustomerID == "All")
                {
                    string sQry = " select ReceiptType,r.CloseDiscount,w.DCNo,w.BillNo,w.BillDate,r.ReceiptID,r.ReceiptNo,r.ReceiptDate,c.CustomerName,tr.Amount as NetAmount,p.PayMode,tr.narration,case isnull(ChequeNo,0) when  '0' then '-' else ChequeNo end as ChequeNo  from tblReceipt_" + sTableName + " r left join tblTransReceipt_" + sTableName + " tr on r.ReceiptID=tr.ReceiptID inner join tblCustomer c on c.LedgerID=r.CustomerID inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID  inner join tblWholesales_" + sTableName + " w on w.SalesID=tr.BillNo where r.ReceiptDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and ReceiptType='"+ ReceiptType + "'  order by ReceiptNo desc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    string sQry = " select ReceiptType,r.CloseDiscount,w.DCNo,w.BillNo,w.BillDate,r.ReceiptID,r.ReceiptNo,r.ReceiptDate,c.CustomerName,tr.Amount as NetAmount,p.PayMode,tr.narration,case isnull(ChequeNo,0) when  '0' then '-' else ChequeNo end as ChequeNo  from tblReceipt_" + sTableName + " r left join tblTransReceipt_" + sTableName + " tr on r.ReceiptID=tr.ReceiptID inner join tblCustomer c on c.LedgerID=r.CustomerID  inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID   inner join tblWholesales_" + sTableName + " w on w.SalesID=tr.BillNo where r.ReceiptDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and r.CustomerID=" + CustomerID + " and ReceiptType='"+ ReceiptType + "' order by ReceiptNo desc";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
            }
            //else
            //{
            //    if (CustomerID == "All")
            //    {
            //        string sQry = "select ReceiptType,w.BillNo,w.OrderDate as BillDate,r.ReceiptID,r.ReceiptNo,r.ReceiptDate,c.CustomerName,tr.Amount as NetAmount,p.PayMode,tr.narration,case isnull(ChequeNo,0) when  '0' then '-' else ChequeNo end as ChequeNo  from tblReceipt_" + sTableName + " r inner join tblTransReceipt_" + sTableName + " tr on r.ReceiptID=tr.ReceiptID inner join tblCustomer c on c.CustomerID=r.CustomerID  inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID  inner join tblOrder_" + sTableName + " w on w.BillNo=tr.BillNo where r.ReceiptDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and ReceiptType='Order' and Payment_ID=" + Pay + " "
            //                   + " Union All"
            //                   + " select ReceiptType,w.BillNo,w.BillDate,r.ReceiptID,r.ReceiptNo,r.ReceiptDate,c.CustomerName,tr.Amount as NetAmount,p.PayMode,tr.narration,case isnull(ChequeNo,0) when  '0' then '-' else ChequeNo end as ChequeNo  from tblReceipt_" + sTableName + " r inner join tblTransReceipt_" + sTableName + " tr on r.ReceiptID=tr.ReceiptID inner join tblCustomer c on c.CustomerID=r.CustomerID  inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID  inner join tblsales_" + sTableName + " w on w.SalesID=tr.BillNo where r.ReceiptDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and ReceiptType='Sales' and Payment_ID=" + Pay + " order by ReceiptNo desc";
            //        ds = dbObj.InlineExecuteDataSet(sQry);
            //    }
            //    else
            //    {
            //        string sQry = "select ReceiptType,w.BillNo,w.OrderDate as BillDate,r.ReceiptID,r.ReceiptNo,r.ReceiptDate,c.CustomerName,tr.Amount as NetAmount,p.PayMode,tr.narration,case isnull(ChequeNo,0) when  '0' then '-' else ChequeNo end as ChequeNo  from tblReceipt_" + sTableName + " r inner join tblTransReceipt_" + sTableName + " tr on r.ReceiptID=tr.ReceiptID inner join tblCustomer c on c.CustomerID=r.CustomerID  inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID   inner join tblOrder_" + sTableName + " w on w.BillNo=tr.BillNo where r.ReceiptDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and ReceiptType='Order' and r.CustomerID=" + CustomerID + "  and Payment_ID=" + Pay + ""
            //                   + " Union All"
            //                   + " select ReceiptType,w.BillNo,w.BillDate,r.ReceiptID,r.ReceiptNo,r.ReceiptDate,c.CustomerName,tr.Amount as NetAmount,p.PayMode,tr.narration,case isnull(ChequeNo,0) when  '0' then '-' else ChequeNo end as ChequeNo  from tblReceipt_" + sTableName + " r inner join tblTransReceipt_" + sTableName + " tr on r.ReceiptID=tr.ReceiptID inner join tblCustomer c on c.CustomerID=r.CustomerID  inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID   inner join tblsales_" + sTableName + " w on w.SalesID=tr.BillNo where r.ReceiptDate between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and ReceiptType='Sales' and r.CustomerID=" + CustomerID + "  and Payment_ID=" + Pay + " order by ReceiptNo desc";
            //        ds = dbObj.InlineExecuteDataSet(sQry);
            //    }

            //}
            return ds;
        }


        public DataSet getCustomerOutStanding(string Type, string sTableName, string CustomerID, DateTime From, DateTime To)
        {
            DataSet ds = new DataSet();
            string sQry = "";

            if (Type == "2")
            {
                if (CustomerID == "All")
                {
                    sQry = "select DCNo,BillNo,BillDate,c.CustomerName,c.MobileNo,'1' as BillCount,GrandTotal as NetAmount,isnull(Receipt,0) as Receipt ,isnull(ReturnAmount,0) as ReturnAmount,CloseDiscount,CreditNoteAmount,round((GrandTotal - (isnull(Receipt,0) + isnull(ReturnAmount,0)+CloseDiscount+round(CreditNoteAmount,0))),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblWholesales_" + sTableName + " w inner join tblCustomer c on c.LedgerID=w.CustomerName where cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(GrandTotal,0) - (isnull(receipt,0) + isnull(ReturnAmount,0) + isnull(CloseDiscount,0)+round(CreditNoteAmount,0))) >0  order by c.CustomerName asc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    sQry = "select DCNo,BillNo,BillDate,c.CustomerName,c.MobileNo,'1' as BillCount,GrandTotal  as NetAmount,isnull(Receipt,0) as Receipt,isnull(ReturnAmount,0) as ReturnAmount,CloseDiscount,CreditNoteAmount,round((GrandTotal - (isnull(Receipt,0) + isnull(ReturnAmount,0)+CloseDiscount+round(CreditNoteAmount,0))),0) as Balance ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblWholesales_" + sTableName + " w inner join tblCustomer c on c.LedgerID=w.CustomerName where cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "' and '" + To.ToString("yyyy/MM/dd") + "'  and w.PayMode=2   and  (round(GrandTotal,0) - (isnull(receipt,0) + isnull(ReturnAmount,0) + isnull(CloseDiscount,0)+round(CreditNoteAmount,0))) >0 and w.CustomerName='" + CustomerID + "' order by c.CustomerName asc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
            }
            else
            {
                if (CustomerID == "All")
                {
                    sQry = "select '-' as DCNo,'-' as BillNo,'-' as BillDate,COUNT(c.CustomerName) as BillCount,c.CustomerName,c.MobileNo,sum(GrandTotal) as NetAmount,sum(isnull(Receipt,0)) as Receipt ,sum(isnull(ReturnAmount,0)) as ReturnAmount,sum(CloseDiscount) as CloseDiscount,sum(CreditNoteAmount) as CreditNoteAmount,round((sum(GrandTotal) - (sum(isnull(Receipt,0)) + sum(isnull(ReturnAmount,0))+sum(CloseDiscount)+sum(CreditNoteAmount))),0) as Balance  ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblWholesales_" + sTableName + " w inner join tblCustomer c on c.LedgerID=w.CustomerName where cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "'  and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(GrandTotal,0) - (isnull(receipt,0) + isnull(ReturnAmount,0) + isnull(CloseDiscount,0)+round(CreditNoteAmount,0))) >0   group by c.CustomerName,c.MobileNo,PayMode  order by c.CustomerName asc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }
                else
                {
                    sQry = "select '-' as DCNo,'-' as BillNo,'-' as BillDate,COUNT(c.CustomerName)  as BillCount,c.CustomerName,c.MobileNo,sum(GrandTotal) as NetAmount,sum(isnull(Receipt,0)) as Receipt ,sum(isnull(ReturnAmount,0)) as ReturnAmount,sum(CloseDiscount) as CloseDiscount,sum(CreditNoteAmount) as CreditNoteAmount,round((sum(GrandTotal) - (sum(isnull(Receipt,0)) + sum(isnull(ReturnAmount,0))+sum(CloseDiscount)+sum(CreditNoteAmount))),0) as Balance  ,case w.PayMode when '1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblWholesales_" + sTableName + " w inner join tblCustomer c on c.LedgerID=w.CustomerName where cast(w.BillDate as DATE) between '" + From.ToString("yyyy/MM/dd") + "'   and '" + To.ToString("yyyy/MM/dd") + "' and w.PayMode=2  and  (round(GrandTotal,0) - (isnull(receipt,0) + isnull(ReturnAmount,0) + isnull(CloseDiscount,0)+round(CreditNoteAmount,0))) >0   and w.CustomerName='" + CustomerID + "' group by c.CustomerName,c.MobileNo,PayMode  order by c.CustomerName asc ";
                    ds = dbObj.InlineExecuteDataSet(sQry);
                }

            }

            return ds;
        }
        public DataSet getwholeSaleprint(string sTableName, string salesid)
        {
            DataSet ds = new DataSet();
            string sQry = "select s.*,c.*  from  tblWholesales_" + sTableName + " s inner join tblcustomer c on s.customerName=c.ledgerid Where s.SalesID='" + salesid + "'";




            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getTranswholeSaleprint(string sTableName, string salesid)
        {
            DataSet ds = new DataSet();
            string sQry = "select u.uom,uu.UOM as per,t.*,i.* from tblTransWholesales_Prod t inner join tblcategoryuser i on t.Item=i.CategoryUserID inner join tbluom u on u.UOMID=t.UOMID inner join tblUOM uu on uu.UOMID=i.unit where salesid='" + salesid + "'";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet GerCustID_Live(string sMobile)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCustomer where MobileNo='" + sMobile + "' and contacttypeid='1'";
            ds = dbObj.InlineExecuteDataSetMain(sQry);
            return ds;
        }



        public int Insertcust_Live(string CustomerName, string MobileNo, string Address, string IsActive, string UserID)
        {
            int iSuccess = 0;

            string sQry = "insert into tblLedger( LedgerName,GroupID,ContactTypeID) values ('" + CustomerName + "',1,1)";
            iSuccess = dbObj.InlineExecuteNonQueryMain(sQry);

            DataSet ds = new DataSet();
            string sqry = "select isnull(max(LedgerID),1) as LedgerID from tblLedger ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);

            DataSet ds1 = new DataSet();
            string sqry1 = "select isnull(max(CustomerID+1),1) as CustomerID from tblCustomer ";
            ds1 = dbObj.InlineExecuteDataSetMain(sqry1);

            string sQry1 = "insert into tblCustomer( CustomerName,MobileNo,Address,IsActive,LedgerID,CustomerID,ContactTypeID,UserID) values ('" + CustomerName + "','" + MobileNo + "','" + Address + "','" + IsActive + "'," + ds.Tables[0].Rows[0]["LedgerID"].ToString() + "," + ds1.Tables[0].Rows[0]["CustomerID"].ToString() + ",1,'" + UserID + "')";
            iSuccess = dbObj.InlineExecuteNonQueryMain(sQry1);
            return iSuccess;

        }


        public DataSet GetDash_sales(string sTableName, string FromDate, string ToDate)
        {
            DataSet ds;
            string sQry = "select sum(s.total)as Total, sp.paymode as  SalesType,st.paymenttype from tblsales_" + sTableName + " as  s inner join tblsalespaymode as sp on sp.value=s.ipaymode " +
" inner join tblsalestype as st on st.SalesTypeID=s.salestype " +
" where cast (billdate as Date)>='" + FromDate + "' and cast (billdate as Date)<='" + ToDate + "' and cancelstatus='No' group by paymode,st.paymenttype,VALUE ORDER BY VALUE asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }



        public DataSet GetBranch_New(string stable)
        {
            DataSet ds = new DataSet();
            string sQry = "";
            //string sQry = "select * from tblworkers where location ='" + stable + "' and Role='Billing' and code='" + name + "'";

            if (stable == "admin")
            {
                sQry = "select * from tblBranch where IsActive='Yes' and BranchType='0'";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }

            else
            {

                if (stable != "All")
                    sQry = "select * from tblBranch where IsActive='Yes' and BranchType='0' and BranchCode='" + stable + "'";
                else
                    sQry = "select * from tblBranch where IsActive='Yes' and BranchType='0'";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            return ds;

        }


        public DataSet getbranch_prod()
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblbranch where IsActive='Yes' and BranchType='2'";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet chkEmployeeUsername(string sUsername)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblemployeelogin where username='" + sUsername + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet chkEmployeeUsername_Edit(string sUsername, string ledgerid)
        {
            DataSet ds = new DataSet();
           
            //            string sqry = "select * from tblledger where username='" + sUsername + "' and ledgerid<>'" + ledgerid + "'";
             string sqry = "select * from tblledger where ledgername='" + sUsername + "' and ledgerid<>'" + ledgerid + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

            //            DataSet ds = new DataSet();
            //<<<<<<< HEAD
            //            string sqry = "select * from tblledger where username='" + sUsername + "' and ledgerid<>'" + ledgerid + "'";
            //=======
            //             string sqry = "select * from tblledger where ledgername='" + sUsername + "' and ledgerid<>'" + ledgerid + "'";
            //>>>>>>> 7dad703fa8665153a4c95715dc35a1a29ada4ea7
            //            //string sqry = "select * from tblledger where ledgerid<>'" + ledgerid + "'";
            //            ds = dbObj.InlineExecuteDataSet(sqry);
            //            return ds;
        }


        public DataSet getSubStatusName(string typeid)
        {
            DataSet ds = new DataSet();
            string sqry = "select SubStatusId,SubStatusName from tblsubstatus where type='" + typeid + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        //not used
        public int IUpdateEmployee_Substatus(string Billno, string branchcode, string Empid, string Bookno)
        {
            int i = 0;

            string sqry = "Update tblordersummary_" + branchcode + " set Employeeid='" + Empid + "' where billno='" + Billno + "' ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }


        public int InsertSubOrderStatus(string billno, string brancode, string bookno, int empid, int substatusid)
        {
            int i = 0;

            //string sqry = "Update tblordersummary_" + brancode + " set Deliverstatus='" + rowtext + "',Deliveryid='" + Rowvalue + "'  where billno='" + billno + "' ";
            //i = dbObj.InlineExecuteNonQuery(sqry);

            string ordestatus = "insert into tblSubOrderSummary(OrderNo,BookNo,BranchCode,SubstatusId,EmpId)values('" + billno + "','" + bookno + "','" + brancode + "'," + substatusid + "," + empid + ")";
            i = dbObj.InlineExecuteNonQuery(ordestatus);

            //if (substatusid == 3)
            //{
            //    InsertStatus(billno, brancode, "4", "Completed", "");
            //}

            return i;


        }

        public int UpdateSubOrderStatus(string subordersummaryid, string empid)
        {
            int i = 0;



            string ordestatus = "Update tblsubordersummary set EmpId='" + empid + "' where SubOrderSummaryId='" + subordersummaryid + "'";
            i = dbObj.InlineExecuteNonQuery(ordestatus);


            return i;


        }

        public DataSet getSubOrdersummary()
        {
            DataSet ds = new DataSet();
            string sqry = "select *,case when Status='N' then 'Work Allotted' else case when Status='Y' then 'Processing' else 'Completed' end end  as ProcessStatus from tblsuborderSummary";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet getallempandsupp_name(string ContactTypeID, int empid)
        {
            DataSet ds = new DataSet();
            string sQry = "select  ct.ContactType,* from tblCustomer c inner join tblcontacttype ct on ct.ContactID=c.ContactTypeID where ContactTypeID in (" + ContactTypeID + ") and c.IDCust='" + empid + "' order by CustomerName asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int updatemailstatus(string date, string emp)
        {
            int iSuccess = 0;
            string sQry = "insert into tblEmailStatus (Date,Employee,SalesInvoice,OrderInvoice)values('" + date + "','" + emp + "','Y','Y')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;

        }



        //Newly added functionalities

        # region "RequestStockSettings"
        public DataSet CheckRequestStockSettings(DateTime fromdate, DateTime todate)
        {
            int iSuccess = 0;
            string categoryid = "";

            //string sQry = "select m.* ,t.* from tblrequeststocksettingsmaster m inner join tbltransRequestStockSettings t on m.requeststockid=t.requeststocksettingsid and ((fromtime>='" + fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "' and fromtime<'" + todate.ToString("yyyy/MM/dd HH:mm:ss") + "') or (totime>'" + fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "' and totime<='" + todate.ToString("yyyy/MM/dd HH:mm:ss") + "'))";
            string sQry = "select m.* ,t.* from tblrequeststocksettingsmaster m inner join tbltransRequestStockSettings t on m.requeststockid=t.requeststocksettingsid and ((convert(varchar(8), fromtime, 108)>='" + fromdate.ToString("HH:mm:ss") + "') and (convert(varchar(8), fromtime, 108)<'" + todate.ToString("HH:mm:ss") + "'))or ((convert(varchar(8), totime, 108)>'" + fromdate.ToString("HH:mm:ss") + "') and (convert(varchar(8), totime, 108)<='" + todate.ToString("HH:mm:ss") + "'))";
            DataSet dsmaster = dbObj.InlineExecuteDataSet(sQry);

            return dsmaster;

        }

        public DataSet CheckRequestStockSettings_edit(DateTime fromdate, DateTime todate, string requeststocksettingsid)
        {
            int iSuccess = 0;
            string categoryid = "";

            //string sQry = "select m.* ,t.* from tblrequeststocksettingsmaster m inner join tbltransRequestStockSettings t on m.requeststockid=t.requeststocksettingsid and ((fromtime>='" + fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "' and fromtime<'" + todate.ToString("yyyy/MM/dd HH:mm:ss") + "') or (totime>'" + fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "' and totime<='" + todate.ToString("yyyy/MM/dd HH:mm:ss") + "')) and m.RequestStockId<>'" + requeststocksettingsid + "'";
            string sQry = "select m.* ,t.* from tblrequeststocksettingsmaster m inner join tbltransRequestStockSettings t on m.requeststockid=t.requeststocksettingsid and ((convert(varchar(8), fromtime, 108)>='" + fromdate.ToString("HH:mm:ss") + "') and (convert(varchar(8), fromtime, 108)<'" + todate.ToString("HH:mm:ss") + "'))or ((convert(varchar(8), totime, 108)>'" + fromdate.ToString("HH:mm:ss") + "') and (convert(varchar(8), totime, 108)<='" + todate.ToString("HH:mm:ss") + "')) and m.RequestStockId<>'" + requeststocksettingsid + "'";
            DataSet dsmaster = dbObj.InlineExecuteDataSet(sQry);

            return dsmaster;

        }

        public int InsertRequestStockSettings(DateTime fromdate, DateTime todate, string delaydays, DataSet ds)
        {
            int iSuccess = 0;
            string categoryid = "";
            string sQry = "Insert into tblRequestStockSettingsMaster(FromTime,ToTime,Delaydays)Values('" + fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "','" + todate.ToString("yyyy/MM/dd HH:mm:ss") + "','" + delaydays + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            sQry = "select max(RequestStockId) as RequestStockId from tblRequestStockSettingsMaster";
            DataSet dsmaster = dbObj.InlineExecuteDataSet(sQry);
            string id = dsmaster.Tables[0].Rows[0]["RequestStockId"].ToString();

            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int k = 0; k < ds.Tables[0].Rows.Count; k++)
                {
                    categoryid = ds.Tables[0].Rows[k]["CategoryID"].ToString();
                    sQry = "insert into tbltransRequestStockSettings(RequestStockSettingsId,CategoryId) values ('" + id + "','" + categoryid + "')";
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry);
                }
            }
            return iSuccess;

        }

        public int UpdateRequestStockSettings(string RequestStockId, DateTime fromdate, DateTime todate, string delaydays, DataSet ds)
        {
            int iSuccess = 0;
            string categoryid = "";
            string sQry = "Update tblRequestStockSettingsMaster set FromTime='" + fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "',ToTime='" + todate.ToString("yyyy/MM/dd HH:mm:ss") + "',Delaydays='" + delaydays + "' where RequestStockId='" + RequestStockId + "'";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            sQry = "Delete  from tbltransRequestStockSettings where RequestStockSettingsId='" + RequestStockId + "'";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            //string id = dsmaster.Tables[0].Rows[0]["RequestStockId"].ToString();

            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int k = 0; k < ds.Tables[0].Rows.Count; k++)
                {
                    categoryid = ds.Tables[0].Rows[k]["CategoryID"].ToString();
                    sQry = "insert into tbltransRequestStockSettings(RequestStockSettingsId,CategoryId) values ('" + RequestStockId + "','" + categoryid + "')";
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry);
                }
            }
            return iSuccess;

        }

        public DataSet GetRequestStockSettings()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblRequestStockSettingsMaster ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet GretTransRequestStockSettings(string RequestStockId)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbltransRequestStockSettings where RequestStockSettingsid='" + RequestStockId + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }


        public DataSet getRequestStockSettingsvalues(string RequestStockId)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblRequestStockSettingsMaster where RequestStockId='" + RequestStockId + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public int deleteRequestStockSettings(string RequestStockId)
        {
            int iSuccess = 0;
            string sQry = string.Empty;


            sQry = "Delete  from tblRequestStockSettingsMaster where RequestStockId='" + RequestStockId + "'";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            sQry = "Delete  from tbltransRequestStockSettings where RequestStockSettingsId='" + RequestStockId + "'";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }

        #endregion "RequestStockSettings"

        #region "SyncReqStockSettings"
        public DataSet getReqStockdatafromsever(string server)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblRequestStockSettingsMaster";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet getTransReqStockdatafromsever(string server)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tbltransRequestStockSettings";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public int syncinsertReqStocksetting(int RequestStockId, DateTime fromdate, DateTime todate, string delaydays)
        {
            int i = 0;
            string sQry = "SET IDENTITY_INSERT [dbo].[tblRequestStockSettingsMaster] ON  Insert into tblRequestStockSettingsMaster(RequestStockId,FromTime,ToTime,Delaydays)Values(" + RequestStockId + ",'" + fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "','" + todate.ToString("yyyy/MM/dd HH:mm:ss") + "','" + delaydays + "')  SET IDENTITY_INSERT [dbo].[tblRequestStockSettingsMaster] OFF ";
            i = dbObj.InlineExecuteNonQuery(sQry);
            return i;
        }

        public int syncinsertTransReqStocksetting(int TransRequestStockSettingsId, string RequestStockSettingsId, string CategoryId)
        {
            int i = 0;

            string sqry = "SET IDENTITY_INSERT [dbo].[tbltransRequestStockSettings] ON insert into tbltransRequestStockSettings(TransRequestStockSettingsId,RequestStockSettingsId,CategoryId) values (" + TransRequestStockSettingsId + ",'" + RequestStockSettingsId + "','" + CategoryId + "')  SET IDENTITY_INSERT [dbo].[tbltransRequestStockSettings] OFF ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }
        #endregion "SyncReqStockSettings"

        # region "CategorysettingsMAster"
        public DataSet CategorySettings()
        {
            DataSet ds = new DataSet();
            string sqry = "select CatsettingsId,a.CategoryId,Category from tblcategorysettingsMAster a inner join tblcategory b on b.categoryid=a.CategoryId";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int InsertCategorySettings(string CategoryId, DataSet dstrans)
        {
            int iSuccess = 0, j = 0;
            string sQry = "insert into tblcategorysettingsMaster(CategoryId) values ('" + CategoryId + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            sQry = "select max(catsettingsId) as catsettingsId from tblcategorysettingsMaster";
            ds = dbObj.InlineExecuteDataSet(sQry);

            iSuccess = Convert.ToInt32(ds.Tables[0].Rows[0]["catsettingsId"]);

            for (int i = 0; i < dstrans.Tables[0].Rows.Count; i++)
            {
                sQry = "insert into tbltranscategorysettings(catsettingsId,BranchCode,IsActive) values ('" + iSuccess + "','" + dstrans.Tables[0].Rows[i]["Branchcode"] + "','" + dstrans.Tables[0].Rows[i]["IsActive"] + "')";
                j = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;
        }

        public DataSet CatsettingsSearch(string CategoryId)
        {
            string sqry = string.Empty;
            DataSet ds = new DataSet();
            sqry = "select * from tblcategorysettingsMaster where categoryId='" + CategoryId + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }


        public DataSet CategorySettingssearchforupdate(string catSettingsId, string categoryId)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblcategorysettingsMaster where categoryId='" + categoryId + "' and  catsettingsId<>'" + catSettingsId + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public int updateCategorySettingsMaster(string catSettingsId, string CategoryId, DataSet dstrans)
        {
            int iSuccess = 0, j = 0;
            string sQry = "update tblcategorysettingsMaster set CategoryId='" + CategoryId + "' where catsettingsId='" + catSettingsId + "'";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            sQry = "delete from tbltranscategorysettings where catsettingsId='" + catSettingsId + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);


            for (int i = 0; i < dstrans.Tables[0].Rows.Count; i++)
            {
                sQry = "insert into tbltranscategorysettings(catsettingsId,BranchCode,IsActive) values ('" + catSettingsId + "','" + dstrans.Tables[0].Rows[i]["Branchcode"] + "','" + dstrans.Tables[0].Rows[i]["IsActive"] + "')";
                j = dbObj.InlineExecuteNonQuery(sQry);
            }
            return iSuccess;
        }

        public DataSet editCatsettings(string catSettingsId)
        {

            DataSet ds = new DataSet();
            string sQry = "select * from tblcategorysettingsMaster  where catSettingsId='" + catSettingsId + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        public DataSet editTransCatsettings(string catSettingsId)
        {

            DataSet ds = new DataSet();
            string sQry = "select * from tbltranscategorysettings  where catSettingsId='" + catSettingsId + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        public int deleteCatsettings(string catSettingsId)
        {
            int iSucess = 0;

            string sQry = "delete from tblcategorysettingsMaster where catsettingsId='" + catSettingsId + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            sQry = "delete from tbltranscategorysettings where catsettingsId='" + catSettingsId + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }
        #endregion

        #region SYNC ING.CATEGORY / INGREDIENT
        public int syncinsertIngcategory(int IngCatID, string IngreCategory, string IsActive)
        {
            int i = 0;
            string sqry = " SET IDENTITY_INSERT [dbo].[tblIngridentsCategory] ON " +
                //" Insert into tblcategory Categoryid='" + Categoryid + "',Category='" + Category + "',CategoryCode='" + CategoryCode + "',IsActive='" + IsActive + "',IsLiveKitchen='" + IsLiveKitchen + "',ProductionType='" + ProductionType + "',Request='" + Request + "',poduction='" + poduction + "',PrintCategory='" + PrintCategory + "',ManualGrn='" + ManualGrn + "' where catid='" + catid + "'";
                " INSERT [dbo].[tblIngridentsCategory] ([IngCatID], [IngreCategory], [IsActive]) " +
            "  VALUES (" + IngCatID + ", '" + IngreCategory + "', '" + IsActive + "') " +
            " SET IDENTITY_INSERT [dbo].[tblIngridentsCategory] OFF  ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public int syncinsertIng(int IngridID, string IngredientName, string SupplierName, string Costperkg, string Quantity, string UserID, string Units, string IngCatID, string IsActive, string IngredientCode, string IsAllow, string TaxId, string TaxValue, string HsnCode)
        {
            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblIngridents] ON " +
                //" Insert into tblcategory Categoryid='" + Categoryid + "',Category='" + Category + "',CategoryCode='" + CategoryCode + "',IsActive='" + IsActive + "',IsLiveKitchen='" + IsLiveKitchen + "',ProductionType='" + ProductionType + "',Request='" + Request + "',poduction='" + poduction + "',PrintCategory='" + PrintCategory + "',ManualGrn='" + ManualGrn + "' where catid='" + catid + "'";
                " INSERT [dbo].[tblIngridents] ([IngridID], [IngredientName], [SupplierName], [Costperkg], [Quantity], [UserID], [Units], [IngCatID], [IsActive], " +
            " [IngredientCode], [IsAllow], [TaxId], [TaxValue], [HsnCode]) " +
            "  VALUES (" + IngridID + ", '" + IngredientName + "', '" + SupplierName + "', '" + Costperkg + "', '" + Quantity + "', '" + UserID + "', '" + Units + "', '" + IngCatID + "','" + IsActive + "', '" + IngredientCode + "', '" + IsAllow + "','" + TaxId + "','" + TaxValue + "','" + HsnCode + "') " +
            " SET IDENTITY_INSERT [dbo].[tblIngridents] OFF ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public DataSet getIngcategorygetdatafromsever(string server)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblIngridentsCategory";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }

        public DataSet getIngdatafromsever(string server)
        {

            DataSet ds = new DataSet();
            string getcat = string.Empty;
            getcat = "Select * from tblIngridents";
            if (server == "Live")
            {
                ds = dbObj.InlineExecuteDataSetMain(getcat);
            }
            else
            {
                ds = dbObj.InlineExecuteDataSet(getcat);
            }
            return ds;


        }
        #endregion

        #region ONLINE ORDER
        public DataSet kotlist(string table)
        {
            DataSet save = new DataSet();
            //  string sQry = "select * from tblsales_"+table+" where istransfer=0 ";
            string sQry = "select distinct Billno from tblsales_" + table + " as s inner join tbltranssales_" + table + "  as ts on ts.salesid=s.billno inner join " +
                        " tblcategoryuser as cu on cu.itemid=ts.subcategoryid where istransfer=0  and cu.iskitchen=1";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet kotlistDisplay(string stable)
        {
            DataSet save = new DataSet();
            //  string sQry = "select * from tblsales_"+table+" where istransfer=0 ";
            // string sQry = "select distinct Billno,Type from tblOnlineOrderNumber where idDone=0";
            string sqry = "select distinct a.onlineid,a.OnlineNumber, " +
                        " b.PaymentType from tblonlineordernumber as a inner join tblsalestype as b on b.SalesTypeID=a.OnlineType inner join tbltransordernumber as c on a.onlineid=c.onlineid " +
                        " where a.status='N' and a.branchcode='" + stable + "' group by a.onlineid,a.OnlineNumber,b.PaymentType " +
                        "  order by a.onlineid asc";
            save = dbObj.InlineExecuteDataSetMain(sqry);
            return save;

        }


        public DataSet kotlistDisplayKT(string stable)
        {
            DataSet save = new DataSet();
            //  string sQry = "select * from tblsales_"+table+" where istransfer=0 ";
            //  string sQry = "select distinct Billno,Type from tblDisplayKitchen_" + stable + " where idDone=0";
            string sQry = "select distinct KotNo as Billno, BillType as Type from tblKOT_" + stable + " where IsKitchenComplete=0 and IEdit=0";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet kotlistitems(string table, string onlineid)
        {
            DataSet save = new DataSet();
            //string sQry = "select * from tblTransSales_" + table + " a,tblcategoryuser b where  a.subcategoryid=b.ItemId and a.salesid='" + billno + "' and b.iskitchen=1 ";

            //string sQry = "select * from tblonlineordernumber a,tblcategoryuser b where  a.ItemId=b.ItemId and a.BillNo='" + billno + "' " +
            //    " and convert(date,Date_Time)=convert(date,getdate()) and idDone=0 and b.iskitchen=1 ";

            string sQry = "select *,'0' as Available_QTY from tblOnlineOrderNumber as a inner join tbltransordernumber as b on a.onlineid=b.onlineid " +
                    " inner join tblCategoryUser as c on c.CategoryUserID=b.SubCategoryID where a.Status='N' and a.branchcode='" + table + "' and a.onlineid='" + onlineid + "'";

            save = dbObj.InlineExecuteDataSetMain(sQry);
            return save;

        }

        public DataSet kotlistitemsKT(string table, string billno)
        {
            DataSet save = new DataSet();
            //string sQry = "select * from tblTransSales_" + table + " a,tblcategoryuser b where  a.subcategoryid=b.ItemId and a.salesid='" + billno + "' and b.iskitchen=1 ";

            string sQry = "select * from tblKOT_" + table + " a,tblcategoryuser b where  a.SubCategoryID=b.ItemId and a.KotNo='" + billno + "' and convert(date,KotDate)=convert(date,getdate()) and IsKitchenComplete=0  and IEdit=0";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public DataSet Nholdedonlinesales(int ID, string sTable, string Mode)
        {
            DataSet ds = new DataSet();
            string sqry = "";

            sqry = "select * from tblOnlineOrderNumber as  a inner join tbltransordernumber as b on a.onlineid=b.onlineid inner join tblcategoryuser c on b.subcategoryid=c.CategoryUserID "
                   + "  where a.onlineid='" + ID + "' and a.status='N' order by Kotno ";
            ds = dbObj.InlineExecuteDataSetMain(sqry);
            return ds;
        }



        public DataSet getstockcheckonlinesales(string iSubCatID, string stable)
        {
            DataSet ds = new DataSet();
            string sQry = " select *,'0' as comboo,'1' as QTY from tblcategoryuser a,tblStock_" + stable + " b where  a.CategoryUserID=b.SubCategoryID and   a.CategoryUserID=" + iSubCatID + "  and isdelete=0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet gettransonlieitem(string onlineid)
        {
            DataSet ds = new DataSet();
            //string sQry = " select *,'0' as comboo,'1' as QTY,categoryuserid as StockID,'0' as Available_QTY,'2019-04-01' as Expirydate from tblcategoryuser a where " +
            //    " a.CategoryUserID=" + iSubCatID + "  and isdelete=0 ";


            string sQry = "select  b.*,c.*,'0' as comboo,'1' as QTY,categoryuserid as StockID,'0' as Available_QTY,'2019-04-01' as Expirydate from  tblOnlineOrderNumber as a inner join tbltransOrderNumber as b on b.onlineid=a.onlineid " +
" inner join tblCategoryUser as c on c.CategoryUserID=b.subcategoryid  inner join tblcategory as d on d.categoryid=b.categoryid " +
" where a.onlineid='" + onlineid + "' and b.status='N' and a.status='N'";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int Deletetransitem(string onlineid)
        {
            int idelete = 0;
            //string sQry = " select *,'0' as comboo,'1' as QTY,categoryuserid as StockID,'0' as Available_QTY,'2019-04-01' as Expirydate from tblcategoryuser a where " +
            //    " a.CategoryUserID=" + iSubCatID + "  and isdelete=0 ";


            string sQry = "delete from tbltransOrderNumber  where onlineid='" + onlineid + "'";

            idelete = dbObj.InlineExecuteNonQuery(sQry);
            return idelete;
        }

        public int kitchenkotcomplete(string sName, string billno)
        {
            int save = 0;
            string sQry = "update tblKOT_" + sName + " set IsKitchenComplete=1 where KotNo=" + billno + "";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;
        }
        #endregion

        #region OTP Check


        public int InsertOTPDetails(string Email, string OTP)
        {
            int isave = 0;
            string sqry = "insert into tblDetails (Email,OTP) values('" + Email + "','" + OTP + "')";
            isave = dbObj.InlineExecuteNonQuery(sqry);
            return isave;
        }

        public DataSet CheckOTP(string Email, string OTP)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblDetails where Email ='" + Email + "'and OTP='" + OTP + "' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet DeleteOTP()
        {
            DataSet ds = new DataSet();
            string sQry = "delete tblDetails";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        #endregion

        #region AdminSetting

        public int insertSetting(DateTime FromDate, DateTime ToDate)
        {
            int iSuccess = 0;

            string sQry = "insert into tblSettingOTP(FromDate, ToDate, CreatedDate)values ('" + Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") + "','" + Convert.ToDateTime(ToDate).ToString("yyyy/MM/dd") + "',getdate())";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);
            return iSuccess;
        }


        public DataSet GetSetting()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from  tblSettingOTP";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet DeleteSetting()
        {
            DataSet ds = new DataSet();
            string sqry = "delete  tblSettingOTP";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #endregion

        public DataSet LoginImage(string BranchCode)
        {
            DataSet ds = new DataSet();
            string sQry = " select * from tbllogin where branchcode='" + BranchCode + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet LoginImage()
        {
            DataSet ds = new DataSet();
            string sQry = " select * from tbllogin where  Imagepath >''";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet PrintFooter()
        {
            DataSet ds = new DataSet();
            string sQry = " select * from tblCompanyDetails";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GiveRightsToAdmin()
        {
            DataSet ds = new DataSet();
            string sqry = "select max(EmpID) as EmpID from tblworkers ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;


        }


        //public int InserAdminUserAccess()
        //{
        //    int iSuccess = 0;

        //    int optipns = 0;
        //    DataSet dss = new DataSet();
        //    DataSet dss1 = new DataSet();
        //    DateTime dt = DateTime.Now;




        //    bool Read = Convert.ToBoolean(true);
        //    bool Edit = Convert.ToBoolean(true);
        //    bool Delete = Convert.ToBoolean(true);
        //    bool Save = Convert.ToBoolean(true);

        //    string sQryopt = "insert into tbluserrole(userid,userName,screen,active,screenid,screencode,Empid,LastUEmpid,[Read],Edit,[Delete],[Save])values ('1','admin','MasterMenu','true','162','Mbranch','1','1','" + Read + "','" + Edit + "','" + Delete + "','" + Save + "')";
        //    optipns = dbObj.InlineExecuteNonQuery(sQryopt);




        //    return iSuccess;
        //}
        public int InserAdminUserAccess(DataSet role)
        {
            int iSuccess = 0;

            int optipns = 0;
            DataSet dss = new DataSet();
            DataSet dss1 = new DataSet();
            DateTime dt = DateTime.Now;


            string dbqry = "select max(EmpID) as EmpID from tblworkers ";
            dss = dbObj.InlineExecuteDataSet(dbqry);

            int user = Convert.ToInt32(dss.Tables[0].Rows[0]["EmpID"]);

            if (role.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < role.Tables[0].Rows.Count; i++)
                {
                    string usernamee = role.Tables[0].Rows[i]["username"].ToString();
                    string screen = role.Tables[0].Rows[i]["screen"].ToString();
                    bool active = Convert.ToBoolean(true);
                    int screenid = Convert.ToInt32(role.Tables[0].Rows[i]["screenid"]);
                    string screencode = Convert.ToString(role.Tables[0].Rows[i]["screencode"]);

                    bool Read = Convert.ToBoolean(true);
                    bool Edit = Convert.ToBoolean(true);
                    bool Delete = Convert.ToBoolean(true);
                    bool Save = Convert.ToBoolean(true);

                    string sQryopt = "insert into tbluserrole(userid,userName,screen,active,screenid,screencode,Empid,LastUEmpid,[Read],Edit,[Delete],[Save])values ('" + user + "','" + usernamee + "','" + screen + "','" + active + "','" + screenid + "','" + screencode + "','1','1','" + Read + "','" + Edit + "','" + Delete + "','" + Save + "')";
                    optipns = dbObj.InlineExecuteNonQuery(sQryopt);

                }
            }

            return iSuccess;
        }

        public DataSet GetNoBranch()
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tblCompanyDetails";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetBranchCount()
        {
            DataSet ds = new DataSet();

            string sqry = "select count(BranchId)TotalBranch from tblBranch where BranchType=0";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GetLoginID()
        {
            DataSet ds = new DataSet();

            string sqry = "select * from tbllogin where userID=1";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #region Direct Goods Transfer

        public DataSet CheckDirectGoodTrasnfer(string TableName, int DescriptionId, double Prod_Qty)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblProductionQty_" + TableName + "  where DescriptionId=" + DescriptionId + " and Prod_Qty>=" + Prod_Qty + " ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int InsertDirectGoodTrasnfer(string TableName, string Branch, DateTime DC_Date, string SentBY, string UserId)
        {
            int isave = 0;

            DataSet ds = new DataSet();
            //string sqry = "select isnull(max(DC_NO)+1,1) as DC_No from tblGoodTransfer_" + TableName + "";
            string sqry = "select isnull(max(DC_NO+1),1) as DC_No from tblGoodTransfer_" + TableName + "";
            ds = dbObj.InlineExecuteDataSet(sqry);


            // get trip number 
            string sq = " select isnull(max(Tripno+1),1) as no from tblgoodtransfer_" + TableName + "  where branch='" + Branch + "' and cast(DC_date as date) >='" + Convert.ToDateTime(DC_Date).ToString("yyyy/MM/dd") + "'";
            DataSet dss = dbObj.InlineExecuteDataSet(sq);

            if (dss.Tables[0].Rows.Count > 0)
            {
                string tripno = dss.Tables[0].Rows[0]["no"].ToString();



                string sQry = "insert into tblGoodTransfer_" + TableName + " (Branch,DC_NO,DC_Date,RequestNO,Status,isCancel,ProductionName,isTransfer,BranchCode,IsReceived,SentBY,BranchReqNo,UserId,Tripno,Dispatchstatus) values('" + Branch + "'," + ds.Tables[0].Rows[0]["DC_No"].ToString() + ",'" + Convert.ToDateTime(DC_Date).ToString("yyyy/MM/dd hh:mm tt") + "',0,'',0,'Production',0,'" + Branch + "',0,'" + SentBY + "','0'," + UserId + ",'" + tripno + "','Y')";
                isave = dbObj.InlineExecuteNonQuery(sQry);
            }

            return Convert.ToInt32(ds.Tables[0].Rows[0]["DC_No"].ToString());
        }

        public int InsertDirectTransGoodTrasnfer(string TableName, int DC_No, string BranchCode, int CategoryId, int DescriptionId, double Order_Qty, double TRate, double TGST)
        {
            int isave = 0;
            string sQry = "insert into tblTransGoodsTransfer_" + TableName + " (DC_No,CategoryId,DescriptionId,Units,Order_Qty,Received_Qty,BranchID,isStocked,RequestNo,BranchCode,Damage_Qty,Missing_Qty,BranchReqNo,TRate,TGST) values('" + DC_No + "','" + CategoryId + "','" + DescriptionId + "','0','" + Order_Qty + "','" + Order_Qty + "',0,0,0,'" + BranchCode + "',0,0,'0'," + TRate + "," + TGST + ")";
            isave = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "update tblProductionQty_" + TableName + " set Prod_Qty=Prod_Qty-'" + Order_Qty + "' where DescriptionId=" + DescriptionId + "  ";
            isave = dbObj.InlineExecuteNonQuery(sQry1);

            return isave;
        }

        public DataSet GetDirectGoodTrasnfer(string TableName)
        {
            DataSet ds = new DataSet();
            string sqry = "select s.DC_NO,DC_Date,SentBY,SUM(Order_Qty) as Qty,Branch,Status   from  tblGoodTransfer_" + TableName + " s inner join tblTransGoodsTransfer_" + TableName + " ts  on ts.DC_No=s.DC_NO group by s.DC_NO,DC_Date,SentBY,Branch,Status  order by DC_Date desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public DataSet GetDirectGoodTrasnferDetails(string TableName, int DC_NO)
        {
            DataSet ds = new DataSet();
            string sqry = "select s.DC_NO,DC_Date,SentBY,c.Category,cu.Definition,Order_Qty as Qty,u.UOM as Unit  from tblGoodTransfer_" + TableName + " s inner join tblTransGoodsTransfer_" + TableName + " ts  on ts.DC_No=s.DC_NO inner join tblCategoryUser cu on cu.CategoryUserID=ts.DescriptionId inner join tblcategory c on c.Categoryid=cu.CategoryID inner join tblUOM u on u.UOMID=cu.unit  where s.DC_No=" + DC_NO + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet itemforreqestNew_DirectTransfer_Barcodesearch(string categoryid, string stable, string searchbarcode)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,c.Prod_Qty as Qty,b.mrp  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit inner join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.poduction='1' and c.Prod_Qty >0 and  b.barcode ='" + searchbarcode + "' order by category asc";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet itemforreqestNew_DirectTransfer_Barcodesearch(string categoryid, string stable, string searchbarcode, string prodstockoption)
        {
            DataSet ds = new DataSet();
            string sqry = "";
            if (prodstockoption == "1")
            {
                sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,c.Prod_Qty as Qty,b.mrp  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit inner join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.poduction='1' and c.Prod_Qty >0 and  b.barcode ='" + searchbarcode + "' order by category asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else if (prodstockoption == "2")
            {
                sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,isnull(c.Prod_Qty,0) as Qty,b.mrp  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit left join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.poduction='1'  and  b.barcode ='" + searchbarcode + "' order by category asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }

            return ds;
        }

        public DataSet itemforreqestNew_DirectTransfer(string categoryid, string stable, string catid)
        {
            DataSet ds = new DataSet();
            if (categoryid == "All")
            {
                // string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,c.Prod_Qty as Qty,b.mrp  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit inner join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.poduction='1' and c.Prod_Qty >0 and a.categoryid in " + catid + "   order by category asc";

                string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,c.Prod_Qty as Qty,b.mrp,b.serial  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit inner join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.poduction='1' and c.Prod_Qty >0  order by category asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,c.Prod_Qty as Qty,b.mrp,b.serial from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit inner join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.categoryid=" + categoryid + " and c.Prod_Qty >0  order by category asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            return ds;
        }

        public DataSet itemforreqestNew_DirectTransfer_search(string categoryid, string stable, string searchtext)
        {
            DataSet ds = new DataSet();
            //if (categoryid == "All")
            {
                string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,c.Prod_Qty as Qty,b.mrp,b.serial  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit inner join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.poduction='1' and c.Prod_Qty >0 and (a.category like '%" + searchtext + "%' or b.definition like '%" + searchtext + "%')   order by category asc";

                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            //else
            //{
            //    string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,c.Prod_Qty as Qty,b.mrp from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit inner join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.categoryid=" + categoryid + " and c.Prod_Qty >0  order by category asc";
            //    ds = dbObj.InlineExecuteDataSet(sqry);
            //}
            return ds;
        }

        public int normalsalescancelDirect(string table, int salesid, string Ref, string stable, string reason)
        {
            int iSuccess = 0;
            int iupdate = 0;

            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet dqty = new DataSet();

            string sqry1 = "select * from tblsales_" + table + " where orderno=0 and cancelstatus='No' and salesid='" + salesid + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry1);

            if (ds.Tables[0].Rows.Count > 0)
            {

                int billno = Convert.ToInt32(ds.Tables[0].Rows[0]["billNo"]);
                //int salesidd = Convert.ToInt32(ds.Tables[0].Rows[0]["salesid"]);

                string strans = "select * from tbltranssales_" + table + " where Salesid='" + billno + "' and salesuniqueid='" + salesid + "'";
                dss = dbObj.InlineExecuteDataSet(strans);
                if (dss.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
                    {
                        int stockid = Convert.ToInt32(dss.Tables[0].Rows[i]["stockid"]);
                        int qty = Convert.ToInt32(dss.Tables[0].Rows[i]["Quantity"]);

                        string getstoc = "select * from tblStock_" + stable + " where stockid='" + stockid + "'";
                        dqty = dbObj.InlineExecuteDataSet(getstoc);

                        if (dqty.Tables[0].Rows.Count > 0)
                        {
                            int avali = Convert.ToInt32(dqty.Tables[0].Rows[0]["Available_QTY"]);
                            string itemid = dqty.Tables[0].Rows[0]["SubCategoryID"].ToString();

                            int finalqty = qty + avali;

                            string update = "Update tblStock_" + stable + " set Available_QTY = '" + finalqty + "' where stockid='" + stockid + "' ";
                            iupdate = dbObj.InlineExecuteNonQuery(update);

                            //  string AuditQty = "Insert into TblAuditQty_" + table + "(Screen,Qty,RefId)VAlues('Sales/Cancel','" + qty + "','" + salesid + "')";
                            //  iupdate = dbObj.InlineExecuteNonQuery(AuditQty);
                            string AuditQty = "Insert into TblAuditQty_" + stable + "(Screen,Qty,RefId,Sign,Itemid,stockid)VAlues('Sales/Cancel','" + qty + "','" + salesid + "','+','" + itemid + "','" + stockid + "')";
                            iupdate = dbObj.InlineExecuteNonQuery(AuditQty);

                        }




                    }
                }

            }

            string sQry = "update tblsales_" + table + " set cancelstatus='Yes',Reference=" + Ref + ",Reason='" + reason + "',Canceltine= getdate() where salesid='" + salesid + "' and orderno=0 ";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);


            return iSuccess;

        }

        public DataSet GoodTrasnferListExp_Report(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            // string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer a,tblTransGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            string sqry = " select a.dc_no,a.dc_date,a.sentby,sum(b.order_qty * cast(isnull(d.mrp,0) as float))  as totamnt,c.BranchName,c.BranchArea,c.mobileno,c.LandLine,a.Tripno  from tblgoodtransfer_" + BranchID + " as a  inner join tblTransGoodsTransfer_" + BranchID + " as b on b.dc_no=a.dc_no " +
 " inner join tblbranch as c on c.branchcode=a.branchcode inner join tblcategoryuser as d on d.categoryuserid=b.descriptionid " +
 " where a.DC_No='" + sDCNO + "' group by  a.dc_no,a.dc_date,a.sentby,c.BranchName,c.BranchArea,c.mobileno,c.LandLine,a.Tripno ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet TransGoodTrasnferListExp_Report(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            // string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer a,tblTransGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            string sqry = " select a.dc_no,a.dc_date,a.sentby,d.printitem,sum(b.order_qty) as Qty,d.mrp,sum(b.order_qty * cast(d.mrp as float))  as totmrp   from tblgoodtransfer_" + BranchID + " as a  inner join tblTransGoodsTransfer_" + BranchID + " as b on b.dc_no=a.dc_no " +
 " inner join tblbranch as c on c.branchcode=a.branchcode inner join tblcategoryuser as d on d.categoryuserid=b.descriptionid " +
 " where a.DC_No='" + sDCNO + "' group by  a.dc_no,a.dc_date,a.sentby,d.mrp,d.printitem ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion

        #region Kitchen Usage Report


        public DataSet getreportforkitchenusage_Summary(string sTablename, string Type, string DCNo, DateTime From, DateTime to, string Category, string Ingridients, string deptid)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (Ingridients == "All" && deptid == "All")
            {
                sqry = "  select 'All' as dept,IngreCategory,c.ingredientname,sum(b.acceptqty) as acceptqty,s.Rate as AvgRate,d.uom ,sum(b.acceptqty)*s.Rate as TotalAmount " +
                    " from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
                    " inner join tblIngridents as c on b.rawitemid=c.IngridID inner join tblRawMatlStock_" + sTablename + " s on s.IngredientID=b.rawitemid " +
                    " inner join tbluom as d on d.uomid=c.Units  inner join tblIngridentsCategory ic on ic.IngCatID=c.IngCatID " +
                    " where cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' " +
                    " group by IngreCategory,c.ingredientname,s.Rate ,d.uom ";
            }
            else if (Ingridients != "All" && deptid == "All")
            {
                sqry = "  select 'All' as dept,IngreCategory,c.ingredientname,sum(b.acceptqty) as acceptqty,s.Rate as AvgRate,d.uom ,sum(b.acceptqty)*s.Rate as TotalAmount " +
                    " from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
                    " inner join tblIngridents as c on b.rawitemid=c.IngridID inner join tblRawMatlStock_" + sTablename + " s on s.IngredientID=b.rawitemid " +
                    " inner join tbluom as d on d.uomid=c.Units  inner join tblIngridentsCategory ic on ic.IngCatID=c.IngCatID " +
                    " where cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and  c.ingridid='" + Ingridients + "' " +
                    " group by IngreCategory,c.ingredientname,s.Rate ,d.uom ";
            }
            else if (Ingridients != "All" && deptid != "All")
            {
                sqry = "  select isnull(e.deptname,'No Dept.') as dept,IngreCategory,c.ingredientname,sum(b.acceptqty) as acceptqty,s.Rate as AvgRate,d.uom ,sum(b.acceptqty)*s.Rate as TotalAmount " +
                    " from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
                    " inner join tblIngridents as c on b.rawitemid=c.IngridID inner join tblRawMatlStock_" + sTablename + " s on s.IngredientID=b.rawitemid " +
                    " inner join tbluom as d on d.uomid=c.Units  inner join tblIngridentsCategory ic on ic.IngCatID=c.IngCatID Left join tbldepartment as e on e.deptid=a.deptid " +
                    " where cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and a.deptid='" + deptid + "' and  c.ingridid='" + Ingridients + "' " +
                    " group by e.deptname,IngreCategory,c.ingredientname,s.Rate ,d.uom ";


            }
            else if (Ingridients == "All" && deptid != "All")
            {
                sqry = "  select isnull(e.deptname,'No Dept.') as dept,IngreCategory,c.ingredientname,sum(b.acceptqty) as acceptqty,s.Rate as AvgRate,d.uom ,sum(b.acceptqty)*s.Rate as TotalAmount " +
                    " from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno " +
                    " inner join tblIngridents as c on b.rawitemid=c.IngridID inner join tblRawMatlStock_" + sTablename + " s on s.IngredientID=b.rawitemid " +
                    " inner join tbluom as d on d.uomid=c.Units  inner join tblIngridentsCategory ic on ic.IngCatID=c.IngCatID Left join tbldepartment as e on e.deptid=a.deptid " +
                    " where cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and a.deptid='" + deptid + "' " +
                    " group by e.deptname,IngreCategory,c.ingredientname,s.Rate ,d.uom ";
            }

            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }



        public DataSet getreportforkitchenusage_Summary_old(string sTablename, string Type, string DCNo, DateTime From, DateTime to, string Category, string Ingridients)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (Ingridients == "All")
            {
                sqry = "  select IngreCategory,c.ingredientname,sum(b.acceptqty) as acceptqty,s.Rate as AvgRate,d.uom ,sum(b.acceptqty)*s.Rate as TotalAmount from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno inner join tblIngridents as c on b.rawitemid=c.IngridID inner join tblRawMatlStock_" + sTablename + " s on s.IngredientID=b.rawitemid inner join tbluom as d on d.uomid=c.Units  inner join tblIngridentsCategory ic on ic.IngCatID=c.IngCatID where cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' group by IngreCategory,c.ingredientname,s.Rate ,d.uom ";
            }
            else
            {
                sqry = "  select IngreCategory,c.ingredientname,sum(b.acceptqty) as acceptqty,s.Rate as AvgRate,d.uom ,sum(b.acceptqty)*s.Rate as TotalAmount from tblAcceptRawMaterials_" + sTablename + "  as a inner join tbltransAcceptRawItem_" + sTablename + " as b on b.requestid=a.requestno inner join tblIngridents as c on b.rawitemid=c.IngridID inner join tblRawMatlStock_" + sTablename + " s on s.IngredientID=b.rawitemid inner join tbluom as d on d.uomid=c.Units  inner join tblIngridentsCategory ic on ic.IngCatID=c.IngCatID where cast(a.requestdate as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(a.requestdate as Date)<='" + to.ToString("yyyy/MM/dd") + "' and  c.ingridid='" + Ingridients + "' group by IngreCategory,c.ingredientname,s.Rate ,d.uom ";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        #endregion

        #region Barcode Item Search

        public DataSet GetNewSelectDistinctItems_barcode(string cattype, int iUserID, string stable, string barcode)
        {

            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();
            DataSet dss = new DataSet();
            string sQry = string.Empty;
            if (cattype == "N")
            {
                sQry = "select (LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(Definition, CHAR(10), CHAR(32)),CHAR(13), CHAR(32)),CHAR(160), CHAR(32)),CHAR(9),CHAR(32)))))+' / '+cast(Available_QTY as nvarchar) +' / '+ isnull(a.Barcode,'0') as definition,cast(StockID as nvarchar)+','+ cattype as valuee from tblCategoryUser a,tblStock_" + stable + " b,tblCategoryuserBranch c  ,tblcategory d  where d.categoryid=a.categoryid and c.Itemid=a.CategoryUserID and  a.CategoryUserID=b.SubCategoryID   and isdelete=0  and b.Available_QTY>0 and a.IsActive='Yes' and c.IsActive='Yes' and c.BranchCode='" + stable + "' and a.Barcode ='" + barcode + "'  order by a.Definition asc";
                dmerge = dbObj.InlineExecuteDataSet(sQry);
                ds.Merge(dmerge);
            }
            return ds;
        }
        #endregion

        #region New Tax Report
        public DataSet getSalesBillCount_firsttobill(string sTableName, DateTime From, DateTime To, string gstbill)
        {
            DataSet ds = new DataSet();
            string sQry = "select  MIN(BillNo) as StartBill,MAX(BillNo) as EndBill,COUNT(BillNo) as BillCount from tblsales_" + sTableName + " " +
                " where gstbill='" + gstbill + "' and cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "'  having COUNT(BillNo)>0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet New_TaxReport(string sBranch, DateTime sFmdate, DateTime sToDate, string gstbill)
        {
            string store = "";

            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            //  if (paymode == "All" && salestype == "All")
            {

                string sqry = "WITH Sales AS (  SELECT  ts.disc,cus.customername+'-'+cus.mobileno as name,s.salesorder as No,sp.paymode,st.paymenttype,s.billno, " +
" s.billdate,c.Category,cu.definition,ts.unitprice,ts.quantity,(ts.UnitPrice * ts.Quantity) as amount,isnull(ts.tax,0) as tax,  " +
 " isnull(((((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100),0)  as GST, " +
    " isnull((((((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100)   " +
     " +  ((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100))),0) as TotalValue  from tblsales_" + sBranch + " as s inner join tbltranssales_" + sBranch + " as ts " +
            "  on ts.salesid=s.billno inner join tblsalestype as st on st.salestypeid=s.salestype  " +
        " 	  inner join tblcategoryuser as cu on cu.categoryuserid=ts.subcategoryid  " +
    " 		  inner join tblcategory as c on c.categoryid=ts.CategoryID     inner  join tblSalesPaymode as sp on sp.value=s.ipaymode  " +
  "               inner join tblcustomer as cus on cus.customerid=s.customerid where    " +
     "   convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
     " and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' and s.salesid=ts.salesuniqueid and s.gstbill='" + gstbill + "' " +
" )SELECT disc,name,no,paymode,paymenttype,billno,billdate,category,definition,unitprice,quantity,amount,isnull([0],0) as Z " +
" ,isnull([5],0) as F,isnull([12],0) as TW,isnull([18],0) as EG,isnull([28],0) as TE,totalvalue " +
" FROM " +
  "  Sales " +
"   PIVOT" +
" (" +
    "    SUM(gst)" +
  "      FOR [tax] IN ([0],[5], [12], [18], [28])" +
" ) AS P order by billno,billdate asc" +
" ;";

                ds = dbObj.InlineExecuteDataSet(sqry);
            }

            return ds;
        }

        public DataSet New_TaxReport_gst(string sBranch, DateTime sFmdate, DateTime sToDate, string gstbill)
        {
            string store = "";

            DataSet ds = new DataSet();
            DataSet dss = new DataSet();
            DataSet ds1 = new DataSet();
            //  if (paymode == "All" && salestype == "All")
            {

                //                string sqry = "WITH Sales AS (  SELECT ts.disc,convert(date,s.BillDate) as billdate, (ts.quantity) as quantity,(ts.UnitPrice * ts.Quantity) as amount,isnull(ts.tax,0) as tax, " +
                //     "  isnull(((((ts.UnitPrice * ts.Quantity) + (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100),0)  as GST, " +
                //       "  isnull((((((ts.UnitPrice * ts.Quantity) + (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100)  " +
                //          "  +  ((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100))),0) as TotalValue  " +
                //           "  from tblsales_"+sBranch+" as s inner join tbltranssales_"+sBranch+" as ts   on ts.salesid=s.billno " +
                //            "  inner join tblsalestype as st on st.salestypeid=s.salestype   	  inner join tblcategoryuser as cu  " +
                //            "  on cu.categoryuserid=ts.subcategoryid   		  inner join tblcategory as c on c.categoryid=ts.CategoryID  " +
                //                " inner  join tblSalesPaymode as sp on sp.value=s.ipaymode               " +
                //                 "   inner join tblcustomer as cus on cus.customerid=s.customerid where    " +
                //     "   convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                //     " and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' and s.salesid=ts.salesuniqueid  " +
                ////" group by ts.disc,convert(date,s.BillDate),ts.quantity,ts.UnitPrice,ts.tax,s.discper,cu.GST
                //                " ) " +
                //                       " SELECT disc,billdate,quantity,amount,isnull([0],0) as Z  ,isnull([5],0)" +
                //                        " as F,isnull([12],0) as TW,isnull([18],0) as EG,isnull([28],0) as TE,totalvalue  FROM   Sales  " +
                //                          " PIVOT (    SUM(gst)      FOR [tax] IN ([0],[5], [12], [18], [28]) ) AS P order by billdate asc " ;
                string sqry = string.Empty;
                try
                {
                    sqry = "WITH Sales AS (  SELECT sum(ts.disc) as disc,convert(date,s.BillDate) as billdate, sum(ts.quantity) as quantity, " +
    " sum(ts.Amount) as amount,isnull(ts.tax,0) as tax,   " +
        //" --isnull(((((ts.UnitPrice * ts.Quantity) + (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100),0)  as GST, " +
        //  " --isnull((((((ts.UnitPrice * ts.Quantity) + (((ts.UnitPrice * ts.Quantity) * s.discper)/100)) * cu.gst) / 100)  " +
        " (Sum(((ts.Amount-ts.Disc) * ts.Tax )/100)) as GST, " +
           //   " --+  ((ts.UnitPrice * ts.Quantity) - (((ts.UnitPrice * ts.Quantity) * s.discper)/100))),0) as TotalValue  " +
           " sum((ts.Amount - (ts.Disc)) + (((ts.Amount-ts.Disc) * ts.Tax )/100)) as TotalValue " +
              " from tblsales_" + sBranch + " as s inner join tbltranssales_" + sBranch + " as ts   on ts.salesid=s.billno   " +
               " inner join tblsalestype as st on st.salestypeid=s.salestype   	 " +
                 " inner join tblcategoryuser as cu    on cu.categoryuserid=ts.subcategoryid    " +
                 " 		  inner join tblcategory as c on c.categoryid=ts.CategoryID  " +
                " 		    inner  join tblSalesPaymode as sp on sp.value=s.ipaymode     " +
            " 				        inner join tblcustomer as cus on cus.customerid=s.customerid where    " +
         "   convert(date,s.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
         " and convert(date,s.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and s.cancelstatus='No' and s.salesid=ts.salesuniqueid and s.gstbill='" + gstbill + "'  " +
           " group by convert(date,s.BillDate),ts.tax ) " +
                                          " SELECT disc,billdate,quantity,amount,isnull(amount+[0],0) as Z  ,isnull(amount+[5],0) as F,isnull(amount+[12],0) as TW,isnull(amount+[18],0) as EG,isnull(amount+[28],0) as TE,isnull([0],0) as Z1  ,isnull([5],0) as F1,isnull([12],0) as TW1,isnull([18],0) as EG1, isnull([28],0) as TE1,totalvalue  FROM   Sales   PIVOT (    SUM(gst)      FOR [tax] IN ([0],[5], [12], [18], [28]) ) AS P order by billdate asc ";


                    ds = dbObj.InlineExecuteDataSet(sqry);
                }
                catch (SqlException ex)
                {
                    Console.WriteLine("Inner Exception: " + ex.Message);
                    Console.WriteLine();
                    Console.WriteLine("Query Executed: " + sqry);
                    Console.WriteLine();
                    //dr.Close();
                }
                finally
                {
                    ; //here you can add any code you want to be executed
                    //regardless if an exception is thrown or not
                }
            }

            return ds;
        }
        #endregion

        #region HAPPY HOURS


        public DataSet gethappyproduct()
        {
            DataSet ds = new DataSet();
            string sqry = "Select * from tblOffer";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;

        }

        public DataSet gettranshappyupdate(string iSalesID)
        {
            DataSet ds = new DataSet();
            string sQry = "select tc.*,cu.rate as ori from tbltransoffer as tc inner join tblcategoryuser as cu on cu.itemid=tc.categoryuserid where offerid='" + iSalesID + "'";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int inserttransoffer(string categoryuserid, string Qty, string rate, string total, string category, int IsDiscount)
        {
            int save = 0;
            int up = 0;
            DataSet ds = new DataSet();
            string sqr = "Select MAX(Offerid) as Offf from tblOffer";
            ds = dbObj.InlineExecuteDataSet(sqr);

            string cate1 = ds.Tables[0].Rows[0]["Offf"].ToString();
            string sQry1 = "update tbloffer set ofid='H'+convert(nvarchar," + cate1 + ") where offerid=" + cate1 + "";
            up = dbObj.InlineExecuteNonQuery(sQry1);

            if (ds.Tables[0].Rows.Count > 0)
            {
                string cate = ds.Tables[0].Rows[0]["Offf"].ToString();
                string sQry = "Insert into tblTransOffer(Offerid,Categoryuserid,Qty,Rate,TotalAmount,Categoryid, IsDiscount)Values('" + cate + "','" + categoryuserid + "','" + Qty + "','" + rate + "','" + total + "','" + category + "','" + IsDiscount + "')";
                save = dbObj.InlineExecuteNonQuery(sQry);
            }
            return save;
        }


        public int updatetransoffer(string categoryuserid, string Qty, string rate, string total, string category, string cate, int IsDiscount)
        {
            int save = 0;
            DataSet ds = new DataSet();
            {
                string sQry = "Insert into tblTransOffer(Offerid,Categoryuserid,Qty,Rate,TotalAmount,Categoryid, IsDiscount)Values('" + cate + "','" + categoryuserid + "','" + Qty + "','" + rate + "','" + total + "','" + category + "','" + IsDiscount + "')";
                save = dbObj.InlineExecuteNonQuery(sQry);
            }
            return save;
        }

        public int updatehappyhours(string itemid, string rate1, DateTime fromtime, DateTime totime)
        {
            int iscuess = 0;
            string sqry = "Update tblcategoryuser set From_Time='" + fromtime.ToString("yyyy/MM/dd HH:mm:ss") + "',To_Time='" + totime.ToString("yyyy/MM/dd HH:mm:ss") + "',Special_Rate='" + rate1 + "' where Itemid='" + itemid + "'";
            iscuess = dbObj.InlineExecuteNonQuery(sqry);

            return iscuess;

        }

        public DataSet DisplayExtras()
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblExtras where isdelete=0";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }
        public DataSet DisplayExtras_ById(int Id)
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblExtras where isdelete=0 and extraid='" + Id + "'";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }

        public int updateoffer(string comboname, string amount, string categoryid, DateTime fromdate, DateTime todate, string offerid, int IsDiscount, string isactive)
        {
            int save = 0;
            //string sQry = "Insert into tblOffer(offerName,TotalRate,CategoryId,From_Time,To_Time)Values('" + comboname + "','" + amount + "','" + categoryid + "','" + fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "','" + todate.ToString("yyyy/MM/dd HH:mm:ss") + "')";

            string sQry = "Update tbloffer set Isactive='" + isactive + "',offerName='" + comboname + "',TotalRate='" + amount + "',CategoryId='" + categoryid + "',From_Time='" + fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "',To_Time='" + todate.ToString("yyyy/MM/dd HH:mm:ss") + "',IsDiscount='" + IsDiscount + "' where offerid='" + offerid + "'";
            save = dbObj.InlineExecuteNonQuery(sQry);

            string sqr = "Delete tbltransoffer where offerid='" + offerid + "'";
            int sav = dbObj.InlineExecuteNonQuery(sqr);

            return save;
        }

        public int insertofferHappy(string comboname, string amount, string categoryid, DateTime fromdate, DateTime todate, int IsDiscount, string Isactive)
        {
            int save = 0;
            string sQry = "Insert into tblOffer(offerName,TotalRate,CategoryId,From_Time,To_Time,IsDiscount,IsActive)Values('" + comboname + "','" + amount + "','" + categoryid + "','" + fromdate.ToString("yyyy/MM/dd HH:mm:ss") + "','" + todate.ToString("yyyy/MM/dd HH:mm:ss") + "','" + IsDiscount + "','" + Isactive + "')";
            save = dbObj.InlineExecuteNonQuery(sQry);
            return save;
        }

        public DataSet get_categoryHappy()
        {
            DataSet dss = new DataSet();
            string item = "Select * from tblcategory";
            dss = dbObj.InlineExecuteDataSet(item);
            return dss;
        }

        public DataSet get_happyhoursforupdateHH(string comboid)
        {
            DataSet dss = new DataSet();
            string item = "Select *,CONVERT(varchar(15),cast(From_time as time),100) as fromtt,CONVERT(varchar(15),cast(To_time as time),100) as tott,cast(From_time as time) [fromtime],cast(To_time as time) [totime] from tbloffer where offerid='" + comboid + "'";
            dss = dbObj.InlineExecuteDataSet(item);
            return dss;
        }

        public DataSet GetStockDetailsOffer(int iSubCatID, int UserID, string stable, string ratee, string stockoption)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();
            string sqr = string.Empty;

            //string sqr = "select tc.rate as Rate,CAST(tc.Qty AS MONEY) as Available_QTY,cu.*,s.* from tblOffer as c inner join tbltransoffer as tc on tc.offerid=c.offerid " +
            //            " inner join tblcategoryuser as cu on cu.ItemID=tc.Categoryuserid inner join tblstock_"+stable+" as s on s.subcategoryid=cu.categoryuserid where c.offerid='" + iSubCatID + "'";

            if (stockoption == "1")
            {
                sqr = "select  c.offerid as comboo,  tc.IsDiscount, tc.rate as " + ratee + ",CAST(tc.Qty AS MONEY) as QTY,cu.*,b.* from tblOffer as c inner join tbltransoffer as tc on tc.offerid=c.offerid " +
                          " inner join tblcategoryuser as cu on cu.ItemID=tc.Categoryuserid inner join tblStock_" + stable + " as  b  on b.SubCategoryID=cu.categoryuserid  where c.offerid='" + iSubCatID + "'";
            }
            else
            {
                sqr = "select  c.offerid as comboo,  tc.IsDiscount, tc.rate as " + ratee + ",CAST(tc.Qty AS MONEY) as QTY,cu.*,CategoryUserID as stockid,CAST('0' AS MONEY)  as Available_QTY,c.categoryid,cast('2019-04-01' as date) as Expirydate from tblOffer as c inner join tbltransoffer as tc on tc.offerid=c.offerid " +
                          " inner join tblcategoryuser as cu on cu.ItemID=tc.Categoryuserid where c.offerid='" + iSubCatID + "'";
            }

            dmerge = dbObj.InlineExecuteDataSet(sqr);
            ds.Merge(dmerge);

            return ds;
        }
        #endregion

        #region Sales Summary Report

        public DataSet AllExpensesumwise(string sTablename, string sFrom, string sTo)
        {
            DataSet ds = new DataSet();
            string autoemp1 = "select isnull(sum(a.Amount),0) as Amnt from tblPaymentEntry_" + sTablename + " a,tblLedger b where  a.LedgerID=b.LedgerID  and a.Date between '" + sFrom + "' and '" + sTo + "'";
            ds = dbObj.InlineExecuteDataSet(autoemp1);
            return ds;

        }

        #endregion

        public DataSet getmaxbillno(string sTableName, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            DataSet dcat = new DataSet();
            DataSet dmerge = new DataSet();
            string sqr = "select Top (1) billno from tblsales_" + sTableName + " where  convert(date,BillDate) between '" + sFmdate + "' and '" + sToDate + "' ";
            ds = dbObj.InlineExecuteDataSet(sqr);
            dmerge.Merge(ds);

            string sqrr = " select Top (1) billno from tblsales_" + sTableName + " where  convert(date,BillDate) between '" + sFmdate + "' and '" + sToDate + "' order by billno desc ";
            dcat = dbObj.InlineExecuteDataSet(sqrr);
            dmerge.Merge(dcat);

            return dmerge;
        }

        public DataSet getmaxbillnowithtime(string sTableName, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            DataSet dcat = new DataSet();
            DataSet dmerge = new DataSet();
            string sqr = "select Top (1) Billdate from tblsales_" + sTableName + " where  convert(date,BillDate) between '" + sFmdate + "' and '" + sToDate + "' ";
            ds = dbObj.InlineExecuteDataSet(sqr);
            dmerge.Merge(ds);

            string sqrr = " select Top (1) Billdate from tblsales_" + sTableName + " where  convert(date,BillDate) between '" + sFmdate + "' and '" + sToDate + "' order by Billdate desc ";
            dcat = dbObj.InlineExecuteDataSet(sqrr);
            dmerge.Merge(dcat);

            return dmerge;
        }

        public DataSet getshiftwisesales(string sTableName, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            DataSet dcat = new DataSet();
            DataSet dmerge = new DataSet();
            string sqr = "select ROW_NUMBER() OVER(ORDER BY ipaymode) as Paycode,count(billno) as Bills, case ipaymode when 1 then 'Cash' else 'Card' end as Name,sum(Total) as Amount " +
                         " from tblsales_" + sTableName + " where convert(date,BillDate) between '" + sFmdate + "' and '" + sToDate + "'  and (ipaymode='1' or ipaymode='4') group by ipaymode  ";
            ds = dbObj.InlineExecuteDataSet(sqr);

            return ds;
        }

        public DataSet gettotalitem(string sTableName, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            DataSet dcat = new DataSet();
            DataSet dmerge = new DataSet();
            string sqr = "select count(*) as cnt  from tblsales_" + sTableName + " as s  " +
                        " inner join tbltranssales_" + sTableName + " as ts on ts.salesid=s.salesid  where convert(date,s.BillDate) between '" + sFmdate + "' and '" + sToDate + "'  ";
            ds = dbObj.InlineExecuteDataSet(sqr);

            return ds;
        }

        public DataSet ordeby_Department(string sTableName, DateTime sFmdate, DateTime sToDate)
        {
            DataSet ds = new DataSet();
            //string paygird = " select D.categoryid,D.category as Department,C.Definition as Item,sum(B.Quantity) as Qty ,"
            //               + " B.UnitPrice as Rate,sum(B.UnitPrice * B.Quantity) as Amount"
            //               + " from tblsales_CO1 as A"
            //               + " inner join tblTransSales_CO1 as B on A.SalesID=B.SalesID"
            //               + " inner join tblCategoryUser as C on B.SubCategoryID=C.CategoryUserID and C.ItemID=B.SubCategoryID"
            //               + " inner join tblcategory as D on B.CategoryID=D.categoryid"
            //               + " inner join tblPaymentMode as F on F.Payment_ID=A.ContactTypeID"
            //               + " where convert(date,A.BillDate) between '" + sFmdate + "' and '" + sToDate + "'"
            //               + " group by D.category, C.Definition ,B.UnitPrice,D.categoryid order by d.categoryid  desc";

            string paygird = " select D.categoryid,D.category as Department,C.Definition as Item,sum(B.Quantity) as Qty ,"
                         + " B.UnitPrice as Rate,sum(B.UnitPrice * B.Quantity) as Amount"
                         + " from tblsales_" + sTableName + " as A"
                         + " inner join tblTransSales_" + sTableName + " as B on A.SalesID=B.SalesID"
                         + " inner join tblCategoryUser as C on B.SubCategoryID=C.CategoryUserID and C.ItemID=B.SubCategoryID"
                         + " inner join tblcategory as D on B.CategoryID=D.categoryid"
                         + " inner join tblPaymentMode as F on F.Payment_ID=A.ContactTypeID"
                         + " where convert(date,A.BillDate) between '" + sFmdate.ToString("yyyy-MM-dd") + "' and '" + sToDate.ToString("yyyy-MM-dd") + "'"
                         + " group by D.category, C.Definition ,B.UnitPrice,D.categoryid order by d.categoryid  desc";


            ds = dbObj.InlineExecuteDataSet(paygird);
            return ds;
        }

        public DataSet ordeby_DepartmentforTotal(string sTableName, DateTime sFmdate, DateTime sToDate)
        {
            DataSet ds = new DataSet();
            //string paygird = " select sum(A.total) as tot,sum(A.Netamount) as nettot,sum(A.NetAmount * A.discount /100) as disc, sum(A.VAT_Amount) as vatAmount,sum(A.ServiceTax_Amount) as serviceTax,sum(A.roundoff) as Ramount from tblsales_CO1 as A " +
            //                "  inner join tblPaymentMode as F on F.Payment_ID=A.ContactTypeID  where convert(date,A.BillDate) between '" + sFmdate + "' and '" + sToDate + "' ";

            string paygird = " select sum(A.total) as tot,sum(A.Netamount) as nettot,sum(A.NetAmount * A.discount /100) as disc, sum(A.CGST) as vatAmount,sum(A.SGST) as serviceTax,sum(A.Roundoff) as Ramount from tblsales_" + sTableName + " as A " +
                            "  inner join tblPaymentMode as F on F.Payment_ID=A.ContactTypeID  where convert(date,A.BillDate) between '" + sFmdate.ToString("yyyy-MM-dd") + "' and '" + sToDate.ToString("yyyy-MM-dd") + "' ";

            ds = dbObj.InlineExecuteDataSet(paygird);
            return ds;
        }

        public DataSet ordeby_salescontribution(string sTableName, DateTime sFmdate, DateTime sToDate)
        {
            DataSet ds = new DataSet();
            //string paygrid = " select D.categoryid,D.category as Department,sum(B.UnitPrice * B.Quantity) as Amount from tblsales_CO1 as A inner join tblTransSales_CO1 as B " +
            //                 " on A.SalesID=B.SalesID inner join tblCategoryUser as C on B.SubCategoryID=C.CategoryUserID  " +
            //                 " and C.ItemID=B.SubCategoryID inner join tblcategory as D on B.CategoryID=D.categoryid  " +
            //                 " inner join tblPaymentMode as F on F.Payment_ID=A.ContactTypeID   where convert(date,A.BillDate) between '" + sFmdate.ToString("yyyy-MM-dd") + "' and '" + sToDate.ToString("yyyy-MM-dd") + "'  group by D.category,D.categoryid";

            string paygrid = " select D.categoryid,D.category as Department,sum(B.UnitPrice * B.Quantity) as Amount  from tblsales_" + sTableName + " as A  " +
 " inner join tblTransSales_" + sTableName + " as B  on A.SalesID=B.SalesID inner join tblCategoryUser as C on C.ItemID=B.SubCategoryID  " +
 " inner join tblcategory as D on B.CategoryID=D.categoryid   " +
     " inner join tblPaymentMode as F on F.Payment_ID=A.ipaymode   where convert(date,A.BillDate) " +
       " between '" + sFmdate.ToString("yyyy-MM-dd") + "' and '" + sToDate.ToString("yyyy-MM-dd") + "' and a.SalesID=b.SalesID  group by D.category,D.categoryid";

            ds = dbObj.InlineExecuteDataSet(paygrid);
            return ds;
        }

        public DataSet ordeby_Totalsalescontribution(string sTableName, DateTime sFmdate, DateTime sToDate)
        {
            DataSet ds = new DataSet();
            string paygird = " select sum(B.UnitPrice * B.Quantity) as Amount from tblsales_" + sTableName + " as A inner join tblTransSales_" + sTableName + " as B  " +
                             " on A.SalesID=B.SalesID inner join tblCategoryUser as C on   " +
                             "  C.ItemID=B.SubCategoryID inner join tblcategory as D on B.CategoryID=D.categoryid " +
                             " inner join tblPaymentMode as F on F.Payment_ID=A.ipaymode  where convert(date,A.BillDate) between '" + sFmdate.ToString("yyyy-MM-dd") + "' and '" + sToDate.ToString("yyyy-MM-dd") + "' ";

            ds = dbObj.InlineExecuteDataSet(paygird);
            return ds;
        }

        public DataSet ordebyproduct2jj(string sTableName, DateTime sFmdate, DateTime sToDate)
        {

            DataSet ds = new DataSet();
            //            string paygird = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName, 'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice,c.REcQty as rec ,(B.Amount) as NetAmount ,F.Payment_Mode "
            //+ " from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.ItemID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date, A.BillDate) "
            //+ " between '" + sFmdate.ToString("yyyy-MM-dd") + "' and '" + sToDate.ToString("yyyy-MM-dd") + "' and convert(date, B.BillDate) between '" + sFmdate.ToString("yyyy-MM-dd") + "' and '" + sToDate.ToString("yyyy-MM-dd") + "' and A.cancelstatus='No' order by B.SubCategoryID";

            //string sqr = "select A.CustomerID,B.CategoryID,B.SubCategoryID,A.BillNo,convert(date,a.BillDate) as BillDate,E.CustomerName as LedgerName, 'brand' as BrandName,D.category,C.Definition,B.Quantity,B.UnitPrice,c.REcQty as rec ,(B.Amount) as NetAmount ,F.Payment_Mode "
            //            + " from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F where A.BillNo=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.ItemID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID and convert(date, A.BillDate) "
            //            + " between '" + sFmdate.ToString("yyyy-MM-dd") + "' and '" + sToDate.ToString("yyyy-MM-dd") + "' and convert(date, B.BillDate) between '" + sFmdate.ToString("yyyy-MM-dd") + "' and '" + sToDate.ToString("yyyy-MM-dd") + "' and A.cancelstatus='No' and convert(date,A.BillDate)=convert(date,B.BillDate) order by B.SubCategoryID";


            string sqr = " ;with temp as(select sum(B.Quantity) as Quantity ,C.Definition,c.CategoryUserID,c.ItemID"
                        + " from tblsales_" + sTableName + " A,tblTransSales_" + sTableName + " B,tblCategoryUser C,tblcategory D,tblCustomer E,tblPaymentMode F "
                        + " where A.SalesID=b.SalesID  and B.CategoryID=D.categoryid and B.SubCategoryID=C.ItemID and f.Payment_ID=a.ContactTypeID and A.CustomerID=E.CustomerID "
                        + " and convert(date, A.BillDate) "
                        + " between '" + sFmdate.ToString("yyyy-MM-dd") + "' and '" + sToDate.ToString("yyyy-MM-dd") + "' and convert(date, B.SalesEntryDate) between '" + sFmdate.ToString("yyyy-MM-dd") + "' and '" + sToDate.ToString("yyyy-MM-dd") + "' "
                        + " and A.cancelstatus='No' and convert(date,A.BillDate)=convert(date,B.SalesEntryDate) group by c.Definition,c.CategoryUserID,c.ItemID) "
                        + " select t.Definition as item ,t.Quantity as qty,(cu.RecQty * t.Quantity) as Rec from temp as t "
                        + " inner join tblCategoryUser as cu on cu.CategoryUserID=t.CategoryUserID and t.itemid=cu.itemid order by t.definition asc";


            ds = dbObj.InlineExecuteDataSet(sqr);
            return ds;

        }

        public DataSet ordebycatqtyDay(string sTableName, string sFmdate, string sToDate)
        {
            DataSet ds = new DataSet();
            //DataSet dcat = new DataSet();
            //DataSet dmerge = new DataSet();
            //  string sqr = "select  Item, sum(Qty) as Qty from (select distinct c.Category as Item ,sum(b.Quantity) as Qty from tblsales_"+sTableName+" a, tbltranssales_"+sTableName+" b,tblcategory c where a.BillNo=b.SalesID and b.CategoryID=c.CategoryID and convert(date,a.BillDate) between '"+sFmdate+"' and '"+sToDate+"' group by c.Category union all select distinct c.Category as Item ,sum(convert(money,b.Qty)) as Qty from tblOrder_"+sTableName+" a, tblTransOrder_"+sTableName+" b, tblcategory c where a.BillNo=b.BillNo and b.CategoryID=c.CategoryID and convert(date,a.OrderDate) between '"+sFmdate+"' and '"+sToDate+"' group by c.Category ) as a group by Item";
            //string sqr = "select distinct(b.Category) as Item, sum(a.Quantity) as Qty,sum(a.shwqty) as rec from tbltranssales_" + sTableName + " a,tblcategory b, tblsales_" + sTableName + " c where a.CategoryID=b.CategoryID  and a.SalesID=c.BillNo  and convert(date,c.BillDate) between '" + sFmdate + "' and '" + sToDate + "' and convert(date,a.BillDate)  between '" + sFmdate + "' and '" + sToDate + "' group by b.CategoryID,b.Category";


            string sqr = "select distinct(b.Category) as Item, sum(a.shwqty) as Qty,sum(a.shwqty * d.recqty) as rec,case c.BillTYpe when 'D' then 'Dine IN' when 'T' then 'Take Away' when 'Z' then 'Zomato Delivery' else 'Home Delivery' end as type from tbltranssales_" + sTableName + " a"
            + ",tblcategory b, tblsales_" + sTableName + " c, tblcategoryuser d where a.subcategoryid=d.itemid and a.CategoryID=b.CategoryID  and a.SalesID=c.BillNo  and convert(date,c.BillDate) between '" + sFmdate + "' and '" + sToDate + "'"
            + " and convert(date,a.BillDate)  between '" + sFmdate + "' and '" + sToDate + "' group by b.CategoryID,b.Category,c.BillTYpe";
            ds = dbObj.InlineExecuteDataSet(sqr);
            //if (dcat.Tables[0].Rows.Count > 0)
            //{
            //    for (int i = 0; i < dcat.Tables[0].Rows.Count; i++)
            //    {
            //        int cat = Convert.ToInt16(dcat.Tables[0].Rows[i]["categoryid"]);

            //        string paygird = "select ISNULL(SUM(Quantity), 0 ) as  qty,c.category as Item from tblTransSales_" + sTableName + " as ts inner join tblcategory as c on c.categoryid=ts.CategoryID inner join tblsales_" + sTableName + " as sa on sa.BillNo=ts.SalesID where ts.CategoryID=" + cat + " and convert(date, sa.BillDate) between Convert(DateTime,'" + sFmdate + "',103) and Convert(DateTime,'" + sToDate + "',103) group by c.category order by c.category desc";
            //        ds = dbObj.InlineExecuteDataSet(paygird);
            //        dmerge.Merge(ds);
            //    }
            //}
            return ds;
        }

        #region Bank
        public DataSet getBank(string iCusID)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblLedger l where l.LedgerID='" + iCusID + "' and l.IsActive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int insertbank(int UserID, string CustomerName, string MobileNo, string PhoneNo, string Area, string Address, string City, string Pincode, string Email, int iContactTypeid, int GroupId, string disc, string gstno, string paymentdays, string CustomerID, double opbalancecridit, double opbalancDebit, string contactType)
        {
            int iSuccess = 0;

            string sQry1 = "insert into tblledger(LedgerName, MobileNo, PhoneNo,  Area,Address, City, Pincode, Email,ContactTypeID,IsActive,GroupId,Disc,Gstno,paymentdays,Open_Credit,Open_Depit,Type)values ('" + CustomerName + "','" + MobileNo + "','" + PhoneNo + "','" + Area + "','" + Address + "','" + City + "','" + Pincode + "','" + Email + "'," + iContactTypeid + ",'Yes'," + GroupId + ",'" + disc + "','" + gstno + "','" + paymentdays + "'," + opbalancecridit + "," + opbalancDebit + ",'" + contactType + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry1);

            DataSet ds = new DataSet();
            string sqry = "select isnull(max(Ledgerid),1) as Ledgerid from tblledger ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            //string sQry2 = "insert into tblCustomer(CustomerName, MobileNo, PhoneNo,  Area,Address, City, Pincode, Email,ContactTypeID,IsActive,LedgerId,disc,Gstno,UserID,CustomerID)values ('" + CustomerName + "','" + MobileNo + "','" + PhoneNo + "','" + Area + "','" + Address + "','" + City + "','" + Pincode + "','" + Email + "'," + iContactTypeid + ",'Yes','" + ds.Tables[0].Rows[0]["LedgerId"].ToString() + "','" + disc + "','" + gstno + "','" + UserID + "','" + CustomerID + "')";
            //iSuccess = dbObj.InlineExecuteNonQuery(sQry2);


            return Convert.ToInt32(ds.Tables[0].Rows[0]["LedgerId"].ToString());
        }

        public DataSet getbank(string Groupid)
        {
            DataSet ds = new DataSet();
            //string sQry = "select case contacttypeid when  1 then 'Customer' when 2 then 'Dealer'  when 3 then 'Manufaturer' else 'Vendor' end as ContactType,* from tblCustomer where IsActive='Yes'  order by customerid desc";
            string sQry = "select top 50 * from tblLedger c where c.IsActive='Yes' and c.Groupid='" + Groupid + "'  order by c.LedgerName asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getbank_search(string searchtext, string dropdownlist)
        {
            DataSet ds = new DataSet();
            //string sQry = "select case contacttypeid when  1 then 'Customer' when 2 then 'Dealer'  when 3 then 'Manufaturer' else 'Vendor' end as ContactType,* from tblCustomer where IsActive='Yes'  order by customerid desc";
            string sQry = "select * from tblledger where IsActive='Yes' and groupid='4' and " + dropdownlist + " like '%" + searchtext + "%'  order by LedgerName asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        public DataSet getbankAll(string Groupid)
        {
            DataSet ds = new DataSet();
            //string sQry = "select case contacttypeid when  1 then 'Customer' when 2 then 'Dealer'  when 3 then 'Manufaturer' else 'Vendor' end as ContactType,* from tblCustomer where IsActive='Yes'  order by customerid desc";
            string sQry = "select * from tblLedger c where c.IsActive='Yes' and c.Groupid='" + Groupid + "'  order by c.LedgerName asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region Payment
        public int insertPayment(string sTableName, DateTime BillDate, DateTime ChequeDate, string Customer, double NetAmount, string BankName, string ChequeNo, int Payment_ID, int BankId, double CloseDiscount, int userId, string PaymentType, int bankid)
        {
            int save = 0;
            int PaymentNo = 0;
            int PaymentID = 0;
            int AccID = 0;
            int CID = 0;
            int i = 0;
            string DayBookID;

            DataSet ds = new DataSet();
            string sQry1 = "select isnull(Max(PaymentNo+1),1) as PaymentNo from tblPayment_" + sTableName + "";
            ds = dbObj.InlineExecuteDataSet(sQry1);
            PaymentNo = Convert.ToInt32(ds.Tables[0].Rows[0]["PaymentNo"].ToString());

            if (Payment_ID == 1)
            {
                DataSet ds1 = getCashledgerId("Cash A/C _" + sTableName);
                AccID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);
                bankid = 0;
                ChequeNo = "0";
            }
            else if (Payment_ID == 5)
            {

                DataSet ds1 = getCashledgerId("Cash A/C _" + sTableName);
                AccID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                ChequeNo = "0";
            }
            else if (Payment_ID == 4)
            {

                AccID = Convert.ToInt32(bankid);
                ChequeNo = "0";
            }
            else
                AccID = Convert.ToInt32(bankid);

            string sample = "insert into tblDaybook_" + sTableName + "(TransDate, DebtorId, CreditorId,Narration,RefNo,Type,Amount) values('" + BillDate.ToString("yyyy/MM/dd") + "', " + Customer + ", " + AccID + ", 'Payment', '" + PaymentNo + "','" + "Payment" + "','" + NetAmount + "')";
            i = dbObj.InlineExecuteNonQuery(sample);



            string sQry = "select Max(TransNo) as TransNo from tblDaybook_" + sTableName + "";
            DataSet ds3 = dbObj.InlineExecuteDataSet(sQry);

            if (ds3 != null)
            {
                if (ds3.Tables[0].Rows.Count > 0)
                {
                    DayBookID = ds3.Tables[0].Rows[0]["TransNo"].ToString();

                    string sQry2 = "insert into tblPayment_" + sTableName + "(PaymentNo,PaymentDate,CustomerID,NetAmount,BankName,ChequeNo,Payment_ID,ChequeDate,BankId,CloseDiscount,userId,PaymentType,DaybookID)values(" + PaymentNo + ",'" + BillDate.ToString("yyyy/MM/dd") + "','" + Customer + "'," + NetAmount + ",'" + BankName + "','" + ChequeNo + "'," + Payment_ID + ",'" + ChequeDate.ToString("yyyy/MM/dd") + "'," + BankId + "," + CloseDiscount + "," + userId + ",'" + PaymentType + "','" + DayBookID + "')";
                    save = dbObj.InlineExecuteNonQuery(sQry2);
                }
            }


            DataSet ds14 = new DataSet();
            string sQry3 = "select Max(PaymentID) as PaymentID from tblPayment_" + sTableName + "";
            ds14 = dbObj.InlineExecuteDataSet(sQry3);

            PaymentID = Convert.ToInt32(ds14.Tables[0].Rows[0]["PaymentID"].ToString());

            return PaymentID;

        }
        #endregion

        #region  getCashledgerId
        public DataSet getCashledgerId(string Ledgername)
        {

            DataSet ds = new DataSet();
            string sQry = "select LedgerID from tblLedger where LedgerName='" + Ledgername + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }
        #endregion

        public double getLedgerOpeningBalance(int ledgerID, string type, string Branch)
        {
            string sConStr = string.Empty;
            string sQry = string.Empty;
            double amt = 0.0;
            if (Branch == "All")
            {
                if (type == "debit")
                    sQry = "SELECT Open_Depit  FROM tblLedger Where  ledgerID=" + ledgerID;
                else
                    sQry = "SELECT Open_Credit  FROM tblLedger Where  ledgerID=" + ledgerID;



                object amtObj;

                amtObj = dbObj.InlineExecuteScalar(sQry);

                if (amtObj != null && amtObj != DBNull.Value)
                    amt = (double)amtObj;
            }
            else
            {
                if (type == "debit")
                    sQry = "SELECT Open_Depit  FROM tblLedger Where branchcode='" + Branch + "' and   ledgerID=" + ledgerID;
                else
                    sQry = "SELECT Open_Credit  FROM tblLedger Where branchcode='" + Branch + "' and  ledgerID=" + ledgerID;



                object amtObj;

                amtObj = dbObj.InlineExecuteScalar(sQry);

                if (amtObj != null && amtObj != DBNull.Value)
                    amt = (double)amtObj;
            }

            return amt;
        }

        #region LedgerReportNEW
        public DataSet GetLedgers11(string stable)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();
            //string sQry = "select * from tblLedger where  IsActive='Yes' and Groupid in('1','2','18') order by ledgername asc";
            string sQry = "select * from tblLedger where  Groupid in('1','2','18') order by ledgername asc";
            ds = dbObj.InlineExecuteDataSet(sQry);

            //string sQry1 = "select * from tblLedger where  IsActive='Yes' and Groupid Not in('1','2','18') and Branchcode='" + stable + "' order by ledgername asc";
            string sQry1 = "select * from tblLedger where Groupid Not in('1','2','18') order by ledgername asc";
            dmerge = dbObj.InlineExecuteDataSet(sQry1);

            ds.Merge(dmerge);
            return ds;

        }

        public DataSet GetHeading()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblHeading";

            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet BranchtoNEW()
        {
            DataSet ds = new DataSet();
            string sQry = "  select * from tblbranch where isactive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet BranchfromNEW(string branch)
        {
            DataSet ds = new DataSet();
            string sQry = "  select * from tblbranch where branchcode='" + branch + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet ReportLedger(int Heading, int GroupID, int iLedgerID, DateTime dtSdate, DateTime dtEdate, string Branch)
        {
            double dDebitAmt = 0;
            double dCreditAmt = 0;
            string sTranDate = string.Empty;
            string sParticulars = "";

            string sVoucherType = string.Empty;

            string sLedgerID = "0";
            string sLedger = string.Empty;
            string sQry = string.Empty;
            string pQry = string.Empty;
            string City = "";
            string sConStr = string.Empty;

            DataSet dsParentQry;
            DataSet dsChildQry;

            dsParentQry = new DataSet();

            if (Branch == "All")
            {
                string sqry1 = "select * from tblbranch";
                DataSet ds1 = dbObj.InlineExecuteDataSet(sqry1);

                for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
                {
                    string sbranch = ds1.Tables[0].Rows[i]["Branchcode"].ToString();
                    City = ds1.Tables[0].Rows[i]["Branchname"].ToString();

                    //sQry = "SELECT NULL as TransDate,LedgerID as DebtorID,NULL as CreditorID,PreSalaryAdv as Amount,'Salary Loan' as Narration,'' as Type,'" + sbranch + "' as Brancht,'" + City + "' as Branchname,L.LedgerName ";
                    //sQry = sQry + "FROM tblLedger L ";

                    ////if (iLedgerID != 0)
                    //sQry = sQry + " WHERE ( L.LedgerID=" + iLedgerID + ") ";

                    ////if (GroupID != 0)
                    //sQry = sQry + " AND (L.GroupID=1) AND ContactTypeID=4 ";
                    //sQry = sQry + " AND (L.BranchCode='" + sbranch + "') ";

                    //sQry = sQry + " Union All ";

                    sQry = "SELECT TransDate,NULL as DebtorID,CreditorID,Amount,B.Narration,B.Type,'" + sbranch + "' as Brancht,'" + City + "' as Branchname,L.LedgerName ";
                    sQry = sQry + "FROM (((tblDayBook_" + sbranch + " B INNER JOIN tblLedger L ON L.LedgerID = B.CreditorID  ) ";
                    sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblHeading H ON H.HeadingID = G.HeadingID ) ";
                    sQry = sQry + "WHERE (TransDate >='" + Convert.ToDateTime(dtSdate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(dtEdate).ToString("yyyy-MM-dd") + "') ";

                    if (iLedgerID != 0)
                        sQry = sQry + " AND ( CreditorID=" + iLedgerID + ") ";

                    if (GroupID != 0)
                        sQry = sQry + " AND (G.GroupID=" + GroupID + ") ";

                    if (Heading != 0)
                        sQry = sQry + " AND (H.HeadingID =" + Heading + ") ";

                    sQry = sQry + " Union All ";

                    sQry = sQry + "SELECT TransDate,DebtorID,Null as CreditorID,Amount,B.Narration,B.Type,'" + sbranch + "' as Brancht,'" + City + "' as Branchname, L.LedgerName ";
                    sQry = sQry + "FROM (((tblDayBook_" + sbranch + " B INNER JOIN tblLedger L ON L.LedgerID = B.DebtorID ) ";
                    sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblHeading H ON H.HeadingID = G.HeadingID ) ";
                    sQry = sQry + " WHERE (TransDate >='" + Convert.ToDateTime(dtSdate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(dtEdate).ToString("yyyy-MM-dd") + "') ";

                    if (iLedgerID != 0)
                        sQry = sQry + " AND ( DebtorID=" + iLedgerID + ") ";

                    if (GroupID != 0)
                        sQry = sQry + " AND (G.GroupID=" + GroupID + ") ";

                    if (Heading != 0)
                        sQry = sQry + " AND (H.HeadingID =" + Heading + ") ";

                    sQry = sQry + "Order by TransDate ";

                    DataSet dstd = dbObj.InlineExecuteDataSet(sQry);

                    dsParentQry.Merge(dstd);
                }
            }
            else
            {
                string sqry1 = "select * from tblbranch where Branchcode='" + Branch + "'";
                DataSet ds1 = dbObj.InlineExecuteDataSet(sqry1);
                //string sbranch = ds1.Tables[0].Rows[0]["Branchcode"].ToString();
                City = ds1.Tables[0].Rows[0]["Branchname"].ToString();


                sQry = "SELECT TransDate,NULL as DebtorID,CreditorID,Amount,B.Narration,B.Type,'" + Branch + "' as Brancht,'" + City + "' as Branchname,L.LedgerName ";
                sQry = sQry + "FROM (((tblDayBook_" + Branch + " B INNER JOIN tblLedger L ON L.LedgerID = B.CreditorID ) ";
                sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblHeading H ON H.HeadingID = G.HeadingID ) ";
                sQry = sQry + "WHERE (TransDate >='" + Convert.ToDateTime(dtSdate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(dtEdate).ToString("yyyy-MM-dd") + "') ";

                if (iLedgerID != 0)
                    sQry = sQry + " AND ( CreditorID=" + iLedgerID + ") ";

                if (GroupID != 0)
                    sQry = sQry + " AND (G.GroupID=" + GroupID + ") ";

                if (Heading != 0)
                    sQry = sQry + " AND (H.HeadingID =" + Heading + ") ";

                sQry = sQry + " Union All ";

                sQry = sQry + "SELECT TransDate,DebtorID,Null as CreditorID,Amount,B.Narration,B.Type,'" + Branch + "' as Brancht,'" + City + "' as Branchname, L.LedgerName ";
                sQry = sQry + "FROM (((tblDayBook_" + Branch + " B INNER JOIN tblLedger L ON L.LedgerID = B.DebtorID ) ";
                sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblHeading H ON H.HeadingID = G.HeadingID ) ";
                sQry = sQry + " WHERE (TransDate >='" + Convert.ToDateTime(dtSdate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(dtEdate).ToString("yyyy-MM-dd") + "') ";

                if (iLedgerID != 0)
                    sQry = sQry + " AND ( DebtorID=" + iLedgerID + ") ";

                if (GroupID != 0)
                    sQry = sQry + " AND (G.GroupID=" + GroupID + ") ";

                if (Heading != 0)
                    sQry = sQry + " AND (H.HeadingID =" + Heading + ") ";

                sQry = sQry + "Order by TransDate ";

                dsParentQry = dbObj.InlineExecuteDataSet(sQry);
            }





            DataSet ds;
            DataTable dt;
            DataRow drNew;
            DataColumn dc;


            ds = new DataSet();
            dt = new DataTable();
            //dc = new DataColumn("Date");
            //dt.Columns.Add(dc);
            dt.Columns.Add("Date", typeof(DateTime));

            dc = new DataColumn("Ledger");
            dt.Columns.Add(dc);

            dc = new DataColumn("LedgerID");
            dt.Columns.Add(dc);

            dc = new DataColumn("Particulars");
            dt.Columns.Add(dc);

            dc = new DataColumn("Debit");
            dt.Columns.Add(dc);

            dc = new DataColumn("Credit");
            dt.Columns.Add(dc);

            dc = new DataColumn("Type");
            dt.Columns.Add(dc);

            dc = new DataColumn("Narration");
            dt.Columns.Add(dc);

            dc = new DataColumn("Branch");
            dt.Columns.Add(dc);

            dc = new DataColumn("Branchname");
            dt.Columns.Add(dc);

            string dd = string.Empty;
            DateTime frmdatee = DateTime.Now;
            DateTime sfrmdatee = DateTime.Now;
            string sw = "select * from tblDaybookDate where yearid='1'";
            DataSet d = dbObj.InlineExecuteDataSet(sw);
            if (d.Tables[0].Rows.Count > 0)
            {
                //  dd = d.Tables[0].Rows[0]["DayBookDate"].ToString();
                frmdatee = Convert.ToDateTime(d.Tables[0].Rows[0]["DayBookDate"]);
            }


            ds.Tables.Add(dt);
            drNew = dt.NewRow();
            drNew["Date"] = frmdatee;
            drNew["Ledger"] = "";
            drNew["LedgerID"] = "";
            drNew["Particulars"] = "";

            double opCr = getOpeningBalance(Heading, GroupID, iLedgerID, "credit", dtSdate, Branch);
            double opDr = getOpeningBalance(Heading, GroupID, iLedgerID, "debit", dtSdate, Branch);
            double netOp = 0;

            string sw1 = "select * from tblLedger where ledgerId='" + iLedgerID + "'";
            DataSet dn = dbObj.InlineExecuteDataSet(sw1);
            if (dn.Tables[0].Rows.Count > 0)
            {
                drNew["Particulars"] = dn.Tables[0].Rows[0]["Narration"].ToString();
            }

            if (opDr > opCr)
            {
                netOp = opDr - opCr;
                //lblOBDR.Text = netOp.ToString("f2");
                // lblOBCR.Text = "0.000";
            }
            else
            {
                netOp = opCr - opDr;
                // lblOBDR.Text = "0.000";
                //lblOBCR.Text = netOp.ToString("f2");
            }


            if (opDr > opCr)
            {
                drNew["Debit"] = netOp;
                drNew["Credit"] = 0;
            }
            else
            {
                drNew["Debit"] = 0;
                drNew["Credit"] = netOp;
            }
            drNew["Type"] = "OP";
            drNew["Narration"] = "Opening Balance";
            drNew["Branch"] = "";

            drNew["Branchname"] = "";

            ds.Tables[0].Rows.Add(drNew);

            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                drNew = dt.NewRow();
                drNew["Date"] = DateTime.Now;
                drNew["Ledger"] = string.Empty;
                drNew["LedgerID"] = string.Empty;
                drNew["Particulars"] = string.Empty;
                drNew["Debit"] = "0.000";
                drNew["Credit"] = "0.000";
                drNew["Type"] = string.Empty;
                drNew["Branch"] = string.Empty;

                drNew["Branchname"] = string.Empty;

                ds.Tables[0].Rows.Add(drNew);
            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    dDebitAmt = 0;
                    dCreditAmt = 0;
                    //string ggg = drParentQry["TransDate"].ToString();

                    if (drParentQry["TransDate"].ToString() != "")
                    {
                        if (drParentQry["TransDate"] != null)
                        {
                            //sTranDate = Convert.ToDateTime(drParentQry["TransDate"].ToString()).ToShortDateString();
                            sfrmdatee = Convert.ToDateTime(drParentQry["TransDate"]);

                        }
                    }
                    else
                    {
                        frmdatee = Convert.ToDateTime(DateTime.Now.ToString());
                    }

                    if (drParentQry["DebtorID"] != null)
                    {
                        if (drParentQry["DebtorID"].ToString() != "")
                        {
                            if (Convert.ToInt32(drParentQry["DebtorID"].ToString()) > 0)
                            {
                                dDebitAmt = Convert.ToDouble(drParentQry["Amount"].ToString());
                                pQry = "SELECT Ledgername as Ledgername,LedgerID FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["DebtorID"].ToString());
                            }
                        }
                    }
                    if (drParentQry["CreditorID"] != null)
                    {
                        if (drParentQry["CreditorID"].ToString() != "")
                        {
                            if (Convert.ToInt32(drParentQry["CreditorID"].ToString()) > 0)
                            {

                                dCreditAmt = Convert.ToDouble(drParentQry["Amount"].ToString());
                                pQry = "SELECT Ledgername as Ledgername, LedgerID FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["CreditorID"].ToString());
                            }
                        }
                    }

                    if (pQry != "")
                    {
                        dsChildQry = new DataSet();
                        dsChildQry = dbObj.InlineExecuteDataSet(pQry);
                        if (dsChildQry != null)
                        {
                            if (dsChildQry.Tables[0].Rows.Count > 0)
                            {
                                sParticulars = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                                sLedger = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                                sLedgerID = dsChildQry.Tables[0].Rows[0]["ledgerID"].ToString();
                            }
                        }
                    }

                    drNew = dt.NewRow();
                    drNew["Date"] = sfrmdatee;
                    drNew["Ledger"] = sLedger;
                    drNew["LedgerID"] = sLedgerID;
                    int i = sParticulars.IndexOf('_');
                    if (i > 0)
                    {
                        string[] var = sParticulars.Split('_');
                        string va1 = "SELECT branchname FROM tblbranch WHERE branchcode='" + var[1] + "'";
                        DataSet vwarna = new DataSet();
                        vwarna = dbObj.InlineExecuteDataSet(va1);


                        drNew["Particulars"] = var[0] + "_" + vwarna.Tables[0].Rows[0]["branchname"].ToString();

                    }
                    else
                    {
                        drNew["Particulars"] = sParticulars;
                    }

                    drNew["Debit"] = dDebitAmt.ToString();
                    drNew["Credit"] = dCreditAmt.ToString();
                    drNew["Type"] = Convert.ToString(drParentQry["Type"].ToString());
                    drNew["Narration"] = drParentQry["Narration"].ToString();
                    drNew["Branch"] = Convert.ToString(drParentQry["Brancht"].ToString());

                    drNew["Branchname"] = Convert.ToString(drParentQry["Branchname"].ToString());

                    ds.Tables[0].Rows.Add(drNew);
                }
            }
            return ds;
        }

        public double getOpeningBalance(int AccHeadingID, int GroupID, int ledgerID, string type, DateTime oDate, string Branch)
        {
            string sConStr = string.Empty;
            string sQry = string.Empty;

            double oBal = 0;
            int iLedID = 0;
            double amt = 0.0;

            if (type == "debit")
            {
                if (Branch == "All")
                {
                    string sqry1 = "select * from tblbranch";
                    DataSet ds12 = dbObj.InlineExecuteDataSet(sqry1);

                    for (int i = 0; i < ds12.Tables[0].Rows.Count; i++)
                    {
                        string sbranch = ds12.Tables[0].Rows[i]["Branchcode"].ToString();
                        DataSet ds1 = getCashledgerId("Cash A/C _" + sbranch + "");
                        iLedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                        sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_" + sbranch + " B Inner Join tblLedger L On L.LedgerID = B.DebtorID ) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + Convert.ToDateTime(oDate).ToString("yyyy-MM-dd") + "'";
                        if (ledgerID > 0)
                            sQry = sQry + " AND B.DebtorID = " + ledgerID.ToString();
                        if (AccHeadingID > 0)
                            sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                        if (GroupID > 0)
                            sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                        double vari = 0.00;

                        object amtObj;
                        amtObj = dbObj.InlineExecuteScalar(sQry);

                        if (amtObj != null && amtObj != DBNull.Value)
                            vari = Convert.ToDouble(amtObj);
                        amt = amt + vari;



                        //DataSet dst = getCashledgerId("Cash A/C _CO3");
                        //iLedID = Convert.ToInt32(dst.Tables[0].Rows[0]["LedgerID"]);

                        //sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_CO3 B Inner Join tblLedger L On L.LedgerID = B.DebtorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + oDate.ToString("yyyy-MM-dd") + "'";
                        //if (iLedID > 0)
                        //    sQry = sQry + " AND B.CreditorID = " + iLedID.ToString();
                        //if (AccHeadingID > 0)
                        //    sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                        //if (GroupID > 0)
                        //    sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                        //oBal = getLedgerOpeningBalance(iLedID, type, Branch);

                        //object amtObjt;
                        //amtObjt = dbObj.InlineExecuteScalar(sQry);

                        //if (amtObjt != null && amtObjt != DBNull.Value)
                        //    amt = Convert.ToDouble(amtObjt);

                        //amt = amt + oBal;

                        //DataSet dstt = getCashledgerId("Cash A/C _CO1");
                        //iLedID = Convert.ToInt32(dstt.Tables[0].Rows[0]["LedgerID"]);

                        //sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_CO1 B Inner Join tblLedger L On L.LedgerID = B.DebtorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + oDate.ToString("yyyy-MM-dd") + "'";
                        //if (iLedID > 0)
                        //    sQry = sQry + " AND B.CreditorID = " + iLedID.ToString();
                        //if (AccHeadingID > 0)
                        //    sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                        //if (GroupID > 0)
                        //    sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                        //oBal = getLedgerOpeningBalance(iLedID, type, Branch);

                        //object amtObjtt;
                        //amtObjtt = dbObj.InlineExecuteScalar(sQry);

                        //if (amtObjtt != null && amtObjtt != DBNull.Value)
                        //    amt = Convert.ToDouble(amtObjtt);

                        //amt = amt + oBal;
                    }
                    oBal = getLedgerOpeningBalance(ledgerID, type, Branch);
                    amt = amt + oBal;
                }
                else
                {
                    DataSet ds1 = getCashledgerId("Cash A/C _" + Branch);
                    iLedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                    sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_" + Branch + " B Inner Join tblLedger L On L.LedgerID = B.DebtorID ) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + Convert.ToDateTime(oDate).ToString("yyyy-MM-dd") + "' ";
                    if (ledgerID > 0)
                        sQry = sQry + " AND B.DebtorID = " + ledgerID.ToString();
                    if (AccHeadingID > 0)
                        sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                    if (GroupID > 0)
                        sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                    oBal = getLedgerOpeningBalance(ledgerID, type, Branch);

                    object amtObj;
                    amtObj = dbObj.InlineExecuteScalar(sQry);

                    if (amtObj != null && amtObj != DBNull.Value)
                        amt = Convert.ToDouble(amtObj);

                    amt = amt + oBal;
                }



            }
            else
            {
                if (Branch == "All")
                {
                    string sqry1 = "select * from tblbranch";
                    DataSet ds12 = dbObj.InlineExecuteDataSet(sqry1);

                    for (int i = 0; i < ds12.Tables[0].Rows.Count; i++)
                    {
                        string sbranch = ds12.Tables[0].Rows[i]["Branchcode"].ToString();
                        DataSet ds1 = getCashledgerId("Cash A/C _" + sbranch + "");
                        iLedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                        sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_" + sbranch + " B Inner Join tblLedger L On L.LedgerID = B.CreditorID ) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + Convert.ToDateTime(oDate).ToString("yyyy-MM-dd") + "'";
                        if (ledgerID > 0)
                            sQry = sQry + " AND B.CreditorID = " + ledgerID.ToString();
                        if (AccHeadingID > 0)
                            sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                        if (GroupID > 0)
                            sQry = sQry + " AND L.GroupID = " + GroupID.ToString();


                        double varr = 0.00;
                        object amtObj;
                        amtObj = dbObj.InlineExecuteScalar(sQry);

                        if (amtObj != null && amtObj != DBNull.Value)
                            varr = Convert.ToDouble(amtObj);
                        amt = amt + varr;


                    }
                    oBal = getLedgerOpeningBalance(ledgerID, type, Branch);
                    amt = amt + oBal;

                    //DataSet dst = getCashledgerId("Cash A/C _CO2");
                    //iLedID = Convert.ToInt32(dst.Tables[0].Rows[0]["LedgerID"]);

                    //sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_CO2 B Inner Join tblLedger L On L.LedgerID = B.CreditorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + oDate.ToString("yyyy-MM-dd") + "'";
                    //if (iLedID > 0)
                    //    sQry = sQry + " AND B.CreditorID = " + iLedID.ToString();
                    //if (AccHeadingID > 0)
                    //    sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                    //if (GroupID > 0)
                    //    sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                    //oBal = getLedgerOpeningBalance(iLedID, type, Branch);

                    //object amtObjt;
                    //amtObjt = dbObj.InlineExecuteScalar(sQry);

                    //if (amtObjt != null && amtObjt != DBNull.Value)
                    //    amt = Convert.ToDouble(amtObjt);

                    //amt = amt + oBal;


                    //DataSet dstt = getCashledgerId("Cash A/C _CO3");
                    //iLedID = Convert.ToInt32(dstt.Tables[0].Rows[0]["LedgerID"]);

                    //sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_CO3 B Inner Join tblLedger L On L.LedgerID = B.CreditorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + oDate.ToString("yyyy-MM-dd") + "'";
                    //if (iLedID > 0)
                    //    sQry = sQry + " AND B.CreditorID = " + iLedID.ToString();
                    //if (AccHeadingID > 0)
                    //    sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                    //if (GroupID > 0)
                    //    sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                    //oBal = getLedgerOpeningBalance(iLedID, type, Branch);

                    //object amtObjtt;
                    //amtObjtt = dbObj.InlineExecuteScalar(sQry);

                    //if (amtObjtt != null && amtObjtt != DBNull.Value)
                    //    amt = Convert.ToDouble(amtObjtt);

                    //amt = amt + oBal;

                }
                else
                {
                    DataSet ds1 = getCashledgerId("Cash A/C _" + Branch);
                    iLedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                    sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_" + Branch + " B Inner Join tblLedger L On L.LedgerID = B.CreditorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + Convert.ToDateTime(oDate).ToString("yyyy-MM-dd") + "' ";

                    if (ledgerID > 0)
                        sQry = sQry + " AND B.CreditorID = " + ledgerID.ToString();
                    if (AccHeadingID > 0)
                        sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                    if (GroupID > 0)
                        sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                    oBal = getLedgerOpeningBalance(ledgerID, type, Branch);

                    object amtObj;
                    amtObj = dbObj.InlineExecuteScalar(sQry);

                    if (amtObj != null && amtObj != DBNull.Value)
                        amt = Convert.ToDouble(amtObj);

                    amt = amt + oBal;
                }
            }



            return amt;
        }

        public DataSet getselectHeadingall()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblGroups";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet get_ledgerdetails(string ledgerid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblLedger where LedgerID='" + ledgerid + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getselectHeadingallbyheading(string groupid)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblGroups where GroupId='" + groupid + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
        #endregion

        #region CashAccountReport
        public DataSet generateReportCash(DateTime dtSdate, DateTime dtEdate, string Branch)
        {
            double dDebitAmt = 0;
            double dCreditAmt = 0;
            string sTranDate = string.Empty;
            string sParticulars = "";
            string sbranch = "";
            string City = "";
            string sVoucherType = string.Empty;
            string sqry = string.Empty;
            string pQry = string.Empty;
            string iLedgerID = string.Empty;

            DataSet dsParentQry = new DataSet();
            DataSet dsChildQry;
            DataSet ds12 = new DataSet();
            // Branch = "All";

            //if (Branch == "All")
            //{


            //    //DataSet dst = getCashledgerId("Cash A/C _CO2");
            //    //iLedgerID = iLedgerID + "," + Convert.ToString(dst.Tables[0].Rows[0]["LedgerID"]);

            //    //DataSet dstt = getCashledgerId("Cash A/C _CO3");
            //    //iLedgerID = iLedgerID + "," + Convert.ToString(dstt.Tables[0].Rows[0]["LedgerID"]);
            //}
            //else
            //{

            //}

            if (Branch == "All")
            {
                string sqry1 = "select * from tblbranch";
                ds12 = dbObj.InlineExecuteDataSet(sqry1);

                for (int i = 0; i < ds12.Tables[0].Rows.Count; i++)
                {
                    sbranch = ds12.Tables[0].Rows[i]["Branchcode"].ToString();
                    City = ds12.Tables[0].Rows[i]["City"].ToString();
                    DataSet ds1 = getCashledgerId("Cash A/C _" + sbranch + "");
                    iLedgerID = Convert.ToString(ds1.Tables[0].Rows[0]["LedgerID"]);
                    //  sbranch = "CO1";
                    sqry = "SELECT TransDate,DebtorID,CreditorID,Amount,Narration,Type,'" + sbranch + "' as Brancht ,'" + City + "' as Branchname FROM tblDayBook_" + sbranch + " WHERE (DebtorID in (" + iLedgerID + ") OR CreditorID in (" + iLedgerID + ") ) AND (TransDate >='" + Convert.ToDateTime(dtSdate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(dtEdate).ToString("yyyy-MM-dd") + "') Order by TransDate ";
                    ds1 = dbObj.InlineExecuteDataSet(sqry);

                    dsParentQry.Merge(ds1);
                }
            }
            else
            {
                string sqry1 = "select * from tblbranch where Branchcode='" + Branch + "'";
                ds12 = dbObj.InlineExecuteDataSet(sqry1);
                City = ds12.Tables[0].Rows[0]["City"].ToString();

                DataSet ds1 = getCashledgerId("Cash A/C _" + Branch);
                iLedgerID = Convert.ToString(ds1.Tables[0].Rows[0]["LedgerID"]);

                sqry = "SELECT TransDate,DebtorID,CreditorID,Amount,Narration,Type,'" + Branch + "' as Brancht,'" + City + "' as Branchname FROM tblDayBook_" + Branch + " WHERE (DebtorID in (" + iLedgerID + ") OR CreditorID in (" + iLedgerID + ") ) AND (TransDate >='" + Convert.ToDateTime(dtSdate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(dtEdate).ToString("yyyy-MM-dd") + "') Order by TransDate ";
                dsParentQry = dbObj.InlineExecuteDataSet(sqry);
            }



            DataSet ds;
            DataTable dt;
            DataRow drNew;
            DataColumn dc;


            ds = new DataSet();
            dt = new DataTable();
            dc = new DataColumn("Date");
            dt.Columns.Add(dc);

            dc = new DataColumn("Particulars");
            dt.Columns.Add(dc);

            dc = new DataColumn("BranchCode");
            dt.Columns.Add(dc);

            dc = new DataColumn("Debit");
            dt.Columns.Add(dc);

            dc = new DataColumn("Credit");
            dt.Columns.Add(dc);

            dc = new DataColumn("Type");
            dt.Columns.Add(dc);

            dc = new DataColumn("Narration");
            dt.Columns.Add(dc);


            dc = new DataColumn("BranchName");
            dt.Columns.Add(dc);


            ds.Tables.Add(dt);

            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                drNew = dt.NewRow();
                drNew["Date"] = string.Empty;
                drNew["Particulars"] = string.Empty;
                drNew["BranchCode"] = string.Empty;
                drNew["Debit"] = "0.000";
                drNew["Credit"] = "0.000";
                drNew["Type"] = string.Empty;


                drNew["BranchName"] = string.Empty;

                ds.Tables[0].Rows.Add(drNew);
            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    dDebitAmt = 0;
                    dCreditAmt = 0;


                    if (drParentQry["TransDate"] != null)
                    {
                        sTranDate = Convert.ToDateTime(drParentQry["TransDate"].ToString()).ToString("yyyy-MM-dd");
                    }
                    if (drParentQry["Type"] != null)
                    {
                        sVoucherType = Convert.ToString(drParentQry["Type"].ToString());
                    }

                    if (drParentQry["DebtorID"] != null)
                    {
                        DataSet ds1 = getCashledgerId("Cash A/C _" + drParentQry["Brancht"].ToString());
                        int iLedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                        if (Convert.ToInt32(drParentQry["DebtorID"].ToString()) == Convert.ToInt32(iLedID))
                        {
                            dDebitAmt = Convert.ToDouble(drParentQry["Amount"].ToString());
                            pQry = "SELECT Ledgername as Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["CreditorID"].ToString());
                        }
                    }
                    if (drParentQry["CreditorID"] != null)
                    {
                        DataSet ds1 = getCashledgerId("Cash A/C _" + drParentQry["Brancht"].ToString());
                        int iLedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                        if (Convert.ToInt32(drParentQry["CreditorID"].ToString()) == Convert.ToInt32(iLedID))
                        {

                            dCreditAmt = Convert.ToDouble(drParentQry["Amount"].ToString());
                            pQry = "SELECT Ledgername as Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["DebtorID"].ToString());
                        }
                    }

                    if (pQry != "")
                    {
                        dsChildQry = dbObj.InlineExecuteDataSet(pQry);
                        if (dsChildQry != null)
                        {
                            if (dsChildQry.Tables[0].Rows.Count > 0)
                            {
                                sParticulars = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();

                            }
                        }
                    }

                    drNew = dt.NewRow();
                    drNew["Date"] = sTranDate;
                    drNew["Particulars"] = sParticulars;
                    drNew["Narration"] = drParentQry["Narration"].ToString();
                    drNew["BranchCode"] = Convert.ToString(drParentQry["Brancht"].ToString());
                    drNew["Debit"] = dDebitAmt.ToString();
                    drNew["Credit"] = dCreditAmt.ToString();
                    drNew["Type"] = sVoucherType;


                    drNew["BranchName"] = Convert.ToString(drParentQry["Branchname"].ToString());

                    ds.Tables[0].Rows.Add(drNew);
                }
            }

            return ds;
        }


        public double getOpeningBalancecashaccount(int AccHeadingID, int GroupID, int ledgerID, string type, DateTime oDate, string Branch)
        {
            string sConStr = string.Empty;
            string sQry = string.Empty;

            double oBal = 0;
            double oBal1 = 0;
            int iLedID = 0;
            double amt = 0.0;
            double amt1 = 0.0;
            if (type == "debit")
            {
                if (Branch == "All")
                {
                    string sqry1 = "select * from tblbranch";
                    DataSet ds12 = dbObj.InlineExecuteDataSet(sqry1);

                    for (int i = 0; i < ds12.Tables[0].Rows.Count; i++)
                    {
                        string sbranch = ds12.Tables[0].Rows[i]["Branchcode"].ToString();
                        DataSet ds1 = getCashledgerId("Cash A/C _" + sbranch + "");
                        iLedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                        sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_" + sbranch + " B Inner Join tblLedger L On L.LedgerID = B.DebtorID ) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + Convert.ToDateTime(oDate).ToString("yyyy-MM-dd") + "'";
                        if (iLedID > 0)
                            sQry = sQry + " AND B.DebtorID = " + iLedID.ToString();
                        if (AccHeadingID > 0)
                            sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                        if (GroupID > 0)
                            sQry = sQry + " AND L.GroupID = " + GroupID.ToString();



                        object amtObj;
                        amtObj = dbObj.InlineExecuteScalar(sQry);

                        if (amtObj != null && amtObj != DBNull.Value)
                            amt1 = Convert.ToDouble(amtObj);

                        oBal1 = getLedgerOpeningBalance(iLedID, type, Branch);
                        amt = amt + amt1;
                        oBal = oBal + oBal1;
                        //DataSet dst = getCashledgerId("Cash A/C _CO3");
                        //iLedID = Convert.ToInt32(dst.Tables[0].Rows[0]["LedgerID"]);

                        //sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_CO3 B Inner Join tblLedger L On L.LedgerID = B.DebtorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + oDate.ToString("yyyy-MM-dd") + "'";
                        //if (iLedID > 0)
                        //    sQry = sQry + " AND B.CreditorID = " + iLedID.ToString();
                        //if (AccHeadingID > 0)
                        //    sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                        //if (GroupID > 0)
                        //    sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                        //oBal = getLedgerOpeningBalance(iLedID, type, Branch);

                        //object amtObjt;
                        //amtObjt = dbObj.InlineExecuteScalar(sQry);

                        //if (amtObjt != null && amtObjt != DBNull.Value)
                        //    amt = Convert.ToDouble(amtObjt);

                        //amt = amt + oBal;

                        //DataSet dstt = getCashledgerId("Cash A/C _CO1");
                        //iLedID = Convert.ToInt32(dstt.Tables[0].Rows[0]["LedgerID"]);

                        //sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_CO1 B Inner Join tblLedger L On L.LedgerID = B.DebtorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + oDate.ToString("yyyy-MM-dd") + "'";
                        //if (iLedID > 0)
                        //    sQry = sQry + " AND B.CreditorID = " + iLedID.ToString();
                        //if (AccHeadingID > 0)
                        //    sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                        //if (GroupID > 0)
                        //    sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                        //oBal = getLedgerOpeningBalance(iLedID, type, Branch);

                        //object amtObjtt;
                        //amtObjtt = dbObj.InlineExecuteScalar(sQry);

                        //if (amtObjtt != null && amtObjtt != DBNull.Value)
                        //    amt = Convert.ToDouble(amtObjtt);

                        //amt = amt + oBal;
                    }
                    amt = amt + oBal;
                }
                else
                {
                    DataSet ds1 = getCashledgerId("Cash A/C _" + Branch);
                    iLedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                    sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_" + Branch + " B Inner Join tblLedger L On L.LedgerID = B.DebtorID ) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + Convert.ToDateTime(oDate).ToString("yyyy-MM-dd") + "' ";
                    if (iLedID > 0)
                        sQry = sQry + " AND B.DebtorID = " + iLedID.ToString();
                    if (AccHeadingID > 0)
                        sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                    if (GroupID > 0)
                        sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                    oBal = getLedgerOpeningBalance(iLedID, type, Branch);

                    object amtObj;
                    amtObj = dbObj.InlineExecuteScalar(sQry);

                    if (amtObj != null && amtObj != DBNull.Value)
                        amt = Convert.ToDouble(amtObj);

                    amt = amt + oBal;
                }



            }
            else
            {
                if (Branch == "All")
                {
                    string sqry1 = "select * from tblbranch";
                    DataSet ds12 = dbObj.InlineExecuteDataSet(sqry1);

                    for (int i = 0; i < ds12.Tables[0].Rows.Count; i++)
                    {
                        string sbranch = ds12.Tables[0].Rows[i]["Branchcode"].ToString();
                        DataSet ds1 = getCashledgerId("Cash A/C _" + sbranch + "");
                        iLedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                        sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_" + sbranch + " B Inner Join tblLedger L On L.LedgerID = B.CreditorID ) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + Convert.ToDateTime(oDate).ToString("yyyy-MM-dd") + "'";
                        if (iLedID > 0)
                            sQry = sQry + " AND B.CreditorID = " + iLedID.ToString();
                        if (AccHeadingID > 0)
                            sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                        if (GroupID > 0)
                            sQry = sQry + " AND L.GroupID = " + GroupID.ToString();



                        object amtObj;
                        amtObj = dbObj.InlineExecuteScalar(sQry);

                        if (amtObj != null && amtObj != DBNull.Value)
                            amt1 = Convert.ToDouble(amtObj);

                        oBal1 = getLedgerOpeningBalance(iLedID, type, Branch);
                        amt = amt + amt1;
                        oBal = oBal + oBal1;
                    }
                    amt = amt + oBal;

                    //DataSet dst = getCashledgerId("Cash A/C _CO2");
                    //iLedID = Convert.ToInt32(dst.Tables[0].Rows[0]["LedgerID"]);

                    //sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_CO2 B Inner Join tblLedger L On L.LedgerID = B.CreditorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + oDate.ToString("yyyy-MM-dd") + "'";
                    //if (iLedID > 0)
                    //    sQry = sQry + " AND B.CreditorID = " + iLedID.ToString();
                    //if (AccHeadingID > 0)
                    //    sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                    //if (GroupID > 0)
                    //    sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                    //oBal = getLedgerOpeningBalance(iLedID, type, Branch);

                    //object amtObjt;
                    //amtObjt = dbObj.InlineExecuteScalar(sQry);

                    //if (amtObjt != null && amtObjt != DBNull.Value)
                    //    amt = Convert.ToDouble(amtObjt);

                    //amt = amt + oBal;


                    //DataSet dstt = getCashledgerId("Cash A/C _CO3");
                    //iLedID = Convert.ToInt32(dstt.Tables[0].Rows[0]["LedgerID"]);

                    //sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_CO3 B Inner Join tblLedger L On L.LedgerID = B.CreditorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + oDate.ToString("yyyy-MM-dd") + "'";
                    //if (iLedID > 0)
                    //    sQry = sQry + " AND B.CreditorID = " + iLedID.ToString();
                    //if (AccHeadingID > 0)
                    //    sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                    //if (GroupID > 0)
                    //    sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                    //oBal = getLedgerOpeningBalance(iLedID, type, Branch);

                    //object amtObjtt;
                    //amtObjtt = dbObj.InlineExecuteScalar(sQry);

                    //if (amtObjtt != null && amtObjtt != DBNull.Value)
                    //    amt = Convert.ToDouble(amtObjtt);

                    //amt = amt + oBal;

                }
                else
                {
                    DataSet ds1 = getCashledgerId("Cash A/C _" + Branch);
                    iLedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                    sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_" + Branch + " B Inner Join tblLedger L On L.LedgerID = B.CreditorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + Convert.ToDateTime(oDate).ToString("yyyy-MM-dd") + "' ";

                    if (iLedID > 0)
                        sQry = sQry + " AND B.CreditorID = " + iLedID.ToString();
                    if (AccHeadingID > 0)
                        sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                    if (GroupID > 0)
                        sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                    oBal = getLedgerOpeningBalance(iLedID, type, Branch);

                    object amtObj;
                    amtObj = dbObj.InlineExecuteScalar(sQry);

                    if (amtObj != null && amtObj != DBNull.Value)
                        amt = Convert.ToDouble(amtObj);

                    amt = amt + oBal;
                }
            }



            return amt;
        }


        #endregion

        #region BankStatementReport
        public DataSet generateRep(int iLedgerID, DateTime dtSdate, DateTime dtEdate, string Branch)
        {
            double dDebitAmt = 0;
            double dCreditAmt = 0;
            string sTranDate = string.Empty;
            string sParticulars = "";
            string sQry = string.Empty;
            string pQry = string.Empty;

            DataSet dsParentQry = new DataSet();
            DataSet dss = new DataSet();
            DataSet dsChildQry;

            if (Branch == "All")
            {
                string sqry1 = "select * from tblbranch";
                DataSet ds1 = dbObj.InlineExecuteDataSet(sqry1);

                for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
                {
                    string sbranch = ds1.Tables[0].Rows[i]["Branchcode"].ToString();
                    sQry = "SELECT TransDate,DebtorID,CreditorID,Amount,Narration,Type,'" + sbranch + "' as Brancht FROM tblDayBook_" + sbranch + " WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND (TransDate >='" + dtSdate.ToString("MM/dd/yyyy") + "' AND TransDate <='" + dtEdate.ToString("MM/dd/yyyy") + "') Order by TransDate ";
                    dss = dbObj.InlineExecuteDataSet(sQry);

                    //sbranch = "CO2";
                    //sQry = "SELECT TransDate,DebtorID,CreditorID,Amount,Narration,Type,'" + sbranch + "' as Brancht FROM tblDayBook_" + sbranch + " WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND (TransDate >='" + dtSdate.ToString("MM/dd/yyyy") + "' AND TransDate <='" + dtEdate.ToString("MM/dd/yyyy") + "') Order by TransDate ";
                    //DataSet dst = dbObj.InlineExecuteDataSet(sQry);
                    //dsParentQry.Merge(dst);

                    //sbranch = "CO3";
                    //sQry = "SELECT TransDate,DebtorID,CreditorID,Amount,Narration,Type,'" + sbranch + "' as Brancht FROM tblDayBook_" + sbranch + " WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND (TransDate >='" + dtSdate.ToString("MM/dd/yyyy") + "' AND TransDate <='" + dtEdate.ToString("MM/dd/yyyy") + "') Order by TransDate ";
                    //DataSet dstd = dbObj.InlineExecuteDataSet(sQry);
                    dsParentQry.Merge(dss);
                }
            }
            else
            {
                sQry = "SELECT TransDate,DebtorID,CreditorID,Amount,Narration,Type,'" + Branch + "' as Brancht FROM tblDayBook_" + Branch + " WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND (TransDate >='" + dtSdate.ToString("MM/dd/yyyy") + "' AND TransDate <='" + dtEdate.ToString("MM/dd/yyyy") + "') Order by TransDate ";
                dsParentQry = dbObj.InlineExecuteDataSet(sQry);
            }

            DataSet ds = new DataSet();
            DataTable dt;
            DataRow drNew;
            DataColumn dc;

            dt = new DataTable();
            dc = new DataColumn("Date");
            dt.Columns.Add(dc);

            dc = new DataColumn("Particulars");
            dt.Columns.Add(dc);

            dc = new DataColumn("Branch");
            dt.Columns.Add(dc);

            dc = new DataColumn("Debit");
            dt.Columns.Add(dc);

            dc = new DataColumn("Credit");
            dt.Columns.Add(dc);

            dc = new DataColumn("Type");
            dt.Columns.Add(dc);

            dc = new DataColumn("Narration");
            dt.Columns.Add(dc);

            ds.Tables.Add(dt);

            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                drNew = dt.NewRow();
                drNew["Date"] = string.Empty;
                drNew["Particulars"] = string.Empty;
                drNew["Branch"] = string.Empty;
                drNew["Debit"] = "0.000";
                drNew["Credit"] = "0.000";
                drNew["Type"] = string.Empty;
                drNew["Narration"] = string.Empty;
                ds.Tables[0].Rows.Add(drNew);
            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    dDebitAmt = 0;
                    dCreditAmt = 0;


                    if (drParentQry["TransDate"] != null)
                    {
                        sTranDate = Convert.ToDateTime(drParentQry["TransDate"].ToString()).ToShortDateString();
                    }

                    if (drParentQry["DebtorID"] != null)
                    {
                        if (Convert.ToInt32(drParentQry["DebtorID"].ToString()) == iLedgerID)
                        {
                            dDebitAmt = Convert.ToDouble(drParentQry["Amount"].ToString());
                            pQry = "SELECT Ledgername as  Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["CreditorID"].ToString());
                        }
                    }
                    if (drParentQry["CreditorID"] != null)
                    {
                        if (Convert.ToInt32(drParentQry["CreditorID"].ToString()) == iLedgerID)
                        {

                            dCreditAmt = Convert.ToDouble(drParentQry["Amount"].ToString());
                            pQry = "SELECT Ledgername as Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["DebtorID"].ToString());
                        }
                    }

                    if (pQry != "")
                    {
                        dsChildQry = new DataSet();
                        dsChildQry = dbObj.InlineExecuteDataSet(pQry);
                        if (dsChildQry != null)
                        {
                            if (dsChildQry.Tables[0].Rows.Count > 0)
                            {
                                sParticulars = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                            }
                        }
                    }

                    drNew = dt.NewRow();
                    drNew["Date"] = sTranDate;
                    drNew["Particulars"] = sParticulars;
                    drNew["Branch"] = drParentQry["Brancht"].ToString();
                    drNew["Narration"] = drParentQry["Narration"].ToString();
                    drNew["Debit"] = dDebitAmt.ToString();
                    drNew["Credit"] = dCreditAmt.ToString();
                    drNew["Type"] = Convert.ToString(drParentQry["Type"].ToString());

                    ds.Tables[0].Rows.Add(drNew);
                }
            }
            return ds;
        }

        public double getOpeningBalanceforbank(int AccHeadingID, int GroupID, int ledgerID, string type, DateTime oDate, string Branch)
        {
            string sConStr = string.Empty;
            string sQry = string.Empty;

            double oBal = 0;
            int iLedID = 0;
            double amt = 0.0;

            if (type == "debit")
            {
                if (Branch == "All Branches")
                {
                    string sqry1 = "select * from tblbranch";
                    DataSet ds12 = dbObj.InlineExecuteDataSet(sqry1);

                    for (int i = 0; i < ds12.Tables[0].Rows.Count; i++)
                    {
                        string sbranch = ds12.Tables[0].Rows[i]["Branchcode"].ToString();
                        //DataSet ds1 = getCashledgerId("Cash A/C _" + sbranch + "");
                        //iLedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                        sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_" + sbranch + " B Inner Join tblLedger L On L.LedgerID = B.DebtorID ) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + Convert.ToDateTime(oDate).ToString("yyyy-MM-dd") + "'";
                        if (ledgerID > 0)
                            sQry = sQry + " AND B.DebtorID = " + ledgerID.ToString();
                        if (AccHeadingID > 0)
                            sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                        if (GroupID > 0)
                            sQry = sQry + " AND L.GroupID = " + GroupID.ToString();



                        object amtObj;
                        amtObj = dbObj.InlineExecuteScalar(sQry);

                        if (amtObj != null && amtObj != DBNull.Value)
                            amt = Convert.ToDouble(amtObj);

                        oBal = getLedgerOpeningBalance(ledgerID, type, Branch);
                        amt = amt + oBal;
                    }

                }
                else
                {
                    //DataSet ds1 = getCashledgerId("Cash A/C _" + Branch);
                    //iLedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                    sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_" + Branch + " B Inner Join tblLedger L On L.LedgerID = B.DebtorID ) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + Convert.ToDateTime(oDate).ToString("yyyy-MM-dd") + "' ";
                    if (ledgerID > 0)
                        sQry = sQry + " AND B.DebtorID = " + ledgerID.ToString();
                    if (AccHeadingID > 0)
                        sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                    if (GroupID > 0)
                        sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                    oBal = getLedgerOpeningBalance(ledgerID, type, Branch);

                    object amtObj;
                    amtObj = dbObj.InlineExecuteScalar(sQry);

                    if (amtObj != null && amtObj != DBNull.Value)
                        amt = Convert.ToDouble(amtObj);

                    amt = amt + oBal;
                }



            }
            else
            {
                if (Branch == "All Branches")
                {
                    string sqry1 = "select * from tblbranch";
                    DataSet ds12 = dbObj.InlineExecuteDataSet(sqry1);

                    for (int i = 0; i < ds12.Tables[0].Rows.Count; i++)
                    {
                        string sbranch = ds12.Tables[0].Rows[i]["Branchcode"].ToString();
                        //DataSet ds1 = getCashledgerId("Cash A/C _" + sbranch + "");
                        //iLedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                        sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_" + sbranch + " B Inner Join tblLedger L On L.LedgerID = B.CreditorID ) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + Convert.ToDateTime(oDate).ToString("yyyy-MM-dd") + "'";
                        if (ledgerID > 0)
                            sQry = sQry + " AND B.CreditorID = " + ledgerID.ToString();
                        if (AccHeadingID > 0)
                            sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                        if (GroupID > 0)
                            sQry = sQry + " AND L.GroupID = " + GroupID.ToString();



                        object amtObj;
                        amtObj = dbObj.InlineExecuteScalar(sQry);

                        if (amtObj != null && amtObj != DBNull.Value)
                            amt = Convert.ToDouble(amtObj);

                        oBal = getLedgerOpeningBalance(ledgerID, type, Branch);
                        amt = amt + oBal;
                    }


                    //DataSet dst = getCashledgerId("Cash A/C _CO2");
                    //iLedID = Convert.ToInt32(dst.Tables[0].Rows[0]["LedgerID"]);

                    //sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_CO2 B Inner Join tblLedger L On L.LedgerID = B.CreditorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + oDate.ToString("yyyy-MM-dd") + "'";
                    //if (iLedID > 0)
                    //    sQry = sQry + " AND B.CreditorID = " + iLedID.ToString();
                    //if (AccHeadingID > 0)
                    //    sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                    //if (GroupID > 0)
                    //    sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                    //oBal = getLedgerOpeningBalance(iLedID, type, Branch);

                    //object amtObjt;
                    //amtObjt = dbObj.InlineExecuteScalar(sQry);

                    //if (amtObjt != null && amtObjt != DBNull.Value)
                    //    amt = Convert.ToDouble(amtObjt);

                    //amt = amt + oBal;


                    //DataSet dstt = getCashledgerId("Cash A/C _CO3");
                    //iLedID = Convert.ToInt32(dstt.Tables[0].Rows[0]["LedgerID"]);

                    //sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_CO3 B Inner Join tblLedger L On L.LedgerID = B.CreditorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + oDate.ToString("yyyy-MM-dd") + "'";
                    //if (iLedID > 0)
                    //    sQry = sQry + " AND B.CreditorID = " + iLedID.ToString();
                    //if (AccHeadingID > 0)
                    //    sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                    //if (GroupID > 0)
                    //    sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                    //oBal = getLedgerOpeningBalance(iLedID, type, Branch);

                    //object amtObjtt;
                    //amtObjtt = dbObj.InlineExecuteScalar(sQry);

                    //if (amtObjtt != null && amtObjtt != DBNull.Value)
                    //    amt = Convert.ToDouble(amtObjtt);

                    //amt = amt + oBal;

                }
                else
                {
                    //  DataSet ds1 = getCashledgerId("Cash A/C _" + Branch);
                    //  iLedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["LedgerID"]);

                    sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook_" + Branch + " B Inner Join tblLedger L On L.LedgerID = B.CreditorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblHeading H On H.HeadingID = G.HeadingID) Where TransDate <'" + Convert.ToDateTime(oDate).ToString("yyyy-MM-dd") + "' ";

                    if (ledgerID > 0)
                        sQry = sQry + " AND B.CreditorID = " + ledgerID.ToString();
                    if (AccHeadingID > 0)
                        sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
                    if (GroupID > 0)
                        sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

                    oBal = getLedgerOpeningBalance(ledgerID, type, Branch);

                    object amtObj;
                    amtObj = dbObj.InlineExecuteScalar(sQry);

                    if (amtObj != null && amtObj != DBNull.Value)
                        amt = Convert.ToDouble(amtObj);

                    amt = amt + oBal;
                }
            }



            return amt;
        }

        #endregion

        #region GENERATE DAYBOOK DATE
        public DataSet getdaybookdate(string comanyid)
        {
            DataSet dss = new DataSet();
            string sqr = "Select * from tblDaybookDate where yearid='" + comanyid + "'";
            dss = dbObj.InlineExecuteDataSet(sqr);
            return dss;

        }
        #endregion

        #region DaybookNEW

        public DataSet generateDayBook(DateTime dtSdate, DateTime dtEdate, string Branch)
        {
            Decimal dDebitAmt, dCreditAmt, dSumDr, dSumCr, dDiffDrCr;
            string sDebtor = string.Empty;
            string sCreditor = string.Empty;
            string sTranDate = string.Empty;
            string iQry = "";
            string sqry = string.Empty;
            string sConStr = string.Empty;
            string sNarration = string.Empty;
            DataSet dsParentQry = new DataSet();
            DataSet dsChildQry;
            DataSet dss = new DataSet();

            string dBranchcode = string.Empty;

            if (Branch == "All")
            {

                string sqry1 = "select * from tblbranch";
                DataSet ds1 = dbObj.InlineExecuteDataSet(sqry1);

                for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
                {
                    string sbranch = ds1.Tables[0].Rows[i]["Branchcode"].ToString();
                    // string sbranch = "CO1";
                    sqry = "SELECT TransDate,DebtorID,CreditorID,Amount,Narration,'" + sbranch + "' as Brancht,type FROM tblDayBook_" + sbranch + " WHERE  (TransDate >='" + Convert.ToDateTime(dtSdate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(dtEdate).ToString("yyyy-MM-dd") + "') Order by TransDate asc";
                    //sqry = "SELECT TransDate,DebtorID,CreditorID,Amount,Narration,'" + sbranch + "' as Brancht,type FROM tblDayBook_" + sbranch + " WHERE  (TransDate >='" + Convert.ToDateTime(dtSdate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(dtEdate).ToString("yyyy-MM-dd") + "') " +
                    //     " UNION ALL " +
                    //     " select c.TransDate,c.DebtorID,c.CreditorID,c.Amount,'Sales Bill No:' + cast(a.BillNo as nvarchar) + '-' + e.category + '-' + d.serial_no + '-' + b.KitCode + '-' + b.refno + '-' + b.torefno + '-' + 'Qty:' + cast(b.Quantity as nvarchar) as Narration, " +
                    //     " '" + sbranch + "' as Brancht,c.type FROM tblSales_" + Branch + " a " +
                    //     " inner join tbltranssales_" + sbranch + " b on a.salesid = b.salesid " +
                    //     " inner join tblDayBook_" + sbranch + " c on a.daybookid = c.TransNo " +
                    //     " inner join tblCategoryUser d on b.SubCategoryID = d.CategoryUserID " +
                    //     " inner join tblcategory e on d.categoryid = e.categoryid " +
                    //     " WHERE (c.TransDate >='" + Convert.ToDateTime(dtSdate).ToString("yyyy-MM-dd") + "' AND c.TransDate <='" + Convert.ToDateTime(dtEdate).ToString("yyyy-MM-dd") + "') " +
                    //     " Order by TransDate asc";
                    dss = dbObj.InlineExecuteDataSet(sqry);

                    //sbranch = "CO2";
                    //sqry = "SELECT TransDate,DebtorID,CreditorID,Amount,Narration,'" + sbranch + "' as Brancht FROM tblDayBook_" + sbranch + " WHERE  (TransDate >='" + dtSdate.ToString("MM/dd/yyyy") + "' AND TransDate <='" + dtEdate.ToString("MM/dd/yyyy") + "') Order by TransDate Desc";
                    //DataSet dst = dbObj.InlineExecuteDataSet(sqry);

                    //dsParentQry.Merge(dst);

                    //sbranch = "CO3";
                    //sqry = "SELECT TransDate,DebtorID,CreditorID,Amount,Narration,'" + sbranch + "' as Brancht FROM tblDayBook_" + sbranch + " WHERE  (TransDate >='" + dtSdate.ToString("MM/dd/yyyy") + "' AND TransDate <='" + dtEdate.ToString("MM/dd/yyyy") + "') Order by TransDate Desc";
                    //DataSet dstt = dbObj.InlineExecuteDataSet(sqry);

                    dsParentQry.Merge(dss);

                }
            }
            else
            {
                sqry = "SELECT TransDate,DebtorID,CreditorID,Amount,Narration,'" + Branch + "' as Brancht,type FROM tblDayBook_" + Branch + " WHERE (TransDate >='" + Convert.ToDateTime(dtSdate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(dtEdate).ToString("yyyy-MM-dd") + "') Order by TransDate asc";
                //sqry = "SELECT TransDate,DebtorID,CreditorID,Amount,Narration,'" + Branch + "' as Brancht,type FROM tblDayBook_" + Branch + " WHERE (TransDate >='" + Convert.ToDateTime(dtSdate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(dtEdate).ToString("yyyy-MM-dd") + "') and type != 'Sales'" +
                //       " UNION ALL " +
                //       " select c.TransDate,c.DebtorID,c.CreditorID,c.Amount,'Sales Bill No:' + cast(a.BillNo as nvarchar) + '-' + e.category + '-' + d.serial_no + '-' + b.KitCode + '-' + b.refno + '-' + b.torefno + '-' + 'Qty:' + cast(b.Quantity as nvarchar) as Narration, " +
                //       " '" + Branch + "' as Brancht,c.type FROM tblSales_" + Branch + " a " +
                //       " inner join tbltranssales_" + Branch + " b on a.salesid = b.salesid " +
                //       " inner join tblDayBook_" + Branch + " c on a.daybookid = c.TransNo " +
                //       " inner join tblCategoryUser d on b.SubCategoryID = d.CategoryUserID " +
                //       " inner join tblcategory e on d.categoryid = e.categoryid " +
                //       " WHERE (c.TransDate >='" + Convert.ToDateTime(dtSdate).ToString("yyyy-MM-dd") + "' AND c.TransDate <='" + Convert.ToDateTime(dtEdate).ToString("yyyy-MM-dd") + "') " +
                //       " Order by TransDate asc";

                dsParentQry = dbObj.InlineExecuteDataSet(sqry);
            }



            dSumDr = 0;
            dSumCr = 0;
            dDiffDrCr = 0;
            DataSet ds;
            DataTable dt;
            DataRow drNew;
            DataColumn dc;


            ds = new DataSet();
            dt = new DataTable();
            dc = new DataColumn("Date");
            dt.Columns.Add(dc);

            dc = new DataColumn("Narration");
            dt.Columns.Add(dc);

            dc = new DataColumn("Debit");
            dt.Columns.Add(dc);

            dc = new DataColumn("Credit");
            dt.Columns.Add(dc);

            dc = new DataColumn("Debitor");
            dt.Columns.Add(dc);

            dc = new DataColumn("Creditor");
            dt.Columns.Add(dc);

            dc = new DataColumn("Branchcode");
            dt.Columns.Add(dc);

            dc = new DataColumn("Type");
            dt.Columns.Add(dc);


            ds.Tables.Add(dt);
            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                drNew = dt.NewRow();
                drNew["Date"] = string.Empty;
                drNew["Narration"] = string.Empty;
                drNew["Debit"] = "0.000";
                drNew["Credit"] = "0.000";
                drNew["Debitor"] = string.Empty;
                drNew["Creditor"] = string.Empty;
                ds.Tables[0].Rows.Add(drNew);
            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    dDebitAmt = 0;
                    dCreditAmt = 0;

                    if (drParentQry["TransDate"] != null)
                    {
                        sTranDate = Convert.ToDateTime(drParentQry["TransDate"].ToString()).ToShortDateString();
                    }


                    if (drParentQry["Narration"] != null)
                    {
                        sNarration = drParentQry["Narration"].ToString();
                    }

                    if (drParentQry["CreditorID"] != null)
                    {
                        dDebitAmt = Convert.ToDecimal(drParentQry["Amount"].ToString());
                        iQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["CreditorID"].ToString());
                        dSumCr = dSumCr + dCreditAmt;
                        dsChildQry = dbObj.InlineExecuteDataSet(iQry);

                        if (dsChildQry != null)
                        {
                            if (dsChildQry.Tables[0].Rows.Count > 0)
                                sCreditor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                            else
                                sCreditor = "";
                        }
                        else
                        {
                            sCreditor = "";
                        }
                    }

                    if (drParentQry["DebtorID"] != null)
                    {

                        dCreditAmt = Convert.ToDecimal(drParentQry["Amount"].ToString());
                        iQry = "SELECT Ledgername  FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["DebtorID"].ToString());
                        dSumDr = dSumDr + dDebitAmt;
                        dsChildQry = dbObj.InlineExecuteDataSet(iQry);

                        if (dsChildQry != null)
                        {
                            if (dsChildQry.Tables[0].Rows.Count > 0)
                                sDebtor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                            else
                                sDebtor = "";
                        }
                        else
                        {
                            sDebtor = "";
                        }
                    }

                    drNew = dt.NewRow();
                    drNew["Date"] = sTranDate;
                    drNew["Narration"] = sNarration;


                    drNew["Branchcode"] = drParentQry["Brancht"].ToString();

                    if (drParentQry["type"].ToString() == "Money Transfer")
                    {
                        int i = sDebtor.IndexOf('_');
                        if (i > 0)
                        {
                            string[] var = sDebtor.Split('_');
                            if (Branch == var[1])
                            {
                                string va1 = "SELECT City FROM tblbranch WHERE branchcode='" + var[1] + "'";
                                DataSet vwarna = new DataSet();
                                vwarna = dbObj.InlineExecuteDataSet(va1);


                                drNew["Debitor"] = var[0] + "_" + vwarna.Tables[0].Rows[0]["City"].ToString();
                                //  drNew["Debitor"] = sDebtor;
                                drNew["Debit"] = dDebitAmt.ToString();

                                drNew["Creditor"] = "";
                                drNew["Credit"] = "";
                            }
                            else
                            {
                                drNew["Debitor"] = "";
                                drNew["Debit"] = "";

                                drNew["Creditor"] = sCreditor;
                                drNew["Credit"] = dCreditAmt.ToString();
                            }
                        }
                        else
                        {
                            drNew["Debitor"] = "";
                            drNew["Debit"] = "";
                            int ij = sCreditor.IndexOf('_');
                            if (ij > 0)
                            {
                                string[] var = sCreditor.Split('_');
                                string va1 = "SELECT City FROM tblbranch WHERE branchcode='" + var[1] + "'";
                                DataSet vwarna = new DataSet();
                                vwarna = dbObj.InlineExecuteDataSet(va1);


                                drNew["Creditor"] = var[0] + "_" + vwarna.Tables[0].Rows[0]["City"].ToString();

                                //drNew["Creditor"] = sCreditor;
                                drNew["Credit"] = dCreditAmt.ToString();
                            }
                        }
                    }
                    else
                    {
                        //(sDebtor == "Cash A/C _Bigprod") || (sDebtor == "Cash A/C _Big") || (sDebtor == "Cash A/C _Bigstore") ||
                        if ((sDebtor == "Cash A/C _CO1") || (sDebtor == "Cash A/C _CO2") || (sDebtor == "Cash A/C _CO3") || (sDebtor == "Cash A/C _CO4") || (sDebtor == "Cash A/C _CO5") || (sDebtor == "Cash A/C _CO6") || (sDebtor == "Cash A/C _CO7") || (sDebtor == "Cash A/C _CO8") || (sDebtor == "Cash A/C _CO9") || (sDebtor == "Cash A/C _CO10"))
                        {
                            drNew["Debitor"] = "";
                            drNew["Debit"] = "";
                        }
                        else
                        {
                            int i = sDebtor.IndexOf('_');
                            if (i > 0)
                            {
                                string[] var = sDebtor.Split('_');
                                string va1 = "SELECT City FROM tblbranch WHERE branchcode='" + var[1] + "'";
                                DataSet vwarna = new DataSet();
                                vwarna = dbObj.InlineExecuteDataSet(va1);


                                drNew["Debitor"] = var[0] + "_" + vwarna.Tables[0].Rows[0]["City"].ToString();

                            }
                            else
                            {
                                drNew["Debitor"] = sDebtor;
                            }

                            drNew["Debit"] = dDebitAmt.ToString();
                        }
                        //(sCreditor == "Cash A/C _Bigprod") || (sCreditor == "Cash A/C _Big") || (sCreditor == "Cash A/C _Bigstore") || 
                        if ((sCreditor == "Cash A/C _CO1") || (sCreditor == "Cash A/C _CO2") || (sCreditor == "Cash A/C _CO3") || (sCreditor == "Cash A/C _CO4") || (sCreditor == "Cash A/C _CO5") || (sCreditor == "Cash A/C _CO6") || (sCreditor == "Cash A/C _CO7") || (sCreditor == "Cash A/C _CO8") || (sCreditor == "Cash A/C _CO9") || (sCreditor == "Cash A/C _CO10"))
                        {
                            drNew["Creditor"] = "";
                            drNew["Credit"] = "";
                        }
                        else
                        {
                            int i = sCreditor.IndexOf('_');
                            if (i > 0)
                            {
                                string[] var = sCreditor.Split('_');
                                string va1 = "SELECT City FROM tblbranch WHERE branchcode='" + var[1] + "'";
                                DataSet vwarna = new DataSet();
                                vwarna = dbObj.InlineExecuteDataSet(va1);


                                drNew["Creditor"] = var[0] + "_" + vwarna.Tables[0].Rows[0]["City"].ToString();

                            }
                            else
                            {
                                drNew["Creditor"] = sCreditor;
                            }

                            drNew["Credit"] = dCreditAmt.ToString();

                        }
                    }
                    drNew["Type"] = drParentQry["type"].ToString();
                    ds.Tables[0].Rows.Add(drNew);
                }
            }
            return ds;
        }

        #endregion

        #region TrailBalanceDatewise
        public DataSet GetTrailGroups()
        {
            string sQry = string.Empty;
            DataSet ds = new DataSet();
            sQry = "SELECT tblGroups.GroupID, tblGroups.GroupName,tblHeading.TrailBalance FROM tblGroups, tblHeading WHERE tblHeading.HeadingID = tblGroups.HeadingID and tblgroups.groupid not in ('7')";

            ds = dbObj.InlineExecuteDataSet(sQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }

        public double GetDebitSumDatewise(int GroupID, DateTime sDate, DateTime eDate, string branchcode)
        {
            double debitSum = 0;

            double oB = 0;
            DataSet ds = new DataSet();
            string sQry = string.Empty;

            //oB = GetOpBal(GroupID, sDate, "debit", branchcode);

            if (branchcode == "All")
            {
                string sqry1 = "select * from tblbranch";
                DataSet ds12 = dbObj.InlineExecuteDataSet(sqry1);

                for (int i = 0; i < ds12.Tables[0].Rows.Count; i++)
                {
                    string sbranch = ds12.Tables[0].Rows[i]["Branchcode"].ToString();
                    // sQry = "Select SUM(Amount) As DebitSum FROM tblDayBook_" + sbranch + " WHERE  DebtorID IN (Select LedgerID FROM tblLedger Where GroupID=" + GroupID + " and BranchCode='" + sbranch + "') AND (TransDate >='" + Convert.ToDateTime(sDate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(eDate).ToString("yyyy-MM-dd") + "')";
                    sQry = "Select SUM(Amount) As DebitSum FROM tblDayBook_" + sbranch + " WHERE  DebtorID IN (Select LedgerID FROM tblLedger Where GroupID=" + GroupID + ") AND (TransDate >='" + Convert.ToDateTime(sDate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(eDate).ToString("yyyy-MM-dd") + "')";
                    object retVal = dbObj.InlineExecuteScalar(sQry);
                    double debitSumt = 0;

                    if (retVal != null && retVal != DBNull.Value)
                    {
                        debitSumt = Convert.ToDouble(dbObj.InlineExecuteScalar(sQry));
                    }
                    debitSum = debitSum + debitSumt;
                }
            }
            else
            {

                //sQry = "Select SUM(Amount) As DebitSum FROM tblDayBook_" + branchcode + " WHERE  DebtorID IN (Select LedgerID FROM tblLedger Where GroupID=" + GroupID + " and BranchCode='" + branchcode + "') AND (TransDate >='" + Convert.ToDateTime(sDate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(eDate).ToString("yyyy-MM-dd") + "')";
                sQry = "Select SUM(Amount) As DebitSum FROM tblDayBook_" + branchcode + " WHERE  DebtorID IN (Select LedgerID FROM tblLedger Where GroupID=" + GroupID + ") AND (TransDate >='" + Convert.ToDateTime(sDate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(eDate).ToString("yyyy-MM-dd") + "')";
                object retVal = dbObj.InlineExecuteScalar(sQry);
                double debitSumt = 0;

                if (retVal != null && retVal != DBNull.Value)
                {
                    debitSumt = Convert.ToDouble(dbObj.InlineExecuteScalar(sQry));
                }
                debitSum = debitSum + debitSumt;

            }
            debitSum = debitSum + oB;

            return debitSum;

        }

        public double GetCreditSumDatewise(int GroupID, DateTime sDate, DateTime eDate, string branchcode)
        {
            double creditSum = 0;

            double oB = 0;
            DataSet ds = new DataSet();
            string sQry = string.Empty;

            //oB = GetOpBal(GroupID, sDate, "credit", branchcode);
            if (branchcode == "All")
            {
                string sqry1 = "select * from tblbranch";
                DataSet ds12 = dbObj.InlineExecuteDataSet(sqry1);

                for (int i = 0; i < ds12.Tables[0].Rows.Count; i++)
                {
                    string sbranch = ds12.Tables[0].Rows[i]["Branchcode"].ToString();
                    //sQry = "Select SUM(Amount) As CreditSum FROM tblDayBook_" + sbranch + " WHERE  CreditorID IN (Select LedgerID FROM tblLedger Where GroupID=" + GroupID + " and BranchCode='" + sbranch + "') AND (TransDate >='" + Convert.ToDateTime(sDate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(eDate).ToString("yyyy-MM-dd") + "')";
                    sQry = "Select SUM(Amount) As CreditSum FROM tblDayBook_" + sbranch + " WHERE  CreditorID IN (Select LedgerID FROM tblLedger Where GroupID=" + GroupID + ") AND (TransDate >='" + Convert.ToDateTime(sDate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(eDate).ToString("yyyy-MM-dd") + "')";
                    object retVal = dbObj.InlineExecuteScalar(sQry);

                    double creditSumt = 0;
                    if (retVal != null && retVal != DBNull.Value)
                    {
                        creditSumt = Convert.ToDouble(dbObj.InlineExecuteScalar(sQry));
                    }
                    creditSum = creditSum + creditSumt;
                }
            }
            else
            {
                //sQry = "Select SUM(Amount) As CreditSum FROM tblDayBook_" + branchcode + " WHERE  CreditorID IN (Select LedgerID FROM tblLedger Where GroupID=" + GroupID + " and BranchCode='" + branchcode + "') AND (TransDate >='" + Convert.ToDateTime(sDate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(eDate).ToString("yyyy-MM-dd") + "')";
                sQry = "Select SUM(Amount) As CreditSum FROM tblDayBook_" + branchcode + " WHERE  CreditorID IN (Select LedgerID FROM tblLedger Where GroupID=" + GroupID + ") AND (TransDate >='" + Convert.ToDateTime(sDate).ToString("yyyy-MM-dd") + "' AND TransDate <='" + Convert.ToDateTime(eDate).ToString("yyyy-MM-dd") + "')";
                object retVal = dbObj.InlineExecuteScalar(sQry);

                double creditSumt = 0;
                if (retVal != null && retVal != DBNull.Value)
                {
                    creditSumt = Convert.ToDouble(dbObj.InlineExecuteScalar(sQry));
                }
                creditSum = creditSum + creditSumt;
            }

            creditSum = creditSum + oB;

            return creditSum;
        }

        public DataSet getLedgerTransactionDatewise(int groupID, DateTime sDate, DateTime eDate, string branchcode)
        {
            DataSet dsParentQry = new DataSet();
            string sQry = string.Empty;
            string sConStr = string.Empty;
            double db = 0;
            double cr = 0;
            double tot = 0;
            DataSet ds = new DataSet();
            DataSet dsNew = new DataSet();

            if (branchcode == "All")
            {
                string sqry1 = "select * from tblbranch";
                ds = dbObj.InlineExecuteDataSet(sqry1);

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string branch = ds.Tables[0].Rows[i]["branchcode"].ToString();
                    if (groupID != 0)
                        sQry = "SELECT  LedgerID, LedgerName as LedgerName FROM tblLedger,tblGroups Where tblLedger.GroupID=tblGroups.GroupID and tblLedger.BranchCode='" + branch + "' AND tblGroups.GroupID=" + groupID + "  ORDER by LedgerName,LedgerID";
                    else
                        sQry = "SELECT  LedgerID, LedgerName as LedgerName FROM tblLedger,tblGroups Where tblLedger.GroupID=tblGroups.GroupID and tblLedger.BranchCode='" + branch + "'   ORDER by LedgerName,LedgerID";
                    DataSet ds1 = new DataSet();
                    ds1 = dbObj.InlineExecuteDataSet(sQry);

                    dsParentQry.Merge(ds1);
                }


                //DataSet dsNew = new DataSet();
                DataTable dtNew = new DataTable();

                DataColumn dcNew = new DataColumn();
                DataRow drNew;
                dcNew = new DataColumn("LedgerName");
                dtNew.Columns.Add(dcNew);
                dcNew = new DataColumn("LedgerID");
                dtNew.Columns.Add(dcNew);
                dcNew = new DataColumn("Folionumber");
                dtNew.Columns.Add(dcNew);
                dcNew = new DataColumn("Branch");
                dtNew.Columns.Add(dcNew);
                dcNew = new DataColumn("Debit");
                dtNew.Columns.Add(dcNew);
                dcNew = new DataColumn("Credit");
                dtNew.Columns.Add(dcNew);


                dsNew.Tables.Add(dtNew);

                if (dsParentQry != null)
                {
                    if (dsParentQry.Tables[0] != null)
                    {
                        if (dsParentQry.Tables[0].Rows.Count == 0)
                        {
                            drNew = dtNew.NewRow();
                            drNew["LedgerID"] = "";
                            drNew["LedgerName"] = "";
                            drNew["Branch"] = "";
                            drNew["Debit"] = "";
                            drNew["Credit"] = "";
                            drNew["Folionumber"] = "";

                            dsNew.Tables[0].Rows.Add(drNew);

                        }
                        else
                        {
                            foreach (DataRow dr in dsParentQry.Tables[0].Rows)
                            {
                                drNew = dtNew.NewRow();
                                drNew["LedgerID"] = Convert.ToString(dr["LedgerID"]);
                                drNew["LedgerName"] = Convert.ToString(dr["LedgerName"]);


                                db = GetTotalDebitDatewise(Convert.ToInt32(dr["LedgerID"]), sDate, eDate, branchcode);
                                cr = GetTotalCreditDatewise(Convert.ToInt32(dr["LedgerID"]), sDate, eDate, branchcode);

                                tot = db - cr;
                                if (tot > 0)
                                {
                                    drNew["Debit"] = tot.ToString("f3");
                                    drNew["Credit"] = "0";
                                }
                                else
                                {
                                    drNew["Debit"] = "0";
                                    drNew["Credit"] = Math.Abs(tot).ToString("f3");
                                }
                                if (db != 0 || cr != 0)
                                {
                                    if (tot != 0.000 || tot != 0)
                                        dsNew.Tables[0].Rows.Add(drNew);
                                }

                            }

                        }
                    }
                }
            }
            else
            {

                if (groupID != 0)
                    sQry = "SELECT  LedgerID, LedgerName as LedgerName FROM tblLedger,tblGroups Where tblLedger.GroupID=tblGroups.GroupID AND tblGroups.GroupID=" + groupID + "  ORDER by LedgerName,LedgerID";
                else
                    sQry = "SELECT  LedgerID, LedgerName as  LedgerName FROM tblLedger,tblGroups Where tblLedger.GroupID=tblGroups.GroupID ORDER by LedgerName,LedgerID";

                DataSet ds1 = new DataSet();
                ds1 = dbObj.InlineExecuteDataSet(sQry);

                dsParentQry.Merge(ds1);
                //DataSet dsNew = new DataSet();
                DataTable dtNew = new DataTable();

                DataColumn dcNew = new DataColumn();
                DataRow drNew;
                dcNew = new DataColumn("LedgerName");
                dtNew.Columns.Add(dcNew);
                dcNew = new DataColumn("LedgerID");
                dtNew.Columns.Add(dcNew);
                dcNew = new DataColumn("Folionumber");
                dtNew.Columns.Add(dcNew);
                dcNew = new DataColumn("Branch");
                dtNew.Columns.Add(dcNew);
                dcNew = new DataColumn("Debit");
                dtNew.Columns.Add(dcNew);
                dcNew = new DataColumn("Credit");
                dtNew.Columns.Add(dcNew);


                dsNew.Tables.Add(dtNew);

                if (dsParentQry != null)
                {
                    if (dsParentQry.Tables[0] != null)
                    {
                        if (dsParentQry.Tables[0].Rows.Count == 0)
                        {
                            drNew = dtNew.NewRow();
                            drNew["LedgerID"] = "";
                            drNew["LedgerName"] = "";
                            drNew["Branch"] = "";
                            drNew["Debit"] = "";
                            drNew["Credit"] = "";
                            drNew["Folionumber"] = "";

                            dsNew.Tables[0].Rows.Add(drNew);

                        }
                        else
                        {
                            foreach (DataRow dr in dsParentQry.Tables[0].Rows)
                            {
                                drNew = dtNew.NewRow();
                                drNew["LedgerID"] = Convert.ToString(dr["LedgerID"]);
                                drNew["LedgerName"] = Convert.ToString(dr["LedgerName"]);


                                db = GetTotalDebitDatewise(Convert.ToInt32(dr["LedgerID"]), sDate, eDate, branchcode);
                                cr = GetTotalCreditDatewise(Convert.ToInt32(dr["LedgerID"]), sDate, eDate, branchcode);

                                tot = db - cr;
                                if (tot > 0)
                                {
                                    drNew["Debit"] = tot.ToString("f3");
                                    drNew["Credit"] = "";
                                }
                                else
                                {
                                    drNew["Debit"] = "";
                                    drNew["Credit"] = Math.Abs(tot).ToString("f3");
                                }
                                if (db != 0 || cr != 0)
                                {
                                    if (tot != 0)
                                        dsNew.Tables[0].Rows.Add(drNew);
                                    //if (tot != 0.000)
                                    //    dsNew.Tables[0].Rows.Add(drNew);
                                }

                            }

                        }
                    }
                }
            }
            return dsNew;
        }

        public double GetTotalDebitDatewise(int iLedgerID, DateTime sDate, DateTime eDate, string branchcode)
        {
            DataSet dsParentQry;
            string sQry = string.Empty;
            string sConStr = string.Empty;

            double oB = 0;

            // oB = getOpeningBalance(0, 0, iLedgerID, "debit", sDate, branchcode);

            double amt = 0.0d;

            if (branchcode == "All")
            {
                string sqry1 = "select * from tblbranch";
                DataSet ds12 = dbObj.InlineExecuteDataSet(sqry1);

                for (int i = 0; i < ds12.Tables[0].Rows.Count; i++)
                {
                    string sbranch = ds12.Tables[0].Rows[i]["Branchcode"].ToString();

                    sQry = "SELECT SUM(Amount) FROM tblDayBook_" + sbranch + " Where  (tblDayBook_" + sbranch + ".TransDate>='" + Convert.ToDateTime(sDate).ToString("yyyy-MM-dd") + "' AND tblDayBook_" + sbranch + ".TransDate <='" + Convert.ToDateTime(eDate).ToString("yyyy-MM-dd") + "') AND tblDayBook_" + sbranch + ".DebtorID=" + iLedgerID;
                    object retVal = dbObj.InlineExecuteScalar(sQry);

                    double amtt = 0.0d;

                    if (retVal != null)
                    {
                        if (retVal.ToString() != "")
                            amtt = Convert.ToDouble(retVal);
                    }



                    amt = amt + amtt;



                }
            }
            else
            {


                sQry = "SELECT SUM(Amount) FROM tblDayBook_" + branchcode + " Where  (tblDayBook_" + branchcode + ".TransDate>='" + Convert.ToDateTime(sDate).ToString("yyyy-MM-dd") + "' AND tblDayBook_" + branchcode + ".TransDate <='" + Convert.ToDateTime(eDate).ToString("yyyy-MM-dd") + "') AND tblDayBook_" + branchcode + ".DebtorID=" + iLedgerID;
                object retVal = dbObj.InlineExecuteScalar(sQry);

                double amtt = 0.0d;

                if (retVal != null)
                {
                    if (retVal.ToString() != "")
                        amtt = Convert.ToDouble(retVal);
                }



                amt = amt + amtt;


            }

            amt = amt + oB;
            return amt;
        }

        public double GetTotalCreditDatewise(int iLedgerID, DateTime sDate, DateTime eDate, string branchcode)
        {
            DataSet dsParentQry;
            string sQry = string.Empty;
            string sConStr = string.Empty;

            double amt = 0.0d;

            double oB = 0;
            //oB = getOpeningBalance(0, 0, iLedgerID, "credit", sDate, branchcode);


            if (branchcode == "All")
            {
                string sqry1 = "select * from tblbranch";
                DataSet ds12 = dbObj.InlineExecuteDataSet(sqry1);

                for (int i = 0; i < ds12.Tables[0].Rows.Count; i++)
                {
                    string sbranch = ds12.Tables[0].Rows[i]["Branchcode"].ToString();
                    sQry = "SELECT SUM(Amount) FROM tblDayBook_" + sbranch + " Where  (tblDayBook_" + sbranch + ".TransDate>='" + Convert.ToDateTime(sDate).ToString("yyyy-MM-dd") + "' AND tblDayBook_" + sbranch + ".TransDate <='" + Convert.ToDateTime(eDate).ToString("yyyy-MM-dd") + "')  AND  tblDayBook_" + sbranch + ".CreditorID=" + iLedgerID;
                    object retVal = dbObj.InlineExecuteScalar(sQry);

                    double amtt = 0.0d;
                    if (retVal != null)
                    {
                        if (retVal.ToString() != "")
                            amtt = Convert.ToDouble(retVal);
                    }

                    amt = amt + amtt;
                }
            }
            else
            {
                sQry = "SELECT SUM(Amount) FROM tblDayBook_" + branchcode + " Where  (tblDayBook_" + branchcode + ".TransDate>='" + Convert.ToDateTime(sDate).ToString("yyyy-MM-dd") + "' AND tblDayBook_" + branchcode + ".TransDate <='" + Convert.ToDateTime(eDate).ToString("yyyy-MM-dd") + "')  AND  tblDayBook_" + branchcode + ".CreditorID=" + iLedgerID;
                object retVal = dbObj.InlineExecuteScalar(sQry);

                double amtt = 0.0d;
                if (retVal != null)
                {
                    if (retVal.ToString() != "")
                        amtt = Convert.ToDouble(retVal);
                }

                amt = amt + amtt;

            }
            amt = amt + oB;

            return amt;

        }

        #endregion

        #region VERSION

        public DataSet GetVersion(string Process)
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (Process == "S")
            {
                sqry = "select * from tbl_version where ISCurrentVersion='Y'";
            }
            else
            {
                sqry = "select * from tbl_version";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion

        #region BULK ITEM CHECK
        public DataSet CheckBarcode(string Barcode)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCategoryUser where BarCode='" + Barcode + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        public int InsertBulkmargin(string CategoryId)
        {
            int iSuccess = 0;
            DataSet dss = new DataSet();
            string max1 = "select * from tblBranch where BranchType=0";
            dss = dbObj.InlineExecuteDataSet(max1);

            for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
            {
                string branchcode = dss.Tables[0].Rows[i]["Branchcode"].ToString();
                string BranchId = dss.Tables[0].Rows[i]["BranchId"].ToString();

                string chk = "Select * from tblmargin where Categoryid='" + CategoryId + "' and BranchID='" + BranchId + "'";
                DataSet dchk = dbObj.InlineExecuteDataSet(chk);
                if (dchk.Tables[0].Rows.Count > 0)
                {
                }
                else
                {
                    string sQry = "insert into tblMargin( CategoryId,BranchID,Margin,BranchCode) values ('" + CategoryId + "','" + BranchId + "','0','" + branchcode + "')";
                    iSuccess = dbObj.InlineExecuteNonQuery(sQry);
                }
            }

            return iSuccess;
        }

        #endregion

        #region ORDER UOM
        public DataSet Get_orderuom()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblorderuom where isactive='Yes'  order by bindvalue asc";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #endregion

        #region BRANCH COSTING REPORT
        public DataSet opvalue(string sBranch, DateTime sFmdate)
        {
            DataSet ds = new DataSet();

            string sqry = "select sum(cast(a.qty as float) * b.Rate) as opvalue,cast(Date as date) as date from tblOpeningStock_" + sBranch + " as a inner join tblcategoryuser as b on b.CategoryUserID=a.SubcategoryID " +
                         " where cast(Date as date)='" + Convert.ToDateTime(sFmdate).ToString("yyyy/MM/dd") + "' group by cast(Date as date)";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;


        }

        public DataSet closingvalue(string sBranch, DateTime sFmdate)
        {
            DataSet ds = new DataSet();

            string sqry = "select sum(cast(a.qty as float) * b.Rate) as closevalue,cast(dayclosedate as date) as date from tblOpeningStock_" + sBranch + " as a inner join tblcategoryuser as b on b.CategoryUserID=a.SubcategoryID " +
                         " where cast(dayclosedate as date)='" + Convert.ToDateTime(sFmdate).ToString("yyyy/MM/dd") + "' group by cast(dayclosedate as date)";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;


        }



        public DataSet currentstockvalue(string sBranch, DateTime sFmdate)
        {
            DataSet ds = new DataSet();

            string sqry = "select sum(cast(a.Available_QTY as float) * b.Rate) as closevalue from tblStock_" + sBranch + " as a " +
                " inner join tblcategoryuser as b on b.CategoryUserID=a.SubcategoryID ";


            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;


        }


        public DataSet grnvalue(string sBranch, DateTime sFmdate)
        {
            DataSet ds = new DataSet();

            string sqry = "select sum(cast(a.GRN_Qty as float) * b.Rate) as grnvalue,cast(Date as date) as date from tblgrn as a inner join tblCategoryUser as b on b.CategoryUserID=a.CategoryUserID " +
                         " where cast(Date as date)='" + Convert.ToDateTime(sFmdate).ToString("yyyy/MM/dd") + "' group by cast(Date as date)";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;


        }


        public DataSet salesvalue(string sBranch, DateTime sFmdate)
        {
            DataSet ds = new DataSet();

            string sqry = "select sum(cast(b.Quantity as float) * b.UnitPrice) as salevalue,cast(BillDate as date) as date from tblsales_" + sBranch + " as a inner join tbltranssales_" + sBranch + " as b on b.Salesuniqueid=a.SalesID " +
                          " inner join tblCategoryUser as c on c.CategoryUserID=b.SubCategoryID where cast(billDate as date)='" + Convert.ToDateTime(sFmdate).ToString("yyyy/MM/dd") + "' group by cast(billDate as date)";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;


        }

        public DataSet marginvalue(string sBranch, DateTime sFmdate)
        {
            DataSet ds = new DataSet();

            string sqry = "select ( sum(cast(b.Quantity as float) * b.UnitPrice) * m.margin /100) as MarginValue,cast(BillDate as date) as date from tblsales_" + sBranch + " as a  " +
                          " inner join tbltranssales_" + sBranch + " as b on b.Salesuniqueid=a.SalesID inner join tblCategoryUser as c on c.CategoryUserID=b.SubCategoryID " +
                          " inner join tblcategory as d on d.Categoryid=c.categoryid inner join tblmargin as m on m.categoryid=d.categoryid " +
                          " where cast(billDate as date)='" + Convert.ToDateTime(sFmdate).ToString("yyyy/MM/dd") + "' and  m.BranchCode='" + sBranch + "' group by cast(billDate as date),m.margin";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;


        }

        public DataSet stockreturtnvalue(string sBranch, DateTime sFmdate)
        {
            DataSet ds = new DataSet();

            string sqry = "select sum(cast(b.Quantity as float) * b.UnitPrice) as retvalue,cast(retdate as date) as date from tblReturn_" + sBranch + " as a  " +
                            " inner join tblTransReturn_" + sBranch + " as b on b.RetNo=a.RetNo inner join tblCategoryUser as c on c.CategoryUserID=b.SubCategoryID " +
                        " where cast(retdate as date)='" + Convert.ToDateTime(sFmdate).ToString("yyyy/MM/dd") + "' group by cast(retdate as date)";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;


        }


        public DataSet branchexpense(string sBranch, DateTime sFmdate)
        {
            DataSet ds = new DataSet();

            string sqry = "select sum(amount) as expamount,date from tblpaymententry_" + sBranch + " where date='" + Convert.ToDateTime(sFmdate).ToString("yyyy/MM/dd") + "' group by Date";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;


        }

        public DataSet variableexpense(string sBranch, DateTime sFmdate)
        {
            DataSet ds = new DataSet();

            string sqry = "Select isnull(sum(perdayexpense),0) as perdayamount from tblVariableExpense where Branchcode='" + sBranch + "'";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;


        }
        #endregion

        #region variable expense
        public DataSet getvariableexpense()
        {
            DataSet ds = new DataSet();
            string qr = "select a.*,b.branchname from tblvariableexpense as a inner join tblbranch as b on b.BranchId=a.Branchid";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }



        public DataSet searchvariableexpense(string expensename)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblvariableexpense where VariableName='" + expensename + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }


        public int insert_variabelexpense(string Branchid, string Branchcode, string VariableName, string TotalExpense, string Day, string PerDayExpense)
        {
            int i = 0;
            string sqry = "insert into tblvariableexpense (Branchid,Branchcode,VariableName,TotalExpense,Day,PerDayExpense)  " +
                " values('" + Branchid + "','" + Branchcode + "','" + VariableName + "','" + TotalExpense + "','" + Day + "','" + PerDayExpense + "')";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }


        public DataSet getvaribleexpenseid(int isnromal)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblvariableexpense where VariableId='" + isnromal + "'";
            //  string qr = "select * from tblsalestype where IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }


        public DataSet searchvariableexpenseforupdate(string VariableName, int id)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblvariableexpense where VariableName='" + VariableName + "' and VariableId <>" + id + " ";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public int update_varibleexpense(string varibaleid, string Branchid, string Branchcode, string VariableName, string TotalExpense, string Day, string PerDayExpense)
        {
            int i = 0;
            string sqry = "update tblvariableexpense set Branchid='" + Branchid + "',Branchcode='" + Branchcode + "',VariableName='" + VariableName + "',TotalExpense='" + TotalExpense + "',Day='" + Day + "',PerDayExpense='" + PerDayExpense + "' where VariableId='" + varibaleid + "'";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }
        public DataSet GetStockOption(string Table)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblbranch where branchcode='" + Table + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #endregion

        #region Role
        public DataSet dsCheckRole_LoginType(string LoginTypeID)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblRole where LoginTypeID='" + LoginTypeID + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int insertRolewithaccess(string LoginTypeID, DataSet role, int emppid)
        {
            int iSuccess = 0;
            int iSuccess1 = 0;
            int optipns = 0;
            DataSet dss = new DataSet();
            DataSet dss1 = new DataSet();
            DateTime dt = DateTime.Now;

            string date = dt.AddDays(30).ToString("yyyy-MM-dd");


            string sQry = "insert into tblRole(LoginTypeID)values ('" + LoginTypeID + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            string dbqry = "select max(RoleID) as RoleID from tblRole ";
            dss = dbObj.InlineExecuteDataSet(dbqry);

            int user = Convert.ToInt32(dss.Tables[0].Rows[0]["RoleID"]);

            if (role.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < role.Tables[0].Rows.Count; i++)
                {
                    string usernamee = role.Tables[0].Rows[i]["username"].ToString();
                    string screen = role.Tables[0].Rows[i]["screen"].ToString();
                    bool active = Convert.ToBoolean(role.Tables[0].Rows[i]["active"]);
                    int screenid = Convert.ToInt32(role.Tables[0].Rows[i]["screenid"]);
                    string screencode = Convert.ToString(role.Tables[0].Rows[i]["screencode"]);

                    bool Read = Convert.ToBoolean(role.Tables[0].Rows[i]["Read"]);
                    bool Edit = Convert.ToBoolean(role.Tables[0].Rows[i]["Edit"]);
                    bool Delete = Convert.ToBoolean(role.Tables[0].Rows[i]["Delete"]);
                    bool Save = Convert.ToBoolean(role.Tables[0].Rows[i]["Save"]);

                    string sQryopt = "insert into tblTransRole(Roleid,userName,screen,active,screenid,screencode,Empid,LastUEmpid,[Read],Edit,[Delete],[Save])values ('" + user + "','" + usernamee + "','" + screen + "','" + active + "','" + screenid + "','" + screencode + "','" + emppid + "','" + emppid + "','" + Read + "','" + Edit + "','" + Delete + "','" + Save + "')";
                    optipns = dbObj.InlineExecuteNonQuery(sQryopt);

                }
            }

            return iSuccess;
        }

        public int updateRolewithaccess(int userid, string LoginTypeID, DataSet role, int emppid)
        {
            int iSucess = 0;
            int iSucess1 = 0;
            int optipns = 0;
            DataSet dss = new DataSet();

            string sQry = "update tblRole set LoginTypeID='" + LoginTypeID + "' where roleid='" + userid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            int user = userid;

            string delqry = "delete from tbltransrole where roleid='" + user + "'";
            iSucess = dbObj.InlineExecuteNonQuery(delqry);

            if (role.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < role.Tables[0].Rows.Count; i++)
                {
                    string usernamee = role.Tables[0].Rows[i]["username"].ToString();
                    string screen = role.Tables[0].Rows[i]["screen"].ToString();
                    bool active = Convert.ToBoolean(role.Tables[0].Rows[i]["active"]);
                    int screenid = Convert.ToInt32(role.Tables[0].Rows[i]["screenid"]);
                    string screencode = Convert.ToString(role.Tables[0].Rows[i]["screencode"]);

                    bool Read = Convert.ToBoolean(role.Tables[0].Rows[i]["Read"]);
                    bool Edit = Convert.ToBoolean(role.Tables[0].Rows[i]["Edit"]);
                    bool Delete = Convert.ToBoolean(role.Tables[0].Rows[i]["Delete"]);
                    bool Save = Convert.ToBoolean(role.Tables[0].Rows[i]["Save"]);

                    string sQryopt = "insert into tblTransRole(Roleid,userName,screen,active,screenid,screencode,Empid,LastUEmpid,[Read],Edit,[Delete],[Save])values ('" + user + "','" + usernamee + "','" + screen + "','" + active + "','" + screenid + "','" + screencode + "','" + emppid + "','" + emppid + "','" + Read + "','" + Edit + "','" + Delete + "','" + Save + "')";
                    optipns = dbObj.InlineExecuteNonQuery(sQryopt);

                }
            }
            return iSucess;

        }

        public DataSet selectuserroles()
        {
            DataSet ds = new DataSet();
            string sQry = "select a.RoleID,c.LoginTypeName from tblRole a inner join tbllogintype c on a.LoginTypeId = c.LoginType";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetAllrolls(string Types, string Edit, int EmpID)
        {

            DataSet ds = new DataSet();
            if (Edit == "Yes")
            {
                //string dbQry = "Select *,Visible as [Read],Visible as Edit,Visible as [Delete],Visible as [Save]  from tblRoleMaster where Area = '" + Types + "' ";
                //ds = dbObj.InlineExecuteDataSet(dbQry);

                string dbQry = "select r.roleid,r.screen,r.area,us.active as visible,r.screenid,r.screen,[Read] as [Read],Edit as Edit,[Delete] as [Delete],[Save] as [Save]  from tbluserrole as us inner join tblrolemaster as r on r.roleid=us.screenid where us.userid='" + EmpID + "' and area='" + Types + "'";
                ds = dbObj.InlineExecuteDataSet(dbQry);
            }
            else
            {
                string dbQry = "Select *,Visible as [Read],Visible as Edit,Visible as [Delete],Visible as [Save]  from tblRoleMaster where Area = '" + Types + "' and IsBilling='True' and IsProduction = 'True' ";
                ds = dbObj.InlineExecuteDataSet(dbQry);
            }

            return ds;
        }

        public DataSet getselectuserRoles(int RoleID)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblRole where RoleID=" + RoleID + "";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet grtroll_View(string Types, string Edit, int EmpID)
        {

            DataSet ds = new DataSet();
            if (Edit == "Yes")
            {
                //string dbQry = "Select *,Visible as [Read],Visible as Edit,Visible as [Delete],Visible as [Save]  from tblRoleMaster where Area = '" + Types + "' ";
                //ds = dbObj.InlineExecuteDataSet(dbQry);

                string dbQry = "select r.roleid,r.screen,r.area,us.active as visible,r.screenid,r.screen,[Read] as [Read],Edit as Edit,[Delete] as [Delete],[Save] as [Save]  from tbltransrole as us inner join tblrolemaster as r on r.roleid=us.screenid where us.roleid='" + EmpID + "' and area='" + Types + "'";
                ds = dbObj.InlineExecuteDataSet(dbQry);
            }
            else
            {
                string dbQry = "Select *,Visible as [Read],Visible as Edit,Visible as [Delete],Visible as [Save]  from tblRoleMaster where Area = '" + Types + "' and IsBilling='True'  and IsProduction = 'True' ";
                ds = dbObj.InlineExecuteDataSet(dbQry);
            }

            return ds;
        }

        #endregion

        #region UserCreateRoles
        public DataSet grtroll_LoginType(string Types, string Edit, int EmpID)
        {

            DataSet ds = new DataSet();
            if (Edit == "Yes")
            {
                string dbQry = "select r.roleid,r.screen,r.area,us.active as visible,r.screenid,r.screen,[Read] as [Read],Edit as Edit,[Delete] as [Delete],[Save] as [Save]  from tbltransrole as us inner join tblrolemaster as r on r.roleid=us.screenid inner join tblrole rr on us.roleid = rr.roleid where rr.LoginTypeID='" + EmpID + "' and area='" + Types + "'";
                ds = dbObj.InlineExecuteDataSet(dbQry);
            }
            
            return ds;
        }
        #endregion

        #region UserAccessScreen
        public DataSet getuseraccessscreen(string sMobile, string screen)
        {
            dbObj = new DBAccess();
            DataSet ds = new DataSet();
            string sqry = "select * from tbluserrole where userid='" + sMobile + "' and screencode='" + screen + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion
        #region getBranchname
        public DataSet getbranchname(string sbranchid)
        {
            dbObj = new DBAccess();
            DataSet ds = new DataSet();
            string sqry = "select * from tblbranch where branchid='" + sbranchid + "'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #region CashReceipt
        public DataSet GetReceipt(string sTableName)
        {
            DataSet ds = new DataSet();
            string sQry = "select ReceiptID,ReceiptNo,ReceiptDate,CustomerName,NetAmount,PayMode from tblReceipt_" + sTableName + " r inner join tblCustomer c on c.CustomerID=r.CustomerID inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID order by ReceiptDate desc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getcustomers()
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblCustomer where CustomerName<>'' order by CustomerName asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet getcustomersLoadonlyCreditBills(string stablename)
        {
            DataSet ds = new DataSet();
            string sQry = "select distinct b.customerid , b.*,b.customername + ' - ' +b.mobileno as nmm from  tblSales_"+ stablename + " o " +
                " inner join tblcustomer as b on b.customerid=o.customerid     where  iPayMode=18 and (Total-ReceiptAmount)>0 order by b.CustomerName asc";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet GetCreditbills(string sTableName, string CustomerID, string Type)
        {
            DataSet ds = new DataSet();
            // string sQry = "select  salesid,BillNo,BillDate,Total,ReceiptAmount,(Total-ReceiptAmount) as Balance from tblSales_" + sTableName + "  where CustomerID='" + CustomerID + "' and iPayMode=2 and (Total-ReceiptAmount)>0 ";
            if (Type == "Sales")
            {
                //string sQry = "select o.salesid,o.BillNo,'-' as OrderNo,'-' as BookNo,BillDate,Total,ReceiptAmount,(Total-ReceiptAmount) as Balance from " +
                //    " tblSales_" + sTableName + " o inner join tblTransSales_" + sTableName + " oa on oa.Salesuniqueid=o.SalesID " +
                //    " where CustomerID='" + CustomerID + "' and iPayMode=18 and (Total-ReceiptAmount)>0";
                string sQry = "select o.salesid,o.BillNo,'-' as OrderNo,'-' as BookNo,BillDate,Total,ReceiptAmount,(Total-ReceiptAmount) as Balance from " +
                   " tblSales_" + sTableName + " o " +
                   " where CustomerID='" + CustomerID + "' and iPayMode=18 and (Total-ReceiptAmount)>0";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            if (Type == "Order")
            {
                string sQry = "select o.BillNo as salesid,o.BillNo,o.OrderNo,o.BookNo,OrderDate as BillDate,Total,SUM(oa.Amount) as ReceiptAmount,(Total-SUM(oa.Amount)) as Balance from tblOrder_" + sTableName + " o inner join tblTransorderAmount_" + sTableName + " oa on oa.BIllno=o.BIllno where CustomerID='" + CustomerID + "' and iPayMode=18 group by o.BillNo,o.OrderNo,o.BookNo,OrderDate,Total having (Total-SUM(oa.Amount))>0";
                ds = dbObj.InlineExecuteDataSet(sQry);
            }
            else
            {

            }
            return ds;
        }


        public int insertreceipt(string sTableName, DateTime BillDate, DateTime ChequeDate, string Customer, double NetAmount, string BankName, string ChequeNo, int Payment_ID, int BankId, double CloseDiscount, int userId, string ReceiptType)
        {
            int save = 0;
            int ReceiptNo = 0;
            int ReceiptID = 0;

            DataSet ds = new DataSet();
            string sQry1 = "select isnull(Max(ReceiptNo+1),1) as ReceiptNo from tblReceipt_" + sTableName + "";
            ds = dbObj.InlineExecuteDataSet(sQry1);
            ReceiptNo = Convert.ToInt32(ds.Tables[0].Rows[0]["ReceiptNo"].ToString());

            string sQry2 = "insert into tblReceipt_" + sTableName + "(ReceiptNo,ReceiptDate,CustomerID,NetAmount,BankName,ChequeNo,Payment_ID,ChequeDate,BankId,CloseDiscount,userId,ReceiptType)values(" + ReceiptNo + ",'" + BillDate.ToString("yyyy/MM/dd") + "','" + Customer + "'," + NetAmount + ",'" + BankName + "','" + ChequeNo + "'," + Payment_ID + ",'" + ChequeDate.ToString("yyyy/MM/dd") + "'," + BankId + "," + CloseDiscount + "," + userId + ",'" + ReceiptType + "')";
            save = dbObj.InlineExecuteNonQuery(sQry2);

            DataSet ds1 = new DataSet();
            string sQry3 = "select Max(ReceiptID) as ReceiptID from tblReceipt_" + sTableName + "";
            ds1 = dbObj.InlineExecuteDataSet(sQry3);

            ReceiptID = Convert.ToInt32(ds1.Tables[0].Rows[0]["ReceiptID"].ToString());

            return ReceiptID;

        }

        public int UpPaidinsales(int ReceiptID, string sTableName, int SalesID, decimal paid, string narration, decimal CloseDiscount, string ReceiptType)
        {
            int save = 0;
            string sQry1 = "insert into tblTransReceipt_" + sTableName + "(BillNo,ReceiptID,Amount,Narration,CloseDiscount)values(" + SalesID + "," + ReceiptID + "," + paid + ",'" + narration + "'," + CloseDiscount + ")";
            save = dbObj.InlineExecuteNonQuery(sQry1);
            if (ReceiptType == "Sales")
            {
                string sQry2 = "Update tblsales_" + sTableName + " set ReceiptAmount=ReceiptAmount+" + paid + " where SalesID=" + SalesID + " ";
                save = dbObj.InlineExecuteNonQuery(sQry2);
            }
            return save;
        }

        public DataSet GetReceipt_new(string Stable, int ReceiptID)
        {
            DataSet ds = new DataSet();
            string sqry = "select r.BankName,r.ChequeNo,s.BillNo,s.BillDate,p.PayMode,r.ReceiptNo,r.ReceiptDate,r.NetAmount,c.CustomerName,c.MobileNo,c.Address,tr.Amount,tr.CloseDiscount,tr.Narration  from tblReceipt_" + Stable + " r inner join tblTransReceipt_" + Stable + " tr on r.ReceiptID=tr.ReceiptID inner join tblCustomer c on c.CustomerID=r.CustomerID inner join tblSalesPaymode p on p.PayModeId=r.Payment_ID inner join tblSales_" + Stable + " s on s.SalesId=tr.BillNo where r.ReceiptID=" + ReceiptID + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

        #endregion


        #region Bill type Master
        public DataSet getbilltypemaster()
        {
            DataSet save = new DataSet();
            string sQry = "select * from tblbilltype where isactive='Yes'";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }
        #endregion

        #region Sales payment Mode Master
        public DataSet getsalespaymentmode()
        {
            DataSet ds = new DataSet();
            // string qr = "select * from tblsalestype where IsActive='Yes'";
            string qr = "select * from tblsalespaymode where IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet checksalespaymentmode(string PaymentType)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblsalespaymode where PayMode='" + PaymentType + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }


        public int insert_Salespaymentmode(string payment, string OrderWise, string isDiscountbill,string others)
        {
            int i = 0;
            int value = 0;
            DataSet getmaxno = new DataSet();
            // getmax nmber

            string sqr = "Select max(isnull(value+1,1)) as value from tblsalespaymode";
            getmaxno = dbObj.InlineExecuteDataSet(sqr);

            if (getmaxno.Tables[0].Rows.Count > 0)
            {
                value = Convert.ToInt32(getmaxno.Tables[0].Rows[0]["value"]);

                string sqry = "insert into tblsalespaymode (PayMode,Value,Branch,BranchCode,OrderWise,Discount,Isactive,others) " +
                    " values('" + payment + "'," + value + ",'0','All','" + OrderWise + "','" + isDiscountbill + "','Yes','"+others+"')";
                i = dbObj.InlineExecuteNonQuery(sqry);
            }
            return i;
        }


        public int deletesalespaymentmodetype(int ID)
        {
            int i = 0;
            string sqry = "Update tblsalespaymode set IsActive='NO' where PayModeId=" + ID + " ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }


        public DataSet checkpaymodechecking(string ID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbltranssalestype where value=" + ID + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet EditSalespaymentmodeType(int id, int userid)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblsalespaymode  where  PayModeId=" + id + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet searchSalespaymentmodeforupdate(string paymenttype, int id)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblsalespaymode where PayMode='" + paymenttype + "' and PayModeId <>" + id + " ";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public int update_salespaymode(string payment, string OrderWise, string isDiscountbill, string isactive, string paymodeid,string others)
        {
            int i = 0;
            string sqry = "update tblsalespaymode set Others='"+others+"',PayMode='" + payment + "',OrderWise='" + OrderWise + "',Isactive='" + isactive + "' where PayModeId=" + paymodeid + "";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }


        #endregion
        #region KOT PRINT
        public DataSet PrintingSalesLiveKitchen1(int ID, string sTable, string Mode)
        {
            DataSet ds = new DataSet();
            string sqry = "";
            if (Mode == "Order")
            {
                sqry = "select d.gst/2 as cg, d.gst/2 as sg,a.SGST,a.CGST,a.NetAmount, * from tblsales_" + sTable + " a,tblTransSales_" + sTable + " b,tblcategory c,tblCategoryUser d,tblCustomer e where a.BillNo=b.SalesID and c.categoryid=d.CategoryID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and a.OrderNo=" + ID;// +"  and c.IsLiveKitchen=1 ";

            }

            else
            {
                //sqry = "select (cast(d.mrp as float) * SUM(b.Quantity)) as tott,  f.Name,d.mrp,a.biller,d.gst/2 as cg, d.gst/2 as sg,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,a.Discount,b.UnitPrice,c.category,d.Definition,SUM(b.Amount) as Amount,SUM(b.Quantity) as Quantity,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,a.NetAmount  from tblsales_" + sTable + "  a,tblTransSales_" + sTable + " b,tblcategory c,tblCategoryUser d,tblCustomer e,tblworkers f where f.EmpID=a.Billerid and a.BillNo=b.SalesID and c.categoryid=d.CategoryID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and a.BillNo=" + ID + " group by f.name,d.mrp,a.biller,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,b.UnitPrice,c.category,d.Definition,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,d.gst,a.NetAmount,a.Discount  ";
                sqry = "select (cast(d.mrp as float) * SUM(b.Quantity)) as tott,  a.biller as Name,d.mrp,a.biller,d.gst/2 as cg, d.gst/2 as sg,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,a.Discount,b.UnitPrice,c.category,d.Definition,SUM(b.Amount) as Amount,SUM(b.Quantity) as Quantity,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,a.NetAmount  from tblsales_" + sTable + "  a,tblTransSales_" + sTable + " b,tblcategory c,tblCategoryUser d,tblCustomer e where  a.BillNo=b.SalesID and c.categoryid=d.CategoryID and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and a.CustomerID=e.CustomerID and a.BillNo=" + ID + " group by d.mrp,a.biller,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,b.UnitPrice,c.category,d.Definition,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,d.gst,a.NetAmount,a.Discount  ";
            }

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #region PurchaseInvoiceNEW
        public DataSet GetIngredientsName(int id)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblIngridents where  IngridID=" + id + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetUOMName(int IngridID)
        {
            DataSet ds = new DataSet();
            string sqry = "select b.uom,b.uomid from tblIngridents a inner join tbluom b on a.Units = b.UOMID where a.IngridID =" + IngridID + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetPrimaryUOMName(int PrimaryUOMID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblprimaryuom where PrimaryUOMID=" + PrimaryUOMID + " ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        #endregion

        #region ORDER UOM
        public DataSet Get_salespaymode()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblsalespaymode where others='Y' and isactive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #endregion

        #region MULTIPAYMENT
        public DataSet getsales_payment(string sTable, string salesid)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblsales_" + sTable + " where salesid='" + salesid + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet getsales_transamount(string sTable, string salesid)
        {
            DataSet ds = new DataSet();
            string sQry = "select a.*,b.paymode as mode from tbltranssalesAmount_" + sTable + " as a inner join tblsalespaymode as b on b.value=a.paymode where a.salesid='" + salesid + "'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int iupdatesales(string stable,string ipaymode,string salesid,string billno)
        {
            int i = 0;
            string sqry = "update tblsales_" + stable + " set ipaymode='"+ipaymode+"' where salesid='" + salesid + "' and billno='"+billno+"'";
            i = dbObj.InlineExecuteNonQuery(sqry);

            string idelete = "delete from tbltranssalesAmount_" + stable + " where salesid='" + salesid + "' and billno='" + billno + "'";
            i = dbObj.InlineExecuteNonQuery(idelete);
            return i;
        }

        public int iupdatetranssalesamount(string stable, string salesuniqueid, string billno1, string BillDate,string salestype, string iPayMode, string Total, string BillerId,string attender1,string PayMode, string currencytype)
        {
            int i = 0;
            string strans = "Insert into " + stable + "(Salesid,Billno,Billdate,SalesTypeid,paymode,Amount,BillerId,Attenderid, " +
              " SalesPaymodeid,Currency)values('" + salesuniqueid + "','" + billno1 + "','" + BillDate + "' " +
              " ,'" + salestype + "','" + iPayMode + "','" + Total + "','" + BillerId + "','" + attender1 + "','" + PayMode + "','" + currencytype + "')";

            i = dbObj.InlineExecuteNonQuery(strans);

            return i;
        }

        #endregion

        #region OthersPaymode
        public DataSet GetOthersPaymode()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblsalespaymode where others='Y' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet GetOthersPaymode_Payment(string Paymode)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblsalespaymode where others='Y' and paymodeid not in (" + Paymode + ")";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        #endregion

        public int InsertErrorLog(string Logtime, string LogMsg, string LogStack, string LogSource, string LogTargetSite)
        {
            int iSuccess = 0;

            string sQry = "insert into tblErrorLog(LogTime,LogMsg,LogStack,LogSource,LogTargetSite) values ('" + Logtime + "','" + LogMsg + "','" + LogStack + "','" + LogSource + "','" + LogTargetSite + "')";
            iSuccess = dbObj.InlineExecuteNonQuery1(sQry, "InsertErrorLog");

            return iSuccess;

        }

        #region Dashboard

        public DataSet Top10SupplierOutstanding(string stablename)
        {
            DataSet ds = new DataSet();
            string qr = "select top 10 c.LedgerName as CustomerName,c.MobileNo, round((sum(isnull(roundoff, 0)) -(sum(isnull(ReceiptAmount, 0)) + sum(ReturnAmount))),0) as Balance, case w.PayMode when'1' then 'cash' when '2' then 'Credit' else '' end as PayType from tblkitchenPurchase_" + stablename + " w inner join tblLedger c on c.LedgerID = w.supplier where w.PayMode = 18  and(isnull(roundoff, 0) - (isnull(ReceiptAmount, 0) + ReturnAmount)) > 0 group by c.LedgerName,c.MobileNo,PayMode order by round((sum(isnull(roundoff,0)) -(sum(isnull(ReceiptAmount, 0)) + sum(ReturnAmount))),0) desc";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet TodayRawMaterialTransAmounttoProduction(DateTime dtFrom, string stablename)
        {
            DataSet ds = new DataSet();
            string qr = "select isnull(sum(s.Rate),0) as AvgRate  from tblAcceptRawMaterials_" + stablename + " as a inner join " +
                " tbltransAcceptRawItem_" + stablename + " as b on b.requestid=a.requestno  inner join tblIngridents as c on b.rawitemid=c.IngridID " +
                " inner join tblRawMatlStock_" + stablename + " s on s.IngredientID=b.rawitemid  inner join tbluom as d on d.uomid=c.Units inner join tblIngridentsCategory ic on ic.IngCatID=c.IngCatID " +
                " where (a.RequestDate >='" + Convert.ToDateTime(dtFrom).ToString("yyyy-MM-dd") + "' AND a.RequestDate <='" + Convert.ToDateTime(dtFrom).ToString("yyyy-MM-dd") + "')";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet TodayRawMaterialTransAmounttoBranch(DateTime dtFrom, string stablename)
        {
            DataSet ds = new DataSet();
            string qr = "select isnull(sum(b.Received_Qty* e.rate),0) as amt from tblGoodTransferstore_" + stablename + " a, tbltransGoodsTransferstore_" + stablename + " b, " +
                " tblingridentscategory c, tblingridents d ,tblRawMatlStock_" + stablename + " e where a.DC_NO=b.DC_No and d.IngCatID= c.IngCatID  and b.DescriptionId= d.IngridID " +
                " and b.DescriptionId= e.IngredientID and a.BranchCode= b.BranchCode " +
                " and (a.DC_date >='" + Convert.ToDateTime(dtFrom).ToString("yyyy-MM-dd") + "' AND a.DC_date <='" + Convert.ToDateTime(dtFrom).ToString("yyyy-MM-dd") + "')";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet GetCurrentStockValue(string stablename)
        {
            DataSet ds = new DataSet();
            string qr = "select isnull(sum(s.Qty*s.rate),0) as Amount from tblIngridents i inner join tblRawMatlStock_" + stablename + " s on s.IngredientID=i.IngridID inner join tblIngridentscategory as b on b.ingcatid=i.ingcatid  inner join tblUOM u on u.UOMID=i.Units where s.qty >0";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet TodayExpenseAmount(DateTime dtFrom, string stablename)
        {
            DataSet ds = new DataSet();
            string qr = "select isnull(sum(a.Amount),0) as Amount from tblPaymentEntry_" + stablename + " a where " +
                " (a.Date >='" + Convert.ToDateTime(dtFrom).ToString("yyyy-MM-dd") + "' AND a.Date <='" + Convert.ToDateTime(dtFrom).ToString("yyyy-MM-dd") + "')";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }
        #endregion

        #region PurchaseEdit
        public DataSet getduplist_Purchaseedit(string iSalesID, string Table)
        {
            DataSet ds = new DataSet();
            string qr = "select * from tblkitchenPurchase_" + Table + " where Billno='" + iSalesID + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }

        public DataSet getduplisttrans_purchaseedit(string iSalesID, string Table)
        {
            DataSet ds = new DataSet();
            //////string qr = "select * from tbltranskitchenPurchase_" + Table + " where Purchaseid='" + iSalesID + "'";
            string qr = "select i.Units,tp.* from tbltranskitchenPurchase_" + Table + " tp inner join tblIngridents i on i.IngridID=tp.IngredientID inner join tblkitchenPurchase_" + Table + " c on c.purchaseid = tp.purchaseid where c.purchaseid='" + iSalesID + "'";
            ds = dbObj.InlineExecuteDataSet(qr);
            return ds;
        }


        public DataSet GetSupplierIngredient_PId(string loadallitem, string IngridID)
        {
            DataSet ds = new DataSet();

            DataSet dss = new DataSet();
            string qr = string.Empty;
            int cnt = 0;
            string sqry = string.Empty;

            if (loadallitem == "2")
            {

                if (cnt > 0)
                {
                    qr = "select b.ingrecategory+' - '+i.ingredientname as IngredientName,b.ingrecategory+' - '+li.BIngredientName as BIngredientName,* from tblLedgerIngredient li inner join  tblIngridents i on i.IngridID=li.IngredientId inner join tblIngridentscategory as b on b.ingcatid=i.ingcatid inner join tblUOM u on u.UOMID=i.Units where i.IsActive='Yes' and IngridID=" + IngridID + " ";
                    ds = dbObj.InlineExecuteDataSet(qr);
                }
                else
                {
                    qr = "select b.ingrecategory+' - '+i.ingredientname as IngredientName,*,'' as BIngredientName from  tblIngridents as i inner join tblIngridentscategory as b on b.ingcatid=i.ingcatid  inner join tblUOM u on u.UOMID=i.Units where i.IsActive='Yes' and IngridID=" + IngridID + " ";
                    ds = dbObj.InlineExecuteDataSet(qr);
                }
            }
            else
            {
                qr = "select b.ingrecategory+' - '+i.ingredientname as IngredientName,*,'' as BIngredientName from  tblIngridents as i inner join tblIngridentscategory as b on b.ingcatid=i.ingcatid  inner join tblUOM u on u.UOMID=i.Units where i.IsActive='Yes' and IngridID=" + IngridID + " ";
                ds = dbObj.InlineExecuteDataSet(qr);
            }
            return ds;
        }


        public int getduplisttransdeletePur(string iSalesID, string Table)
        {
            int isucess = 0;
            string qr = "Delete  from tbltranskitchenPurchase_" + Table + " where Purchaseid='" + iSalesID + "'";
            isucess = dbObj.InlineExecuteNonQuery(qr);
            return isucess;
        }
        #endregion

        #region Session Closing Process
        public DataSet getoverallentries(string sTable, string Date)
        {
            DataSet dsmerge = new DataSet();
            string salesamount = string.Empty;
            DataSet getsalesamount = new DataSet();

            string orderamount = string.Empty;
            DataSet getorderamount = new DataSet();

            string receiptamount = string.Empty;
            DataSet getreceiptamount = new DataSet();

            string paymentamount = string.Empty;
            DataSet getpaymentamount = new DataSet();


            // Sales
            salesamount = "select b.paymode,b.value,cast(sum(amount) as float) as amnt,'Sales' as type,'+' as sign from tblTransSalesAmount_"+sTable+" as a " +
                " inner join tblsalespaymode as b on b.value=a.paymode where cast(billdate as date)='"+Date+"' group by b.paymode,value";
            getsalesamount = dbObj.InlineExecuteDataSet(salesamount);
            dsmerge.Merge(getsalesamount);


            // Order
            orderamount = "select b.paymode,b.value,cast(sum(amount) as float) as amnt,'Order' as type,'+' as sign from tbltransorderamount_" + sTable + " as a " +
                " inner join tblsalespaymode as b on b.value=a.paymode where cast(billdate as date)='" + Date + "' group by b.paymode,value";
            getorderamount = dbObj.InlineExecuteDataSet(orderamount);
            dsmerge.Merge(getorderamount);


            // Receipt
            receiptamount = "select b.paymode,b.value,cast(sum(Netamount) as float) as amnt,'Receipt' as type,'+' as sign from tblReceipt_" + sTable + " as a " +
                " inner join tblsalespaymode as b on b.value=a.payment_id where cast(receiptdate as date)='" + Date + "' group by b.paymode,value";
            getreceiptamount = dbObj.InlineExecuteDataSet(receiptamount);
            dsmerge.Merge(getreceiptamount);

            // Payment
            paymentamount = "select b.paymode,b.value,cast(sum(amount) as float) as amnt,'Payment' as type,'-' as sign from tblpaymententry_" + sTable + " as a " +
                " inner join tblsalespaymode as b on b.value=a.paymode where cast(date as date)='" + Date + "' group by b.paymode,value";
            getpaymentamount = dbObj.InlineExecuteDataSet(paymentamount);
            dsmerge.Merge(getpaymentamount);

            return dsmerge;
        }
        #endregion


        #region Direct Store Goods Transfer
        public DataSet GetDirectStoreGoodTrasnfer(string TableName)
        {
            DataSet ds = new DataSet();
            string sqry = "select s.DC_NO,DC_Date,SentBY,SUM(Order_Qty) as Qty,Branch,Status  " +
                " from  tblGoodTransferstore_" + TableName + " s inner join tblTransGoodsTransferstore_" + TableName + " ts  on ts.DC_No=s.DC_NO group by s.DC_NO,DC_Date,SentBY,Branch,Status  order by DC_Date desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }

       


        public DataSet getMAXNOformProductionStore(string scode)
        {
            DataSet ds = new DataSet();
            string sqry = "select isnull(max(convert(int,DC_NO))+1,1) as DC_No from tblGoodTransferstore_" + scode + "";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }



        public DataSet selectcategorymasterforproductionentryStore()
        {
            DataSet ds = new DataSet();
            //string sQry = "select * from tblcategory  where isdelete=0 order by category asc ";
            string sQry = "select distinct a.* from tblIngridentsCategory as a inner join tblIngridents as b on b.ingcatid=a.ingcatid where b.isallow='Y' order by a.IngreCategory asc ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public DataSet GetDirectstoreGoodTrasnferDetails(string TableName, int DC_NO)
        {
            DataSet ds = new DataSet();
            string sqry = "select s.DC_NO,DC_Date,SentBY,c.IngreCategory as Category,cu.IngredientName as Definition,Order_Qty as Qty,u.UOM as Unit  from " +
                " tblgoodtransferstore_" + TableName + " s inner join tblTransGoodsTransferstore_" + TableName + " ts  on ts.DC_No=s.DC_NO " +
                " inner join tblIngridents cu on cu.IngridID=ts.DescriptionId inner join tblIngridentsCategory c on c.ingcatid=cu.ingcatid " +
                " inner join tblUOM u on u.UOMID=cu.units  where s.DC_No=" + DC_NO + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet itemforreqestNew_DirectTransferStore(string categoryid, string stable, string catid)
        {
            DataSet ds = new DataSet();
            if (categoryid == "All")
            {
                // string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,c.Prod_Qty as Qty,b.mrp  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit inner join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.poduction='1' and c.Prod_Qty >0 and a.categoryid in " + catid + "   order by category asc";

                string sqry = "select distinct a.ingcatid as categoryid,a.IngreCategory as category,b.IngridID as categoryuserid,b.IngredientName as definition, " +
" UOM,u.UOMID,b.TaxValue as GST,c.Rate,c.Qty as Qty, c.Rate as mrp,b.IngredientCode as serial  from tblIngridentsCategory a inner  " +
                      "                   join tblIngridents b on a.ingcatid = b.ingcatid inner join tblUOM u on u.UOMID = b.units inner  " +
                     "                    join tblRawMatlStock_" + stable + " as c on c.IngredientID = b.IngridID " +
                   "  where a.IsActive = 'Yes' and b.IsActive = 'Yes' and b.isallow = 'Y' and c.Qty > 0  order by IngreCategory asc";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            else
            {
                string sqry = "select distinct a.ingcatid as categoryid,a.IngreCategory as category,b.IngridID as categoryuserid,b.IngredientName as definition, " +
" UOM,u.UOMID,b.TaxValue as GST,c.Rate,c.Qty as Qty, c.Rate as mrp,b.IngredientCode as serial  from tblIngridentsCategory a inner  " +
                       "                   join tblIngridents b on a.ingcatid = b.ingcatid inner join tblUOM u on u.UOMID = b.units inner  " +
                      "                    join tblRawMatlStock_" + stable + " as c on c.IngredientID = b.IngridID " +
                    "  where a.IsActive = 'Yes' and b.IsActive = 'Yes' and b.isallow = 'Y' and c.Qty > 0 and a.ingcatid=" + categoryid + " order by IngreCategory asc";
                
                ds = dbObj.InlineExecuteDataSet(sqry);
            }
            return ds;
        }

        public DataSet CheckDirectGoodTrasnferstore(string TableName, int DescriptionId, double Prod_Qty)
        {
            DataSet ds = new DataSet();
            string sQry = "select * from tblRawMatlStock_" + TableName + "  where IngredientID=" + DescriptionId + " and Qty>=" + Prod_Qty + " ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }


        public int InsertDirectGoodTrasnferStore(string TableName, string Branch, DateTime DC_Date, string SentBY, string UserId)
        {
            int isave = 0;

            DataSet ds = new DataSet();
            //string sqry = "select isnull(max(DC_NO)+1,1) as DC_No from tblGoodTransfer_" + TableName + "";
            string sqry = "select isnull(max(DC_NO+1),1) as DC_No from tblGoodTransferstore_" + TableName + "";
            ds = dbObj.InlineExecuteDataSet(sqry);


            // get trip number 
            string sq = " select isnull(max(Tripno+1),1) as no from tblgoodtransferstore_" + TableName + "  where branch='" + Branch + "' and cast(DC_date as date) >='" + Convert.ToDateTime(DC_Date).ToString("yyyy/MM/dd") + "'";
            DataSet dss = dbObj.InlineExecuteDataSet(sq);

            if (dss.Tables[0].Rows.Count > 0)
            {
                string tripno = dss.Tables[0].Rows[0]["no"].ToString();



                string sQry = "insert into tblGoodTransferstore_" + TableName + " (Branch,DC_NO,DC_Date,RequestNO,Status,isCancel,ProductionName,isTransfer,BranchCode,IsReceived,SentBY,BranchReqNo,UserId,Tripno,Dispatchstatus) values('" + Branch + "'," + ds.Tables[0].Rows[0]["DC_No"].ToString() + ",'" + Convert.ToDateTime(DC_Date).ToString("yyyy/MM/dd hh:mm tt") + "',0,'',0,'Production',0,'" + Branch + "',0,'" + SentBY + "','0'," + UserId + ",'" + tripno + "','Y')";
                isave = dbObj.InlineExecuteNonQuery(sQry);
            }

            return Convert.ToInt32(ds.Tables[0].Rows[0]["DC_No"].ToString());
        }


        public int InsertDirectTransGoodTrasnferstore(string TableName, int DC_No, string BranchCode, int CategoryId, int DescriptionId, double Order_Qty, double TRate, double TGST)
        {
            int isave = 0;
            string sQry = "insert into tblTransGoodsTransferstore_" + TableName + " (DC_No,CategoryId,DescriptionId,Units,Order_Qty,Received_Qty,BranchID,isStocked,RequestNo,BranchCode,Damage_Qty,Missing_Qty,BranchReqNo,TRate,TGST) values('" + DC_No + "','" + CategoryId + "','" + DescriptionId + "','0','" + Order_Qty + "','" + Order_Qty + "',0,0,0,'" + BranchCode + "',0,0,'0'," + TRate + "," + TGST + ")";
            isave = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "update tblRawMatlStock_" + TableName + " set Qty=Qty-'" + Order_Qty + "' where IngredientID=" + DescriptionId + "  ";
            isave = dbObj.InlineExecuteNonQuery(sQry1);

            return isave;
        }

        public DataSet itemforreqestNew_DirectTransfer_Barcodesearchstore(string categoryid, string stable, string searchbarcode)
        {
            DataSet ds = new DataSet();
            string sqry = "select distinct a.ingcatid as categoryid,a.IngreCategory as category,b.IngridID as categoryuserid,b.IngredientName as definition, " +
" UOM,u.UOMID,b.TaxValue as GST,c.Rate,c.Qty as Qty, c.Rate as mrp,b.IngredientCode as serial  from tblIngridentsCategory a inner  " +
                      "                   join tblIngridents b on a.ingcatid = b.ingcatid inner join tblUOM u on u.UOMID = b.units inner  " +
                     "                    join tblRawMatlStock_" + stable + " as c on c.IngredientID = b.IngridID " +
                   "  where a.IsActive = 'Yes' and b.IsActive = 'Yes' and b.isallow = 'Y' and c.Qty > 0 and b.IngredientCode='" + searchbarcode + "' order by IngreCategory asc";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet GoodTrasnferListExp_ReportStore(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            // string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer a,tblTransGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            string sqry = " select a.dc_no,a.dc_date,a.sentby,sum(b.order_qty * cast(isnull(b.Trate,0) as float))  as totamnt,c.BranchName,c.BranchArea,c.mobileno,c.LandLine,a.Tripno  from tblgoodtransferstore_" + BranchID + " as a  inner join tblTransGoodsTransferstore_" + BranchID + " as b on b.dc_no=a.dc_no " +
 " inner join tblbranch as c on c.branchcode=a.branchcode inner join tblIngridents as d on d.IngridID=b.descriptionid " +
 " where a.DC_No='" + sDCNO + "' group by  a.dc_no,a.dc_date,a.sentby,c.BranchName,c.BranchArea,c.mobileno,c.LandLine,a.Tripno ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet TransGoodTrasnferListExp_Reportstore(string sDCNO, string BranchID)
        {
            DataSet ds = new DataSet();
            // string sqry = "select d.Definition as Item ,b.Order_Qty as OrderQty,b.Received_Qty as SentQty from tblGoodTransfer a,tblTransGoodsTransfer b,tblcategory c,tblCategoryUser d  where a.DC_NO=b.DC_No and b.CategoryId=c.categoryid and b.DescriptionId=d.CategoryUserID and a.BranchCode='" + BranchID + "' and a.DC_No='" + sDCNO + "' and  a.BranchCode=b.BranchCode ";
            string sqry = " select a.dc_no,a.dc_date,a.sentby,d.IngredientName as printitem,sum(b.order_qty) as Qty,b.Trate as mrp,sum(b.order_qty * cast(b.Trate as float))  as totmrp   from tblgoodtransferstore_" + BranchID + " as a  inner join tblTransGoodsTransferstore_" + BranchID + " as b on b.dc_no=a.dc_no " +
 " inner join tblbranch as c on c.branchcode=a.branchcode inner join tblIngridents as d on d.IngridID=b.descriptionid " +
 " where a.DC_No='" + sDCNO + "' group by  a.dc_no,a.dc_date,a.sentby,b.Trate,d.IngredientName ";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion


        #region min Store stock alert
        public DataSet StockDetailsDecrerseAlert(string stkTable, string IngCatid)
        {
            DataSet ds = new DataSet();
            string qr = string.Empty;
            if (IngCatid == "All")
            {
                // qr = "select ic.IngreCategory, a.IngredientName,b.Units,b.Qty,b.rate from tblIngridents a inner join " + stkTable + " s on s.IngredientID=a.IngridID inner join tblRawMatlStock_Prod b on a.ingridid = b.ingredientid inner join tblIngridentscategory ic on ic.IngCatID=a.IngCatID where  b.qty < a.quantity order by a.IngredientName asc";
                qr = "select ic.IngreCategory, a.IngredientName,u.UOM,a.Quantity as minqty,s.Qty as curqty,s.Rate,(a.Quantity - s.Qty) as Purqty " +
                    " from tblIngridents a inner join tblRawMatlStock_"+ stkTable + " s on s.IngredientID=a.IngridID  inner join tblIngridentscategory " +
                    " ic on ic.IngCatID=a.IngCatID inner join tbluom as u on u.uomid=a.units where  s.qty < a.quantity order by a.IngredientName asc";
                ds = dbObj.InlineExecuteDataSet(qr);
            }
            else
            {
                //qr = "select ic.IngreCategory, a.IngredientName,b.Units,b.Qty,b.rate from tblIngridents a inner join " + stkTable + " s on s.IngredientID=a.IngridID inner join tblRawMatlStock_Prod b on a.ingridid = b.ingredientid inner join tblIngridentscategory ic on ic.IngCatID=a.IngCatID  where  b.qty < a.quantity and a.ingcatid='" + IngCatid + "' order by a.IngredientName asc";
                qr = "select ic.IngreCategory, a.IngredientName,u.UOM,a.Quantity as minqty,s.Qty as curqty,s.Rate,(a.Quantity - s.Qty) as Purqty " +
                    " from tblIngridents a inner join tblRawMatlStock_" + stkTable + " s on s.IngredientID=a.IngridID  inner join tblIngridentscategory " +
                    " ic on ic.IngCatID=a.IngCatID inner join tbluom as u on u.uomid=a.units where  s.qty < a.quantity and a.ingcatid='" + IngCatid + "' order by a.IngredientName asc";
                ds = dbObj.InlineExecuteDataSet(qr);
            }
            return ds;
        }



        //public DataSet StockDetailsforRawitems(string stkTable, string IngCatid)
        //{
        //    DataSet ds = new DataSet();
        //    string qr = string.Empty;
        //    if (IngCatid == "All")
        //    {
        //        qr = "select b.IngreCategory,i.IngredientName,u.UOM,s.Qty,s.Rate from tblIngridents i inner join " + stkTable + " s on s.IngredientID=i.IngridID inner join tblIngridentscategory as b on b.ingcatid=i.ingcatid  inner join tblUOM u on u.UOMID=i.Units where s.qty >0 order by b.IngreCategory asc";
        //        ds = dbObj.InlineExecuteDataSet(qr);
        //    }
        //    else
        //    {
        //        qr = "select b.IngreCategory,i.IngredientName,u.UOM,s.Qty,s.Rate from tblIngridents i inner join " + stkTable + " s on s.IngredientID=i.IngridID inner join tblIngridentscategory as b on b.ingcatid=i.ingcatid  inner join tblUOM u on u.UOMID=i.Units where s.qty >0 and i.ingcatid='" + IngCatid + "' order by b.IngreCategory asc";
        //        ds = dbObj.InlineExecuteDataSet(qr);
        //    }
        //    return ds;
        //}
        #endregion

        #region Customer Ceremonies Reminder
        public DataSet GetCustomerCeremoniesReminder(string TableName)
        {
            DataSet ds = new DataSet();
            string sqry = "select  distinct c.CustomerName,c.MobileNo,c.Email,ce.OnlineMaster as ceremonies,cast(s.DeliveryDate as date) as Date,'" + TableName + "' as Branch    from  tblOrder_" + TableName + " s inner join   tblCustomer c on c.CustomerID=s.CustomerID  inner join tblonlinemaster ce on ce.OnlineId=s.ceremonies where DATEADD(year, 1, CAST(deliverydate as date)) =DATEADD(DAY,7, cast(getdate() as date))   order by Date asc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        #endregion

        #endregion


        public DataSet getitembyid(string itemid, string stable)
        {
            DataSet ds = new DataSet();

            {
                string sqry = "select distinct b.printitem,a.categoryid,a.category,b.categoryuserid,b.definition,isnull(c.Available_qty,0) as Available_qty, " +
                    " UOM,u.UOMID,b.serial,b.barcode,b.MRP,b.Rate,b.gst,serial+' / '+Definition as defi from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid left join tblstock_" + stable + " c " +
                    " on c.subcategoryid=b.categoryuserid inner join tblCategoryuserBranch d on  d.Itemid=b.CategoryUserID inner join tblUOM u on u.UOMID=b.unit " +
                    " where  a.IsActive='Yes' and  b.IsActive='Yes' and d.IsActive='Yes' and d.BranchCode='" + stable + "'  and ManualGrn='1'  " +
                    " and b.categoryuserid='" + itemid + "' order by category,Definition asc ";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }

            return ds;
        }

        #region CurrencyName

        public DataSet gridCurrency()
        {
            DataSet ds = new DataSet();
            //string sqry = "select * from tblCurrency order by CurrencyName asc ";
            string sqry = "select a.*,b.CurrencyName as defname,b.value as defvalue  from tblCurrency as a inner join tbldefaultcurrency as b on b.defaultcurrencyid=a.defaultcurrencyid order by a.CurrencyId asc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet LoadCurrency()
        {
            DataSet ds = new DataSet();
            //string sqry = "select * from tblCurrency order by CurrencyName asc ";
            string sqry = "select *,CurrencyName +' - '+ cast(Value as nvarchar) as curname  from tblCurrency as a  order by a.CurrencyId asc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet gridCurrencywithValue()
        {
            DataSet ds = new DataSet();
            string sqry = "select CurrencyId,CurrencyName+' & '+cast(Value as nvarchar) as CurrencyName from tblCurrency order by CurrencyName asc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet getiCurrencyvalues(string CurrencyID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCurrency where CurrencyID ='" + CurrencyID + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet getidefaultCurrencyvalues(string CurrencyID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbldefaultcurrency where DefaultCurrencyid ='" + CurrencyID + "' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }
        public DataSet getCurrencyHistory(string CurrencyID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCurrencyHistory where CurrencyID ='" + CurrencyID + "' order by Date desc ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet Currencysrchgrid(string CurrencyName, int CurrencyID)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblCurrency where CurrencyName='" + CurrencyName + "' and CurrencyID<>" + CurrencyID + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public int InsertCurrency(string CurrencyName, double Value, string IsActive, string Type, string defaultcurrencyid)
        {
            int iSuccess = 0;

            string sQry = "insert into tblCurrency(CurrencyName,Value,IsActive,defaultcurrencyid) values ('" + CurrencyName + "','" + Value + "','" + IsActive + "','" + defaultcurrencyid + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry);

            DataSet ds = new DataSet();
            string sQry1 = "select MAX(CurrencyId) as CurrencyId from tblCurrency";
            ds = dbObj.InlineExecuteDataSet(sQry1);

            string sQry2 = "insert into tblCurrencyHistory(CurrencyId,CurrencyName,Value,IsActive,Type,defaultcurrencyid) values ('" + ds.Tables[0].Rows[0]["CurrencyId"].ToString() + "','" + CurrencyName + "','" + Value + "','" + IsActive + "','" + Type + "','" + defaultcurrencyid + "')";
            iSuccess = dbObj.InlineExecuteNonQuery(sQry2);

            return iSuccess;
        }

        public int updateCurrencyMaster(string CurrencyName, double Value, string IsActive, string Type, int CurrencyID, string defaultcurrencyid)
        {
            int iSucess = 0;

            string sQry = "update tblCurrency set defaultcurrencyid='" + defaultcurrencyid + "' ,CurrencyName='" + CurrencyName + "',Value='" + Value + "',LastUpdate=getDate(),IsActive='" + IsActive + "' where CurrencyID='" + CurrencyID + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            string sQry1 = "insert into tblCurrencyHistory(CurrencyId,CurrencyName,Value,IsActive,Type,defaultcurrencyid) values ('" + CurrencyID + "','" + CurrencyName + "','" + Value + "','" + IsActive + "','" + Type + "','" + defaultcurrencyid + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry1);

            return iSucess;
        }

        #region CURRENCY LOAD

        public DataSet getdefaultcurreny()
        {
            DataSet ds = new DataSet();
            string sqry = string.Empty;

            sqry = "select *,currencyname +' - '+ cast(value as nvarchar) as txt from tbldefaultcurrency";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        #endregion


        #endregion

        #region Goods Transfer Update Details

        public DataSet getgoodstransferbyid(string dcno, string stable, string branch)
        {
            DataSet ds = new DataSet();

            {
                string sqry = "select * from tblGoodTransfer_" + stable + " as a where dc_no=" + dcno + " and BranchCode='" + branch + "' and IsReceived='0'";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }

            return ds;
        }

        public DataSet gettransgoodstransferbyid(string dcno, string stable, string branch)
        {
            DataSet ds = new DataSet();

            {
                string sqry = "select  d.categoryid,d.category,c.categoryuserid,c.definition,UOM,u.UOMID,c.GST,c.Rate,b.received_qty as Qty, " +
" c.mrp,c.serial,c.qtytype from tblgoodtransfer_" + stable + " as a inner join tbltransgoodstransfer_" + stable + " as b on b.dc_no = a.DC_no " +
   " inner join tblcategoryuser as c on c.categoryuserid = b.DescriptionId inner join tblcategory as d on d.categoryid = c.categoryid " +
   " inner join tblUOM u on u.UOMID = c.unit " +
   " where d.IsActive = 'Yes' and c.IsActive = 'Yes' and d.poduction = '1'  " +
    " and a.isreceived = '0' and b.isstocked = '0' and a.dc_no = '" + dcno + "' and a.branchcode = '" + branch + "'";
                ds = dbObj.InlineExecuteDataSet(sqry);
            }

            return ds;
        }


        public int UpdateDirectGoodTrasnfer(string TableName, string SentBY, string UserId, string dcno)
        {
            int isave = 0;

            string sQry = "update tblGoodTransfer_" + TableName + " set sentby='" + SentBY + "',userid='" + UserId + "' where dc_no='" + dcno + "'";
            isave = dbObj.InlineExecuteNonQuery(sQry);


            // delete trans item table
            string updatestock = "select * from tbltransgoodstransfer_" + TableName + " where dc_no='" + dcno + "' and isstocked='0' ";
            DataSet getitem = dbObj.InlineExecuteDataSet(updatestock);
            if (getitem.Tables[0].Rows.Count > 0)
            {

                for (int i = 0; i < getitem.Tables[0].Rows.Count; i++)
                {

                    string DescriptionId = getitem.Tables[0].Rows[i]["DescriptionId"].ToString();
                    string Qty = getitem.Tables[0].Rows[i]["received_qty"].ToString();

                    string sQry1 = "update  tblProductionQty_" + TableName + " set Prod_Qty=Prod_Qty +" + Qty + " where DescriptionId=" + DescriptionId + "";
                    isave = dbObj.InlineExecuteNonQuery(sQry1);

                }

            }

            string transitem = "delete from tbltransgoodstransfer_" + TableName + " where dc_no='" + dcno + "' and isstocked='0'";
            isave = dbObj.InlineExecuteNonQuery(transitem);

            return isave;
        }

        #endregion

        #region ratesetting
        public DataSet GetRateSetting()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblratesetting ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }


        public DataSet GetRateSettingbind()
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblratesetting where isactive='Yes' ";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public DataSet Ratesettingsearchforupdate(int rateid, string CurrencyName)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tblratesetting where CurrencyName = '" + CurrencyName + "' and RateSettingid <>" + rateid + " and IsActive='Yes' order by RateSettingid desc";

            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;

        }
        public int updateratesetting(int Rateid, string Curname, string IsActive, string tblAuditMaster, string EditUserID, string EditNarration)
        {
            int iSucess = 0;
            string sQry = "update tblratesetting set CurrencyName='" + Curname + "' where RateSettingid='" + Rateid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);

            return iSucess;
        }


        public DataSet editratesetting(int rateid)
        {

            DataSet ds = new DataSet();
            string sQry = "select * from tblratesetting  where RateSettingid='" + rateid + "' and IsActive='Yes'";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;

        }

        public int deleteratesetting(string rateid)
        {
            int iSucess = 0;
            string sQry = "update  tblratesetting set  IsActive='No'  where RateSettingid='" + rateid + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry);
            return iSucess;
        }


        #endregion

        public DataSet GetStockDetails_Ratetype(int iSubCatID, int UserID, string stable, string stockoption, string columnname1, string columnname2)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;
            if (stockoption == "1")
            {
                //sQry = " select *,'0' as comboo,'1' as QTY,round(a.RATE+(a.RATE*((a.GST)/100)),0) AS RATE1 from tblcategoryuser a,tblStock_" + stable + " b where  a.CategoryUserID=b.SubCategoryID and " +
                sQry = " select  " + columnname2 + " as mrp, *,'0' as comboo,'1' as QTY,round(a." + columnname1 + "+(a." + columnname1 + "*((a.GST)/100)),2) AS RATE1 from tblcategoryuser a,tblStock_" + stable + " b where  a.CategoryUserID=b.SubCategoryID and " +
                    " b.StockID=" + iSubCatID + "  and isdelete=0 ";
            }
            else
            {
                sQry = " select " + columnname2 + " as mrp,*,'0' as comboo,'1' as QTY,CategoryUserID as stockid,CAST('0' AS MONEY)  as Available_QTY,cast('2019-04-01' as date) as Expirydate,round(a." + columnname1 + "+(a." + columnname1 + "*((a.GST)/100)),0) AS RATE1 " +
                    " from tblcategoryuser a where  " +
                    " a.CategoryUserID=" + iSubCatID + "  and isdelete=0 ";
            }
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int updateRecQty_maintable(string stable, string DC_No, string remarks)
        {
            int iSuccess = 0;

            string sQry1 = "update tblGoodTransfer_" + stable + " set status='" + remarks + "',IsReceived=1 where DC_No=" + DC_No + " ";
            iSuccess = dbObj.InlineExecuteNonQueryMain(sQry1);


            return iSuccess;
        }
        public int syncinsertitem(int ItemID, string CategoryID, string Definition, string IsDelete, string Serial_No, string Serial, string Size, string isChecked, string Tax, string Rate, string CategoryUserID, string GST, string TaxVal, string unit, string empcode, string MinimumStock,
        string DisplayOnline, string ImageUpload, string IsActive, string hsncode, string Printname, string foodtype, string Barcode, string Mrp, string Pagepath, string Description, string ratetype, string Qtytype, string defaultcurrencyid, string Rate1, string mrp1, string Rate2, string mrp2, string Rate3, string mrp3, string Rate4, string mrp4, string Rate5, string mrp5)
        {
            int i = 0;
            string sqry = "SET IDENTITY_INSERT [dbo].[tblCategoryUser] ON  " +
               //" Insert into tblcategory Categoryid='" + Categoryid + "',Category='" + Category + "',CategoryCode='" + CategoryCode + "',IsActive='" + IsActive + "',IsLiveKitchen='" + IsLiveKitchen + "',ProductionType='" + ProductionType + "',Request='" + Request + "',poduction='" + poduction + "',PrintCategory='" + PrintCategory + "',ManualGrn='" + ManualGrn + "' where catid='" + catid + "'";
               " INSERT [dbo].[tblCategoryUser] ([ItemID], [CategoryID], [Definition], [IsDelete], [Serial_No], [Serial], [Size], [isChecked], [CustomerID], [Tax], [IsExpiry], " +
            " [Rate], [CategoryUserID], [GST], [TaxVal], [unit], [empcode], [MinimumStock], [DisplayOnline], [ImageUpload], [IsActive], [UnitName], [HSNCode], [Common], " +
            " [Printitem],[FoodType],[Barcode],[Mrp],[Pagepath],[Description],[ratetype],[QtyType],[defaultcurrencyid] ,[Rate1] ,[MRP1], [Rate2] ,[MRP2] ,[Rate3] ,[MRP3] ,[Rate4] ,[MRP4] ,[Rate5] ,[MRP5]) VALUES (" + ItemID + ", " + CategoryID + ", '" + Definition + "', " + IsDelete + ", '" + Serial_No + "', '" + Serial + "', '" + Size + "', " + isChecked + ", NULL, " + Tax + ", NULL, " +
            " " + Rate + ", " + CategoryUserID + ", " + GST + ", " + TaxVal + ", " + unit + ", '" + empcode + "', '" + MinimumStock + "', '" + DisplayOnline + "', '" + ImageUpload + "', '" + IsActive + "', NULL, '" + hsncode + "', NULL, '" + Printname + "', " +
            " '" + foodtype + "','" + Barcode + "','" + Mrp + "','" + Pagepath + "','" + Description + "','" + ratetype + "','" + Qtytype + "','" + defaultcurrencyid + "','" + Rate1 + "','" + mrp1 + "','" + Rate2 + "','" + mrp2 + "','" + Rate3 + "','" + mrp3 + "','" + Rate4 + "','" + mrp4 + "','" + Rate5 + "','" + mrp5 + "') " +
            " SET IDENTITY_INSERT [dbo].[tblCategoryUser] OFF ";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        public int syncupdateitemNEW(int ItemID, string CategoryID, string Definition, string IsDelete, string Serial_No, string Serial, string Tax, string Rate, string CategoryUserID, string GST, string TaxVal, string unit, string MinimumStock, string DisplayOnline, string ImageUpload, string IsActive, string hsncode, string printname, string foodtype, string Barcode, string Mrp, string Pagepath, string Description, string ratetype, string Qtytype, string Rate1, string mrp1, string Rate2, string mrp2, string Rate3, string mrp3, string Rate4, string mrp4, string Rate5, string mrp5)
        {
            int i = 0;

            string sqry = "Update tblcategoryuser set Rate1='" + Rate1 + "',mrp1='" + mrp1 + "',rate2='" + Rate2 + "',mrp2='" + mrp2 + "',rate3='" + Rate3 + "',mrp3='" + mrp3 + "',rate4='" + Rate4 + "',mrp4='" + mrp4 + "',rate5='" + Rate5 + "',mrp5='" + mrp5 + "', Qtytype='" + Qtytype + "',Barcode='" + Barcode + "',Mrp='" + Mrp + "',Pagepath='" + Pagepath + "',Description='" + Description + "',ratetype='" + ratetype + "',FoodType='" + foodtype + "',CategoryID='" + CategoryID + "',Definition='" + Definition + "',IsDelete='" + IsDelete + "',Serial_No='" + Serial_No + "',Serial='" + Serial + "',Tax='" + Tax + "',Rate='" + Rate + "',CategoryUserID='" + CategoryUserID + "',GST='" + GST + "',TaxVal='" + TaxVal + "',unit='" + unit + "',MinimumStock='" + MinimumStock + "',DisplayOnline='" + DisplayOnline + "',ImageUpload='" + ImageUpload + "',IsActive='" + IsActive + "',HSNCode='" + hsncode + "',Printitem='" + printname + "' where ItemID='" + ItemID + "'";
            i = dbObj.InlineExecuteNonQuery(sqry);
            return i;
        }

        #region check production Qty

        public DataSet checkprodqty(string prod)
        {
            DataSet ds = new DataSet();

            string sqry = "select* from tblProductionQty_" + prod + " where Prod_Qty<0";
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public int Updatebranch(string BranchId, string BranchName, string ContactName, string Country, string State, string City, string Address, string MobileNo,
          string LandLine, string Email, string Currency, string BranchCode, string BranchArea, string GSTIN, string loginid, string Pincode, string Pemail,
          string Iemail, string Oemail, string BranchOwnType, string FranchiseeName, string OnlineSalesActive, string Mtype, string Printtype,
          string OnlineCakeSync, string Fssaino, string onlinepos, string PrintOption, string StockOption, string Imagepath, string Username,
          string Password, string BillCode, string BillGenerateSetting, string Billtaxsplitupshown, string BillPrintLogo, string BigVersion,
          string TaxSetting, string ratesetting, string qtysetting, string possalessetting, string RoundoffSetting, string dipatchDirectly,
          string QtyFillSetting, string Posattendercheck, string posPrintsetting, string OrderBookcheck, string prodstockoption, string itemmergeornot, string defaultcurrency)
        {
            int iSucess = 0;
            int iSucess1 = 0;
            int iSucess2 = 0;

            ////string[] branchid = sUser.Split('_');
            ////string branchid1 = branchid[0].ToString();

            //string sQry1 = "update tblbranch set BranchName='" + BranchName + "',ContactName='" + ContactName + "',Country='" + Country + "',State='" + State + "',City='" + City + "',Address='" + Address + "',MobileNo='" + MobileNo + "',LandLine='" + LandLine + "',Email='" + Email + "',BranchCode='" + BranchCode + "',BranchArea='" + BranchArea + "',GSTIN='" + GSTIN + "' where Branchid='" + BranchId + "'";
            string sQry1 = "update tblbranch set defaultcurrency='" + defaultcurrency + "',itemmergeornot='" + itemmergeornot + "',ProdStockOption='" + prodstockoption + "', QtyFillSetting='" + QtyFillSetting + "',Posattendercheck='" + Posattendercheck + "',posPrintsetting='" + posPrintsetting + "',OrderBookcheck='" + OrderBookcheck + "',dipatchDirectly='" + dipatchDirectly + "',RoundoffSetting='" + RoundoffSetting + "',possalessetting='" + possalessetting + "',Currency='" + Currency + "',TaxSetting='" + TaxSetting + "',Ratesetting='" + ratesetting + "',Qtysetting='" + qtysetting + "',BigVersion='" + BigVersion + "',BillCode = '" + BillCode + "' ,BillGenerateSetting='" + BillGenerateSetting + "',Billtaxsplitupshown='" + Billtaxsplitupshown + "',BillPrintLogo='" + BillPrintLogo + "',onlinepos='" + onlinepos + "', Fssaino='" + Fssaino + "',OnlineCakeSync='" + OnlineCakeSync + "',Printtype='" + Printtype + "',Mtype='" + Mtype + "', BranchOwnType='" + BranchOwnType + "',FranchiseeName='" + FranchiseeName + "',OnlineSalesActive='" + OnlineSalesActive + "', Pemail='" + Pemail + "', Iemail='" + Iemail + "', Oemail='" + Oemail + "',BranchName='" + BranchName + "',ContactName='" + ContactName + "',Country='" + Country + "',State='" + State + "',City='" + City + "',Address='" + Address + "',MobileNo='" + MobileNo + "',LandLine='" + LandLine + "',Email='" + Email + "',BranchArea='" + BranchArea + "',GSTIN='" + GSTIN + "',Pincode='" + Pincode + "',PrintOption='" + PrintOption + "',StockOption='" + StockOption + "',Imagepath='" + Imagepath + "' ,Username='" + Username + "' ,Password='" + Password + "'   where Branchid='" + BranchId + "'";
            iSucess = dbObj.InlineExecuteNonQuery(sQry1);

            string sQry2 = "update tbllogin set  Imagepath='" + Imagepath + "' ,username = '" + Username + "',password = '" + Password + "',BranchCode = '" + BranchCode + "',StoreName = '" + BranchName + "',Address = '" + Address + "',TIN = '" + GSTIN + "',Place = '" + BranchArea + "',StoreNo = '" + MobileNo + "',TableCode = '" + BranchCode + "'  where BranchCode='" + BranchCode + "'";
            iSucess1 = dbObj.InlineExecuteNonQuery(sQry2);

            string sQry3 = "update tblbookcode set Bookcode = '" + BranchCode + "-' where BranchCode='" + BranchCode + "' ";
            iSucess2 = dbObj.InlineExecuteNonQuery(sQry3);



            return iSucess;

        }

        public int Insertbranch(string BranchName, string ContactName, string Country, string State, string City, string Address, string MobileNo, string LandLine,
           string Email, string Currency, string BranchCode, string BranchArea, string GSTIN, string loginid, string Pincode, string Pemail, string Iemail, string Oemail,
           string BranchOwnType, string FranchiseeName, string OnlineSalesActive, string Mtype, string Printtype, string OnlineCakeSync, string Fssaino,
           string onlinepos, string PrintOption, string StockOption, string Imagepath, string BranchType, string Username, string Password, string BillCode, string BillGenerateSetting, string Billtaxsplitupshown, string BillPrintLogo, string Bversion,
           string TaxSetting, string ratesetting, string qtysetting, string possalessetting, string RoundoffSetting,
           string QtyFillSetting, string Posattendercheck, string posPrintsetting, string OrderBookcheck, string prodstockoption, string itemmergeornot, string defaultcur)
        {
            int iSucess = 0;
            int iSucess1 = 0;
            int iSucess2 = 0;



            string sQry1 = "insert into tblbranch ( onlinepos,Fssaino,OnlineCakeSync,Printtype,Mtype,BranchOwnType,FranchiseeName,OnlineSalesActive,Pemail,Iemail, " +
                " Oemail,BranchName,ContactName,Country,State,City,Address,MobileNo,LandLine,Email,BranchArea,GSTIN,Pincode,PrintOption,StockOption,Imagepath, " +
                " BranchCode,BranchType,Username,Password,BillCode,BillGenerateSetting,Billtaxsplitupshown,BillPrintLogo,BigVersion,TaxSetting,Ratesetting, " +
                " Qtysetting,Currency,possalessetting,RoundoffSetting,QtyFillSetting,Posattendercheck,posPrintsetting,OrderBookcheck,ProdStockOption,itemmergeornot,defaultcurrency) values('" + onlinepos + "','" + Fssaino + "','" + OnlineCakeSync + "','" + Printtype + "','" + Mtype + "', '" + BranchOwnType + "','" + FranchiseeName + "','" + OnlineSalesActive + "', " +
                " '" + Pemail + "', '" + Iemail + "', '" + Oemail + "','" + BranchName + "','" + ContactName + "','" + Country + "','" + State + "', " +
                " '" + City + "','" + Address + "','" + MobileNo + "','" + LandLine + "','" + Email + "','" + BranchArea + "','" + GSTIN + "','" + Pincode + "', " +
                " '" + PrintOption + "','" + StockOption + "','" + Imagepath + "','" + BranchCode + "','" + BranchType + "','" + Username + "','" + Password + "', " +
                " '" + BillCode + "','" + BillGenerateSetting + "','" + Billtaxsplitupshown + "','" + BillPrintLogo + "','" + Bversion + "','" + TaxSetting + "' " +
                " ,'" + ratesetting + "','" + qtysetting + "','" + Currency + "','" + possalessetting + "','" + RoundoffSetting + "' " +
                " ,'" + QtyFillSetting + "','" + Posattendercheck + "','" + posPrintsetting + "','" + OrderBookcheck + "','" + prodstockoption + "','" + itemmergeornot + "','" + defaultcur + "')";
            iSucess = dbObj.InlineExecuteNonQuery(sQry1);

            string sQry2 = "insert into tblbookcode (BranchCode,Bookcode) values('" + BranchCode + "','" + BranchCode + "-')";
            iSucess1 = dbObj.InlineExecuteNonQuery(sQry2);

            string sQry3 = "insert into tbllogin(username,password,Sales,IsSuperAdmin,BranchCode,StoreName,Address,TIN,Place,StoreNo,TableCode,Status,Rate,UserVal,IsmasterLock, " +
                " LOnlSale,MOnlSale,state,Statecode,Imagepath,BillCode)values " +
                " ('" + Username + "','" + Password + "','tblSales_" + BranchCode + "','0','" + BranchCode + "','" + BranchName + "','" + Address + "','" + GSTIN + "','" + BranchArea + "','" + MobileNo + "', " +
                " '" + BranchCode + "','Web','Rate',1,'N','N','N','TN','33','" + Imagepath + "','" + BillCode + "')";
            iSucess2 = dbObj.InlineExecuteNonQuery(sQry3);

            return iSucess;
        }

        public DataSet PrintingSalesNew_twoinchprint(int ID, string sTable, string Mode, string salestypeid)
        {
            DataSet ds = new DataSet();
            DataSet dmerge = new DataSet();

            string sqry = "";

            {
                //sqry = "select d.printitem as printitem,b.cattype,cast(0 as int) as ComboId,d.printitem+' / '+d.hsncode as printite,a.isnormal,a.SalesOrder,f.paymenttype,d.gst/2 as cg, d.gst/2 as sg,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate, " +
                //    " a.NetAmount,a.Advance,a.Total,a.Discount,b.UnitPrice,c.category,d.Definition,SUM(b.Amount) as Amount,SUM(b.Quantity) as Quantity, " +
                //    " a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,a.NetAmount,d.mrp,(d.mrp * sum(b.quantity)) as amo,cast(d.gst as nvarchar)+' % '  as gst from tblsales_" + sTable + "  a,tblTransSales_" + sTable + " b, " +
                //    " tblcategory c,tblCategoryUser d,tblCustomer e,tblsalestype f where a.salesid=b.salesuniqueid and  f.salestypeid=a.salestype and  a.BillNo=b.SalesID " +
                //    " and c.categoryid=d.CategoryID and a.isnormal=b.isnormal and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and " +
                //    " a.CustomerID=e.CustomerID and a.BillNo=" + ID + " and (a.salestype='" + salestypeid + "') and b.cattype='N'  " +
                //    " group by b.cattype,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,b.UnitPrice,c.category,d.Definition,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,d.gst,a.NetAmount,a.Discount,f.paymenttype,a.isnormal,a.SalesOrder,d.printitem,d.hsncode,d.mrp ";

                if (salestypeid == " 3" || salestypeid == " 4" || salestypeid == "3" || salestypeid == "4")
                {
                    sqry = "select d.printitem as Itemname,SUM(b.Quantity) as Qty " +
                      //" a.NetAmount,a.Advance,a.Total,a.Discount,b.UnitPrice,c.category,d.Definition,SUM(b.Amount) as Amount, " +
                      "  from tblsales_" + sTable + "  a,tblTransSales_" + sTable + " b, " +
                      " tblcategory c,tblCategoryUser d,tblCustomer e,tblsalestype f where a.salesid=b.salesuniqueid and  f.salestypeid=a.salestype and  a.BillNo=b.SalesID " +
                      " and c.categoryid=d.CategoryID and a.isnormal=b.isnormal and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and " +
                      " a.CustomerID=e.CustomerID and a.BillNo=" + ID + " and (a.salestype='" + salestypeid + "') and b.cattype='N'  " +
                      " group by b.cattype,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,b.UnitPrice,c.category,d.Definition,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,d.gst,a.NetAmount,a.Discount,f.paymenttype,a.isnormal,a.SalesOrder,d.printitem,d.hsncode,d.mrp ";

                    ds = dbObj.InlineExecuteDataSet(sqry);
                }
                else
                {

                    sqry = "select d.printitem as Itemname,SUM(b.Quantity) as Qty,d.mrp as Rate,(d.mrp * sum(b.quantity)) as Amount " +
                       //" a.NetAmount,a.Advance,a.Total,a.Discount,b.UnitPrice,c.category,d.Definition,SUM(b.Amount) as Amount, " +
                       "  from tblsales_" + sTable + "  a,tblTransSales_" + sTable + " b, " +
                       " tblcategory c,tblCategoryUser d,tblCustomer e,tblsalestype f where a.salesid=b.salesuniqueid and  f.salestypeid=a.salestype and  a.BillNo=b.SalesID " +
                       " and c.categoryid=d.CategoryID and a.isnormal=b.isnormal and b.CategoryID=c.categoryid and b.SubCategoryID=d.CategoryUserID and " +
                       " a.CustomerID=e.CustomerID and a.BillNo=" + ID + " and (a.salestype='" + salestypeid + "') and b.cattype='N'  " +
                       " group by b.cattype,e.CustomerName,e.MobileNo,a.BillNo,a.BillDate,a.NetAmount,a.Advance,a.Total,b.UnitPrice,c.category,d.Definition,a.CashPaid,a.Balance,a.ipaymode,a.Tax,a.Biller,a.Attender,a.SGST,a.CGST,d.gst,a.NetAmount,a.Discount,f.paymenttype,a.isnormal,a.SalesOrder,d.printitem,d.hsncode,d.mrp ";

                    ds = dbObj.InlineExecuteDataSet(sqry);
                }

                dmerge.Merge(ds);
            }

            //ds = dbObj.InlineExecuteDataSet(sqry);
            return dmerge;
        }



        public DataSet itemforreqestNew_DirectTransfer(string categoryid, string stable, string catid, string prodstockoption)
        {
            DataSet ds = new DataSet();
            if (prodstockoption == "1")
            {
                if (categoryid == "All")
                {
                    // string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,c.Prod_Qty as Qty,b.mrp  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit inner join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.poduction='1' and c.Prod_Qty >0 and a.categoryid in " + catid + "   order by category asc";

                    string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,c.Prod_Qty as Qty,b.mrp,b.serial,b.qtytype  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit inner join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.poduction='1' and c.Prod_Qty >0  order by category asc";
                    ds = dbObj.InlineExecuteDataSet(sqry);
                }
                else
                {
                    string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,c.Prod_Qty as Qty,b.mrp,b.serial,b.qtytype from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit inner join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.categoryid=" + categoryid + " and c.Prod_Qty >0  order by category asc";
                    ds = dbObj.InlineExecuteDataSet(sqry);
                }
            }
            else if (prodstockoption == "2")
            {
                if (categoryid == "All")
                {
                    // string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,c.Prod_Qty as Qty,b.mrp  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit inner join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.poduction='1' and c.Prod_Qty >0 and a.categoryid in " + catid + "   order by category asc";

                    string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,isnull(c.Prod_Qty,0) as Qty,b.mrp,b.serial,b.qtytype  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit left join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.poduction='1'  order by category asc";
                    ds = dbObj.InlineExecuteDataSet(sqry);
                }
                else
                {
                    string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,isnull(c.Prod_Qty,0) as Qty,b.mrp,b.serial,b.qtytype from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit left join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.categoryid=" + categoryid + "  order by category asc";
                    ds = dbObj.InlineExecuteDataSet(sqry);
                }
            }
            return ds;
        }

        //public DataSet itemforreqestNew_DirectTransfer_Barcodesearch(string categoryid, string stable, string searchbarcode)
        //{
        //    DataSet ds = new DataSet();
        //    string sqry = "select distinct a.categoryid,a.category,b.categoryuserid,b.definition,UOM,u.UOMID,b.GST,b.Rate,c.Prod_Qty as Qty,b.mrp  from tblcategory a inner join tblcategoryuser b on a.categoryid=b.categoryid inner join tblUOM u on u.UOMID=b.unit inner join tblProductionQty_" + stable + " as c on c.DescriptionId=b.categoryuserid  where  a.IsActive='Yes' and  b.IsActive='Yes' and a.poduction='1' and c.Prod_Qty >0 and  b.barcode ='" + searchbarcode + "' order by category asc";
        //    ds = dbObj.InlineExecuteDataSet(sqry);

        //    return ds;
        //}


        #endregion

        public DataSet getOrderBillCount_firsttobill_code_attender(string sTableName, DateTime From, DateTime To, string attednerid, string gstbill)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;

            sQry = "select  COUNT(orderNo) as BillCount from tblorder_" + sTableName + " as a inner join tblAttender as b on a.Attenderid=b.attenderid " +
                " where   cast(orderDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(orderDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and a.attenderid='" + attednerid + "'  having COUNT(orderNo)>0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public DataSet Emp_WiseOrderSummary(string sBranch, DateTime sFmdate, DateTime sToDate, string emptype)
        {
            string store = "";
            string sqry = string.Empty;
            DataSet ds = new DataSet();

            {
                //sqry = " Select a.Attender,b.AttenderName,sum(c.quantity * c.unitprice) as tot,sum(c.disc) as dic,sum(quantity) as qty from tblsales_" + sBranch + " as a  inner join tbltranssales_" + sBranch + " as c on c.salesid=a.billno  " +
                //       " inner join tblAttender as b on a.Attender=b.attenderid where a.salesid=c.salesuniqueid and OrderNo=0    and  convert(date,a.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                //  " and convert(date,a.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and a.cancelstatus='No'  and a.gstbill ='" + gstbill + "'  group by a.Attender,b.attendername,b.attenderid Order by b.attendername asc";

                sqry = "Select a.attenderid as Attender,b.AttenderName,sum(cast(c.qty as decimal) * cast(c.RTE as decimal)) as tot,sum(c.disc) as dic,sum(cast(qty as decimal)) as qty  " +
 " from tblOrder_" + sBranch + " as a  inner join tblTransOrder_" + sBranch + " as c on c.billno=a.billno   inner join tblAttender as b  on a.Attenderid=b.attenderid where  " +
   " convert(date,a.OrderDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd hh:mm") + "'  and convert(date,a.OrderDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and a.iscancel='0' " +
     " group by a.attenderid,b.attendername,b.attenderid Order by b.attendername asc";

            }
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet Emp_WiseSummary(string sBranch, DateTime sFmdate, DateTime sToDate, string emptype, string gstbill)
        {
            string store = "";
            string sqry = string.Empty;
            DataSet ds = new DataSet();

            {
                sqry = " Select a.Attender,b.AttenderName,sum(c.quantity * c.unitprice) as tot,sum(c.disc) as dic,sum(quantity) as qty from tblsales_" + sBranch + " as a  inner join tbltranssales_" + sBranch + " as c on c.salesid=a.billno  " +
                       " inner join tblAttender as b on a.Attender=b.attenderid where a.salesid=c.salesuniqueid and OrderNo=0    and  convert(date,a.BillDate) >='" + Convert.ToDateTime(sFmdate).ToString("yyyy-MM-dd 00:00") + "' " +
                  " and convert(date,a.BillDate) <='" + Convert.ToDateTime(sToDate).ToString("yyyy-MM-dd hh:mm") + "' and a.cancelstatus='No'  and a.gstbill ='" + gstbill + "'  group by a.Attender,b.attendername,b.attenderid Order by b.attendername asc";
            }
            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }

        public DataSet getratetype(string sid)
        {
            DataSet save = new DataSet();
            string sQry = "select * from  tbltransRatetype as ts inner join tblRatesetting as s on s.RateSettingid=ts.RateValue   where salestypeid='" + sid + "'  ";
            save = dbObj.InlineExecuteDataSet(sQry);
            return save;

        }


        public DataSet getSalesBillCount_firsttobill_code(string sTableName, DateTime From, DateTime To, string code, string gstbill)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;

            sQry = "select  COUNT(BillNo) as BillCount from tblsales_" + sTableName + " as a inner join tblworkers as b on a.billerid=b.empid " +
                " where    a.gstbill ='" + gstbill + "' and cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and a.biller='" + code + "'  having COUNT(BillNo)>0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }

        public int insert_TransRateType(string value)
        {
            int i = 0;

            string maxid = "Select MAX(Salestypeid) as id from tblsalestype ";
            DataSet ds = dbObj.InlineExecuteDataSet(maxid);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string id = ds.Tables[0].Rows[0]["id"].ToString();

                string sqry = "insert into tbltransRatetype (Salestypeid,RateValue) values('" + id + "','" + value + "')";
                i = dbObj.InlineExecuteNonQuery(sqry);
            }
            return i;
        }

        public DataSet EditratesmodeType(int id)
        {
            DataSet ds = new DataSet();
            string sqry = "select * from tbltransRatetype  where  SalesTypeID=" + id + "";
            ds = dbObj.InlineExecuteDataSet(sqry);
            return ds;
        }

        public int insert_TransRateTypeUpdate(string value, string id)
        {
            int i = 0;
            string sqry = "insert into tbltransRatetype (Salestypeid,RateValue) values('" + id + "','" + value + "')";
            i = dbObj.InlineExecuteNonQuery(sqry);

            return i;
        }

        public DataSet getSalesBillCount_firsttobill_code_attender(string sTableName, DateTime From, DateTime To, string attednerid, string gstbill)
        {
            DataSet ds = new DataSet();
            string sQry = string.Empty;

            sQry = "select  COUNT(BillNo) as BillCount from tblsales_" + sTableName + " as a inner join tblAttender as b on a.Attender=b.attenderid " +
                " where  a.gstbill ='" + gstbill + "' and cast(BillDate as date)>='" + Convert.ToDateTime(From).ToString("yyyy/MM/dd") + "' and cast(BillDate as date)<='" + Convert.ToDateTime(To).ToString("yyyy/MM/dd") + "' and a.attender='" + attednerid + "'  having COUNT(BillNo)>0 ";
            ds = dbObj.InlineExecuteDataSet(sQry);
            return ds;
        }
    

    #region Expesnse Report


    public DataSet getreportforExpenseDetails(string sTablename, string Type, string LedgerId, DateTime From, DateTime to)
    {

        DataSet ds = new DataSet();
        string sqry = string.Empty;
        if (LedgerId == "All")
        {
            sqry = "select l.LedgerName,p.Date,p.Description,p.Amount as Amount from tblpaymententry_" + sTablename+" p inner join tblledger l on l.LedgerId=p.LedgerId  where  " +
                   " cast(p.Date as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(p.Date as Date)<='" + to.ToString("yyyy/MM/dd") + "' order by p.LedgerId   ";

        }
        else
        {
           sqry= "select l.LedgerName,p.Date,p.Description,p.Amount as Amount from tblpaymententry_" + sTablename+" p inner join tblledger l on l.LedgerId=p.LedgerId  where  " +
                  " cast(p.Date as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(p.Date as Date)<='" + to.ToString("yyyy/MM/dd") + "'  and p.LedgerId='"+LedgerId +"' order by p.LedgerId ";

        }



        ds = dbObj.InlineExecuteDataSet(sqry);

        return ds;
    }



        public DataSet getreportforExpenseSummary(string sTablename, string Type, string LedgerId, DateTime From, DateTime to)
        {

            DataSet ds = new DataSet();
            string sqry = string.Empty;
            if (LedgerId == "All")
            {
                sqry = "select L.LedgerName,sum(p.Amount) as TotalAmount from tblpaymententry_" + sTablename + " p inner join tblledger l on l.LedgerId=p.LedgerId  where  " +
                       " cast(p.Date as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(p.Date as Date)<='" + to.ToString("yyyy/MM/dd") + "' group by l.LedgerName order by l.LedgerName";

            }
            else
            {
                sqry = "select L.LedgerName,sum(p.Amount) as TotalAmount from tblpaymententry_" + sTablename + " p inner join tblledger l on l.LedgerId=p.LedgerId  where  " +
                       " cast(p.Date as Date)>='" + From.ToString("yyyy/MM/dd") + "' and cast(p.Date as Date)<='" + to.ToString("yyyy/MM/dd") + "' and p.LedgerId='" + LedgerId + "' group by l.LedgerName order by l.LedgerName ";

            }



            ds = dbObj.InlineExecuteDataSet(sqry);

            return ds;
        }
        #endregion
    }

}